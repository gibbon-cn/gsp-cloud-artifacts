webpackJsonp(["farris"],{

/***/ "./node_modules/@angular/cdk/esm5/bidi.es5.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Directionality", function() { return Directionality; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DIR_DOCUMENT", function() { return DIR_DOCUMENT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Dir", function() { return Dir; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BidiModule", function() { return BidiModule; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_common__ = __webpack_require__("./node_modules/@angular/common/esm5/common.js");
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */



/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * Injection token used to inject the document into Directionality.
 * This is used so that the value can be faked in tests.
 *
 * We can't use the real document in tests because changing the real `dir` causes geometry-based
 * tests in Safari to fail.
 *
 * We also can't re-provide the DOCUMENT token from platform-brower because the unit tests
 * themselves use things like `querySelector` in test code.
 */
var DIR_DOCUMENT = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["InjectionToken"]('cdk-dir-doc');
/**
 * The directionality (LTR / RTL) context for the application (or a subtree of it).
 * Exposes the current direction and a stream of direction changes.
 */
var Directionality = /** @class */ (function () {
    function Directionality(_document) {
        /**
         * The current 'ltr' or 'rtl' value.
         */
        this.value = 'ltr';
        /**
         * Stream that emits whenever the 'ltr' / 'rtl' state changes.
         */
        this.change = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        if (_document) {
            // TODO: handle 'auto' value -
            // We still need to account for dir="auto".
            // It looks like HTMLElemenet.dir is also "auto" when that's set to the attribute,
            // but getComputedStyle return either "ltr" or "rtl". avoiding getComputedStyle for now
            var /** @type {?} */ bodyDir = _document.body ? _document.body.dir : null;
            var /** @type {?} */ htmlDir = _document.documentElement ? _document.documentElement.dir : null;
            this.value = /** @type {?} */ ((bodyDir || htmlDir || 'ltr'));
        }
    }
    Directionality.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"] },
    ];
    /** @nocollapse */
    Directionality.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"], args: [DIR_DOCUMENT,] },] },
    ]; };
    return Directionality;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * Directive to listen for changes of direction of part of the DOM.
 *
 * Provides itself as Directionality such that descendant directives only need to ever inject
 * Directionality to get the closest direction.
 */
var Dir = /** @class */ (function () {
    function Dir() {
        this._dir = 'ltr';
        /**
         * Whether the `value` has been set to its initial value.
         */
        this._isInitialized = false;
        /**
         * Event emitted when the direction changes.
         */
        this.change = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
    }
    Object.defineProperty(Dir.prototype, "dir", {
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () { return this._dir; },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            var /** @type {?} */ old = this._dir;
            this._dir = v;
            if (old !== this._dir && this._isInitialized) {
                this.change.emit(this._dir);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Dir.prototype, "value", {
        /** Current layout direction of the element. */
        get: /**
         * Current layout direction of the element.
         * @return {?}
         */
        function () { return this.dir; },
        enumerable: true,
        configurable: true
    });
    /** Initialize once default value has been set. */
    /**
     * Initialize once default value has been set.
     * @return {?}
     */
    Dir.prototype.ngAfterContentInit = /**
     * Initialize once default value has been set.
     * @return {?}
     */
    function () {
        this._isInitialized = true;
    };
    /**
     * @return {?}
     */
    Dir.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.change.complete();
    };
    Dir.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"], args: [{
                    selector: '[dir]',
                    providers: [{ provide: Directionality, useExisting: Dir }],
                    host: { '[dir]': 'dir' },
                    exportAs: 'dir',
                },] },
    ];
    /** @nocollapse */
    Dir.ctorParameters = function () { return []; };
    Dir.propDecorators = {
        "change": [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"], args: ['dirChange',] },],
        "dir": [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"] },],
    };
    return Dir;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var BidiModule = /** @class */ (function () {
    function BidiModule() {
    }
    BidiModule.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgModule"], args: [{
                    exports: [Dir],
                    declarations: [Dir],
                    providers: [
                        { provide: DIR_DOCUMENT, useExisting: __WEBPACK_IMPORTED_MODULE_1__angular_common__["DOCUMENT"] },
                        Directionality,
                    ]
                },] },
    ];
    /** @nocollapse */
    BidiModule.ctorParameters = function () { return []; };
    return BidiModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=bidi.es5.js.map


/***/ }),

/***/ "./node_modules/@angular/cdk/esm5/coercion.es5.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "coerceBooleanProperty", function() { return coerceBooleanProperty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "coerceNumberProperty", function() { return coerceNumberProperty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_isNumberValue", function() { return _isNumberValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "coerceArray", function() { return coerceArray; });
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * Coerces a data-bound value (typically a string) to a boolean.
 * @param {?} value
 * @return {?}
 */
function coerceBooleanProperty(value) {
    return value != null && "" + value !== 'false';
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @param {?} value
 * @param {?=} fallbackValue
 * @return {?}
 */
function coerceNumberProperty(value, fallbackValue) {
    if (fallbackValue === void 0) { fallbackValue = 0; }
    return _isNumberValue(value) ? Number(value) : fallbackValue;
}
/**
 * Whether the provided value is considered a number.
 * \@docs-private
 * @param {?} value
 * @return {?}
 */
function _isNumberValue(value) {
    // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,
    // and other non-number values as NaN, where Number just uses 0) but it considers the string
    // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.
    return !isNaN(parseFloat(/** @type {?} */ (value))) && !isNaN(Number(value));
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * Wraps the provided value in an array, unless the provided value is an array.
 * @template T
 * @param {?} value
 * @return {?}
 */
function coerceArray(value) {
    return Array.isArray(value) ? value : [value];
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=coercion.es5.js.map


/***/ }),

/***/ "./node_modules/@angular/cdk/esm5/keycodes.es5.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UP_ARROW", function() { return UP_ARROW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DOWN_ARROW", function() { return DOWN_ARROW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RIGHT_ARROW", function() { return RIGHT_ARROW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LEFT_ARROW", function() { return LEFT_ARROW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PAGE_UP", function() { return PAGE_UP; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PAGE_DOWN", function() { return PAGE_DOWN; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HOME", function() { return HOME; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "END", function() { return END; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ENTER", function() { return ENTER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SPACE", function() { return SPACE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TAB", function() { return TAB; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ESCAPE", function() { return ESCAPE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BACKSPACE", function() { return BACKSPACE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DELETE", function() { return DELETE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "A", function() { return A; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Z", function() { return Z; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ZERO", function() { return ZERO; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NINE", function() { return NINE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "COMMA", function() { return COMMA; });
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var UP_ARROW = 38;
var DOWN_ARROW = 40;
var RIGHT_ARROW = 39;
var LEFT_ARROW = 37;
var PAGE_UP = 33;
var PAGE_DOWN = 34;
var HOME = 36;
var END = 35;
var ENTER = 13;
var SPACE = 32;
var TAB = 9;
var ESCAPE = 27;
var BACKSPACE = 8;
var DELETE = 46;
var A = 65;
var Z = 90;
var ZERO = 48;
var NINE = 57;
var COMMA = 188;

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=keycodes.es5.js.map


/***/ }),

/***/ "./node_modules/@angular/cdk/esm5/overlay.es5.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Overlay", function() { return Overlay; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OverlayContainer", function() { return OverlayContainer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkOverlayOrigin", function() { return CdkOverlayOrigin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkConnectedOverlay", function() { return CdkConnectedOverlay; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FullscreenOverlayContainer", function() { return FullscreenOverlayContainer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OverlayRef", function() { return OverlayRef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OverlayKeyboardDispatcher", function() { return OverlayKeyboardDispatcher; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OverlayPositionBuilder", function() { return OverlayPositionBuilder; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GlobalPositionStrategy", function() { return GlobalPositionStrategy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConnectedPositionStrategy", function() { return ConnectedPositionStrategy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConnectedOverlayDirective", function() { return CdkConnectedOverlay; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OverlayOrigin", function() { return CdkOverlayOrigin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OverlayConfig", function() { return OverlayConfig; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConnectionPositionPair", function() { return ConnectionPositionPair; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ScrollingVisibility", function() { return ScrollingVisibility; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConnectedOverlayPositionChange", function() { return ConnectedOverlayPositionChange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ScrollStrategyOptions", function() { return ScrollStrategyOptions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RepositionScrollStrategy", function() { return RepositionScrollStrategy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CloseScrollStrategy", function() { return CloseScrollStrategy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NoopScrollStrategy", function() { return NoopScrollStrategy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlockScrollStrategy", function() { return BlockScrollStrategy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OVERLAY_PROVIDERS", function() { return OVERLAY_PROVIDERS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OverlayModule", function() { return OverlayModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵg", function() { return OVERLAY_KEYBOARD_DISPATCHER_PROVIDER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵf", function() { return OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵb", function() { return OVERLAY_CONTAINER_PROVIDER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵa", function() { return OVERLAY_CONTAINER_PROVIDER_FACTORY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵc", function() { return CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵe", function() { return CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵd", function() { return CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_cdk_scrolling__ = __webpack_require__("./node_modules/@angular/cdk/esm5/scrolling.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__angular_common__ = __webpack_require__("./node_modules/@angular/common/esm5/common.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__angular_cdk_bidi__ = __webpack_require__("./node_modules/@angular/cdk/esm5/bidi.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__angular_cdk_portal__ = __webpack_require__("./node_modules/@angular/cdk/esm5/portal.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_tslib__ = __webpack_require__("./node_modules/tslib/tslib.es6.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_rxjs_operators_take__ = __webpack_require__("./node_modules/rxjs/operators/take.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_rxjs_operators_take___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_rxjs_operators_take__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_rxjs_Subject__ = __webpack_require__("./node_modules/rxjs/Subject.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_rxjs_Subject___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_rxjs_Subject__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_rxjs_Subscription__ = __webpack_require__("./node_modules/rxjs/Subscription.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_rxjs_Subscription___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8_rxjs_Subscription__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_rxjs_operators_filter__ = __webpack_require__("./node_modules/rxjs/operators/filter.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_rxjs_operators_filter___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_9_rxjs_operators_filter__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_rxjs_observable_fromEvent__ = __webpack_require__("./node_modules/rxjs/observable/fromEvent.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_rxjs_observable_fromEvent___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_10_rxjs_observable_fromEvent__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__angular_cdk_coercion__ = __webpack_require__("./node_modules/@angular/cdk/esm5/coercion.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__angular_cdk_keycodes__ = __webpack_require__("./node_modules/@angular/cdk/esm5/keycodes.es5.js");
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "ViewportRuler", function() { return __WEBPACK_IMPORTED_MODULE_1__angular_cdk_scrolling__["ViewportRuler"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "VIEWPORT_RULER_PROVIDER", function() { return __WEBPACK_IMPORTED_MODULE_1__angular_cdk_scrolling__["VIEWPORT_RULER_PROVIDER"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "CdkScrollable", function() { return __WEBPACK_IMPORTED_MODULE_1__angular_cdk_scrolling__["CdkScrollable"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "ScrollDispatcher", function() { return __WEBPACK_IMPORTED_MODULE_1__angular_cdk_scrolling__["ScrollDispatcher"]; });
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */















/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * Scroll strategy that doesn't do anything.
 */
var NoopScrollStrategy = /** @class */ (function () {
    function NoopScrollStrategy() {
    }
    /** Does nothing, as this scroll strategy is a no-op. */
    /**
     * Does nothing, as this scroll strategy is a no-op.
     * @return {?}
     */
    NoopScrollStrategy.prototype.enable = /**
     * Does nothing, as this scroll strategy is a no-op.
     * @return {?}
     */
    function () { };
    /** Does nothing, as this scroll strategy is a no-op. */
    /**
     * Does nothing, as this scroll strategy is a no-op.
     * @return {?}
     */
    NoopScrollStrategy.prototype.disable = /**
     * Does nothing, as this scroll strategy is a no-op.
     * @return {?}
     */
    function () { };
    /** Does nothing, as this scroll strategy is a no-op. */
    /**
     * Does nothing, as this scroll strategy is a no-op.
     * @return {?}
     */
    NoopScrollStrategy.prototype.attach = /**
     * Does nothing, as this scroll strategy is a no-op.
     * @return {?}
     */
    function () { };
    return NoopScrollStrategy;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * Initial configuration used when creating an overlay.
 */
var OverlayConfig = /** @class */ (function () {
    function OverlayConfig(config) {
        var _this = this;
        /**
         * Strategy to be used when handling scroll events while the overlay is open.
         */
        this.scrollStrategy = new NoopScrollStrategy();
        /**
         * Custom class to add to the overlay pane.
         */
        this.panelClass = '';
        /**
         * Whether the overlay has a backdrop.
         */
        this.hasBackdrop = false;
        /**
         * Custom class to add to the backdrop
         */
        this.backdropClass = 'cdk-overlay-dark-backdrop';
        /**
         * The direction of the text in the overlay panel.
         */
        this.direction = 'ltr';
        if (config) {
            Object.keys(config)
                .filter(function (key) { return typeof config[key] !== 'undefined'; })
                .forEach(function (key) { return _this[key] = config[key]; });
        }
    }
    return OverlayConfig;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * A connection point on the origin element.
 * @record
 */

/**
 * A connection point on the overlay element.
 * @record
 */

/**
 * The points of the origin element and the overlay element to connect.
 */
var ConnectionPositionPair = /** @class */ (function () {
    function ConnectionPositionPair(origin, overlay, offsetX, offsetY) {
        this.offsetX = offsetX;
        this.offsetY = offsetY;
        this.originX = origin.originX;
        this.originY = origin.originY;
        this.overlayX = overlay.overlayX;
        this.overlayY = overlay.overlayY;
    }
    return ConnectionPositionPair;
}());
/**
 * Set of properties regarding the position of the origin and overlay relative to the viewport
 * with respect to the containing Scrollable elements.
 *
 * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the
 * bounds of any one of the strategy's Scrollable's bounding client rectangle.
 *
 * The overlay and origin are outside view if there is no overlap between their bounding client
 * rectangle and any one of the strategy's Scrollable's bounding client rectangle.
 *
 *       -----------                    -----------
 *       | outside |                    | clipped |
 *       |  view   |              --------------------------
 *       |         |              |     |         |        |
 *       ----------               |     -----------        |
 *  --------------------------    |                        |
 *  |                        |    |      Scrollable        |
 *  |                        |    |                        |
 *  |                        |     --------------------------
 *  |      Scrollable        |
 *  |                        |
 *  --------------------------
 *
 *  \@docs-private
 */
var ScrollingVisibility = /** @class */ (function () {
    function ScrollingVisibility() {
    }
    return ScrollingVisibility;
}());
/**
 * The change event emitted by the strategy when a fallback position is used.
 */
var ConnectedOverlayPositionChange = /** @class */ (function () {
    function ConnectedOverlayPositionChange(connectionPair, /** @docs-private */
        scrollableViewProperties) {
        this.connectionPair = connectionPair;
        this.scrollableViewProperties = scrollableViewProperties;
    }
    /** @nocollapse */
    ConnectedOverlayPositionChange.ctorParameters = function () { return [
        { type: ConnectionPositionPair, },
        { type: ScrollingVisibility, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"] },] },
    ]; };
    return ConnectedOverlayPositionChange;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * Describes a strategy that will be used by an overlay to handle scroll events while it is open.
 * @record
 */

/**
 * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.
 * @return {?}
 */
function getMatScrollStrategyAlreadyAttachedError() {
    return Error("Scroll strategy has already been attached.");
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Config options for the CloseScrollStrategy.
 * @record
 */

/**
 * Strategy that will close the overlay as soon as the user starts scrolling.
 */
var CloseScrollStrategy = /** @class */ (function () {
    function CloseScrollStrategy(_scrollDispatcher, _ngZone, _viewportRuler, _config) {
        var _this = this;
        this._scrollDispatcher = _scrollDispatcher;
        this._ngZone = _ngZone;
        this._viewportRuler = _viewportRuler;
        this._config = _config;
        this._scrollSubscription = null;
        /**
         * Detaches the overlay ref and disables the scroll strategy.
         */
        this._detach = function () {
            _this.disable();
            if (_this._overlayRef.hasAttached()) {
                _this._ngZone.run(function () { return _this._overlayRef.detach(); });
            }
        };
    }
    /** Attaches this scroll strategy to an overlay. */
    /**
     * Attaches this scroll strategy to an overlay.
     * @param {?} overlayRef
     * @return {?}
     */
    CloseScrollStrategy.prototype.attach = /**
     * Attaches this scroll strategy to an overlay.
     * @param {?} overlayRef
     * @return {?}
     */
    function (overlayRef) {
        if (this._overlayRef) {
            throw getMatScrollStrategyAlreadyAttachedError();
        }
        this._overlayRef = overlayRef;
    };
    /** Enables the closing of the attached overlay on scroll. */
    /**
     * Enables the closing of the attached overlay on scroll.
     * @return {?}
     */
    CloseScrollStrategy.prototype.enable = /**
     * Enables the closing of the attached overlay on scroll.
     * @return {?}
     */
    function () {
        var _this = this;
        if (this._scrollSubscription) {
            return;
        }
        var /** @type {?} */ stream = this._scrollDispatcher.scrolled(0);
        if (this._config && this._config.threshold && this._config.threshold > 1) {
            this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;
            this._scrollSubscription = stream.subscribe(function () {
                var /** @type {?} */ scrollPosition = _this._viewportRuler.getViewportScrollPosition().top;
                if (Math.abs(scrollPosition - _this._initialScrollPosition) > /** @type {?} */ ((/** @type {?} */ ((_this._config)).threshold))) {
                    _this._detach();
                }
                else {
                    _this._overlayRef.updatePosition();
                }
            });
        }
        else {
            this._scrollSubscription = stream.subscribe(this._detach);
        }
    };
    /** Disables the closing the attached overlay on scroll. */
    /**
     * Disables the closing the attached overlay on scroll.
     * @return {?}
     */
    CloseScrollStrategy.prototype.disable = /**
     * Disables the closing the attached overlay on scroll.
     * @return {?}
     */
    function () {
        if (this._scrollSubscription) {
            this._scrollSubscription.unsubscribe();
            this._scrollSubscription = null;
        }
    };
    return CloseScrollStrategy;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * Strategy that will prevent the user from scrolling while the overlay is visible.
 */
var BlockScrollStrategy = /** @class */ (function () {
    function BlockScrollStrategy(_viewportRuler, document) {
        this._viewportRuler = _viewportRuler;
        this._previousHTMLStyles = { top: '', left: '' };
        this._isEnabled = false;
        this._document = document;
    }
    /** Attaches this scroll strategy to an overlay. */
    /**
     * Attaches this scroll strategy to an overlay.
     * @return {?}
     */
    BlockScrollStrategy.prototype.attach = /**
     * Attaches this scroll strategy to an overlay.
     * @return {?}
     */
    function () { };
    /** Blocks page-level scroll while the attached overlay is open. */
    /**
     * Blocks page-level scroll while the attached overlay is open.
     * @return {?}
     */
    BlockScrollStrategy.prototype.enable = /**
     * Blocks page-level scroll while the attached overlay is open.
     * @return {?}
     */
    function () {
        if (this._canBeEnabled()) {
            var /** @type {?} */ root = this._document.documentElement;
            this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();
            // Cache the previous inline styles in case the user had set them.
            this._previousHTMLStyles.left = root.style.left || '';
            this._previousHTMLStyles.top = root.style.top || '';
            // Note: we're using the `html` node, instead of the `body`, because the `body` may
            // have the user agent margin, whereas the `html` is guaranteed not to have one.
            root.style.left = -this._previousScrollPosition.left + "px";
            root.style.top = -this._previousScrollPosition.top + "px";
            root.classList.add('cdk-global-scrollblock');
            this._isEnabled = true;
        }
    };
    /** Unblocks page-level scroll while the attached overlay is open. */
    /**
     * Unblocks page-level scroll while the attached overlay is open.
     * @return {?}
     */
    BlockScrollStrategy.prototype.disable = /**
     * Unblocks page-level scroll while the attached overlay is open.
     * @return {?}
     */
    function () {
        if (this._isEnabled) {
            var /** @type {?} */ html = this._document.documentElement;
            var /** @type {?} */ body = this._document.body;
            var /** @type {?} */ previousHtmlScrollBehavior = html.style['scrollBehavior'] || '';
            var /** @type {?} */ previousBodyScrollBehavior = body.style['scrollBehavior'] || '';
            this._isEnabled = false;
            html.style.left = this._previousHTMLStyles.left;
            html.style.top = this._previousHTMLStyles.top;
            html.classList.remove('cdk-global-scrollblock');
            // Disable user-defined smooth scrolling temporarily while we restore the scroll position.
            // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior
            html.style['scrollBehavior'] = body.style['scrollBehavior'] = 'auto';
            window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);
            html.style['scrollBehavior'] = previousHtmlScrollBehavior;
            body.style['scrollBehavior'] = previousBodyScrollBehavior;
        }
    };
    /**
     * @return {?}
     */
    BlockScrollStrategy.prototype._canBeEnabled = /**
     * @return {?}
     */
    function () {
        // Since the scroll strategies can't be singletons, we have to use a global CSS class
        // (`cdk-global-scrollblock`) to make sure that we don't try to disable global
        // scrolling multiple times.
        var /** @type {?} */ html = this._document.documentElement;
        if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {
            return false;
        }
        var /** @type {?} */ body = this._document.body;
        var /** @type {?} */ viewport = this._viewportRuler.getViewportSize();
        return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;
    };
    return BlockScrollStrategy;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

// TODO(jelbourn): move this to live with the rest of the scrolling code
// TODO(jelbourn): someday replace this with IntersectionObservers
/**
 * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.
 * \@docs-private
 * @param {?} element Dimensions of the element (from getBoundingClientRect)
 * @param {?} scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)
 * @return {?} Whether the element is scrolled out of view
 */
function isElementScrolledOutsideView(element, scrollContainers) {
    return scrollContainers.some(function (containerBounds) {
        var /** @type {?} */ outsideAbove = element.bottom < containerBounds.top;
        var /** @type {?} */ outsideBelow = element.top > containerBounds.bottom;
        var /** @type {?} */ outsideLeft = element.right < containerBounds.left;
        var /** @type {?} */ outsideRight = element.left > containerBounds.right;
        return outsideAbove || outsideBelow || outsideLeft || outsideRight;
    });
}
/**
 * Gets whether an element is clipped by any of its scrolling containers.
 * \@docs-private
 * @param {?} element Dimensions of the element (from getBoundingClientRect)
 * @param {?} scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)
 * @return {?} Whether the element is clipped
 */
function isElementClippedByScrolling(element, scrollContainers) {
    return scrollContainers.some(function (scrollContainerRect) {
        var /** @type {?} */ clippedAbove = element.top < scrollContainerRect.top;
        var /** @type {?} */ clippedBelow = element.bottom > scrollContainerRect.bottom;
        var /** @type {?} */ clippedLeft = element.left < scrollContainerRect.left;
        var /** @type {?} */ clippedRight = element.right > scrollContainerRect.right;
        return clippedAbove || clippedBelow || clippedLeft || clippedRight;
    });
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * Config options for the RepositionScrollStrategy.
 * @record
 */

/**
 * Strategy that will update the element position as the user is scrolling.
 */
var RepositionScrollStrategy = /** @class */ (function () {
    function RepositionScrollStrategy(_scrollDispatcher, _viewportRuler, _ngZone, _config) {
        this._scrollDispatcher = _scrollDispatcher;
        this._viewportRuler = _viewportRuler;
        this._ngZone = _ngZone;
        this._config = _config;
        this._scrollSubscription = null;
    }
    /** Attaches this scroll strategy to an overlay. */
    /**
     * Attaches this scroll strategy to an overlay.
     * @param {?} overlayRef
     * @return {?}
     */
    RepositionScrollStrategy.prototype.attach = /**
     * Attaches this scroll strategy to an overlay.
     * @param {?} overlayRef
     * @return {?}
     */
    function (overlayRef) {
        if (this._overlayRef) {
            throw getMatScrollStrategyAlreadyAttachedError();
        }
        this._overlayRef = overlayRef;
    };
    /** Enables repositioning of the attached overlay on scroll. */
    /**
     * Enables repositioning of the attached overlay on scroll.
     * @return {?}
     */
    RepositionScrollStrategy.prototype.enable = /**
     * Enables repositioning of the attached overlay on scroll.
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this._scrollSubscription) {
            var /** @type {?} */ throttle = this._config ? this._config.scrollThrottle : 0;
            this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(function () {
                _this._overlayRef.updatePosition();
                // TODO(crisbeto): make `close` on by default once all components can handle it.
                if (_this._config && _this._config.autoClose) {
                    var /** @type {?} */ overlayRect = _this._overlayRef.overlayElement.getBoundingClientRect();
                    var _a = _this._viewportRuler.getViewportSize(), width = _a.width, height = _a.height;
                    // TODO(crisbeto): include all ancestor scroll containers here once
                    // we have a way of exposing the trigger element to the scroll strategy.
                    var /** @type {?} */ parentRects = [{ width: width, height: height, bottom: height, right: width, top: 0, left: 0 }];
                    if (isElementScrolledOutsideView(overlayRect, parentRects)) {
                        _this.disable();
                        _this._ngZone.run(function () { return _this._overlayRef.detach(); });
                    }
                }
            });
        }
    };
    /** Disables repositioning of the attached overlay on scroll. */
    /**
     * Disables repositioning of the attached overlay on scroll.
     * @return {?}
     */
    RepositionScrollStrategy.prototype.disable = /**
     * Disables repositioning of the attached overlay on scroll.
     * @return {?}
     */
    function () {
        if (this._scrollSubscription) {
            this._scrollSubscription.unsubscribe();
            this._scrollSubscription = null;
        }
    };
    return RepositionScrollStrategy;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Options for how an overlay will handle scrolling.
 *
 * Users can provide a custom value for `ScrollStrategyOptions` to replace the default
 * behaviors. This class primarily acts as a factory for ScrollStrategy instances.
 */
var ScrollStrategyOptions = /** @class */ (function () {
    function ScrollStrategyOptions(_scrollDispatcher, _viewportRuler, _ngZone, document) {
        var _this = this;
        this._scrollDispatcher = _scrollDispatcher;
        this._viewportRuler = _viewportRuler;
        this._ngZone = _ngZone;
        /**
         * Do nothing on scroll.
         */
        this.noop = function () { return new NoopScrollStrategy(); };
        /**
         * Close the overlay as soon as the user scrolls.
         * @param config Configuration to be used inside the scroll strategy.
         */
        this.close = function (config) {
            return new CloseScrollStrategy(_this._scrollDispatcher, _this._ngZone, _this._viewportRuler, config);
        };
        /**
         * Block scrolling.
         */
        this.block = function () { return new BlockScrollStrategy(_this._viewportRuler, _this._document); };
        /**
         * Update the overlay's position on scroll.
         * @param config Configuration to be used inside the scroll strategy.
         * Allows debouncing the reposition calls.
         */
        this.reposition = function (config) {
            return new RepositionScrollStrategy(_this._scrollDispatcher, _this._viewportRuler, _this._ngZone, config);
        };
        this._document = document;
    }
    ScrollStrategyOptions.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"] },
    ];
    /** @nocollapse */
    ScrollStrategyOptions.ctorParameters = function () { return [
        { type: __WEBPACK_IMPORTED_MODULE_1__angular_cdk_scrolling__["ScrollDispatcher"], },
        { type: __WEBPACK_IMPORTED_MODULE_1__angular_cdk_scrolling__["ViewportRuler"], },
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgZone"], },
        { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"], args: [__WEBPACK_IMPORTED_MODULE_2__angular_common__["DOCUMENT"],] },] },
    ]; };
    return ScrollStrategyOptions;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * Reference to an overlay that has been created with the Overlay service.
 * Used to manipulate or dispose of said overlay.
 */
var OverlayRef = /** @class */ (function () {
    function OverlayRef(_portalOutlet, _pane, _config, _ngZone, _keyboardDispatcher, _document) {
        this._portalOutlet = _portalOutlet;
        this._pane = _pane;
        this._config = _config;
        this._ngZone = _ngZone;
        this._keyboardDispatcher = _keyboardDispatcher;
        this._document = _document;
        this._backdropElement = null;
        this._backdropClick = new __WEBPACK_IMPORTED_MODULE_7_rxjs_Subject__["Subject"]();
        this._attachments = new __WEBPACK_IMPORTED_MODULE_7_rxjs_Subject__["Subject"]();
        this._detachments = new __WEBPACK_IMPORTED_MODULE_7_rxjs_Subject__["Subject"]();
        /**
         * Stream of keydown events dispatched to this overlay.
         */
        this._keydownEvents = new __WEBPACK_IMPORTED_MODULE_7_rxjs_Subject__["Subject"]();
        if (_config.scrollStrategy) {
            _config.scrollStrategy.attach(this);
        }
    }
    Object.defineProperty(OverlayRef.prototype, "overlayElement", {
        /** The overlay's HTML element */
        get: /**
         * The overlay's HTML element
         * @return {?}
         */
        function () {
            return this._pane;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OverlayRef.prototype, "backdropElement", {
        /** The overlay's backdrop HTML element. */
        get: /**
         * The overlay's backdrop HTML element.
         * @return {?}
         */
        function () {
            return this._backdropElement;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Attaches content, given via a Portal, to the overlay.
     * If the overlay is configured to have a backdrop, it will be created.
     *
     * @param portal Portal instance to which to attach the overlay.
     * @returns The portal attachment result.
     */
    /**
     * Attaches content, given via a Portal, to the overlay.
     * If the overlay is configured to have a backdrop, it will be created.
     *
     * @param {?} portal Portal instance to which to attach the overlay.
     * @return {?} The portal attachment result.
     */
    OverlayRef.prototype.attach = /**
     * Attaches content, given via a Portal, to the overlay.
     * If the overlay is configured to have a backdrop, it will be created.
     *
     * @param {?} portal Portal instance to which to attach the overlay.
     * @return {?} The portal attachment result.
     */
    function (portal) {
        var _this = this;
        var /** @type {?} */ attachResult = this._portalOutlet.attach(portal);
        if (this._config.positionStrategy) {
            this._config.positionStrategy.attach(this);
        }
        // Update the pane element with the given configuration.
        this._updateStackingOrder();
        this._updateElementSize();
        this._updateElementDirection();
        if (this._config.scrollStrategy) {
            this._config.scrollStrategy.enable();
        }
        // Update the position once the zone is stable so that the overlay will be fully rendered
        // before attempting to position it, as the position may depend on the size of the rendered
        // content.
        this._ngZone.onStable.asObservable().pipe(Object(__WEBPACK_IMPORTED_MODULE_6_rxjs_operators_take__["take"])(1)).subscribe(function () {
            // The overlay could've been detached before the zone has stabilized.
            if (_this.hasAttached()) {
                _this.updatePosition();
            }
        });
        // Enable pointer events for the overlay pane element.
        this._togglePointerEvents(true);
        if (this._config.hasBackdrop) {
            this._attachBackdrop();
        }
        if (this._config.panelClass) {
            // We can't do a spread here, because IE doesn't support setting multiple classes.
            if (Array.isArray(this._config.panelClass)) {
                this._config.panelClass.forEach(function (cls) { return _this._pane.classList.add(cls); });
            }
            else {
                this._pane.classList.add(this._config.panelClass);
            }
        }
        // Only emit the `attachments` event once all other setup is done.
        this._attachments.next();
        // Track this overlay by the keyboard dispatcher
        this._keyboardDispatcher.add(this);
        return attachResult;
    };
    /**
     * Detaches an overlay from a portal.
     * @returns The portal detachment result.
     */
    /**
     * Detaches an overlay from a portal.
     * @return {?} The portal detachment result.
     */
    OverlayRef.prototype.detach = /**
     * Detaches an overlay from a portal.
     * @return {?} The portal detachment result.
     */
    function () {
        if (!this.hasAttached()) {
            return;
        }
        this.detachBackdrop();
        // When the overlay is detached, the pane element should disable pointer events.
        // This is necessary because otherwise the pane element will cover the page and disable
        // pointer events therefore. Depends on the position strategy and the applied pane boundaries.
        this._togglePointerEvents(false);
        if (this._config.positionStrategy && this._config.positionStrategy.detach) {
            this._config.positionStrategy.detach();
        }
        if (this._config.scrollStrategy) {
            this._config.scrollStrategy.disable();
        }
        var /** @type {?} */ detachmentResult = this._portalOutlet.detach();
        // Only emit after everything is detached.
        this._detachments.next();
        // Remove this overlay from keyboard dispatcher tracking
        this._keyboardDispatcher.remove(this);
        return detachmentResult;
    };
    /** Cleans up the overlay from the DOM. */
    /**
     * Cleans up the overlay from the DOM.
     * @return {?}
     */
    OverlayRef.prototype.dispose = /**
     * Cleans up the overlay from the DOM.
     * @return {?}
     */
    function () {
        var /** @type {?} */ isAttached = this.hasAttached();
        if (this._config.positionStrategy) {
            this._config.positionStrategy.dispose();
        }
        if (this._config.scrollStrategy) {
            this._config.scrollStrategy.disable();
        }
        this.detachBackdrop();
        this._keyboardDispatcher.remove(this);
        this._portalOutlet.dispose();
        this._attachments.complete();
        this._backdropClick.complete();
        this._keydownEvents.complete();
        if (isAttached) {
            this._detachments.next();
        }
        this._detachments.complete();
    };
    /** Whether the overlay has attached content. */
    /**
     * Whether the overlay has attached content.
     * @return {?}
     */
    OverlayRef.prototype.hasAttached = /**
     * Whether the overlay has attached content.
     * @return {?}
     */
    function () {
        return this._portalOutlet.hasAttached();
    };
    /** Gets an observable that emits when the backdrop has been clicked. */
    /**
     * Gets an observable that emits when the backdrop has been clicked.
     * @return {?}
     */
    OverlayRef.prototype.backdropClick = /**
     * Gets an observable that emits when the backdrop has been clicked.
     * @return {?}
     */
    function () {
        return this._backdropClick.asObservable();
    };
    /** Gets an observable that emits when the overlay has been attached. */
    /**
     * Gets an observable that emits when the overlay has been attached.
     * @return {?}
     */
    OverlayRef.prototype.attachments = /**
     * Gets an observable that emits when the overlay has been attached.
     * @return {?}
     */
    function () {
        return this._attachments.asObservable();
    };
    /** Gets an observable that emits when the overlay has been detached. */
    /**
     * Gets an observable that emits when the overlay has been detached.
     * @return {?}
     */
    OverlayRef.prototype.detachments = /**
     * Gets an observable that emits when the overlay has been detached.
     * @return {?}
     */
    function () {
        return this._detachments.asObservable();
    };
    /** Gets an observable of keydown events targeted to this overlay. */
    /**
     * Gets an observable of keydown events targeted to this overlay.
     * @return {?}
     */
    OverlayRef.prototype.keydownEvents = /**
     * Gets an observable of keydown events targeted to this overlay.
     * @return {?}
     */
    function () {
        return this._keydownEvents.asObservable();
    };
    /** Gets the the current overlay configuration, which is immutable. */
    /**
     * Gets the the current overlay configuration, which is immutable.
     * @return {?}
     */
    OverlayRef.prototype.getConfig = /**
     * Gets the the current overlay configuration, which is immutable.
     * @return {?}
     */
    function () {
        return this._config;
    };
    /** Updates the position of the overlay based on the position strategy. */
    /**
     * Updates the position of the overlay based on the position strategy.
     * @return {?}
     */
    OverlayRef.prototype.updatePosition = /**
     * Updates the position of the overlay based on the position strategy.
     * @return {?}
     */
    function () {
        if (this._config.positionStrategy) {
            this._config.positionStrategy.apply();
        }
    };
    /** Update the size properties of the overlay. */
    /**
     * Update the size properties of the overlay.
     * @param {?} sizeConfig
     * @return {?}
     */
    OverlayRef.prototype.updateSize = /**
     * Update the size properties of the overlay.
     * @param {?} sizeConfig
     * @return {?}
     */
    function (sizeConfig) {
        this._config = Object(__WEBPACK_IMPORTED_MODULE_5_tslib__["__assign"])({}, this._config, sizeConfig);
        this._updateElementSize();
    };
    /** Sets the LTR/RTL direction for the overlay. */
    /**
     * Sets the LTR/RTL direction for the overlay.
     * @param {?} dir
     * @return {?}
     */
    OverlayRef.prototype.setDirection = /**
     * Sets the LTR/RTL direction for the overlay.
     * @param {?} dir
     * @return {?}
     */
    function (dir) {
        this._config = Object(__WEBPACK_IMPORTED_MODULE_5_tslib__["__assign"])({}, this._config, { direction: dir });
        this._updateElementDirection();
    };
    /**
     * Updates the text direction of the overlay panel.
     * @return {?}
     */
    OverlayRef.prototype._updateElementDirection = /**
     * Updates the text direction of the overlay panel.
     * @return {?}
     */
    function () {
        this._pane.setAttribute('dir', /** @type {?} */ ((this._config.direction)));
    };
    /**
     * Updates the size of the overlay element based on the overlay config.
     * @return {?}
     */
    OverlayRef.prototype._updateElementSize = /**
     * Updates the size of the overlay element based on the overlay config.
     * @return {?}
     */
    function () {
        if (this._config.width || this._config.width === 0) {
            this._pane.style.width = formatCssUnit(this._config.width);
        }
        if (this._config.height || this._config.height === 0) {
            this._pane.style.height = formatCssUnit(this._config.height);
        }
        if (this._config.minWidth || this._config.minWidth === 0) {
            this._pane.style.minWidth = formatCssUnit(this._config.minWidth);
        }
        if (this._config.minHeight || this._config.minHeight === 0) {
            this._pane.style.minHeight = formatCssUnit(this._config.minHeight);
        }
        if (this._config.maxWidth || this._config.maxWidth === 0) {
            this._pane.style.maxWidth = formatCssUnit(this._config.maxWidth);
        }
        if (this._config.maxHeight || this._config.maxHeight === 0) {
            this._pane.style.maxHeight = formatCssUnit(this._config.maxHeight);
        }
    };
    /**
     * Toggles the pointer events for the overlay pane element.
     * @param {?} enablePointer
     * @return {?}
     */
    OverlayRef.prototype._togglePointerEvents = /**
     * Toggles the pointer events for the overlay pane element.
     * @param {?} enablePointer
     * @return {?}
     */
    function (enablePointer) {
        this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';
    };
    /**
     * Attaches a backdrop for this overlay.
     * @return {?}
     */
    OverlayRef.prototype._attachBackdrop = /**
     * Attaches a backdrop for this overlay.
     * @return {?}
     */
    function () {
        var _this = this;
        var /** @type {?} */ showingClass = 'cdk-overlay-backdrop-showing';
        this._backdropElement = this._document.createElement('div');
        this._backdropElement.classList.add('cdk-overlay-backdrop');
        if (this._config.backdropClass) {
            this._backdropElement.classList.add(this._config.backdropClass);
        } /** @type {?} */
        ((
        // Insert the backdrop before the pane in the DOM order,
        // in order to handle stacked overlays properly.
        this._pane.parentElement)).insertBefore(this._backdropElement, this._pane);
        // Forward backdrop clicks such that the consumer of the overlay can perform whatever
        // action desired when such a click occurs (usually closing the overlay).
        this._backdropElement.addEventListener('click', function (event) { return _this._backdropClick.next(event); });
        // Add class to fade-in the backdrop after one frame.
        if (typeof requestAnimationFrame !== 'undefined') {
            this._ngZone.runOutsideAngular(function () {
                requestAnimationFrame(function () {
                    if (_this._backdropElement) {
                        _this._backdropElement.classList.add(showingClass);
                    }
                });
            });
        }
        else {
            this._backdropElement.classList.add(showingClass);
        }
    };
    /**
     * Updates the stacking order of the element, moving it to the top if necessary.
     * This is required in cases where one overlay was detached, while another one,
     * that should be behind it, was destroyed. The next time both of them are opened,
     * the stacking will be wrong, because the detached element's pane will still be
     * in its original DOM position.
     * @return {?}
     */
    OverlayRef.prototype._updateStackingOrder = /**
     * Updates the stacking order of the element, moving it to the top if necessary.
     * This is required in cases where one overlay was detached, while another one,
     * that should be behind it, was destroyed. The next time both of them are opened,
     * the stacking will be wrong, because the detached element's pane will still be
     * in its original DOM position.
     * @return {?}
     */
    function () {
        if (this._pane.nextSibling) {
            /** @type {?} */ ((this._pane.parentNode)).appendChild(this._pane);
        }
    };
    /** Detaches the backdrop (if any) associated with the overlay. */
    /**
     * Detaches the backdrop (if any) associated with the overlay.
     * @return {?}
     */
    OverlayRef.prototype.detachBackdrop = /**
     * Detaches the backdrop (if any) associated with the overlay.
     * @return {?}
     */
    function () {
        var _this = this;
        var /** @type {?} */ backdropToDetach = this._backdropElement;
        if (backdropToDetach) {
            var /** @type {?} */ finishDetach_1 = function () {
                // It may not be attached to anything in certain cases (e.g. unit tests).
                if (backdropToDetach && backdropToDetach.parentNode) {
                    backdropToDetach.parentNode.removeChild(backdropToDetach);
                }
                // It is possible that a new portal has been attached to this overlay since we started
                // removing the backdrop. If that is the case, only clear the backdrop reference if it
                // is still the same instance that we started to remove.
                if (_this._backdropElement == backdropToDetach) {
                    _this._backdropElement = null;
                }
            };
            backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');
            if (this._config.backdropClass) {
                backdropToDetach.classList.remove(this._config.backdropClass);
            }
            backdropToDetach.addEventListener('transitionend', finishDetach_1);
            // If the backdrop doesn't have a transition, the `transitionend` event won't fire.
            // In this case we make it unclickable and we try to remove it after a delay.
            backdropToDetach.style.pointerEvents = 'none';
            // Run this outside the Angular zone because there's nothing that Angular cares about.
            // If it were to run inside the Angular zone, every test that used Overlay would have to be
            // either async or fakeAsync.
            this._ngZone.runOutsideAngular(function () {
                setTimeout(finishDetach_1, 500);
            });
        }
    };
    return OverlayRef;
}());
/**
 * @param {?} value
 * @return {?}
 */
function formatCssUnit(value) {
    return typeof value === 'string' ? /** @type {?} */ (value) : value + "px";
}
/**
 * Size properties for an overlay.
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * A strategy for positioning overlays. Using this strategy, an overlay is given an
 * implicit position relative some origin element. The relative position is defined in terms of
 * a point on the origin element that is connected to a point on the overlay element. For example,
 * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner
 * of the overlay.
 */
var ConnectedPositionStrategy = /** @class */ (function () {
    function ConnectedPositionStrategy(originPos, overlayPos, _connectedTo, _viewportRuler, _document) {
        this._connectedTo = _connectedTo;
        this._viewportRuler = _viewportRuler;
        this._document = _document;
        /**
         * Layout direction of the position strategy.
         */
        this._dir = 'ltr';
        /**
         * The offset in pixels for the overlay connection point on the x-axis
         */
        this._offsetX = 0;
        /**
         * The offset in pixels for the overlay connection point on the y-axis
         */
        this._offsetY = 0;
        /**
         * The Scrollable containers used to check scrollable view properties on position change.
         */
        this.scrollables = [];
        /**
         * Subscription to viewport resize events.
         */
        this._resizeSubscription = __WEBPACK_IMPORTED_MODULE_8_rxjs_Subscription__["Subscription"].EMPTY;
        /**
         * Ordered list of preferred positions, from most to least desirable.
         */
        this._preferredPositions = [];
        /**
         * Whether the position strategy is applied currently.
         */
        this._applied = false;
        /**
         * Whether the overlay position is locked.
         */
        this._positionLocked = false;
        this._onPositionChange = new __WEBPACK_IMPORTED_MODULE_7_rxjs_Subject__["Subject"]();
        this._origin = this._connectedTo.nativeElement;
        this.withFallbackPosition(originPos, overlayPos);
    }
    Object.defineProperty(ConnectedPositionStrategy.prototype, "_isRtl", {
        /** Whether the we're dealing with an RTL context */
        get: /**
         * Whether the we're dealing with an RTL context
         * @return {?}
         */
        function () {
            return this._dir === 'rtl';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConnectedPositionStrategy.prototype, "onPositionChange", {
        /** Emits an event when the connection point changes. */
        get: /**
         * Emits an event when the connection point changes.
         * @return {?}
         */
        function () {
            return this._onPositionChange.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConnectedPositionStrategy.prototype, "positions", {
        /** Ordered list of preferred positions, from most to least desirable. */
        get: /**
         * Ordered list of preferred positions, from most to least desirable.
         * @return {?}
         */
        function () {
            return this._preferredPositions;
        },
        enumerable: true,
        configurable: true
    });
    /** Attach this position strategy to an overlay. */
    /**
     * Attach this position strategy to an overlay.
     * @param {?} overlayRef
     * @return {?}
     */
    ConnectedPositionStrategy.prototype.attach = /**
     * Attach this position strategy to an overlay.
     * @param {?} overlayRef
     * @return {?}
     */
    function (overlayRef) {
        var _this = this;
        this._overlayRef = overlayRef;
        this._pane = overlayRef.overlayElement;
        this._resizeSubscription.unsubscribe();
        this._resizeSubscription = this._viewportRuler.change().subscribe(function () { return _this.apply(); });
    };
    /** Disposes all resources used by the position strategy. */
    /**
     * Disposes all resources used by the position strategy.
     * @return {?}
     */
    ConnectedPositionStrategy.prototype.dispose = /**
     * Disposes all resources used by the position strategy.
     * @return {?}
     */
    function () {
        this._applied = false;
        this._resizeSubscription.unsubscribe();
        this._onPositionChange.complete();
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @return {?}
     */
    ConnectedPositionStrategy.prototype.detach = /**
     * \@docs-private
     * @return {?}
     */
    function () {
        this._applied = false;
        this._resizeSubscription.unsubscribe();
    };
    /**
     * Updates the position of the overlay element, using whichever preferred position relative
     * to the origin fits on-screen.
     * @docs-private
     */
    /**
     * Updates the position of the overlay element, using whichever preferred position relative
     * to the origin fits on-screen.
     * \@docs-private
     * @return {?}
     */
    ConnectedPositionStrategy.prototype.apply = /**
     * Updates the position of the overlay element, using whichever preferred position relative
     * to the origin fits on-screen.
     * \@docs-private
     * @return {?}
     */
    function () {
        // If the position has been applied already (e.g. when the overlay was opened) and the
        // consumer opted into locking in the position, re-use the  old position, in order to
        // prevent the overlay from jumping around.
        if (this._applied && this._positionLocked && this._lastConnectedPosition) {
            this.recalculateLastPosition();
            return;
        }
        this._applied = true;
        // We need the bounding rects for the origin and the overlay to determine how to position
        // the overlay relative to the origin.
        var /** @type {?} */ element = this._pane;
        var /** @type {?} */ originRect = this._origin.getBoundingClientRect();
        var /** @type {?} */ overlayRect = element.getBoundingClientRect();
        // We use the viewport size to determine whether a position would go off-screen.
        var /** @type {?} */ viewportSize = this._viewportRuler.getViewportSize();
        // Fallback point if none of the fallbacks fit into the viewport.
        var /** @type {?} */ fallbackPoint;
        var /** @type {?} */ fallbackPosition;
        // We want to place the overlay in the first of the preferred positions such that the
        // overlay fits on-screen.
        for (var _i = 0, _a = this._preferredPositions; _i < _a.length; _i++) {
            var pos = _a[_i];
            // Get the (x, y) point of connection on the origin, and then use that to get the
            // (top, left) coordinate for the overlay at `pos`.
            var /** @type {?} */ originPoint = this._getOriginConnectionPoint(originRect, pos);
            var /** @type {?} */ overlayPoint = this._getOverlayPoint(originPoint, overlayRect, viewportSize, pos);
            // If the overlay in the calculated position fits on-screen, put it there and we're done.
            if (overlayPoint.fitsInViewport) {
                this._setElementPosition(element, overlayRect, overlayPoint, pos);
                // Save the last connected position in case the position needs to be re-calculated.
                this._lastConnectedPosition = pos;
                return;
            }
            else if (!fallbackPoint || fallbackPoint.visibleArea < overlayPoint.visibleArea) {
                fallbackPoint = overlayPoint;
                fallbackPosition = pos;
            }
        }
        // If none of the preferred positions were in the viewport, take the one
        // with the largest visible area.
        this._setElementPosition(element, overlayRect, /** @type {?} */ ((fallbackPoint)), /** @type {?} */ ((fallbackPosition)));
    };
    /**
     * Re-positions the overlay element with the trigger in its last calculated position,
     * even if a position higher in the "preferred positions" list would now fit. This
     * allows one to re-align the panel without changing the orientation of the panel.
     */
    /**
     * Re-positions the overlay element with the trigger in its last calculated position,
     * even if a position higher in the "preferred positions" list would now fit. This
     * allows one to re-align the panel without changing the orientation of the panel.
     * @return {?}
     */
    ConnectedPositionStrategy.prototype.recalculateLastPosition = /**
     * Re-positions the overlay element with the trigger in its last calculated position,
     * even if a position higher in the "preferred positions" list would now fit. This
     * allows one to re-align the panel without changing the orientation of the panel.
     * @return {?}
     */
    function () {
        // If the overlay has never been positioned before, do nothing.
        if (!this._lastConnectedPosition) {
            return;
        }
        var /** @type {?} */ originRect = this._origin.getBoundingClientRect();
        var /** @type {?} */ overlayRect = this._pane.getBoundingClientRect();
        var /** @type {?} */ viewportSize = this._viewportRuler.getViewportSize();
        var /** @type {?} */ lastPosition = this._lastConnectedPosition || this._preferredPositions[0];
        var /** @type {?} */ originPoint = this._getOriginConnectionPoint(originRect, lastPosition);
        var /** @type {?} */ overlayPoint = this._getOverlayPoint(originPoint, overlayRect, viewportSize, lastPosition);
        this._setElementPosition(this._pane, overlayRect, overlayPoint, lastPosition);
    };
    /**
     * Sets the list of Scrollable containers that host the origin element so that
     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every
     * Scrollable must be an ancestor element of the strategy's origin element.
     */
    /**
     * Sets the list of Scrollable containers that host the origin element so that
     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every
     * Scrollable must be an ancestor element of the strategy's origin element.
     * @param {?} scrollables
     * @return {?}
     */
    ConnectedPositionStrategy.prototype.withScrollableContainers = /**
     * Sets the list of Scrollable containers that host the origin element so that
     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every
     * Scrollable must be an ancestor element of the strategy's origin element.
     * @param {?} scrollables
     * @return {?}
     */
    function (scrollables) {
        this.scrollables = scrollables;
    };
    /**
     * Adds a new preferred fallback position.
     * @param originPos
     * @param overlayPos
     */
    /**
     * Adds a new preferred fallback position.
     * @param {?} originPos
     * @param {?} overlayPos
     * @param {?=} offsetX
     * @param {?=} offsetY
     * @return {?}
     */
    ConnectedPositionStrategy.prototype.withFallbackPosition = /**
     * Adds a new preferred fallback position.
     * @param {?} originPos
     * @param {?} overlayPos
     * @param {?=} offsetX
     * @param {?=} offsetY
     * @return {?}
     */
    function (originPos, overlayPos, offsetX, offsetY) {
        var /** @type {?} */ position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);
        this._preferredPositions.push(position);
        return this;
    };
    /**
     * Sets the layout direction so the overlay's position can be adjusted to match.
     * @param dir New layout direction.
     */
    /**
     * Sets the layout direction so the overlay's position can be adjusted to match.
     * @param {?} dir New layout direction.
     * @return {?}
     */
    ConnectedPositionStrategy.prototype.withDirection = /**
     * Sets the layout direction so the overlay's position can be adjusted to match.
     * @param {?} dir New layout direction.
     * @return {?}
     */
    function (dir) {
        this._dir = dir;
        return this;
    };
    /**
     * Sets an offset for the overlay's connection point on the x-axis
     * @param offset New offset in the X axis.
     */
    /**
     * Sets an offset for the overlay's connection point on the x-axis
     * @param {?} offset New offset in the X axis.
     * @return {?}
     */
    ConnectedPositionStrategy.prototype.withOffsetX = /**
     * Sets an offset for the overlay's connection point on the x-axis
     * @param {?} offset New offset in the X axis.
     * @return {?}
     */
    function (offset) {
        this._offsetX = offset;
        return this;
    };
    /**
     * Sets an offset for the overlay's connection point on the y-axis
     * @param  offset New offset in the Y axis.
     */
    /**
     * Sets an offset for the overlay's connection point on the y-axis
     * @param {?} offset New offset in the Y axis.
     * @return {?}
     */
    ConnectedPositionStrategy.prototype.withOffsetY = /**
     * Sets an offset for the overlay's connection point on the y-axis
     * @param {?} offset New offset in the Y axis.
     * @return {?}
     */
    function (offset) {
        this._offsetY = offset;
        return this;
    };
    /**
     * Sets whether the overlay's position should be locked in after it is positioned
     * initially. When an overlay is locked in, it won't attempt to reposition itself
     * when the position is re-applied (e.g. when the user scrolls away).
     * @param isLocked Whether the overlay should locked in.
     */
    /**
     * Sets whether the overlay's position should be locked in after it is positioned
     * initially. When an overlay is locked in, it won't attempt to reposition itself
     * when the position is re-applied (e.g. when the user scrolls away).
     * @param {?} isLocked Whether the overlay should locked in.
     * @return {?}
     */
    ConnectedPositionStrategy.prototype.withLockedPosition = /**
     * Sets whether the overlay's position should be locked in after it is positioned
     * initially. When an overlay is locked in, it won't attempt to reposition itself
     * when the position is re-applied (e.g. when the user scrolls away).
     * @param {?} isLocked Whether the overlay should locked in.
     * @return {?}
     */
    function (isLocked) {
        this._positionLocked = isLocked;
        return this;
    };
    /**
     * Overwrites the current set of positions with an array of new ones.
     * @param positions Position pairs to be set on the strategy.
     */
    /**
     * Overwrites the current set of positions with an array of new ones.
     * @param {?} positions Position pairs to be set on the strategy.
     * @return {?}
     */
    ConnectedPositionStrategy.prototype.withPositions = /**
     * Overwrites the current set of positions with an array of new ones.
     * @param {?} positions Position pairs to be set on the strategy.
     * @return {?}
     */
    function (positions) {
        this._preferredPositions = positions.slice();
        return this;
    };
    /**
     * Sets the origin element, relative to which to position the overlay.
     * @param origin Reference to the new origin element.
     */
    /**
     * Sets the origin element, relative to which to position the overlay.
     * @param {?} origin Reference to the new origin element.
     * @return {?}
     */
    ConnectedPositionStrategy.prototype.setOrigin = /**
     * Sets the origin element, relative to which to position the overlay.
     * @param {?} origin Reference to the new origin element.
     * @return {?}
     */
    function (origin) {
        this._origin = origin.nativeElement;
        return this;
    };
    /**
     * Gets the horizontal (x) "start" dimension based on whether the overlay is in an RTL context.
     * @param {?} rect
     * @return {?}
     */
    ConnectedPositionStrategy.prototype._getStartX = /**
     * Gets the horizontal (x) "start" dimension based on whether the overlay is in an RTL context.
     * @param {?} rect
     * @return {?}
     */
    function (rect) {
        return this._isRtl ? rect.right : rect.left;
    };
    /**
     * Gets the horizontal (x) "end" dimension based on whether the overlay is in an RTL context.
     * @param {?} rect
     * @return {?}
     */
    ConnectedPositionStrategy.prototype._getEndX = /**
     * Gets the horizontal (x) "end" dimension based on whether the overlay is in an RTL context.
     * @param {?} rect
     * @return {?}
     */
    function (rect) {
        return this._isRtl ? rect.left : rect.right;
    };
    /**
     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.
     * @param {?} originRect
     * @param {?} pos
     * @return {?}
     */
    ConnectedPositionStrategy.prototype._getOriginConnectionPoint = /**
     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.
     * @param {?} originRect
     * @param {?} pos
     * @return {?}
     */
    function (originRect, pos) {
        var /** @type {?} */ originStartX = this._getStartX(originRect);
        var /** @type {?} */ originEndX = this._getEndX(originRect);
        var /** @type {?} */ x;
        if (pos.originX == 'center') {
            x = originStartX + (originRect.width / 2);
        }
        else {
            x = pos.originX == 'start' ? originStartX : originEndX;
        }
        var /** @type {?} */ y;
        if (pos.originY == 'center') {
            y = originRect.top + (originRect.height / 2);
        }
        else {
            y = pos.originY == 'top' ? originRect.top : originRect.bottom;
        }
        return { x: x, y: y };
    };
    /**
     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and
     * origin point to which the overlay should be connected, as well as how much of the element
     * would be inside the viewport at that position.
     * @param {?} originPoint
     * @param {?} overlayRect
     * @param {?} viewportSize
     * @param {?} pos
     * @return {?}
     */
    ConnectedPositionStrategy.prototype._getOverlayPoint = /**
     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and
     * origin point to which the overlay should be connected, as well as how much of the element
     * would be inside the viewport at that position.
     * @param {?} originPoint
     * @param {?} overlayRect
     * @param {?} viewportSize
     * @param {?} pos
     * @return {?}
     */
    function (originPoint, overlayRect, viewportSize, pos) {
        // Calculate the (overlayStartX, overlayStartY), the start of the potential overlay position
        // relative to the origin point.
        var /** @type {?} */ overlayStartX;
        if (pos.overlayX == 'center') {
            overlayStartX = -overlayRect.width / 2;
        }
        else if (pos.overlayX === 'start') {
            overlayStartX = this._isRtl ? -overlayRect.width : 0;
        }
        else {
            overlayStartX = this._isRtl ? 0 : -overlayRect.width;
        }
        var /** @type {?} */ overlayStartY;
        if (pos.overlayY == 'center') {
            overlayStartY = -overlayRect.height / 2;
        }
        else {
            overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;
        }
        // The (x, y) offsets of the overlay based on the current position.
        var /** @type {?} */ offsetX = typeof pos.offsetX === 'undefined' ? this._offsetX : pos.offsetX;
        var /** @type {?} */ offsetY = typeof pos.offsetY === 'undefined' ? this._offsetY : pos.offsetY;
        // The (x, y) coordinates of the overlay.
        var /** @type {?} */ x = originPoint.x + overlayStartX + offsetX;
        var /** @type {?} */ y = originPoint.y + overlayStartY + offsetY;
        // How much the overlay would overflow at this position, on each side.
        var /** @type {?} */ leftOverflow = 0 - x;
        var /** @type {?} */ rightOverflow = (x + overlayRect.width) - viewportSize.width;
        var /** @type {?} */ topOverflow = 0 - y;
        var /** @type {?} */ bottomOverflow = (y + overlayRect.height) - viewportSize.height;
        // Visible parts of the element on each axis.
        var /** @type {?} */ visibleWidth = this._subtractOverflows(overlayRect.width, leftOverflow, rightOverflow);
        var /** @type {?} */ visibleHeight = this._subtractOverflows(overlayRect.height, topOverflow, bottomOverflow);
        // The area of the element that's within the viewport.
        var /** @type {?} */ visibleArea = visibleWidth * visibleHeight;
        var /** @type {?} */ fitsInViewport = (overlayRect.width * overlayRect.height) === visibleArea;
        return { x: x, y: y, fitsInViewport: fitsInViewport, visibleArea: visibleArea };
    };
    /**
     * Gets the view properties of the trigger and overlay, including whether they are clipped
     * or completely outside the view of any of the strategy's scrollables.
     * @param {?} overlay
     * @return {?}
     */
    ConnectedPositionStrategy.prototype._getScrollVisibility = /**
     * Gets the view properties of the trigger and overlay, including whether they are clipped
     * or completely outside the view of any of the strategy's scrollables.
     * @param {?} overlay
     * @return {?}
     */
    function (overlay) {
        var /** @type {?} */ originBounds = this._origin.getBoundingClientRect();
        var /** @type {?} */ overlayBounds = overlay.getBoundingClientRect();
        var /** @type {?} */ scrollContainerBounds = this.scrollables.map(function (s) { return s.getElementRef().nativeElement.getBoundingClientRect(); });
        return {
            isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),
            isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),
            isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),
            isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),
        };
    };
    /**
     * Physically positions the overlay element to the given coordinate.
     * @param {?} element
     * @param {?} overlayRect
     * @param {?} overlayPoint
     * @param {?} pos
     * @return {?}
     */
    ConnectedPositionStrategy.prototype._setElementPosition = /**
     * Physically positions the overlay element to the given coordinate.
     * @param {?} element
     * @param {?} overlayRect
     * @param {?} overlayPoint
     * @param {?} pos
     * @return {?}
     */
    function (element, overlayRect, overlayPoint, pos) {
        // We want to set either `top` or `bottom` based on whether the overlay wants to appear above
        // or below the origin and the direction in which the element will expand.
        var /** @type {?} */ verticalStyleProperty = pos.overlayY === 'bottom' ? 'bottom' : 'top';
        // When using `bottom`, we adjust the y position such that it is the distance
        // from the bottom of the viewport rather than the top.
        var /** @type {?} */ y = verticalStyleProperty === 'top' ?
            overlayPoint.y :
            this._document.documentElement.clientHeight - (overlayPoint.y + overlayRect.height);
        // We want to set either `left` or `right` based on whether the overlay wants to appear "before"
        // or "after" the origin, which determines the direction in which the element will expand.
        // For the horizontal axis, the meaning of "before" and "after" change based on whether the
        // page is in RTL or LTR.
        var /** @type {?} */ horizontalStyleProperty;
        if (this._dir === 'rtl') {
            horizontalStyleProperty = pos.overlayX === 'end' ? 'left' : 'right';
        }
        else {
            horizontalStyleProperty = pos.overlayX === 'end' ? 'right' : 'left';
        }
        // When we're setting `right`, we adjust the x position such that it is the distance
        // from the right edge of the viewport rather than the left edge.
        var /** @type {?} */ x = horizontalStyleProperty === 'left' ?
            overlayPoint.x :
            this._document.documentElement.clientWidth - (overlayPoint.x + overlayRect.width);
        // Reset any existing styles. This is necessary in case the preferred position has
        // changed since the last `apply`.
        ['top', 'bottom', 'left', 'right'].forEach(function (p) { return element.style[p] = null; });
        element.style[verticalStyleProperty] = y + "px";
        element.style[horizontalStyleProperty] = x + "px";
        // Notify that the position has been changed along with its change properties.
        var /** @type {?} */ scrollableViewProperties = this._getScrollVisibility(element);
        var /** @type {?} */ positionChange = new ConnectedOverlayPositionChange(pos, scrollableViewProperties);
        this._onPositionChange.next(positionChange);
    };
    /**
     * Subtracts the amount that an element is overflowing on an axis from it's length.
     * @param {?} length
     * @param {...?} overflows
     * @return {?}
     */
    ConnectedPositionStrategy.prototype._subtractOverflows = /**
     * Subtracts the amount that an element is overflowing on an axis from it's length.
     * @param {?} length
     * @param {...?} overflows
     * @return {?}
     */
    function (length) {
        var overflows = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            overflows[_i - 1] = arguments[_i];
        }
        return overflows.reduce(function (currentValue, currentOverflow) {
            return currentValue - Math.max(currentOverflow, 0);
        }, length);
    };
    return ConnectedPositionStrategy;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * A strategy for positioning overlays. Using this strategy, an overlay is given an
 * explicit position relative to the browser's viewport. We use flexbox, instead of
 * transforms, in order to avoid issues with subpixel rendering which can cause the
 * element to become blurry.
 */
var GlobalPositionStrategy = /** @class */ (function () {
    function GlobalPositionStrategy(_document) {
        this._document = _document;
        this._cssPosition = 'static';
        this._topOffset = '';
        this._bottomOffset = '';
        this._leftOffset = '';
        this._rightOffset = '';
        this._alignItems = '';
        this._justifyContent = '';
        this._width = '';
        this._height = '';
        /**
         * A lazily-created wrapper for the overlay element that is used as a flex container.
         */
        this._wrapper = null;
    }
    /**
     * @param {?} overlayRef
     * @return {?}
     */
    GlobalPositionStrategy.prototype.attach = /**
     * @param {?} overlayRef
     * @return {?}
     */
    function (overlayRef) {
        var /** @type {?} */ config = overlayRef.getConfig();
        this._overlayRef = overlayRef;
        if (this._width && !config.width) {
            overlayRef.updateSize({ width: this._width });
        }
        if (this._height && !config.height) {
            overlayRef.updateSize({ height: this._height });
        }
    };
    /**
     * Sets the top position of the overlay. Clears any previously set vertical position.
     * @param value New top offset.
     */
    /**
     * Sets the top position of the overlay. Clears any previously set vertical position.
     * @param {?=} value New top offset.
     * @return {?}
     */
    GlobalPositionStrategy.prototype.top = /**
     * Sets the top position of the overlay. Clears any previously set vertical position.
     * @param {?=} value New top offset.
     * @return {?}
     */
    function (value) {
        if (value === void 0) { value = ''; }
        this._bottomOffset = '';
        this._topOffset = value;
        this._alignItems = 'flex-start';
        return this;
    };
    /**
     * Sets the left position of the overlay. Clears any previously set horizontal position.
     * @param value New left offset.
     */
    /**
     * Sets the left position of the overlay. Clears any previously set horizontal position.
     * @param {?=} value New left offset.
     * @return {?}
     */
    GlobalPositionStrategy.prototype.left = /**
     * Sets the left position of the overlay. Clears any previously set horizontal position.
     * @param {?=} value New left offset.
     * @return {?}
     */
    function (value) {
        if (value === void 0) { value = ''; }
        this._rightOffset = '';
        this._leftOffset = value;
        this._justifyContent = 'flex-start';
        return this;
    };
    /**
     * Sets the bottom position of the overlay. Clears any previously set vertical position.
     * @param value New bottom offset.
     */
    /**
     * Sets the bottom position of the overlay. Clears any previously set vertical position.
     * @param {?=} value New bottom offset.
     * @return {?}
     */
    GlobalPositionStrategy.prototype.bottom = /**
     * Sets the bottom position of the overlay. Clears any previously set vertical position.
     * @param {?=} value New bottom offset.
     * @return {?}
     */
    function (value) {
        if (value === void 0) { value = ''; }
        this._topOffset = '';
        this._bottomOffset = value;
        this._alignItems = 'flex-end';
        return this;
    };
    /**
     * Sets the right position of the overlay. Clears any previously set horizontal position.
     * @param value New right offset.
     */
    /**
     * Sets the right position of the overlay. Clears any previously set horizontal position.
     * @param {?=} value New right offset.
     * @return {?}
     */
    GlobalPositionStrategy.prototype.right = /**
     * Sets the right position of the overlay. Clears any previously set horizontal position.
     * @param {?=} value New right offset.
     * @return {?}
     */
    function (value) {
        if (value === void 0) { value = ''; }
        this._leftOffset = '';
        this._rightOffset = value;
        this._justifyContent = 'flex-end';
        return this;
    };
    /**
     * Sets the overlay width and clears any previously set width.
     * @param value New width for the overlay
     * @deprecated Pass the `width` through the `OverlayConfig`.
     * @deletion-target 7.0.0
     */
    /**
     * Sets the overlay width and clears any previously set width.
     * @deprecated Pass the `width` through the `OverlayConfig`.
     * \@deletion-target 7.0.0
     * @param {?=} value New width for the overlay
     * @return {?}
     */
    GlobalPositionStrategy.prototype.width = /**
     * Sets the overlay width and clears any previously set width.
     * @deprecated Pass the `width` through the `OverlayConfig`.
     * \@deletion-target 7.0.0
     * @param {?=} value New width for the overlay
     * @return {?}
     */
    function (value) {
        if (value === void 0) { value = ''; }
        if (this._overlayRef) {
            this._overlayRef.updateSize({ width: value });
        }
        else {
            this._width = value;
        }
        return this;
    };
    /**
     * Sets the overlay height and clears any previously set height.
     * @param value New height for the overlay
     * @deprecated Pass the `height` through the `OverlayConfig`.
     * @deletion-target 7.0.0
     */
    /**
     * Sets the overlay height and clears any previously set height.
     * @deprecated Pass the `height` through the `OverlayConfig`.
     * \@deletion-target 7.0.0
     * @param {?=} value New height for the overlay
     * @return {?}
     */
    GlobalPositionStrategy.prototype.height = /**
     * Sets the overlay height and clears any previously set height.
     * @deprecated Pass the `height` through the `OverlayConfig`.
     * \@deletion-target 7.0.0
     * @param {?=} value New height for the overlay
     * @return {?}
     */
    function (value) {
        if (value === void 0) { value = ''; }
        if (this._overlayRef) {
            this._overlayRef.updateSize({ height: value });
        }
        else {
            this._height = value;
        }
        return this;
    };
    /**
     * Centers the overlay horizontally with an optional offset.
     * Clears any previously set horizontal position.
     *
     * @param offset Overlay offset from the horizontal center.
     */
    /**
     * Centers the overlay horizontally with an optional offset.
     * Clears any previously set horizontal position.
     *
     * @param {?=} offset Overlay offset from the horizontal center.
     * @return {?}
     */
    GlobalPositionStrategy.prototype.centerHorizontally = /**
     * Centers the overlay horizontally with an optional offset.
     * Clears any previously set horizontal position.
     *
     * @param {?=} offset Overlay offset from the horizontal center.
     * @return {?}
     */
    function (offset) {
        if (offset === void 0) { offset = ''; }
        this.left(offset);
        this._justifyContent = 'center';
        return this;
    };
    /**
     * Centers the overlay vertically with an optional offset.
     * Clears any previously set vertical position.
     *
     * @param offset Overlay offset from the vertical center.
     */
    /**
     * Centers the overlay vertically with an optional offset.
     * Clears any previously set vertical position.
     *
     * @param {?=} offset Overlay offset from the vertical center.
     * @return {?}
     */
    GlobalPositionStrategy.prototype.centerVertically = /**
     * Centers the overlay vertically with an optional offset.
     * Clears any previously set vertical position.
     *
     * @param {?=} offset Overlay offset from the vertical center.
     * @return {?}
     */
    function (offset) {
        if (offset === void 0) { offset = ''; }
        this.top(offset);
        this._alignItems = 'center';
        return this;
    };
    /**
     * Apply the position to the element.
     * @docs-private
     *
     * @returns Resolved when the styles have been applied.
     */
    /**
     * Apply the position to the element.
     * \@docs-private
     *
     * @return {?} Resolved when the styles have been applied.
     */
    GlobalPositionStrategy.prototype.apply = /**
     * Apply the position to the element.
     * \@docs-private
     *
     * @return {?} Resolved when the styles have been applied.
     */
    function () {
        // Since the overlay ref applies the strategy asynchronously, it could
        // have been disposed before it ends up being applied. If that is the
        // case, we shouldn't do anything.
        if (!this._overlayRef.hasAttached()) {
            return;
        }
        var /** @type {?} */ element = this._overlayRef.overlayElement;
        if (!this._wrapper && element.parentNode) {
            this._wrapper = this._document.createElement('div'); /** @type {?} */
            ((this._wrapper)).classList.add('cdk-global-overlay-wrapper');
            element.parentNode.insertBefore(/** @type {?} */ ((this._wrapper)), element); /** @type {?} */
            ((this._wrapper)).appendChild(element);
        }
        var /** @type {?} */ styles = element.style;
        var /** @type {?} */ parentStyles = (/** @type {?} */ (element.parentNode)).style;
        var /** @type {?} */ config = this._overlayRef.getConfig();
        styles.position = this._cssPosition;
        styles.marginLeft = config.width === '100%' ? '0' : this._leftOffset;
        styles.marginTop = config.height === '100%' ? '0' : this._topOffset;
        styles.marginBottom = this._bottomOffset;
        styles.marginRight = this._rightOffset;
        parentStyles.justifyContent = config.width === '100%' ? 'flex-start' : this._justifyContent;
        parentStyles.alignItems = config.height === '100%' ? 'flex-start' : this._alignItems;
    };
    /** Removes the wrapper element from the DOM. */
    /**
     * Removes the wrapper element from the DOM.
     * @return {?}
     */
    GlobalPositionStrategy.prototype.dispose = /**
     * Removes the wrapper element from the DOM.
     * @return {?}
     */
    function () {
        if (this._wrapper && this._wrapper.parentNode) {
            this._wrapper.parentNode.removeChild(this._wrapper);
            this._wrapper = null;
        }
    };
    return GlobalPositionStrategy;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * Builder for overlay position strategy.
 */
var OverlayPositionBuilder = /** @class */ (function () {
    function OverlayPositionBuilder(_viewportRuler, _document) {
        this._viewportRuler = _viewportRuler;
        this._document = _document;
    }
    /**
     * Creates a global position strategy.
     */
    /**
     * Creates a global position strategy.
     * @return {?}
     */
    OverlayPositionBuilder.prototype.global = /**
     * Creates a global position strategy.
     * @return {?}
     */
    function () {
        return new GlobalPositionStrategy(this._document);
    };
    /**
     * Creates a relative position strategy.
     * @param elementRef
     * @param originPos
     * @param overlayPos
     */
    /**
     * Creates a relative position strategy.
     * @param {?} elementRef
     * @param {?} originPos
     * @param {?} overlayPos
     * @return {?}
     */
    OverlayPositionBuilder.prototype.connectedTo = /**
     * Creates a relative position strategy.
     * @param {?} elementRef
     * @param {?} originPos
     * @param {?} overlayPos
     * @return {?}
     */
    function (elementRef, originPos, overlayPos) {
        return new ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler, this._document);
    };
    OverlayPositionBuilder.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"] },
    ];
    /** @nocollapse */
    OverlayPositionBuilder.ctorParameters = function () { return [
        { type: __WEBPACK_IMPORTED_MODULE_1__angular_cdk_scrolling__["ViewportRuler"], },
        { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"], args: [__WEBPACK_IMPORTED_MODULE_2__angular_common__["DOCUMENT"],] },] },
    ]; };
    return OverlayPositionBuilder;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * Service for dispatching keyboard events that land on the body to appropriate overlay ref,
 * if any. It maintains a list of attached overlays to determine best suited overlay based
 * on event target and order of overlay opens.
 */
var OverlayKeyboardDispatcher = /** @class */ (function () {
    function OverlayKeyboardDispatcher(_document) {
        this._document = _document;
        /**
         * Currently attached overlays in the order they were attached.
         */
        this._attachedOverlays = [];
    }
    /**
     * @return {?}
     */
    OverlayKeyboardDispatcher.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._unsubscribeFromKeydownEvents();
    };
    /** Add a new overlay to the list of attached overlay refs. */
    /**
     * Add a new overlay to the list of attached overlay refs.
     * @param {?} overlayRef
     * @return {?}
     */
    OverlayKeyboardDispatcher.prototype.add = /**
     * Add a new overlay to the list of attached overlay refs.
     * @param {?} overlayRef
     * @return {?}
     */
    function (overlayRef) {
        // Lazily start dispatcher once first overlay is added
        if (!this._keydownEventSubscription) {
            this._subscribeToKeydownEvents();
        }
        this._attachedOverlays.push(overlayRef);
    };
    /** Remove an overlay from the list of attached overlay refs. */
    /**
     * Remove an overlay from the list of attached overlay refs.
     * @param {?} overlayRef
     * @return {?}
     */
    OverlayKeyboardDispatcher.prototype.remove = /**
     * Remove an overlay from the list of attached overlay refs.
     * @param {?} overlayRef
     * @return {?}
     */
    function (overlayRef) {
        var /** @type {?} */ index = this._attachedOverlays.indexOf(overlayRef);
        if (index > -1) {
            this._attachedOverlays.splice(index, 1);
        }
        // Remove the global listener once there are no more overlays.
        if (this._attachedOverlays.length === 0) {
            this._unsubscribeFromKeydownEvents();
        }
    };
    /**
     * Subscribe to keydown events that land on the body and dispatch those
     * events to the appropriate overlay.
     * @return {?}
     */
    OverlayKeyboardDispatcher.prototype._subscribeToKeydownEvents = /**
     * Subscribe to keydown events that land on the body and dispatch those
     * events to the appropriate overlay.
     * @return {?}
     */
    function () {
        var _this = this;
        var /** @type {?} */ bodyKeydownEvents = Object(__WEBPACK_IMPORTED_MODULE_10_rxjs_observable_fromEvent__["fromEvent"])(this._document.body, 'keydown', true);
        this._keydownEventSubscription = bodyKeydownEvents.pipe(Object(__WEBPACK_IMPORTED_MODULE_9_rxjs_operators_filter__["filter"])(function () { return !!_this._attachedOverlays.length; })).subscribe(function (event) {
            // Dispatch keydown event to the correct overlay.
            // Dispatch keydown event to the correct overlay.
            _this._selectOverlayFromEvent(event)._keydownEvents.next(event);
        });
    };
    /**
     * Removes the global keydown subscription.
     * @return {?}
     */
    OverlayKeyboardDispatcher.prototype._unsubscribeFromKeydownEvents = /**
     * Removes the global keydown subscription.
     * @return {?}
     */
    function () {
        if (this._keydownEventSubscription) {
            this._keydownEventSubscription.unsubscribe();
            this._keydownEventSubscription = null;
        }
    };
    /**
     * Select the appropriate overlay from a keydown event.
     * @param {?} event
     * @return {?}
     */
    OverlayKeyboardDispatcher.prototype._selectOverlayFromEvent = /**
     * Select the appropriate overlay from a keydown event.
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // Check if any overlays contain the event
        var /** @type {?} */ targetedOverlay = this._attachedOverlays.find(function (overlay) {
            return overlay.overlayElement === event.target ||
                overlay.overlayElement.contains(/** @type {?} */ (event.target));
        });
        // Use the overlay if it exists, otherwise choose the most recently attached one
        return targetedOverlay || this._attachedOverlays[this._attachedOverlays.length - 1];
    };
    OverlayKeyboardDispatcher.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"] },
    ];
    /** @nocollapse */
    OverlayKeyboardDispatcher.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"], args: [__WEBPACK_IMPORTED_MODULE_2__angular_common__["DOCUMENT"],] },] },
    ]; };
    return OverlayKeyboardDispatcher;
}());
/**
 * \@docs-private
 * @param {?} dispatcher
 * @param {?} _document
 * @return {?}
 */
function OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY(dispatcher, _document) {
    return dispatcher || new OverlayKeyboardDispatcher(_document);
}
/**
 * \@docs-private
 */
var OVERLAY_KEYBOARD_DISPATCHER_PROVIDER = {
    // If there is already an OverlayKeyboardDispatcher available, use that.
    // Otherwise, provide a new one.
    provide: OverlayKeyboardDispatcher,
    deps: [
        [new __WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"](), new __WEBPACK_IMPORTED_MODULE_0__angular_core__["SkipSelf"](), OverlayKeyboardDispatcher],
        /** @type {?} */ (
        // Coerce to `InjectionToken` so that the `deps` match the "shape"
        // of the type expected by Angular
        __WEBPACK_IMPORTED_MODULE_2__angular_common__["DOCUMENT"])
    ],
    useFactory: OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * Container inside which all overlays will render.
 */
var OverlayContainer = /** @class */ (function () {
    function OverlayContainer(_document) {
        this._document = _document;
    }
    /**
     * @return {?}
     */
    OverlayContainer.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this._containerElement && this._containerElement.parentNode) {
            this._containerElement.parentNode.removeChild(this._containerElement);
        }
    };
    /**
     * This method returns the overlay container element. It will lazily
     * create the element the first time  it is called to facilitate using
     * the container in non-browser environments.
     * @returns the container element
     */
    /**
     * This method returns the overlay container element. It will lazily
     * create the element the first time  it is called to facilitate using
     * the container in non-browser environments.
     * @return {?} the container element
     */
    OverlayContainer.prototype.getContainerElement = /**
     * This method returns the overlay container element. It will lazily
     * create the element the first time  it is called to facilitate using
     * the container in non-browser environments.
     * @return {?} the container element
     */
    function () {
        if (!this._containerElement) {
            this._createContainer();
        }
        return this._containerElement;
    };
    /**
     * Create the overlay container element, which is simply a div
     * with the 'cdk-overlay-container' class on the document body.
     */
    /**
     * Create the overlay container element, which is simply a div
     * with the 'cdk-overlay-container' class on the document body.
     * @return {?}
     */
    OverlayContainer.prototype._createContainer = /**
     * Create the overlay container element, which is simply a div
     * with the 'cdk-overlay-container' class on the document body.
     * @return {?}
     */
    function () {
        var /** @type {?} */ container = this._document.createElement('div');
        container.classList.add('cdk-overlay-container');
        this._document.body.appendChild(container);
        this._containerElement = container;
    };
    OverlayContainer.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"] },
    ];
    /** @nocollapse */
    OverlayContainer.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"], args: [__WEBPACK_IMPORTED_MODULE_2__angular_common__["DOCUMENT"],] },] },
    ]; };
    return OverlayContainer;
}());
/**
 * \@docs-private
 * @param {?} parentContainer
 * @param {?} _document
 * @return {?}
 */
function OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer, _document) {
    return parentContainer || new OverlayContainer(_document);
}
/**
 * \@docs-private
 */
var OVERLAY_CONTAINER_PROVIDER = {
    // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.
    provide: OverlayContainer,
    deps: [
        [new __WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"](), new __WEBPACK_IMPORTED_MODULE_0__angular_core__["SkipSelf"](), OverlayContainer],
        /** @type {?} */ (__WEBPACK_IMPORTED_MODULE_2__angular_common__["DOCUMENT"] // We need to use the InjectionToken somewhere to keep TS happy
        ) // We need to use the InjectionToken somewhere to keep TS happy
    ],
    useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * Next overlay unique ID.
 */
var nextUniqueId = 0;
/**
 * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be
 * used as a low-level building building block for other components. Dialogs, tooltips, menus,
 * selects, etc. can all be built using overlays. The service should primarily be used by authors
 * of re-usable components rather than developers building end-user applications.
 *
 * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.
 */
var Overlay = /** @class */ (function () {
    function Overlay(scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _appRef, _injector, _ngZone, _document) {
        this.scrollStrategies = scrollStrategies;
        this._overlayContainer = _overlayContainer;
        this._componentFactoryResolver = _componentFactoryResolver;
        this._positionBuilder = _positionBuilder;
        this._keyboardDispatcher = _keyboardDispatcher;
        this._appRef = _appRef;
        this._injector = _injector;
        this._ngZone = _ngZone;
        this._document = _document;
    }
    /**
     * Creates an overlay.
     * @param config Configuration applied to the overlay.
     * @returns Reference to the created overlay.
     */
    /**
     * Creates an overlay.
     * @param {?=} config Configuration applied to the overlay.
     * @return {?} Reference to the created overlay.
     */
    Overlay.prototype.create = /**
     * Creates an overlay.
     * @param {?=} config Configuration applied to the overlay.
     * @return {?} Reference to the created overlay.
     */
    function (config) {
        var /** @type {?} */ pane = this._createPaneElement();
        var /** @type {?} */ portalOutlet = this._createPortalOutlet(pane);
        return new OverlayRef(portalOutlet, pane, new OverlayConfig(config), this._ngZone, this._keyboardDispatcher, this._document);
    };
    /**
     * Gets a position builder that can be used, via fluent API,
     * to construct and configure a position strategy.
     * @returns An overlay position builder.
     */
    /**
     * Gets a position builder that can be used, via fluent API,
     * to construct and configure a position strategy.
     * @return {?} An overlay position builder.
     */
    Overlay.prototype.position = /**
     * Gets a position builder that can be used, via fluent API,
     * to construct and configure a position strategy.
     * @return {?} An overlay position builder.
     */
    function () {
        return this._positionBuilder;
    };
    /**
     * Creates the DOM element for an overlay and appends it to the overlay container.
     * @return {?} Newly-created pane element
     */
    Overlay.prototype._createPaneElement = /**
     * Creates the DOM element for an overlay and appends it to the overlay container.
     * @return {?} Newly-created pane element
     */
    function () {
        var /** @type {?} */ pane = this._document.createElement('div');
        pane.id = "cdk-overlay-" + nextUniqueId++;
        pane.classList.add('cdk-overlay-pane');
        this._overlayContainer.getContainerElement().appendChild(pane);
        return pane;
    };
    /**
     * Create a DomPortalOutlet into which the overlay content can be loaded.
     * @param {?} pane The DOM element to turn into a portal outlet.
     * @return {?} A portal outlet for the given DOM element.
     */
    Overlay.prototype._createPortalOutlet = /**
     * Create a DomPortalOutlet into which the overlay content can be loaded.
     * @param {?} pane The DOM element to turn into a portal outlet.
     * @return {?} A portal outlet for the given DOM element.
     */
    function (pane) {
        return new __WEBPACK_IMPORTED_MODULE_4__angular_cdk_portal__["DomPortalOutlet"](pane, this._componentFactoryResolver, this._appRef, this._injector);
    };
    Overlay.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"] },
    ];
    /** @nocollapse */
    Overlay.ctorParameters = function () { return [
        { type: ScrollStrategyOptions, },
        { type: OverlayContainer, },
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ComponentFactoryResolver"], },
        { type: OverlayPositionBuilder, },
        { type: OverlayKeyboardDispatcher, },
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ApplicationRef"], },
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Injector"], },
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgZone"], },
        { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"], args: [__WEBPACK_IMPORTED_MODULE_2__angular_common__["DOCUMENT"],] },] },
    ]; };
    return Overlay;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * Default set of positions for the overlay. Follows the behavior of a dropdown.
 */
var defaultPositionList = [
    new ConnectionPositionPair({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }),
    new ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' }),
    new ConnectionPositionPair({ originX: 'end', originY: 'top' }, { overlayX: 'end', overlayY: 'bottom' }),
    new ConnectionPositionPair({ originX: 'end', originY: 'bottom' }, { overlayX: 'end', overlayY: 'top' }),
];
/**
 * Injection token that determines the scroll handling while the connected overlay is open.
 */
var CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["InjectionToken"]('cdk-connected-overlay-scroll-strategy');
/**
 * \@docs-private
 * @param {?} overlay
 * @return {?}
 */
function CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {
    return function () { return overlay.scrollStrategies.reposition(); };
}
/**
 * \@docs-private
 */
var CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {
    provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,
    deps: [Overlay],
    useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,
};
/**
 * Directive applied to an element to make it usable as an origin for an Overlay using a
 * ConnectedPositionStrategy.
 */
var CdkOverlayOrigin = /** @class */ (function () {
    function CdkOverlayOrigin(elementRef) {
        this.elementRef = elementRef;
    }
    CdkOverlayOrigin.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"], args: [{
                    selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',
                    exportAs: 'cdkOverlayOrigin',
                },] },
    ];
    /** @nocollapse */
    CdkOverlayOrigin.ctorParameters = function () { return [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"], },
    ]; };
    return CdkOverlayOrigin;
}());
/**
 * Directive to facilitate declarative creation of an Overlay using a ConnectedPositionStrategy.
 */
var CdkConnectedOverlay = /** @class */ (function () {
    // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.
    function CdkConnectedOverlay(_overlay, templateRef, viewContainerRef, _scrollStrategy, _dir) {
        this._overlay = _overlay;
        this._scrollStrategy = _scrollStrategy;
        this._dir = _dir;
        this._hasBackdrop = false;
        this._backdropSubscription = __WEBPACK_IMPORTED_MODULE_8_rxjs_Subscription__["Subscription"].EMPTY;
        this._offsetX = 0;
        this._offsetY = 0;
        /**
         * Strategy to be used when handling scroll events while the overlay is open.
         */
        this.scrollStrategy = this._scrollStrategy();
        /**
         * Whether the overlay is open.
         */
        this.open = false;
        /**
         * Event emitted when the backdrop is clicked.
         */
        this.backdropClick = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        /**
         * Event emitted when the position has changed.
         */
        this.positionChange = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        /**
         * Event emitted when the overlay has been attached.
         */
        this.attach = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        /**
         * Event emitted when the overlay has been detached.
         */
        this.detach = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this._templatePortal = new __WEBPACK_IMPORTED_MODULE_4__angular_cdk_portal__["TemplatePortal"](templateRef, viewContainerRef);
    }
    Object.defineProperty(CdkConnectedOverlay.prototype, "offsetX", {
        get: /**
         * The offset in pixels for the overlay connection point on the x-axis
         * @return {?}
         */
        function () { return this._offsetX; },
        set: /**
         * @param {?} offsetX
         * @return {?}
         */
        function (offsetX) {
            this._offsetX = offsetX;
            if (this._position) {
                this._position.withOffsetX(offsetX);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CdkConnectedOverlay.prototype, "offsetY", {
        get: /**
         * The offset in pixels for the overlay connection point on the y-axis
         * @return {?}
         */
        function () { return this._offsetY; },
        set: /**
         * @param {?} offsetY
         * @return {?}
         */
        function (offsetY) {
            this._offsetY = offsetY;
            if (this._position) {
                this._position.withOffsetY(offsetY);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CdkConnectedOverlay.prototype, "hasBackdrop", {
        get: /**
         * Whether or not the overlay should attach a backdrop.
         * @return {?}
         */
        function () { return this._hasBackdrop; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) { this._hasBackdrop = Object(__WEBPACK_IMPORTED_MODULE_11__angular_cdk_coercion__["coerceBooleanProperty"])(value); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CdkConnectedOverlay.prototype, "_deprecatedOrigin", {
        get: /**
         * @deprecated
         * \@deletion-target 6.0.0
         * @return {?}
         */
        function () { return this.origin; },
        set: /**
         * @param {?} _origin
         * @return {?}
         */
        function (_origin) { this.origin = _origin; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CdkConnectedOverlay.prototype, "_deprecatedPositions", {
        get: /**
         * @deprecated
         * \@deletion-target 6.0.0
         * @return {?}
         */
        function () { return this.positions; },
        set: /**
         * @param {?} _positions
         * @return {?}
         */
        function (_positions) { this.positions = _positions; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CdkConnectedOverlay.prototype, "_deprecatedOffsetX", {
        get: /**
         * @deprecated
         * \@deletion-target 6.0.0
         * @return {?}
         */
        function () { return this.offsetX; },
        set: /**
         * @param {?} _offsetX
         * @return {?}
         */
        function (_offsetX) { this.offsetX = _offsetX; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CdkConnectedOverlay.prototype, "_deprecatedOffsetY", {
        get: /**
         * @deprecated
         * \@deletion-target 6.0.0
         * @return {?}
         */
        function () { return this.offsetY; },
        set: /**
         * @param {?} _offsetY
         * @return {?}
         */
        function (_offsetY) { this.offsetY = _offsetY; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CdkConnectedOverlay.prototype, "_deprecatedWidth", {
        get: /**
         * @deprecated
         * \@deletion-target 6.0.0
         * @return {?}
         */
        function () { return this.width; },
        set: /**
         * @param {?} _width
         * @return {?}
         */
        function (_width) { this.width = _width; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CdkConnectedOverlay.prototype, "_deprecatedHeight", {
        get: /**
         * @deprecated
         * \@deletion-target 6.0.0
         * @return {?}
         */
        function () { return this.height; },
        set: /**
         * @param {?} _height
         * @return {?}
         */
        function (_height) { this.height = _height; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CdkConnectedOverlay.prototype, "_deprecatedMinWidth", {
        get: /**
         * @deprecated
         * \@deletion-target 6.0.0
         * @return {?}
         */
        function () { return this.minWidth; },
        set: /**
         * @param {?} _minWidth
         * @return {?}
         */
        function (_minWidth) { this.minWidth = _minWidth; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CdkConnectedOverlay.prototype, "_deprecatedMinHeight", {
        get: /**
         * @deprecated
         * \@deletion-target 6.0.0
         * @return {?}
         */
        function () { return this.minHeight; },
        set: /**
         * @param {?} _minHeight
         * @return {?}
         */
        function (_minHeight) { this.minHeight = _minHeight; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CdkConnectedOverlay.prototype, "_deprecatedBackdropClass", {
        get: /**
         * @deprecated
         * \@deletion-target 6.0.0
         * @return {?}
         */
        function () { return this.backdropClass; },
        set: /**
         * @param {?} _backdropClass
         * @return {?}
         */
        function (_backdropClass) { this.backdropClass = _backdropClass; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CdkConnectedOverlay.prototype, "_deprecatedScrollStrategy", {
        get: /**
         * @deprecated
         * \@deletion-target 6.0.0
         * @return {?}
         */
        function () { return this.scrollStrategy; },
        set: /**
         * @param {?} _scrollStrategy
         * @return {?}
         */
        function (_scrollStrategy) {
            this.scrollStrategy = _scrollStrategy;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CdkConnectedOverlay.prototype, "_deprecatedOpen", {
        get: /**
         * @deprecated
         * \@deletion-target 6.0.0
         * @return {?}
         */
        function () { return this.open; },
        set: /**
         * @param {?} _open
         * @return {?}
         */
        function (_open) { this.open = _open; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CdkConnectedOverlay.prototype, "_deprecatedHasBackdrop", {
        get: /**
         * @deprecated
         * \@deletion-target 6.0.0
         * @return {?}
         */
        function () { return this.hasBackdrop; },
        set: /**
         * @param {?} _hasBackdrop
         * @return {?}
         */
        function (_hasBackdrop) { this.hasBackdrop = _hasBackdrop; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CdkConnectedOverlay.prototype, "overlayRef", {
        /** The associated overlay reference. */
        get: /**
         * The associated overlay reference.
         * @return {?}
         */
        function () {
            return this._overlayRef;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CdkConnectedOverlay.prototype, "dir", {
        /** The element's layout direction. */
        get: /**
         * The element's layout direction.
         * @return {?}
         */
        function () {
            return this._dir ? this._dir.value : 'ltr';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    CdkConnectedOverlay.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._destroyOverlay();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    CdkConnectedOverlay.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (this._position) {
            if (changes['positions'] || changes['_deprecatedPositions']) {
                this._position.withPositions(this.positions);
            }
            if (changes['origin'] || changes['_deprecatedOrigin']) {
                this._position.setOrigin(this.origin.elementRef);
                if (this.open) {
                    this._position.apply();
                }
            }
        }
        if (changes['open'] || changes['_deprecatedOpen']) {
            this.open ? this._attachOverlay() : this._detachOverlay();
        }
    };
    /**
     * Creates an overlay
     * @return {?}
     */
    CdkConnectedOverlay.prototype._createOverlay = /**
     * Creates an overlay
     * @return {?}
     */
    function () {
        if (!this.positions || !this.positions.length) {
            this.positions = defaultPositionList;
        }
        this._overlayRef = this._overlay.create(this._buildConfig());
    };
    /**
     * Builds the overlay config based on the directive's inputs
     * @return {?}
     */
    CdkConnectedOverlay.prototype._buildConfig = /**
     * Builds the overlay config based on the directive's inputs
     * @return {?}
     */
    function () {
        var /** @type {?} */ positionStrategy = this._position = this._createPositionStrategy();
        var /** @type {?} */ overlayConfig = new OverlayConfig({
            positionStrategy: positionStrategy,
            scrollStrategy: this.scrollStrategy,
            hasBackdrop: this.hasBackdrop
        });
        if (this.width || this.width === 0) {
            overlayConfig.width = this.width;
        }
        if (this.height || this.height === 0) {
            overlayConfig.height = this.height;
        }
        if (this.minWidth || this.minWidth === 0) {
            overlayConfig.minWidth = this.minWidth;
        }
        if (this.minHeight || this.minHeight === 0) {
            overlayConfig.minHeight = this.minHeight;
        }
        if (this.backdropClass) {
            overlayConfig.backdropClass = this.backdropClass;
        }
        return overlayConfig;
    };
    /**
     * Returns the position strategy of the overlay to be set on the overlay config
     * @return {?}
     */
    CdkConnectedOverlay.prototype._createPositionStrategy = /**
     * Returns the position strategy of the overlay to be set on the overlay config
     * @return {?}
     */
    function () {
        var _this = this;
        var /** @type {?} */ primaryPosition = this.positions[0];
        var /** @type {?} */ originPoint = { originX: primaryPosition.originX, originY: primaryPosition.originY };
        var /** @type {?} */ overlayPoint = { overlayX: primaryPosition.overlayX, overlayY: primaryPosition.overlayY };
        var /** @type {?} */ strategy = this._overlay.position()
            .connectedTo(this.origin.elementRef, originPoint, overlayPoint)
            .withOffsetX(this.offsetX)
            .withOffsetY(this.offsetY);
        for (var /** @type {?} */ i = 1; i < this.positions.length; i++) {
            strategy.withFallbackPosition({ originX: this.positions[i].originX, originY: this.positions[i].originY }, { overlayX: this.positions[i].overlayX, overlayY: this.positions[i].overlayY });
        }
        strategy.onPositionChange.subscribe(function (pos) { return _this.positionChange.emit(pos); });
        return strategy;
    };
    /**
     * Attaches the overlay and subscribes to backdrop clicks if backdrop exists
     * @return {?}
     */
    CdkConnectedOverlay.prototype._attachOverlay = /**
     * Attaches the overlay and subscribes to backdrop clicks if backdrop exists
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this._overlayRef) {
            this._createOverlay(); /** @type {?} */
            ((this._overlayRef)).keydownEvents().subscribe(function (event) {
                if (event.keyCode === __WEBPACK_IMPORTED_MODULE_12__angular_cdk_keycodes__["ESCAPE"]) {
                    _this._detachOverlay();
                }
            });
        }
        else {
            // Update the overlay size, in case the directive's inputs have changed
            this._overlayRef.updateSize({
                width: this.width,
                minWidth: this.minWidth,
                height: this.height,
                minHeight: this.minHeight,
            });
        }
        this._position.withDirection(this.dir);
        this._overlayRef.setDirection(this.dir);
        if (!this._overlayRef.hasAttached()) {
            this._overlayRef.attach(this._templatePortal);
            this.attach.emit();
        }
        if (this.hasBackdrop) {
            this._backdropSubscription = this._overlayRef.backdropClick().subscribe(function () {
                _this.backdropClick.emit();
            });
        }
    };
    /**
     * Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists
     * @return {?}
     */
    CdkConnectedOverlay.prototype._detachOverlay = /**
     * Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists
     * @return {?}
     */
    function () {
        if (this._overlayRef) {
            this._overlayRef.detach();
            this.detach.emit();
        }
        this._backdropSubscription.unsubscribe();
    };
    /**
     * Destroys the overlay created by this directive.
     * @return {?}
     */
    CdkConnectedOverlay.prototype._destroyOverlay = /**
     * Destroys the overlay created by this directive.
     * @return {?}
     */
    function () {
        if (this._overlayRef) {
            this._overlayRef.dispose();
        }
        this._backdropSubscription.unsubscribe();
    };
    CdkConnectedOverlay.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"], args: [{
                    selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',
                    exportAs: 'cdkConnectedOverlay'
                },] },
    ];
    /** @nocollapse */
    CdkConnectedOverlay.ctorParameters = function () { return [
        { type: Overlay, },
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["TemplateRef"], },
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewContainerRef"], },
        { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"], args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,] },] },
        { type: __WEBPACK_IMPORTED_MODULE_3__angular_cdk_bidi__["Directionality"], decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"] },] },
    ]; };
    CdkConnectedOverlay.propDecorators = {
        "origin": [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"], args: ['cdkConnectedOverlayOrigin',] },],
        "positions": [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"], args: ['cdkConnectedOverlayPositions',] },],
        "offsetX": [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"], args: ['cdkConnectedOverlayOffsetX',] },],
        "offsetY": [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"], args: ['cdkConnectedOverlayOffsetY',] },],
        "width": [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"], args: ['cdkConnectedOverlayWidth',] },],
        "height": [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"], args: ['cdkConnectedOverlayHeight',] },],
        "minWidth": [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"], args: ['cdkConnectedOverlayMinWidth',] },],
        "minHeight": [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"], args: ['cdkConnectedOverlayMinHeight',] },],
        "backdropClass": [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"], args: ['cdkConnectedOverlayBackdropClass',] },],
        "scrollStrategy": [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"], args: ['cdkConnectedOverlayScrollStrategy',] },],
        "open": [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"], args: ['cdkConnectedOverlayOpen',] },],
        "hasBackdrop": [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"], args: ['cdkConnectedOverlayHasBackdrop',] },],
        "_deprecatedOrigin": [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"], args: ['origin',] },],
        "_deprecatedPositions": [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"], args: ['positions',] },],
        "_deprecatedOffsetX": [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"], args: ['offsetX',] },],
        "_deprecatedOffsetY": [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"], args: ['offsetY',] },],
        "_deprecatedWidth": [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"], args: ['width',] },],
        "_deprecatedHeight": [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"], args: ['height',] },],
        "_deprecatedMinWidth": [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"], args: ['minWidth',] },],
        "_deprecatedMinHeight": [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"], args: ['minHeight',] },],
        "_deprecatedBackdropClass": [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"], args: ['backdropClass',] },],
        "_deprecatedScrollStrategy": [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"], args: ['scrollStrategy',] },],
        "_deprecatedOpen": [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"], args: ['open',] },],
        "_deprecatedHasBackdrop": [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"], args: ['hasBackdrop',] },],
        "backdropClick": [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"] },],
        "positionChange": [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"] },],
        "attach": [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"] },],
        "detach": [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"] },],
    };
    return CdkConnectedOverlay;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var OVERLAY_PROVIDERS = [
    Overlay,
    OverlayPositionBuilder,
    OVERLAY_KEYBOARD_DISPATCHER_PROVIDER,
    __WEBPACK_IMPORTED_MODULE_1__angular_cdk_scrolling__["VIEWPORT_RULER_PROVIDER"],
    OVERLAY_CONTAINER_PROVIDER,
    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,
];
var OverlayModule = /** @class */ (function () {
    function OverlayModule() {
    }
    OverlayModule.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgModule"], args: [{
                    imports: [__WEBPACK_IMPORTED_MODULE_3__angular_cdk_bidi__["BidiModule"], __WEBPACK_IMPORTED_MODULE_4__angular_cdk_portal__["PortalModule"], __WEBPACK_IMPORTED_MODULE_1__angular_cdk_scrolling__["ScrollDispatchModule"]],
                    exports: [CdkConnectedOverlay, CdkOverlayOrigin, __WEBPACK_IMPORTED_MODULE_1__angular_cdk_scrolling__["ScrollDispatchModule"]],
                    declarations: [CdkConnectedOverlay, CdkOverlayOrigin],
                    providers: [OVERLAY_PROVIDERS, ScrollStrategyOptions],
                },] },
    ];
    /** @nocollapse */
    OverlayModule.ctorParameters = function () { return []; };
    return OverlayModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * Alternative to OverlayContainer that supports correct displaying of overlay elements in
 * Fullscreen mode
 * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen
 *
 * Should be provided in the root component.
 */
var FullscreenOverlayContainer = /** @class */ (function (_super) {
    Object(__WEBPACK_IMPORTED_MODULE_5_tslib__["__extends"])(FullscreenOverlayContainer, _super);
    function FullscreenOverlayContainer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @return {?}
     */
    FullscreenOverlayContainer.prototype._createContainer = /**
     * @return {?}
     */
    function () {
        var _this = this;
        _super.prototype._createContainer.call(this);
        this._adjustParentForFullscreenChange();
        this._addFullscreenChangeListener(function () { return _this._adjustParentForFullscreenChange(); });
    };
    /**
     * @return {?}
     */
    FullscreenOverlayContainer.prototype._adjustParentForFullscreenChange = /**
     * @return {?}
     */
    function () {
        if (!this._containerElement) {
            return;
        }
        var /** @type {?} */ fullscreenElement = this.getFullscreenElement();
        var /** @type {?} */ parent = fullscreenElement || document.body;
        parent.appendChild(this._containerElement);
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    FullscreenOverlayContainer.prototype._addFullscreenChangeListener = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        if (document.fullscreenEnabled) {
            document.addEventListener('fullscreenchange', fn);
        }
        else if (document.webkitFullscreenEnabled) {
            document.addEventListener('webkitfullscreenchange', fn);
        }
        else if ((/** @type {?} */ (document)).mozFullScreenEnabled) {
            document.addEventListener('mozfullscreenchange', fn);
        }
        else if ((/** @type {?} */ (document)).msFullscreenEnabled) {
            document.addEventListener('MSFullscreenChange', fn);
        }
    };
    /**
     * When the page is put into fullscreen mode, a specific element is specified.
     * Only that element and its children are visible when in fullscreen mode.
     */
    /**
     * When the page is put into fullscreen mode, a specific element is specified.
     * Only that element and its children are visible when in fullscreen mode.
     * @return {?}
     */
    FullscreenOverlayContainer.prototype.getFullscreenElement = /**
     * When the page is put into fullscreen mode, a specific element is specified.
     * Only that element and its children are visible when in fullscreen mode.
     * @return {?}
     */
    function () {
        return document.fullscreenElement ||
            document.webkitFullscreenElement ||
            (/** @type {?} */ (document)).mozFullScreenElement ||
            (/** @type {?} */ (document)).msFullscreenElement ||
            null;
    };
    FullscreenOverlayContainer.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"] },
    ];
    /** @nocollapse */
    FullscreenOverlayContainer.ctorParameters = function () { return []; };
    return FullscreenOverlayContainer;
}(OverlayContainer));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=overlay.es5.js.map


/***/ }),

/***/ "./node_modules/@angular/cdk/esm5/platform.es5.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Platform", function() { return Platform; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "supportsPassiveEventListeners", function() { return supportsPassiveEventListeners; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSupportedInputTypes", function() { return getSupportedInputTypes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PlatformModule", function() { return PlatformModule; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

// Whether the current platform supports the V8 Break Iterator. The V8 check
// is necessary to detect all Blink based browsers.
var hasV8BreakIterator = (typeof (Intl) !== 'undefined' && (/** @type {?} */ (Intl)).v8BreakIterator);
/**
 * Service to detect the current platform by comparing the userAgent strings and
 * checking browser-specific global properties.
 */
var Platform = /** @class */ (function () {
    function Platform() {
        /**
         * Whether the Angular application is being rendered in the browser.
         */
        this.isBrowser = typeof document === 'object' && !!document;
        /**
         * Whether the current browser is Microsoft Edge.
         */
        this.EDGE = this.isBrowser && /(edge)/i.test(navigator.userAgent);
        /**
         * Whether the current rendering engine is Microsoft Trident.
         */
        this.TRIDENT = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent);
        /**
         * Whether the current rendering engine is Blink.
         */
        this.BLINK = this.isBrowser &&
            (!!((/** @type {?} */ (window)).chrome || hasV8BreakIterator) && !!CSS && !this.EDGE && !this.TRIDENT);
        /**
         * Whether the current rendering engine is WebKit.
         */
        this.WEBKIT = this.isBrowser &&
            /AppleWebKit/i.test(navigator.userAgent) && !this.BLINK && !this.EDGE && !this.TRIDENT;
        /**
         * Whether the current platform is Apple iOS.
         */
        this.IOS = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) &&
            !(/** @type {?} */ (window)).MSStream;
        /**
         * Whether the current browser is Firefox.
         */
        this.FIREFOX = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent);
        /**
         * Whether the current platform is Android.
         */
        this.ANDROID = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT;
        /**
         * Whether the current browser is Safari.
         */
        this.SAFARI = this.isBrowser && /safari/i.test(navigator.userAgent) && this.WEBKIT;
    }
    Platform.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"] },
    ];
    /** @nocollapse */
    Platform.ctorParameters = function () { return []; };
    return Platform;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * Cached result of whether the user's browser supports passive event listeners.
 */
var supportsPassiveEvents;
/**
 * Checks whether the user's browser supports passive event listeners.
 * See: https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md
 * @return {?}
 */
function supportsPassiveEventListeners() {
    if (supportsPassiveEvents == null && typeof window !== 'undefined') {
        try {
            window.addEventListener('test', /** @type {?} */ ((null)), Object.defineProperty({}, 'passive', {
                get: function () { return supportsPassiveEvents = true; }
            }));
        }
        finally {
            supportsPassiveEvents = supportsPassiveEvents || false;
        }
    }
    return supportsPassiveEvents;
}
/**
 * Cached result Set of input types support by the current browser.
 */
var supportedInputTypes;
/**
 * Types of `<input>` that *might* be supported.
 */
var candidateInputTypes = [
    'color',
    'button',
    'checkbox',
    'date',
    'datetime-local',
    'email',
    'file',
    'hidden',
    'image',
    'month',
    'number',
    'password',
    'radio',
    'range',
    'reset',
    'search',
    'submit',
    'tel',
    'text',
    'time',
    'url',
    'week',
];
/**
 * @return {?} The input types supported by this browser.
 */
function getSupportedInputTypes() {
    // Result is cached.
    if (supportedInputTypes) {
        return supportedInputTypes;
    }
    // We can't check if an input type is not supported until we're on the browser, so say that
    // everything is supported when not on the browser. We don't use `Platform` here since it's
    // just a helper function and can't inject it.
    if (typeof document !== 'object' || !document) {
        supportedInputTypes = new Set(candidateInputTypes);
        return supportedInputTypes;
    }
    var /** @type {?} */ featureTestInput = document.createElement('input');
    supportedInputTypes = new Set(candidateInputTypes.filter(function (value) {
        featureTestInput.setAttribute('type', value);
        return featureTestInput.type === value;
    }));
    return supportedInputTypes;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var PlatformModule = /** @class */ (function () {
    function PlatformModule() {
    }
    PlatformModule.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgModule"], args: [{
                    providers: [Platform]
                },] },
    ];
    /** @nocollapse */
    PlatformModule.ctorParameters = function () { return []; };
    return PlatformModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=platform.es5.js.map


/***/ }),

/***/ "./node_modules/@angular/cdk/esm5/portal.es5.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DomPortalHost", function() { return DomPortalOutlet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PortalHostDirective", function() { return CdkPortalOutlet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TemplatePortalDirective", function() { return CdkPortal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BasePortalHost", function() { return BasePortalOutlet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Portal", function() { return Portal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ComponentPortal", function() { return ComponentPortal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TemplatePortal", function() { return TemplatePortal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BasePortalOutlet", function() { return BasePortalOutlet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DomPortalOutlet", function() { return DomPortalOutlet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkPortal", function() { return CdkPortal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkPortalOutlet", function() { return CdkPortalOutlet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PortalModule", function() { return PortalModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PortalInjector", function() { return PortalInjector; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__("./node_modules/tslib/tslib.es6.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_core__ = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */




/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * Throws an exception when attempting to attach a null portal to a host.
 * \@docs-private
 * @return {?}
 */
function throwNullPortalError() {
    throw Error('Must provide a portal to attach');
}
/**
 * Throws an exception when attempting to attach a portal to a host that is already attached.
 * \@docs-private
 * @return {?}
 */
function throwPortalAlreadyAttachedError() {
    throw Error('Host already has a portal attached');
}
/**
 * Throws an exception when attempting to attach a portal to an already-disposed host.
 * \@docs-private
 * @return {?}
 */
function throwPortalOutletAlreadyDisposedError() {
    throw Error('This PortalOutlet has already been disposed');
}
/**
 * Throws an exception when attempting to attach an unknown portal type.
 * \@docs-private
 * @return {?}
 */
function throwUnknownPortalTypeError() {
    throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' +
        'a ComponentPortal or a TemplatePortal.');
}
/**
 * Throws an exception when attempting to attach a portal to a null host.
 * \@docs-private
 * @return {?}
 */
function throwNullPortalOutletError() {
    throw Error('Attempting to attach a portal to a null PortalOutlet');
}
/**
 * Throws an exception when attempting to detach a portal that is not attached.
 * \@docs-private
 * @return {?}
 */
function throwNoPortalAttachedError() {
    throw Error('Attempting to detach a portal that is not attached to a host');
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * Interface that can be used to generically type a class.
 * @record
 */

/**
 * A `Portal` is something that you want to render somewhere else.
 * It can be attach to / detached from a `PortalOutlet`.
 * @abstract
 */
var Portal = /** @class */ (function () {
    function Portal() {
    }
    /** Attach this portal to a host. */
    /**
     * Attach this portal to a host.
     * @param {?} host
     * @return {?}
     */
    Portal.prototype.attach = /**
     * Attach this portal to a host.
     * @param {?} host
     * @return {?}
     */
    function (host) {
        if (host == null) {
            throwNullPortalOutletError();
        }
        if (host.hasAttached()) {
            throwPortalAlreadyAttachedError();
        }
        this._attachedHost = host;
        return /** @type {?} */ (host.attach(this));
    };
    /** Detach this portal from its host */
    /**
     * Detach this portal from its host
     * @return {?}
     */
    Portal.prototype.detach = /**
     * Detach this portal from its host
     * @return {?}
     */
    function () {
        var /** @type {?} */ host = this._attachedHost;
        if (host == null) {
            throwNoPortalAttachedError();
        }
        else {
            this._attachedHost = null;
            host.detach();
        }
    };
    Object.defineProperty(Portal.prototype, "isAttached", {
        /** Whether this portal is attached to a host. */
        get: /**
         * Whether this portal is attached to a host.
         * @return {?}
         */
        function () {
            return this._attachedHost != null;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by
     * the PortalOutlet when it is performing an `attach()` or `detach()`.
     */
    /**
     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by
     * the PortalOutlet when it is performing an `attach()` or `detach()`.
     * @param {?} host
     * @return {?}
     */
    Portal.prototype.setAttachedHost = /**
     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by
     * the PortalOutlet when it is performing an `attach()` or `detach()`.
     * @param {?} host
     * @return {?}
     */
    function (host) {
        this._attachedHost = host;
    };
    return Portal;
}());
/**
 * A `ComponentPortal` is a portal that instantiates some Component upon attachment.
 */
var ComponentPortal = /** @class */ (function (_super) {
    Object(__WEBPACK_IMPORTED_MODULE_0_tslib__["__extends"])(ComponentPortal, _super);
    function ComponentPortal(component, viewContainerRef, injector) {
        var _this = _super.call(this) || this;
        _this.component = component;
        _this.viewContainerRef = viewContainerRef;
        _this.injector = injector;
        return _this;
    }
    return ComponentPortal;
}(Portal));
/**
 * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).
 */
var TemplatePortal = /** @class */ (function (_super) {
    Object(__WEBPACK_IMPORTED_MODULE_0_tslib__["__extends"])(TemplatePortal, _super);
    function TemplatePortal(template, viewContainerRef, context) {
        var _this = _super.call(this) || this;
        _this.templateRef = template;
        _this.viewContainerRef = viewContainerRef;
        _this.context = context;
        return _this;
    }
    Object.defineProperty(TemplatePortal.prototype, "origin", {
        get: /**
         * @return {?}
         */
        function () {
            return this.templateRef.elementRef;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Attach the the portal to the provided `PortalOutlet`.
     * When a context is provided it will override the `context` property of the `TemplatePortal`
     * instance.
     */
    /**
     * Attach the the portal to the provided `PortalOutlet`.
     * When a context is provided it will override the `context` property of the `TemplatePortal`
     * instance.
     * @param {?} host
     * @param {?=} context
     * @return {?}
     */
    TemplatePortal.prototype.attach = /**
     * Attach the the portal to the provided `PortalOutlet`.
     * When a context is provided it will override the `context` property of the `TemplatePortal`
     * instance.
     * @param {?} host
     * @param {?=} context
     * @return {?}
     */
    function (host, context) {
        if (context === void 0) { context = this.context; }
        this.context = context;
        return _super.prototype.attach.call(this, host);
    };
    /**
     * @return {?}
     */
    TemplatePortal.prototype.detach = /**
     * @return {?}
     */
    function () {
        this.context = undefined;
        return _super.prototype.detach.call(this);
    };
    return TemplatePortal;
}(Portal));
/**
 * A `PortalOutlet` is an space that can contain a single `Portal`.
 * @record
 */

/**
 * Partial implementation of PortalOutlet that handles attaching
 * ComponentPortal and TemplatePortal.
 * @abstract
 */
var BasePortalOutlet = /** @class */ (function () {
    function BasePortalOutlet() {
        /**
         * Whether this host has already been permanently disposed.
         */
        this._isDisposed = false;
    }
    /** Whether this host has an attached portal. */
    /**
     * Whether this host has an attached portal.
     * @return {?}
     */
    BasePortalOutlet.prototype.hasAttached = /**
     * Whether this host has an attached portal.
     * @return {?}
     */
    function () {
        return !!this._attachedPortal;
    };
    /** Attaches a portal. */
    /**
     * Attaches a portal.
     * @param {?} portal
     * @return {?}
     */
    BasePortalOutlet.prototype.attach = /**
     * Attaches a portal.
     * @param {?} portal
     * @return {?}
     */
    function (portal) {
        if (!portal) {
            throwNullPortalError();
        }
        if (this.hasAttached()) {
            throwPortalAlreadyAttachedError();
        }
        if (this._isDisposed) {
            throwPortalOutletAlreadyDisposedError();
        }
        if (portal instanceof ComponentPortal) {
            this._attachedPortal = portal;
            return this.attachComponentPortal(portal);
        }
        else if (portal instanceof TemplatePortal) {
            this._attachedPortal = portal;
            return this.attachTemplatePortal(portal);
        }
        throwUnknownPortalTypeError();
    };
    /** Detaches a previously attached portal. */
    /**
     * Detaches a previously attached portal.
     * @return {?}
     */
    BasePortalOutlet.prototype.detach = /**
     * Detaches a previously attached portal.
     * @return {?}
     */
    function () {
        if (this._attachedPortal) {
            this._attachedPortal.setAttachedHost(null);
            this._attachedPortal = null;
        }
        this._invokeDisposeFn();
    };
    /** Permanently dispose of this portal host. */
    /**
     * Permanently dispose of this portal host.
     * @return {?}
     */
    BasePortalOutlet.prototype.dispose = /**
     * Permanently dispose of this portal host.
     * @return {?}
     */
    function () {
        if (this.hasAttached()) {
            this.detach();
        }
        this._invokeDisposeFn();
        this._isDisposed = true;
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @param {?} fn
     * @return {?}
     */
    BasePortalOutlet.prototype.setDisposeFn = /**
     * \@docs-private
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._disposeFn = fn;
    };
    /**
     * @return {?}
     */
    BasePortalOutlet.prototype._invokeDisposeFn = /**
     * @return {?}
     */
    function () {
        if (this._disposeFn) {
            this._disposeFn();
            this._disposeFn = null;
        }
    };
    return BasePortalOutlet;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular
 * application context.
 */
var DomPortalOutlet = /** @class */ (function (_super) {
    Object(__WEBPACK_IMPORTED_MODULE_0_tslib__["__extends"])(DomPortalOutlet, _super);
    function DomPortalOutlet(outletElement, _componentFactoryResolver, _appRef, _defaultInjector) {
        var _this = _super.call(this) || this;
        _this.outletElement = outletElement;
        _this._componentFactoryResolver = _componentFactoryResolver;
        _this._appRef = _appRef;
        _this._defaultInjector = _defaultInjector;
        return _this;
    }
    /**
     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.
     * @param portal Portal to be attached
     * @returns Reference to the created component.
     */
    /**
     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.
     * @template T
     * @param {?} portal Portal to be attached
     * @return {?} Reference to the created component.
     */
    DomPortalOutlet.prototype.attachComponentPortal = /**
     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.
     * @template T
     * @param {?} portal Portal to be attached
     * @return {?} Reference to the created component.
     */
    function (portal) {
        var _this = this;
        var /** @type {?} */ componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);
        var /** @type {?} */ componentRef;
        // If the portal specifies a ViewContainerRef, we will use that as the attachment point
        // for the component (in terms of Angular's component tree, not rendering).
        // When the ViewContainerRef is missing, we use the factory to create the component directly
        // and then manually attach the view to the application.
        if (portal.viewContainerRef) {
            componentRef = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.injector || portal.viewContainerRef.parentInjector);
            this.setDisposeFn(function () { return componentRef.destroy(); });
        }
        else {
            componentRef = componentFactory.create(portal.injector || this._defaultInjector);
            this._appRef.attachView(componentRef.hostView);
            this.setDisposeFn(function () {
                _this._appRef.detachView(componentRef.hostView);
                componentRef.destroy();
            });
        }
        // At this point the component has been instantiated, so we move it to the location in the DOM
        // where we want it to be rendered.
        this.outletElement.appendChild(this._getComponentRootNode(componentRef));
        return componentRef;
    };
    /**
     * Attaches a template portal to the DOM as an embedded view.
     * @param portal Portal to be attached.
     * @returns Reference to the created embedded view.
     */
    /**
     * Attaches a template portal to the DOM as an embedded view.
     * @template C
     * @param {?} portal Portal to be attached.
     * @return {?} Reference to the created embedded view.
     */
    DomPortalOutlet.prototype.attachTemplatePortal = /**
     * Attaches a template portal to the DOM as an embedded view.
     * @template C
     * @param {?} portal Portal to be attached.
     * @return {?} Reference to the created embedded view.
     */
    function (portal) {
        var _this = this;
        var /** @type {?} */ viewContainer = portal.viewContainerRef;
        var /** @type {?} */ viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context);
        viewRef.detectChanges();
        // The method `createEmbeddedView` will add the view as a child of the viewContainer.
        // But for the DomPortalOutlet the view can be added everywhere in the DOM
        // (e.g Overlay Container) To move the view to the specified host element. We just
        // re-append the existing root nodes.
        viewRef.rootNodes.forEach(function (rootNode) { return _this.outletElement.appendChild(rootNode); });
        this.setDisposeFn((function () {
            var /** @type {?} */ index = viewContainer.indexOf(viewRef);
            if (index !== -1) {
                viewContainer.remove(index);
            }
        }));
        // TODO(jelbourn): Return locals from view.
        return viewRef;
    };
    /**
     * Clears out a portal from the DOM.
     */
    /**
     * Clears out a portal from the DOM.
     * @return {?}
     */
    DomPortalOutlet.prototype.dispose = /**
     * Clears out a portal from the DOM.
     * @return {?}
     */
    function () {
        _super.prototype.dispose.call(this);
        if (this.outletElement.parentNode != null) {
            this.outletElement.parentNode.removeChild(this.outletElement);
        }
    };
    /**
     * Gets the root HTMLElement for an instantiated component.
     * @param {?} componentRef
     * @return {?}
     */
    DomPortalOutlet.prototype._getComponentRootNode = /**
     * Gets the root HTMLElement for an instantiated component.
     * @param {?} componentRef
     * @return {?}
     */
    function (componentRef) {
        return /** @type {?} */ ((/** @type {?} */ (componentRef.hostView)).rootNodes[0]);
    };
    return DomPortalOutlet;
}(BasePortalOutlet));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,
 * the directive instance itself can be attached to a host, enabling declarative use of portals.
 */
var CdkPortal = /** @class */ (function (_super) {
    Object(__WEBPACK_IMPORTED_MODULE_0_tslib__["__extends"])(CdkPortal, _super);
    function CdkPortal(templateRef, viewContainerRef) {
        return _super.call(this, templateRef, viewContainerRef) || this;
    }
    CdkPortal.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["Directive"], args: [{
                    selector: '[cdk-portal], [cdkPortal], [portal]',
                    exportAs: 'cdkPortal',
                },] },
    ];
    /** @nocollapse */
    CdkPortal.ctorParameters = function () { return [
        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["TemplateRef"], },
        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["ViewContainerRef"], },
    ]; };
    return CdkPortal;
}(TemplatePortal));
/**
 * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be
 * directly attached to it, enabling declarative use.
 *
 * Usage:
 * `<ng-template [cdkPortalOutlet]="greeting"></ng-template>`
 */
var CdkPortalOutlet = /** @class */ (function (_super) {
    Object(__WEBPACK_IMPORTED_MODULE_0_tslib__["__extends"])(CdkPortalOutlet, _super);
    function CdkPortalOutlet(_componentFactoryResolver, _viewContainerRef) {
        var _this = _super.call(this) || this;
        _this._componentFactoryResolver = _componentFactoryResolver;
        _this._viewContainerRef = _viewContainerRef;
        /**
         * Whether the portal component is initialized.
         */
        _this._isInitialized = false;
        _this.attached = new __WEBPACK_IMPORTED_MODULE_1__angular_core__["EventEmitter"]();
        return _this;
    }
    Object.defineProperty(CdkPortalOutlet.prototype, "_deprecatedPortal", {
        get: /**
         * @deprecated
         * \@deletion-target 6.0.0
         * @return {?}
         */
        function () { return this.portal; },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) { this.portal = v; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CdkPortalOutlet.prototype, "_deprecatedPortalHost", {
        get: /**
         * @deprecated
         * \@deletion-target 6.0.0
         * @return {?}
         */
        function () { return this.portal; },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) { this.portal = v; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CdkPortalOutlet.prototype, "portal", {
        /** Portal associated with the Portal outlet. */
        get: /**
         * Portal associated with the Portal outlet.
         * @return {?}
         */
        function () {
            return this._attachedPortal;
        },
        set: /**
         * @param {?} portal
         * @return {?}
         */
        function (portal) {
            // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have
            // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`
            // and attach a portal programmatically in the parent component. When Angular does the first CD
            // round, it will fire the setter with empty string, causing the user's content to be cleared.
            if (this.hasAttached() && !portal && !this._isInitialized) {
                return;
            }
            if (this.hasAttached()) {
                _super.prototype.detach.call(this);
            }
            if (portal) {
                _super.prototype.attach.call(this, portal);
            }
            this._attachedPortal = portal;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CdkPortalOutlet.prototype, "attachedRef", {
        /** Component or view reference that is attached to the portal. */
        get: /**
         * Component or view reference that is attached to the portal.
         * @return {?}
         */
        function () {
            return this._attachedRef;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    CdkPortalOutlet.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this._isInitialized = true;
    };
    /**
     * @return {?}
     */
    CdkPortalOutlet.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        _super.prototype.dispose.call(this);
        this._attachedPortal = null;
        this._attachedRef = null;
    };
    /**
     * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.
     *
     * @param portal Portal to be attached to the portal outlet.
     * @returns Reference to the created component.
     */
    /**
     * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.
     *
     * @template T
     * @param {?} portal Portal to be attached to the portal outlet.
     * @return {?} Reference to the created component.
     */
    CdkPortalOutlet.prototype.attachComponentPortal = /**
     * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.
     *
     * @template T
     * @param {?} portal Portal to be attached to the portal outlet.
     * @return {?} Reference to the created component.
     */
    function (portal) {
        portal.setAttachedHost(this);
        // If the portal specifies an origin, use that as the logical location of the component
        // in the application tree. Otherwise use the location of this PortalOutlet.
        var /** @type {?} */ viewContainerRef = portal.viewContainerRef != null ?
            portal.viewContainerRef :
            this._viewContainerRef;
        var /** @type {?} */ componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);
        var /** @type {?} */ ref = viewContainerRef.createComponent(componentFactory, viewContainerRef.length, portal.injector || viewContainerRef.parentInjector);
        _super.prototype.setDisposeFn.call(this, function () { return ref.destroy(); });
        this._attachedPortal = portal;
        this._attachedRef = ref;
        this.attached.emit(ref);
        return ref;
    };
    /**
     * Attach the given TemplatePortal to this PortlHost as an embedded View.
     * @param portal Portal to be attached.
     * @returns Reference to the created embedded view.
     */
    /**
     * Attach the given TemplatePortal to this PortlHost as an embedded View.
     * @template C
     * @param {?} portal Portal to be attached.
     * @return {?} Reference to the created embedded view.
     */
    CdkPortalOutlet.prototype.attachTemplatePortal = /**
     * Attach the given TemplatePortal to this PortlHost as an embedded View.
     * @template C
     * @param {?} portal Portal to be attached.
     * @return {?} Reference to the created embedded view.
     */
    function (portal) {
        var _this = this;
        portal.setAttachedHost(this);
        var /** @type {?} */ viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context);
        _super.prototype.setDisposeFn.call(this, function () { return _this._viewContainerRef.clear(); });
        this._attachedPortal = portal;
        this._attachedRef = viewRef;
        this.attached.emit(viewRef);
        return viewRef;
    };
    CdkPortalOutlet.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["Directive"], args: [{
                    selector: '[cdkPortalOutlet], [cdkPortalHost], [portalHost]',
                    exportAs: 'cdkPortalOutlet, cdkPortalHost',
                    inputs: ['portal: cdkPortalOutlet']
                },] },
    ];
    /** @nocollapse */
    CdkPortalOutlet.ctorParameters = function () { return [
        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["ComponentFactoryResolver"], },
        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["ViewContainerRef"], },
    ]; };
    CdkPortalOutlet.propDecorators = {
        "_deprecatedPortal": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["Input"], args: ['portalHost',] },],
        "_deprecatedPortalHost": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["Input"], args: ['cdkPortalHost',] },],
        "attached": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["Output"], args: ['attached',] },],
    };
    return CdkPortalOutlet;
}(BasePortalOutlet));
var PortalModule = /** @class */ (function () {
    function PortalModule() {
    }
    PortalModule.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["NgModule"], args: [{
                    exports: [CdkPortal, CdkPortalOutlet],
                    declarations: [CdkPortal, CdkPortalOutlet],
                },] },
    ];
    /** @nocollapse */
    PortalModule.ctorParameters = function () { return []; };
    return PortalModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * Custom injector to be used when providing custom
 * injection tokens to components inside a portal.
 * \@docs-private
 */
var PortalInjector = /** @class */ (function () {
    function PortalInjector(_parentInjector, _customTokens) {
        this._parentInjector = _parentInjector;
        this._customTokens = _customTokens;
    }
    /**
     * @param {?} token
     * @param {?=} notFoundValue
     * @return {?}
     */
    PortalInjector.prototype.get = /**
     * @param {?} token
     * @param {?=} notFoundValue
     * @return {?}
     */
    function (token, notFoundValue) {
        var /** @type {?} */ value = this._customTokens.get(token);
        if (typeof value !== 'undefined') {
            return value;
        }
        return this._parentInjector.get(token, notFoundValue);
    };
    return PortalInjector;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=portal.es5.js.map


/***/ }),

/***/ "./node_modules/@angular/cdk/esm5/scrolling.es5.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_SCROLL_TIME", function() { return DEFAULT_SCROLL_TIME; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ScrollDispatcher", function() { return ScrollDispatcher; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SCROLL_DISPATCHER_PROVIDER_FACTORY", function() { return SCROLL_DISPATCHER_PROVIDER_FACTORY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SCROLL_DISPATCHER_PROVIDER", function() { return SCROLL_DISPATCHER_PROVIDER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CdkScrollable", function() { return CdkScrollable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_RESIZE_TIME", function() { return DEFAULT_RESIZE_TIME; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ViewportRuler", function() { return ViewportRuler; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VIEWPORT_RULER_PROVIDER_FACTORY", function() { return VIEWPORT_RULER_PROVIDER_FACTORY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VIEWPORT_RULER_PROVIDER", function() { return VIEWPORT_RULER_PROVIDER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ScrollDispatchModule", function() { return ScrollDispatchModule; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_cdk_platform__ = __webpack_require__("./node_modules/@angular/cdk/esm5/platform.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_Subject__ = __webpack_require__("./node_modules/rxjs/Subject.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_Subject___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_rxjs_Subject__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_rxjs_Observable__ = __webpack_require__("./node_modules/rxjs/Observable.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_rxjs_Observable___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_rxjs_Observable__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_rxjs_observable_of__ = __webpack_require__("./node_modules/rxjs/observable/of.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_rxjs_observable_of___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_rxjs_observable_of__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_rxjs_observable_fromEvent__ = __webpack_require__("./node_modules/rxjs/observable/fromEvent.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_rxjs_observable_fromEvent___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_rxjs_observable_fromEvent__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_rxjs_operators_auditTime__ = __webpack_require__("./node_modules/rxjs/operators/auditTime.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_rxjs_operators_auditTime___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_rxjs_operators_auditTime__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_rxjs_operators_filter__ = __webpack_require__("./node_modules/rxjs/operators/filter.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_rxjs_operators_filter___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_rxjs_operators_filter__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_rxjs_observable_merge__ = __webpack_require__("./node_modules/rxjs/observable/merge.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_rxjs_observable_merge___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8_rxjs_observable_merge__);
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */










/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * Time in ms to throttle the scrolling events by default.
 */
var DEFAULT_SCROLL_TIME = 20;
/**
 * Service contained all registered Scrollable references and emits an event when any one of the
 * Scrollable references emit a scrolled event.
 */
var ScrollDispatcher = /** @class */ (function () {
    function ScrollDispatcher(_ngZone, _platform) {
        this._ngZone = _ngZone;
        this._platform = _platform;
        /**
         * Subject for notifying that a registered scrollable reference element has been scrolled.
         */
        this._scrolled = new __WEBPACK_IMPORTED_MODULE_2_rxjs_Subject__["Subject"]();
        /**
         * Keeps track of the global `scroll` and `resize` subscriptions.
         */
        this._globalSubscription = null;
        /**
         * Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards.
         */
        this._scrolledCount = 0;
        /**
         * Map of all the scrollable references that are registered with the service and their
         * scroll event subscriptions.
         */
        this.scrollContainers = new Map();
    }
    /**
     * Registers a scrollable instance with the service and listens for its scrolled events. When the
     * scrollable is scrolled, the service emits the event to its scrolled observable.
     * @param scrollable Scrollable instance to be registered.
     */
    /**
     * Registers a scrollable instance with the service and listens for its scrolled events. When the
     * scrollable is scrolled, the service emits the event to its scrolled observable.
     * @param {?} scrollable Scrollable instance to be registered.
     * @return {?}
     */
    ScrollDispatcher.prototype.register = /**
     * Registers a scrollable instance with the service and listens for its scrolled events. When the
     * scrollable is scrolled, the service emits the event to its scrolled observable.
     * @param {?} scrollable Scrollable instance to be registered.
     * @return {?}
     */
    function (scrollable) {
        var _this = this;
        var /** @type {?} */ scrollSubscription = scrollable.elementScrolled()
            .subscribe(function () { return _this._scrolled.next(scrollable); });
        this.scrollContainers.set(scrollable, scrollSubscription);
    };
    /**
     * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.
     * @param scrollable Scrollable instance to be deregistered.
     */
    /**
     * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.
     * @param {?} scrollable Scrollable instance to be deregistered.
     * @return {?}
     */
    ScrollDispatcher.prototype.deregister = /**
     * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.
     * @param {?} scrollable Scrollable instance to be deregistered.
     * @return {?}
     */
    function (scrollable) {
        var /** @type {?} */ scrollableReference = this.scrollContainers.get(scrollable);
        if (scrollableReference) {
            scrollableReference.unsubscribe();
            this.scrollContainers.delete(scrollable);
        }
    };
    /**
     * Returns an observable that emits an event whenever any of the registered Scrollable
     * references (or window, document, or body) fire a scrolled event. Can provide a time in ms
     * to override the default "throttle" time.
     *
     * **Note:** in order to avoid hitting change detection for every scroll event,
     * all of the events emitted from this stream will be run outside the Angular zone.
     * If you need to update any data bindings as a result of a scroll event, you have
     * to run the callback using `NgZone.run`.
     */
    /**
     * Returns an observable that emits an event whenever any of the registered Scrollable
     * references (or window, document, or body) fire a scrolled event. Can provide a time in ms
     * to override the default "throttle" time.
     *
     * **Note:** in order to avoid hitting change detection for every scroll event,
     * all of the events emitted from this stream will be run outside the Angular zone.
     * If you need to update any data bindings as a result of a scroll event, you have
     * to run the callback using `NgZone.run`.
     * @param {?=} auditTimeInMs
     * @return {?}
     */
    ScrollDispatcher.prototype.scrolled = /**
     * Returns an observable that emits an event whenever any of the registered Scrollable
     * references (or window, document, or body) fire a scrolled event. Can provide a time in ms
     * to override the default "throttle" time.
     *
     * **Note:** in order to avoid hitting change detection for every scroll event,
     * all of the events emitted from this stream will be run outside the Angular zone.
     * If you need to update any data bindings as a result of a scroll event, you have
     * to run the callback using `NgZone.run`.
     * @param {?=} auditTimeInMs
     * @return {?}
     */
    function (auditTimeInMs) {
        var _this = this;
        if (auditTimeInMs === void 0) { auditTimeInMs = DEFAULT_SCROLL_TIME; }
        return this._platform.isBrowser ? __WEBPACK_IMPORTED_MODULE_3_rxjs_Observable__["Observable"].create(function (observer) {
            if (!_this._globalSubscription) {
                _this._addGlobalListener();
            }
            // In the case of a 0ms delay, use an observable without auditTime
            // since it does add a perceptible delay in processing overhead.
            var /** @type {?} */ subscription = auditTimeInMs > 0 ?
                _this._scrolled.pipe(Object(__WEBPACK_IMPORTED_MODULE_6_rxjs_operators_auditTime__["auditTime"])(auditTimeInMs)).subscribe(observer) :
                _this._scrolled.subscribe(observer);
            _this._scrolledCount++;
            return function () {
                subscription.unsubscribe();
                _this._scrolledCount--;
                if (!_this._scrolledCount) {
                    _this._removeGlobalListener();
                }
            };
        }) : Object(__WEBPACK_IMPORTED_MODULE_4_rxjs_observable_of__["of"])();
    };
    /**
     * @return {?}
     */
    ScrollDispatcher.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._removeGlobalListener();
        this.scrollContainers.forEach(function (_, container) { return _this.deregister(container); });
    };
    /**
     * Returns an observable that emits whenever any of the
     * scrollable ancestors of an element are scrolled.
     * @param elementRef Element whose ancestors to listen for.
     * @param auditTimeInMs Time to throttle the scroll events.
     */
    /**
     * Returns an observable that emits whenever any of the
     * scrollable ancestors of an element are scrolled.
     * @param {?} elementRef Element whose ancestors to listen for.
     * @param {?=} auditTimeInMs Time to throttle the scroll events.
     * @return {?}
     */
    ScrollDispatcher.prototype.ancestorScrolled = /**
     * Returns an observable that emits whenever any of the
     * scrollable ancestors of an element are scrolled.
     * @param {?} elementRef Element whose ancestors to listen for.
     * @param {?=} auditTimeInMs Time to throttle the scroll events.
     * @return {?}
     */
    function (elementRef, auditTimeInMs) {
        var /** @type {?} */ ancestors = this.getAncestorScrollContainers(elementRef);
        return this.scrolled(auditTimeInMs).pipe(Object(__WEBPACK_IMPORTED_MODULE_7_rxjs_operators_filter__["filter"])(function (target) {
            return !target || ancestors.indexOf(target) > -1;
        }));
    };
    /** Returns all registered Scrollables that contain the provided element. */
    /**
     * Returns all registered Scrollables that contain the provided element.
     * @param {?} elementRef
     * @return {?}
     */
    ScrollDispatcher.prototype.getAncestorScrollContainers = /**
     * Returns all registered Scrollables that contain the provided element.
     * @param {?} elementRef
     * @return {?}
     */
    function (elementRef) {
        var _this = this;
        var /** @type {?} */ scrollingContainers = [];
        this.scrollContainers.forEach(function (_subscription, scrollable) {
            if (_this._scrollableContainsElement(scrollable, elementRef)) {
                scrollingContainers.push(scrollable);
            }
        });
        return scrollingContainers;
    };
    /**
     * Returns true if the element is contained within the provided Scrollable.
     * @param {?} scrollable
     * @param {?} elementRef
     * @return {?}
     */
    ScrollDispatcher.prototype._scrollableContainsElement = /**
     * Returns true if the element is contained within the provided Scrollable.
     * @param {?} scrollable
     * @param {?} elementRef
     * @return {?}
     */
    function (scrollable, elementRef) {
        var /** @type {?} */ element = elementRef.nativeElement;
        var /** @type {?} */ scrollableElement = scrollable.getElementRef().nativeElement;
        // Traverse through the element parents until we reach null, checking if any of the elements
        // are the scrollable's element.
        do {
            if (element == scrollableElement) {
                return true;
            }
        } while (element = element.parentElement);
        return false;
    };
    /**
     * Sets up the global scroll listeners.
     * @return {?}
     */
    ScrollDispatcher.prototype._addGlobalListener = /**
     * Sets up the global scroll listeners.
     * @return {?}
     */
    function () {
        var _this = this;
        this._globalSubscription = this._ngZone.runOutsideAngular(function () {
            return Object(__WEBPACK_IMPORTED_MODULE_5_rxjs_observable_fromEvent__["fromEvent"])(window.document, 'scroll').subscribe(function () { return _this._scrolled.next(); });
        });
    };
    /**
     * Cleans up the global scroll listener.
     * @return {?}
     */
    ScrollDispatcher.prototype._removeGlobalListener = /**
     * Cleans up the global scroll listener.
     * @return {?}
     */
    function () {
        if (this._globalSubscription) {
            this._globalSubscription.unsubscribe();
            this._globalSubscription = null;
        }
    };
    ScrollDispatcher.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"] },
    ];
    /** @nocollapse */
    ScrollDispatcher.ctorParameters = function () { return [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgZone"], },
        { type: __WEBPACK_IMPORTED_MODULE_1__angular_cdk_platform__["Platform"], },
    ]; };
    return ScrollDispatcher;
}());
/**
 * \@docs-private
 * @param {?} parentDispatcher
 * @param {?} ngZone
 * @param {?} platform
 * @return {?}
 */
function SCROLL_DISPATCHER_PROVIDER_FACTORY(parentDispatcher, ngZone, platform) {
    return parentDispatcher || new ScrollDispatcher(ngZone, platform);
}
/**
 * \@docs-private
 */
var SCROLL_DISPATCHER_PROVIDER = {
    // If there is already a ScrollDispatcher available, use that. Otherwise, provide a new one.
    provide: ScrollDispatcher,
    deps: [[new __WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"](), new __WEBPACK_IMPORTED_MODULE_0__angular_core__["SkipSelf"](), ScrollDispatcher], __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgZone"], __WEBPACK_IMPORTED_MODULE_1__angular_cdk_platform__["Platform"]],
    useFactory: SCROLL_DISPATCHER_PROVIDER_FACTORY
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * Sends an event when the directive's element is scrolled. Registers itself with the
 * ScrollDispatcher service to include itself as part of its collection of scrolling events that it
 * can be listened to through the service.
 */
var CdkScrollable = /** @class */ (function () {
    function CdkScrollable(_elementRef, _scroll, _ngZone) {
        var _this = this;
        this._elementRef = _elementRef;
        this._scroll = _scroll;
        this._ngZone = _ngZone;
        this._elementScrolled = new __WEBPACK_IMPORTED_MODULE_2_rxjs_Subject__["Subject"]();
        this._scrollListener = function (event) { return _this._elementScrolled.next(event); };
    }
    /**
     * @return {?}
     */
    CdkScrollable.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._ngZone.runOutsideAngular(function () {
            _this.getElementRef().nativeElement.addEventListener('scroll', _this._scrollListener);
        });
        this._scroll.register(this);
    };
    /**
     * @return {?}
     */
    CdkScrollable.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._scroll.deregister(this);
        if (this._scrollListener) {
            this.getElementRef().nativeElement.removeEventListener('scroll', this._scrollListener);
        }
    };
    /**
     * Returns observable that emits when a scroll event is fired on the host element.
     */
    /**
     * Returns observable that emits when a scroll event is fired on the host element.
     * @return {?}
     */
    CdkScrollable.prototype.elementScrolled = /**
     * Returns observable that emits when a scroll event is fired on the host element.
     * @return {?}
     */
    function () {
        return this._elementScrolled.asObservable();
    };
    /**
     * @return {?}
     */
    CdkScrollable.prototype.getElementRef = /**
     * @return {?}
     */
    function () {
        return this._elementRef;
    };
    CdkScrollable.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"], args: [{
                    selector: '[cdk-scrollable], [cdkScrollable]'
                },] },
    ];
    /** @nocollapse */
    CdkScrollable.ctorParameters = function () { return [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"], },
        { type: ScrollDispatcher, },
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgZone"], },
    ]; };
    return CdkScrollable;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * Time in ms to throttle the resize events by default.
 */
var DEFAULT_RESIZE_TIME = 20;
/**
 * Simple utility for getting the bounds of the browser viewport.
 * \@docs-private
 */
var ViewportRuler = /** @class */ (function () {
    function ViewportRuler(platform, ngZone) {
        var _this = this;
        this._change = platform.isBrowser ? ngZone.runOutsideAngular(function () {
            return Object(__WEBPACK_IMPORTED_MODULE_8_rxjs_observable_merge__["merge"])(Object(__WEBPACK_IMPORTED_MODULE_5_rxjs_observable_fromEvent__["fromEvent"])(window, 'resize'), Object(__WEBPACK_IMPORTED_MODULE_5_rxjs_observable_fromEvent__["fromEvent"])(window, 'orientationchange'));
        }) : Object(__WEBPACK_IMPORTED_MODULE_4_rxjs_observable_of__["of"])();
        this._invalidateCache = this.change().subscribe(function () { return _this._updateViewportSize(); });
    }
    /**
     * @return {?}
     */
    ViewportRuler.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._invalidateCache.unsubscribe();
    };
    /** Returns the viewport's width and height. */
    /**
     * Returns the viewport's width and height.
     * @return {?}
     */
    ViewportRuler.prototype.getViewportSize = /**
     * Returns the viewport's width and height.
     * @return {?}
     */
    function () {
        if (!this._viewportSize) {
            this._updateViewportSize();
        }
        return { width: this._viewportSize.width, height: this._viewportSize.height };
    };
    /** Gets a ClientRect for the viewport's bounds. */
    /**
     * Gets a ClientRect for the viewport's bounds.
     * @return {?}
     */
    ViewportRuler.prototype.getViewportRect = /**
     * Gets a ClientRect for the viewport's bounds.
     * @return {?}
     */
    function () {
        // Use the document element's bounding rect rather than the window scroll properties
        // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll
        // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different
        // conceptual viewports. Under most circumstances these viewports are equivalent, but they
        // can disagree when the page is pinch-zoomed (on devices that support touch).
        // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4
        // We use the documentElement instead of the body because, by default (without a css reset)
        // browsers typically give the document body an 8px margin, which is not included in
        // getBoundingClientRect().
        var /** @type {?} */ scrollPosition = this.getViewportScrollPosition();
        var _a = this.getViewportSize(), width = _a.width, height = _a.height;
        return {
            top: scrollPosition.top,
            left: scrollPosition.left,
            bottom: scrollPosition.top + height,
            right: scrollPosition.left + width,
            height: height,
            width: width,
        };
    };
    /** Gets the (top, left) scroll position of the viewport. */
    /**
     * Gets the (top, left) scroll position of the viewport.
     * @return {?}
     */
    ViewportRuler.prototype.getViewportScrollPosition = /**
     * Gets the (top, left) scroll position of the viewport.
     * @return {?}
     */
    function () {
        // The top-left-corner of the viewport is determined by the scroll position of the document
        // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about
        // whether `document.body` or `document.documentElement` is the scrolled element, so reading
        // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of
        // `document.documentElement` works consistently, where the `top` and `left` values will
        // equal negative the scroll position.
        var /** @type {?} */ documentRect = document.documentElement.getBoundingClientRect();
        var /** @type {?} */ top = -documentRect.top || document.body.scrollTop || window.scrollY ||
            document.documentElement.scrollTop || 0;
        var /** @type {?} */ left = -documentRect.left || document.body.scrollLeft || window.scrollX ||
            document.documentElement.scrollLeft || 0;
        return { top: top, left: left };
    };
    /**
     * Returns a stream that emits whenever the size of the viewport changes.
     * @param throttle Time in milliseconds to throttle the stream.
     */
    /**
     * Returns a stream that emits whenever the size of the viewport changes.
     * @param {?=} throttleTime
     * @return {?}
     */
    ViewportRuler.prototype.change = /**
     * Returns a stream that emits whenever the size of the viewport changes.
     * @param {?=} throttleTime
     * @return {?}
     */
    function (throttleTime) {
        if (throttleTime === void 0) { throttleTime = DEFAULT_RESIZE_TIME; }
        return throttleTime > 0 ? this._change.pipe(Object(__WEBPACK_IMPORTED_MODULE_6_rxjs_operators_auditTime__["auditTime"])(throttleTime)) : this._change;
    };
    /**
     * Updates the cached viewport size.
     * @return {?}
     */
    ViewportRuler.prototype._updateViewportSize = /**
     * Updates the cached viewport size.
     * @return {?}
     */
    function () {
        this._viewportSize = { width: window.innerWidth, height: window.innerHeight };
    };
    ViewportRuler.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"] },
    ];
    /** @nocollapse */
    ViewportRuler.ctorParameters = function () { return [
        { type: __WEBPACK_IMPORTED_MODULE_1__angular_cdk_platform__["Platform"], },
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgZone"], },
    ]; };
    return ViewportRuler;
}());
/**
 * \@docs-private
 * @param {?} parentRuler
 * @param {?} platform
 * @param {?} ngZone
 * @return {?}
 */
function VIEWPORT_RULER_PROVIDER_FACTORY(parentRuler, platform, ngZone) {
    return parentRuler || new ViewportRuler(platform, ngZone);
}
/**
 * \@docs-private
 */
var VIEWPORT_RULER_PROVIDER = {
    // If there is already a ViewportRuler available, use that. Otherwise, provide a new one.
    provide: ViewportRuler,
    deps: [[new __WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"](), new __WEBPACK_IMPORTED_MODULE_0__angular_core__["SkipSelf"](), ViewportRuler], __WEBPACK_IMPORTED_MODULE_1__angular_cdk_platform__["Platform"], __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgZone"]],
    useFactory: VIEWPORT_RULER_PROVIDER_FACTORY
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var ScrollDispatchModule = /** @class */ (function () {
    function ScrollDispatchModule() {
    }
    ScrollDispatchModule.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgModule"], args: [{
                    imports: [__WEBPACK_IMPORTED_MODULE_1__angular_cdk_platform__["PlatformModule"]],
                    exports: [CdkScrollable],
                    declarations: [CdkScrollable],
                    providers: [SCROLL_DISPATCHER_PROVIDER],
                },] },
    ];
    /** @nocollapse */
    ScrollDispatchModule.ctorParameters = function () { return []; };
    return ScrollDispatchModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=scrolling.es5.js.map


/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/accordion/accordion-config.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
/**
 * Configuration service for the NgbAccordion component.
 * You can inject this service, typically in your root component, and customize the values of its properties in
 * order to provide default values for all the accordions used in the application.
 */
var NgbAccordionConfig = /** @class */ (function () {
    function NgbAccordionConfig() {
        this.closeOthers = false;
    }
    NgbAccordionConfig.decorators = [
        { type: core_1.Injectable },
    ];
    return NgbAccordionConfig;
}());
exports.NgbAccordionConfig = NgbAccordionConfig;
//# sourceMappingURL=accordion-config.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/accordion/accordion.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var util_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/utils/util.js");
var accordion_config_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/accordion/accordion-config.js");
var nextId = 0;
/**
 * This directive should be used to wrap accordion panel titles that need to contain HTML markup or other directives.
 */
var NgbPanelTitle = /** @class */ (function () {
    function NgbPanelTitle(templateRef) {
        this.templateRef = templateRef;
    }
    NgbPanelTitle.decorators = [
        { type: core_1.Directive, args: [{ selector: 'ng-template[ngbPanelTitle]' },] },
    ];
    /** @nocollapse */
    NgbPanelTitle.ctorParameters = function () { return [
        { type: core_1.TemplateRef, },
    ]; };
    return NgbPanelTitle;
}());
exports.NgbPanelTitle = NgbPanelTitle;
/**
 * This directive must be used to wrap accordion panel content.
 */
var NgbPanelContent = /** @class */ (function () {
    function NgbPanelContent(templateRef) {
        this.templateRef = templateRef;
    }
    NgbPanelContent.decorators = [
        { type: core_1.Directive, args: [{ selector: 'ng-template[ngbPanelContent]' },] },
    ];
    /** @nocollapse */
    NgbPanelContent.ctorParameters = function () { return [
        { type: core_1.TemplateRef, },
    ]; };
    return NgbPanelContent;
}());
exports.NgbPanelContent = NgbPanelContent;
/**
 * The NgbPanel directive represents an individual panel with the title and collapsible
 * content
 */
var NgbPanel = /** @class */ (function () {
    function NgbPanel() {
        /**
           *  A flag determining whether the panel is disabled or not.
           *  When disabled, the panel cannot be toggled.
           */
        this.disabled = false;
        /**
           *  An optional id for the panel. The id should be unique.
           *  If not provided, it will be auto-generated.
           */
        this.id = "ngb-panel-" + nextId++;
        /**
           * A flag telling if the panel is currently open
           */
        this.isOpen = false;
    }
    NgbPanel.decorators = [
        { type: core_1.Directive, args: [{ selector: 'ngb-panel' },] },
    ];
    /** @nocollapse */
    NgbPanel.propDecorators = {
        "disabled": [{ type: core_1.Input },],
        "id": [{ type: core_1.Input },],
        "title": [{ type: core_1.Input },],
        "type": [{ type: core_1.Input },],
        "contentTpl": [{ type: core_1.ContentChild, args: [NgbPanelContent,] },],
        "titleTpl": [{ type: core_1.ContentChild, args: [NgbPanelTitle,] },],
    };
    return NgbPanel;
}());
exports.NgbPanel = NgbPanel;
/**
 * The NgbAccordion directive is a collection of panels.
 * It can assure that only one panel can be opened at a time.
 */
var NgbAccordion = /** @class */ (function () {
    function NgbAccordion(config) {
        /**
           * An array or comma separated strings of panel identifiers that should be opened
           */
        this.activeIds = [];
        /**
           * Whether the closed panels should be hidden without destroying them
           */
        this.destroyOnHide = true;
        /**
           * A panel change event fired right before the panel toggle happens. See NgbPanelChangeEvent for payload details
           */
        this.panelChange = new core_1.EventEmitter();
        this.type = config.type;
        this.closeOtherPanels = config.closeOthers;
    }
    /**
     * Programmatically toggle a panel with a given id.
     */
    /**
       * Programmatically toggle a panel with a given id.
       */
    NgbAccordion.prototype.toggle = /**
       * Programmatically toggle a panel with a given id.
       */
    function (panelId) {
        var panel = this.panels.find(function (p) { return p.id === panelId; });
        if (panel && !panel.disabled) {
            var defaultPrevented_1 = false;
            this.panelChange.emit({ panelId: panelId, nextState: !panel.isOpen, preventDefault: function () { defaultPrevented_1 = true; } });
            if (!defaultPrevented_1) {
                panel.isOpen = !panel.isOpen;
                if (this.closeOtherPanels) {
                    this._closeOthers(panelId);
                }
                this._updateActiveIds();
            }
        }
    };
    NgbAccordion.prototype.ngAfterContentChecked = function () {
        var _this = this;
        // active id updates
        if (util_1.isString(this.activeIds)) {
            this.activeIds = this.activeIds.split(/\s*,\s*/);
        }
        // update panels open states
        this.panels.forEach(function (panel) { return panel.isOpen = !panel.disabled && _this.activeIds.indexOf(panel.id) > -1; });
        // closeOthers updates
        if (this.activeIds.length > 1 && this.closeOtherPanels) {
            this._closeOthers(this.activeIds[0]);
            this._updateActiveIds();
        }
    };
    NgbAccordion.prototype._closeOthers = function (panelId) {
        this.panels.forEach(function (panel) {
            if (panel.id !== panelId) {
                panel.isOpen = false;
            }
        });
    };
    NgbAccordion.prototype._updateActiveIds = function () {
        this.activeIds = this.panels.filter(function (panel) { return panel.isOpen && !panel.disabled; }).map(function (panel) { return panel.id; });
    };
    NgbAccordion.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'ngb-accordion',
                    exportAs: 'ngbAccordion',
                    // host: { 'role': 'tablist', '[attr.aria-multiselectable]': '!closeOtherPanels' },
                    template: "\n    <ng-template ngFor let-panel [ngForOf]=\"panels\">\n      <div class=\"card\">\n        <div role=\"tab\" id=\"{{panel.id}}-header\"\n          [class]=\"'card-header ' + (panel.type ? 'card-'+panel.type: type ? 'card-'+type : '')\" [class.active]=\"panel.isOpen\">\n          <a href (click)=\"!!toggle(panel.id)\" [class.text-muted]=\"panel.disabled\" [attr.tabindex]=\"(panel.disabled ? '-1' : null)\"\n            [attr.aria-expanded]=\"panel.isOpen\" [attr.aria-controls]=\"(panel.isOpen ? panel.id : null)\"\n            [attr.aria-disabled]=\"panel.disabled\">\n            {{panel.title}}<ng-template [ngTemplateOutlet]=\"panel.titleTpl?.templateRef\"></ng-template>\n          </a>\n        </div>\n        <div id=\"{{panel.id}}\" role=\"tabpanel\" [attr.aria-labelledby]=\"panel.id + '-header'\"\n             class=\"card-body collapse {{panel.isOpen ? 'show' : null}}\" *ngIf=\"!destroyOnHide || panel.isOpen\">\n             <ng-template [ngTemplateOutlet]=\"panel.contentTpl.templateRef\"></ng-template>\n        </div>\n      </div>\n    </ng-template>\n  "
                },] },
    ];
    /** @nocollapse */
    NgbAccordion.ctorParameters = function () { return [
        { type: accordion_config_1.NgbAccordionConfig, },
    ]; };
    NgbAccordion.propDecorators = {
        "panels": [{ type: core_1.ContentChildren, args: [NgbPanel,] },],
        "activeIds": [{ type: core_1.Input },],
        "closeOtherPanels": [{ type: core_1.Input, args: ['closeOthers',] },],
        "destroyOnHide": [{ type: core_1.Input },],
        "type": [{ type: core_1.Input },],
        "panelChange": [{ type: core_1.Output },],
    };
    return NgbAccordion;
}());
exports.NgbAccordion = NgbAccordion;
//# sourceMappingURL=accordion.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/accordion/accordion.module.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/esm5/common.js");
var accordion_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/accordion/accordion.js");
var accordion_config_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/accordion/accordion-config.js");
var accordion_2 = __webpack_require__("./node_modules/@farris/ide-devkit/components/accordion/accordion.js");
exports.NgbAccordion = accordion_2.NgbAccordion;
exports.NgbPanel = accordion_2.NgbPanel;
exports.NgbPanelTitle = accordion_2.NgbPanelTitle;
exports.NgbPanelContent = accordion_2.NgbPanelContent;
var accordion_config_2 = __webpack_require__("./node_modules/@farris/ide-devkit/components/accordion/accordion-config.js");
exports.NgbAccordionConfig = accordion_config_2.NgbAccordionConfig;
var NGB_ACCORDION_DIRECTIVES = [accordion_1.NgbAccordion, accordion_1.NgbPanel, accordion_1.NgbPanelTitle, accordion_1.NgbPanelContent];
var NgbAccordionModule = /** @class */ (function () {
    function NgbAccordionModule() {
    }
    NgbAccordionModule.forRoot = function () { return { ngModule: NgbAccordionModule, providers: [accordion_config_1.NgbAccordionConfig] }; };
    NgbAccordionModule.decorators = [
        { type: core_1.NgModule, args: [{ declarations: NGB_ACCORDION_DIRECTIVES, exports: NGB_ACCORDION_DIRECTIVES, imports: [common_1.CommonModule] },] },
    ];
    return NgbAccordionModule;
}());
exports.NgbAccordionModule = NgbAccordionModule;
//# sourceMappingURL=accordion.module.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/alert/alert.component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var alert_config_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/alert/alert.config.js");
var decorators_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/utils/decorators.js");
var AlertComponent = /** @class */ (function () {
    function AlertComponent(_config, changeDetection) {
        var _this = this;
        this.changeDetection = changeDetection;
        /** Alert type.
           * Provides one of four bootstrap supported contextual classes:
           * `success`, `info`, `warning` and `danger`
           */
        this.type = 'warning';
        /** If set, displays an inline "Close" button */
        this.dismissible = false;
        /** Is alert visible */
        this.isOpen = true;
        /** This event fires immediately after close instance method is called,
           * $event is an instance of Alert component.
           */
        this.onClose = new core_1.EventEmitter();
        /** This event fires when alert closed, $event is an instance of Alert component */
        this.onClosed = new core_1.EventEmitter();
        this.classes = '';
        this.dismissibleChange = new core_1.EventEmitter();
        Object.assign(this, _config);
        this.dismissibleChange.subscribe(function (dismissible) {
            _this.classes = _this.dismissible ? 'alert-dismissible' : '';
            _this.changeDetection.markForCheck();
        });
    }
    AlertComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (this.dismissOnTimeout) {
            // if dismissOnTimeout used as attr without binding, it will be a string
            setTimeout(function () { return _this.close(); }, parseInt(this.dismissOnTimeout, 10));
        }
    };
    // todo: animation ` If the .fade and .in classes are present on the element,
    // the alert will fade out before it is removed`
    /**
     * Closes an alert by removing it from the DOM.
     */
    // todo: animation ` If the .fade and .in classes are present on the element,
    // the alert will fade out before it is removed`
    /**
       * Closes an alert by removing it from the DOM.
       */
    AlertComponent.prototype.close = 
    // todo: animation ` If the .fade and .in classes are present on the element,
    // the alert will fade out before it is removed`
    /**
       * Closes an alert by removing it from the DOM.
       */
    function () {
        if (!this.isOpen) {
            return;
        }
        this.onClose.emit(this);
        this.isOpen = false;
        this.changeDetection.markForCheck();
        this.onClosed.emit(this);
    };
    AlertComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'alert,bs-alert',
                    template: "<ng-template [ngIf]=\"isOpen\"> <div [class]=\"'alert alert-' + type\" role=\"alert\" [ngClass]=\"classes\"> <ng-template [ngIf]=\"dismissible\"> <button type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"close()\"> <span aria-hidden=\"true\">&times;</span> <span class=\"sr-only\">Close</span> </button> </ng-template> <ng-content></ng-content> </div> </ng-template> ",
                    changeDetection: core_1.ChangeDetectionStrategy.OnPush
                },] },
    ];
    /** @nocollapse */
    AlertComponent.ctorParameters = function () { return [
        { type: alert_config_1.AlertConfig, },
        { type: core_1.ChangeDetectorRef, },
    ]; };
    AlertComponent.propDecorators = {
        "type": [{ type: core_1.Input },],
        "dismissible": [{ type: core_1.Input },],
        "dismissOnTimeout": [{ type: core_1.Input },],
        "isOpen": [{ type: core_1.Input },],
        "onClose": [{ type: core_1.Output },],
        "onClosed": [{ type: core_1.Output },],
    };
    __decorate([
        decorators_1.OnChange(),
        __metadata("design:type", Object)
    ], AlertComponent.prototype, "dismissible", void 0);
    return AlertComponent;
}());
exports.AlertComponent = AlertComponent;
//# sourceMappingURL=alert.component.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/alert/alert.config.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var AlertConfig = /** @class */ (function () {
    function AlertConfig() {
        /** default alert type */
        this.type = 'warning';
        /** is alerts are dismissible by default */
        this.dismissible = false;
        /** default time before alert will dismiss */
        this.dismissOnTimeout = undefined;
    }
    AlertConfig.decorators = [
        { type: core_1.Injectable },
    ];
    return AlertConfig;
}());
exports.AlertConfig = AlertConfig;
//# sourceMappingURL=alert.config.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/alert/alert.module.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = __webpack_require__("./node_modules/@angular/common/esm5/common.js");
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var alert_component_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/alert/alert.component.js");
var alert_config_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/alert/alert.config.js");
var AlertModule = /** @class */ (function () {
    function AlertModule() {
    }
    AlertModule.forRoot = function () {
        return { ngModule: AlertModule, providers: [alert_config_1.AlertConfig] };
    };
    AlertModule.decorators = [
        { type: core_1.NgModule, args: [{
                    imports: [common_1.CommonModule],
                    declarations: [alert_component_1.AlertComponent],
                    exports: [alert_component_1.AlertComponent],
                    entryComponents: [alert_component_1.AlertComponent]
                },] },
    ];
    return AlertModule;
}());
exports.AlertModule = AlertModule;
//# sourceMappingURL=alert.module.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/alert/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var alert_component_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/alert/alert.component.js");
exports.AlertComponent = alert_component_1.AlertComponent;
var alert_module_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/alert/alert.module.js");
exports.AlertModule = alert_module_1.AlertModule;
var alert_config_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/alert/alert.config.js");
exports.AlertConfig = alert_config_1.AlertConfig;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/angular-editor/angular-monaco-editor/angular-monaco-editor.component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var core_2 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/esm5/forms.js");
var fromEvent_1 = __webpack_require__("./node_modules/rxjs/observable/fromEvent.js");
var config_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/angular-editor/config.js");
var code_editor_event_service_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/angular-editor/services/code-editor.event.service.js");
var events_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/angular-editor/constants/events.js");
var base_monaco_editor_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/angular-editor/base-monaco-editor.js");
// 自定义输入控件:1.封装ControlValueAccessor
// https://code-examples.net/zh-CN/q/2154761
exports.CODE_EDITOR_INPUT_VALUE_ACCESSOR = {
    // https://blog.csdn.net/wangdan_2013/article/details/81314959
    provide: forms_1.NG_VALUE_ACCESSOR,
    useExisting: core_2.forwardRef(function () { return AngularMonacoEditorComponent; }),
    multi: true
};
var AngularMonacoEditorComponent = /** @class */ (function (_super) {
    __extends(AngularMonacoEditorComponent, _super);
    // tslint:disable-next-line:max-line-length
    function AngularMonacoEditorComponent(zone, editorEventService, angularEditorconfig) {
        var _this = _super.call(this, editorEventService, angularEditorconfig) || this;
        _this.zone = zone;
        _this.editorEventService = editorEventService;
        _this.angularEditorconfig = angularEditorconfig;
        _this._value = '';
        // ControlValueAccessor提供的事件回调
        _this.onControlValueChange = function (_) {
        };
        // ControlValueAccessor提供的事件回调
        _this.onControlTouched = function () {
        };
        return _this;
    }
    Object.defineProperty(AngularMonacoEditorComponent.prototype, "model", {
        set: function (model) {
            this.options.model = model;
            if (this._editor) {
                this._editor.dispose();
                this.initMonaco(this.options);
            }
        },
        enumerable: true,
        configurable: true
    });
    AngularMonacoEditorComponent.prototype.initMonaco = function (options) {
        var _this = this;
        var hasModel = !!options.model;
        if (hasModel) {
            options.model = monaco.editor.createModel(options.model.value, options.model.language, options.model.uri);
        }
        this._editor = monaco.editor.create(this._editorComponent.nativeElement, options);
        if (!hasModel) {
            this._editor.setValue(this._value);
        }
        // monaco editor -> outside component
        this._editor.onDidChangeModelContent(function (e) { return _this.onChangeModelContentHandler(e); });
        this._editor.onDidBlurEditorText(function (e) { return _this.onBlurEditorTextHandler(e); });
        this._editor.onDidLayoutChange(function (e) { return _this.onLayoutChangeHandler(e); });
        // refresh layout on resize event.
        this.refreshLayoutWhenWindowResize();
        this.editorEventService.fireEvent({
            eventName: events_1.CODE_EDITOR_EVENTS.onInit,
            target: this,
            editor: this._editor
        });
    };
    /**
     * refresh layout when resized the window
     */
    /**
       * refresh layout when resized the window
       */
    AngularMonacoEditorComponent.prototype.refreshLayoutWhenWindowResize = /**
       * refresh layout when resized the window
       */
    function () {
        var _this = this;
        if (this._windowResizeSubscription) {
            this._windowResizeSubscription.unsubscribe();
        }
        // fromEvent用于兼听事件，事件触发时，将事件event转成可流动的Observable进行传输
        // https://www.jianshu.com/p/46894deb870a
        this._windowResizeSubscription = fromEvent_1.fromEvent(window, 'resize').subscribe(function () { return _this._editor.layout(); });
    };
    AngularMonacoEditorComponent.prototype.onChangeModelContentHandler = function (e) {
        var _this = this;
        var _value = this._editor.getValue();
        // monaco editor -> outside component
        // https://github.com/JTangming/tm/issues/4 ngZone详解
        this.zone.run(function () { return _this.value = _value; }); // value is not propagated to parent when executing outside zone.
    };
    AngularMonacoEditorComponent.prototype.onBlurEditorTextHandler = function (e) {
        this.onControlTouched();
    };
    AngularMonacoEditorComponent.prototype.onLayoutChangeHandler = function (e) {
        console.log('Layout changed:\n' + e);
    };
    Object.defineProperty(AngularMonacoEditorComponent.prototype, "value", {
        // get accessor
        get: 
        // get accessor
        function () {
            return this._value;
        },
        // set accessor including call the onchange callback
        set: 
        // set accessor including call the onchange callback
        function (v) {
            if (v !== this.value) {
                // 注意这种写法，值得学习
                this._value = v;
            }
            this.onControlValueChange(this.value); // 在属性修饰器里调用onControlValueChange方法
        },
        enumerable: true,
        configurable: true
    });
    AngularMonacoEditorComponent.prototype.localEditor = function () {
        // Demo: outside component -> monaco editor
        this.writeValue('test');
    };
    // 自定义输入控件:3.2 implements ControlValueAccesso
    // outside component -> monaco editor
    // From ControlValueAccessor interface
    // 自定义输入控件:3.2 implements ControlValueAccesso
    // outside component -> monaco editor
    // From ControlValueAccessor interface
    AngularMonacoEditorComponent.prototype.writeValue = 
    // 自定义输入控件:3.2 implements ControlValueAccesso
    // outside component -> monaco editor
    // From ControlValueAccessor interface
    function (value) {
        var self = this;
        self.value = value || '';
        // Fix for value change while dispose in process.
        setTimeout(function () {
            if (self._editor /*&& !this.options.model*/) {
                self._editor.setValue(self._value);
            }
        });
    };
    // From ControlValueAccessor interface
    // From ControlValueAccessor interface
    AngularMonacoEditorComponent.prototype.registerOnChange = 
    // From ControlValueAccessor interface
    function (fn) {
        this.onControlValueChange = fn;
    };
    // From ControlValueAccessor interface
    // From ControlValueAccessor interface
    AngularMonacoEditorComponent.prototype.registerOnTouched = 
    // From ControlValueAccessor interface
    function (fn) {
        this.onControlTouched = fn;
    };
    AngularMonacoEditorComponent.decorators = [
        { type: core_1.Component, args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'angular-monaco-editor',
                    template: "<div class=\"editor\" #codeEditor></div>",
                    styles: [":host { display: block; min-height: 200px; } .editor { width: 100%; height: 100%; }"],
                    // 自定义输入控件:2.引入依赖服务ControlValueAccessor
                    providers: [exports.CODE_EDITOR_INPUT_VALUE_ACCESSOR, code_editor_event_service_1.CodeEditorEventService]
                },] },
    ];
    /** @nocollapse */
    AngularMonacoEditorComponent.ctorParameters = function () { return [
        { type: core_2.NgZone, },
        { type: code_editor_event_service_1.CodeEditorEventService, },
        { type: undefined, decorators: [{ type: core_2.Inject, args: [config_1.ANGULAR_MONACO_EDITOR_CONFIG,] },] },
    ]; };
    AngularMonacoEditorComponent.propDecorators = {
        "model": [{ type: core_1.Input, args: ['model',] },],
    };
    return AngularMonacoEditorComponent;
}(base_monaco_editor_1.BaseMonacoEditor));
exports.AngularMonacoEditorComponent = AngularMonacoEditorComponent;
//# sourceMappingURL=angular-monaco-editor.component.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/angular-editor/base-monaco-editor.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var lodash_1 = __webpack_require__("./node_modules/lodash/lodash.js");
var loadedMonaco = false;
var loadPromise;
var BaseMonacoEditor = /** @class */ (function () {
    function BaseMonacoEditor(codeEditorEventService, config) {
        this.codeEditorEventService = codeEditorEventService;
        this.config = config;
        // 初始化自定义事件
        var self = this;
        codeEditorEventService.eventNames.forEach(function (name) {
            // 创建自定义事件，此处作用等效于: @Output() onInit = new EventEmitter<any>()
            self[name] = new core_1.EventEmitter();
            var eventPair = lodash_1.pick(self, name);
            codeEditorEventService.addEvent(eventPair);
        });
    }
    Object.defineProperty(BaseMonacoEditor.prototype, "options", {
        get: function () {
            return this._options;
        },
        set: function (options) {
            // 默认options(this.config.defaultOptions) + 自定义options(options)
            this._options = Object.assign({}, this.config.defaultOptions, options);
            if (this._editor) {
                this._editor.dispose();
                this.initMonaco(options);
            }
        },
        enumerable: true,
        configurable: true
    });
    BaseMonacoEditor.prototype.ngAfterViewInit = function () {
        var _this = this;
        if (loadedMonaco) {
            // Wait until monaco editor is available
            loadPromise.then(function () {
                _this.initMonaco(_this.options);
            });
        }
        else {
            loadedMonaco = true;
            loadPromise = new Promise(function (resolve) {
                var baseUrl = _this.config.baseUrl || '/assets';
                // if (typeof((<any>window).monaco) === 'object') {
                //   resolve();
                //   return;
                // }
                var onGotAmdLoader = function () {
                    // Load monaco
                    // Load monaco
                    window.require.config({ paths: { 'vs': baseUrl + "/monaco/vs" } });
                    window.require(['vs/editor/editor.main'], function () {
                        if (typeof _this.config.onMonacoLoad === 'function') {
                            _this.config.onMonacoLoad();
                        }
                        _this.initMonaco(_this.options);
                        resolve();
                    });
                };
                // Load AMD loader if necessary
                if (!window.require) {
                    var loaderScript = document.createElement('script');
                    loaderScript.type = 'text/javascript';
                    loaderScript.src = baseUrl + "/monaco/vs/loader.js";
                    loaderScript.addEventListener('load', onGotAmdLoader);
                    document.body.appendChild(loaderScript);
                }
                else {
                    onGotAmdLoader();
                }
            });
        }
    };
    BaseMonacoEditor.prototype.ngOnDestroy = function () {
        if (this._windowResizeSubscription) {
            this._windowResizeSubscription.unsubscribe();
        }
        if (this._editor) {
            this._editor.dispose();
            this._editor = undefined;
        }
    };
    BaseMonacoEditor.propDecorators = {
        "_editorComponent": [{ type: core_1.ViewChild, args: ['codeEditor',] },],
        "onInit": [{ type: core_1.Output },],
        "options": [{ type: core_1.Input, args: ['options',] },],
    };
    return BaseMonacoEditor;
}());
exports.BaseMonacoEditor = BaseMonacoEditor;
//# sourceMappingURL=base-monaco-editor.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/angular-editor/config.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
// injectionToken作用说明
// https://segmentfault.com/a/1190000008626348
exports.ANGULAR_MONACO_EDITOR_CONFIG = new core_1.InjectionToken('ANGULAR_MONACO_EDITOR_CONFIG');
//# sourceMappingURL=config.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/angular-editor/constants/events.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CODE_EDITOR_EVENTS = {
    onInit: 'onInit'
};
//# sourceMappingURL=events.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/angular-editor/editor.module.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = __webpack_require__("./node_modules/@angular/common/esm5/common.js");
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var config_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/angular-editor/config.js");
var angular_monaco_editor_component_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/angular-editor/angular-monaco-editor/angular-monaco-editor.component.js");
var AngularMonacoEditorModule = /** @class */ (function () {
    function AngularMonacoEditorModule() {
    }
    AngularMonacoEditorModule.forRoot = function (config) {
        if (config === void 0) { config = {}; }
        return {
            ngModule: AngularMonacoEditorModule,
            providers: [
                { provide: config_1.ANGULAR_MONACO_EDITOR_CONFIG, useValue: config }
            ]
        };
    };
    AngularMonacoEditorModule.decorators = [
        { type: core_1.NgModule, args: [{
                    imports: [
                        common_1.CommonModule
                    ],
                    declarations: [
                        angular_monaco_editor_component_1.AngularMonacoEditorComponent
                    ],
                    exports: [
                        angular_monaco_editor_component_1.AngularMonacoEditorComponent
                    ],
                    providers: []
                },] },
    ];
    return AngularMonacoEditorModule;
}());
exports.AngularMonacoEditorModule = AngularMonacoEditorModule;
//# sourceMappingURL=editor.module.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/angular-editor/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__("./node_modules/@farris/ide-devkit/components/angular-editor/editor.module.js"));
__export(__webpack_require__("./node_modules/@farris/ide-devkit/components/angular-editor/angular-monaco-editor/angular-monaco-editor.component.js"));
__export(__webpack_require__("./node_modules/@farris/ide-devkit/components/angular-editor/config.js"));
__export(__webpack_require__("./node_modules/@farris/ide-devkit/components/angular-editor/constants/events.js"));
__export(__webpack_require__("./node_modules/@farris/ide-devkit/components/angular-editor/services/code-editor.event.service.js"));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/angular-editor/services/code-editor.event.service.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var lodash_1 = __webpack_require__("./node_modules/lodash/lodash.js");
var events_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/angular-editor/constants/events.js");
var CodeEditorEventService = /** @class */ (function () {
    function CodeEditorEventService() {
        this.eventNames = Object.keys(events_1.CODE_EDITOR_EVENTS);
        this._events = {};
    }
    /**
     * 设置启用事件
     * @param  事件
     */
    /**
         * 设置启用事件
         * @param  事件
         */
    CodeEditorEventService.prototype.addEvent = /**
         * 设置启用事件
         * @param  事件
         */
    function (event) {
        lodash_1.assign(this._events, event);
        // console.log(this.events);
    };
    CodeEditorEventService.prototype.fireEvent = function (event) {
        this._events[event.eventName].emit(event);
        // console.log("Emit Event:" + event);
    };
    CodeEditorEventService.decorators = [
        { type: core_1.Injectable },
    ];
    return CodeEditorEventService;
}());
exports.CodeEditorEventService = CodeEditorEventService;
//# sourceMappingURL=code-editor.event.service.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/dropdown/dropdown-button.directive.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var dropdown_state_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/dropdown/dropdown.state.js");
var DropdownButtonDirective = /** @class */ (function () {
    function DropdownButtonDirective(_state, _element) {
        var _this = this;
        this._state = _state;
        this._element = _element;
        this._subscriptions = [];
        this.isDisabled = null;
        // 同步菜单的打开状态
        this._subscriptions.push(this._state.isOpenChange
            .subscribe(function (value) { return _this.isOpen = value; }));
        // 同步菜单的禁用状态
        this._subscriptions.push(this._state.isDisabledChange
            .subscribe(function (value) { return _this.isDisabled = value || null; }));
    }
    DropdownButtonDirective.prototype.onClick = function (event) {
        if (this.isDisabled) {
            return;
        }
        this._state.onClick.emit(event);
    };
    DropdownButtonDirective.prototype.onHover = function () {
        if (this.isDisabled) {
            return;
        }
        this._state.onHover.emit();
    };
    DropdownButtonDirective.prototype.ngOnDestroy = function () {
        for (var _i = 0, _a = this._subscriptions; _i < _a.length; _i++) {
            var sub = _a[_i];
            sub.unsubscribe();
        }
    };
    DropdownButtonDirective.decorators = [
        { type: core_1.Directive, args: [{
                    selector: '[dropdownButton]'
                },] },
    ];
    /** @nocollapse */
    DropdownButtonDirective.ctorParameters = function () { return [
        { type: dropdown_state_1.BsDropdownState, },
        { type: core_1.ElementRef, },
    ]; };
    DropdownButtonDirective.propDecorators = {
        "isDisabled": [{ type: core_1.HostBinding, args: ['class.disabled',] }, { type: core_1.Input },],
        "isOpen": [{ type: core_1.HostBinding, args: ['attr.aria-expanded',] },],
        "onClick": [{ type: core_1.HostListener, args: ['click', ['$event'],] },],
        "onHover": [{ type: core_1.HostListener, args: ['mouseover',] },],
    };
    return DropdownButtonDirective;
}());
exports.DropdownButtonDirective = DropdownButtonDirective;
//# sourceMappingURL=dropdown-button.directive.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/dropdown/dropdown-container.component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var dropdown_state_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/dropdown/dropdown.state.js");
var ng2_bootstrap_config_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/utils/ng2-bootstrap-config.js");
var BsDropdownContainerComponent = /** @class */ (function () {
    function BsDropdownContainerComponent(_state, cd, _renderer, _element) {
        var _this = this;
        this._state = _state;
        this.cd = cd;
        this._renderer = _renderer;
        this.isOpen = false;
        this.display = 'block';
        this.position = 'absolute';
        this._subscription = _state.isOpenChange.subscribe(function (value) {
            _this.isOpen = value;
            var dropdown = _element.nativeElement.querySelector('.dropdown-menu');
            if (dropdown && !ng2_bootstrap_config_1.isBs3()) {
                _this._renderer.addClass(dropdown, 'show');
                if (dropdown.classList.contains('dropdown-menu-right')) {
                    _this._renderer.setStyle(dropdown, 'left', 'auto');
                    _this._renderer.setStyle(dropdown, 'right', '0');
                }
                if (_this.direction === 'up') {
                    _this._renderer.setStyle(dropdown, 'top', 'auto');
                    _this._renderer.setStyle(dropdown, 'transform', 'translateY(-101%)');
                }
            }
        });
    }
    Object.defineProperty(BsDropdownContainerComponent.prototype, "direction", {
        get: function () {
            return this._state.direction;
        },
        enumerable: true,
        configurable: true
    });
    BsDropdownContainerComponent.prototype.ngOnDestroy = function () {
        this._subscription.unsubscribe();
    };
    BsDropdownContainerComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'mdb-dropdown-container',
                    changeDetection: core_1.ChangeDetectionStrategy.OnPush,
                    template: "\n  <div [class.dropup]=\"direction === 'up'\"\n  [class.dropdown]=\"direction === 'down'\"\n  [class.show]=\"isOpen\"\n  [class.open]=\"isOpen\">\n    <ng-content></ng-content>\n  </div>\n  "
                },] },
    ];
    /** @nocollapse */
    BsDropdownContainerComponent.ctorParameters = function () { return [
        { type: dropdown_state_1.BsDropdownState, },
        { type: core_1.ChangeDetectorRef, },
        { type: core_1.Renderer2, },
        { type: core_1.ElementRef, },
    ]; };
    BsDropdownContainerComponent.propDecorators = {
        "display": [{ type: core_1.HostBinding, args: ['style.display',] },],
        "position": [{ type: core_1.HostBinding, args: ['style.position',] },],
    };
    return BsDropdownContainerComponent;
}());
exports.BsDropdownContainerComponent = BsDropdownContainerComponent;
//# sourceMappingURL=dropdown-container.component.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/dropdown/dropdown-item.directive.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var navbar_state_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/navbar/navbar.state.js");
var DropdownItemDirective = /** @class */ (function () {
    function DropdownItemDirective(_elementRef, barState) {
        this._elementRef = _elementRef;
        this.barState = barState;
        this.isDisabled = null;
        this.onHover = new core_1.EventEmitter();
        this.onClick = new core_1.EventEmitter();
        this.barState.addMenuItem(this);
    }
    Object.defineProperty(DropdownItemDirective.prototype, "elementRef", {
        get: function () {
            return this._elementRef;
        },
        enumerable: true,
        configurable: true
    });
    DropdownItemDirective.prototype.onMouseOver = function () {
        this.onHover.emit();
    };
    DropdownItemDirective.prototype.onItemClick = function () {
        if (this.isDisabled) {
            return;
        }
        this.onClick.emit(this.command);
    };
    DropdownItemDirective.decorators = [
        { type: core_1.Directive, args: [{
                    selector: '[dropdownItem]',
                    exportAs: 'dropdownItem'
                },] },
    ];
    /** @nocollapse */
    DropdownItemDirective.ctorParameters = function () { return [
        { type: core_1.ElementRef, },
        { type: navbar_state_1.NavbarState, },
    ]; };
    DropdownItemDirective.propDecorators = {
        "isDisabled": [{ type: core_1.HostBinding, args: ['class.disabled',] }, { type: core_1.Input },],
        "command": [{ type: core_1.Input, args: ['dropdownItem',] },],
        "onMouseOver": [{ type: core_1.HostListener, args: ['mouseover',] },],
        "onItemClick": [{ type: core_1.HostListener, args: ['click',] },],
    };
    return DropdownItemDirective;
}());
exports.DropdownItemDirective = DropdownItemDirective;
//# sourceMappingURL=dropdown-item.directive.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/dropdown/dropdown-menu.directive.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var dropdown_state_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/dropdown/dropdown.state.js");
var BsDropdownMenuDirective = /** @class */ (function () {
    function BsDropdownMenuDirective(_state, _viewContainer, _templateRef) {
        _state.resolveDropdownMenu({
            templateRef: _templateRef,
            viewContainer: _viewContainer
        });
    }
    BsDropdownMenuDirective.decorators = [
        { type: core_1.Directive, args: [{
                    selector: '[mdbDropdownMenu],[dropdownMenu]',
                    exportAs: 'bs-dropdown-menu'
                },] },
    ];
    /** @nocollapse */
    BsDropdownMenuDirective.ctorParameters = function () { return [
        { type: dropdown_state_1.BsDropdownState, },
        { type: core_1.ViewContainerRef, },
        { type: core_1.TemplateRef, },
    ]; };
    return BsDropdownMenuDirective;
}());
exports.BsDropdownMenuDirective = BsDropdownMenuDirective;
//# sourceMappingURL=dropdown-menu.directive.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/dropdown/dropdown-toggle.directive.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var dropdown_state_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/dropdown/dropdown.state.js");
var BsDropdownToggleDirective = /** @class */ (function () {
    function BsDropdownToggleDirective(_state, _element) {
        var _this = this;
        this._state = _state;
        this._element = _element;
        this.ariaHaspopup = true;
        this.isDisabled = null;
        this._subscriptions = [];
        // sync is open value with state
        this._subscriptions.push(this._state.isOpenChange.subscribe(function (value) { return (_this.isOpen = value); }));
        // populate disabled state
        this._subscriptions.push(this._state.isDisabledChange.subscribe(function (value) { return (_this.isDisabled = value || null); }));
    }
    BsDropdownToggleDirective.prototype.onClick = function () {
        if (this.isDisabled) {
            return;
        }
        this._state.toggleClick.emit(true);
    };
    BsDropdownToggleDirective.prototype.onDocumentClick = function (event) {
        if (this._state.autoClose &&
            event.button !== 2 &&
            !this._element.nativeElement.contains(event.target)) {
            this._state.toggleClick.emit(false);
        }
    };
    BsDropdownToggleDirective.prototype.onEsc = function () {
        if (this._state.autoClose) {
            this._state.toggleClick.emit(false);
        }
    };
    BsDropdownToggleDirective.prototype.ngOnDestroy = function () {
        for (var _i = 0, _a = this._subscriptions; _i < _a.length; _i++) {
            var sub = _a[_i];
            sub.unsubscribe();
        }
    };
    BsDropdownToggleDirective.decorators = [
        { type: core_1.Directive, args: [{
                    selector: '[mdbDropdownToggle],[dropdownToggle]',
                    exportAs: 'bs-dropdown-toggle'
                },] },
    ];
    /** @nocollapse */
    BsDropdownToggleDirective.ctorParameters = function () { return [
        { type: dropdown_state_1.BsDropdownState, },
        { type: core_1.ElementRef, },
    ]; };
    BsDropdownToggleDirective.propDecorators = {
        "ariaHaspopup": [{ type: core_1.HostBinding, args: ['attr.aria-haspopup',] },],
        "isDisabled": [{ type: core_1.HostBinding, args: ['attr.disabled',] },],
        "isOpen": [{ type: core_1.HostBinding, args: ['attr.aria-expanded',] },],
        "onClick": [{ type: core_1.HostListener, args: ['click', [],] },],
        "onDocumentClick": [{ type: core_1.HostListener, args: ['document:click', ['$event'],] },],
        "onEsc": [{ type: core_1.HostListener, args: ['keyup.esc',] },],
    };
    return BsDropdownToggleDirective;
}());
exports.BsDropdownToggleDirective = BsDropdownToggleDirective;
//# sourceMappingURL=dropdown-toggle.directive.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/dropdown/dropdown.config.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
/** Default dropdown configuration */
var BsDropdownConfig = /** @class */ (function () {
    function BsDropdownConfig() {
        /** default dropdown auto closing behavior */
        this.autoClose = true;
    }
    BsDropdownConfig.decorators = [
        { type: core_1.Injectable },
    ];
    return BsDropdownConfig;
}());
exports.BsDropdownConfig = BsDropdownConfig;
//# sourceMappingURL=dropdown.config.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/dropdown/dropdown.directive.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
__webpack_require__("./node_modules/rxjs/add/operator/filter.js");
var component_loader_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/utils/component-loader/index.js");
var dropdown_config_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/dropdown/dropdown.config.js");
var dropdown_container_component_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/dropdown/dropdown-container.component.js");
var dropdown_state_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/dropdown/dropdown.state.js");
var ng2_bootstrap_config_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/utils/ng2-bootstrap-config.js");
var BsDropdownDirective = /** @class */ (function () {
    function BsDropdownDirective(_elementRef, _renderer, _viewContainerRef, _cis, _config, _state) {
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this._viewContainerRef = _viewContainerRef;
        this._cis = _cis;
        this._config = _config;
        this._state = _state;
        // todo: move to component loader
        this._isInlineOpen = false;
        this._subscriptions = [];
        this._isInited = false;
        // set initial dropdown state from config
        this._state.autoClose = this._config.autoClose;
        // create dropdown component loader
        this._dropdown = this._cis
            .createLoader(this._elementRef, this._viewContainerRef, this._renderer)
            .provide({ provide: dropdown_state_1.BsDropdownState, useValue: this._state });
        this.onShown = this._dropdown.onShown;
        this.onHidden = this._dropdown.onHidden;
        this.isOpenChange = this._state.isOpenChange;
        // this.onToggleHover = this._state.onHover;
        // barState.addDropdown(this);
    }
    Object.defineProperty(BsDropdownDirective.prototype, "autoClose", {
        get: function () {
            return this._state.autoClose;
        },
        set: /**
           * Indicates that dropdown will be closed on item or document click,
           * and after pressing ESC
           */
        function (value) {
            this._state.autoClose = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BsDropdownDirective.prototype, "isDisabled", {
        get: function () {
            return this._isDisabled;
        },
        set: /**
           * Disables dropdown toggle and hides dropdown menu if opened
           */
        function (value) {
            this._isDisabled = value;
            this._state.isDisabledChange.emit(value);
            if (value) {
                this.hide();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BsDropdownDirective.prototype, "isOpen", {
        get: /**
           * Returns whether or not the popover is currently being shown
           */
        function () {
            if (this._showInline) {
                return this._isInlineOpen;
            }
            return this._dropdown.isShown;
        },
        set: function (value) {
            if (value) {
                this.show();
            }
            else {
                this.hide();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BsDropdownDirective.prototype, "state", {
        get: function () {
            return this._state;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BsDropdownDirective.prototype, "level", {
        get: function () {
            return this._level || 1;
        },
        set: function (value) {
            this._level = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BsDropdownDirective.prototype, "elementRef", {
        get: function () {
            return this._elementRef;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BsDropdownDirective.prototype, "isBs4", {
        get: function () {
            return !ng2_bootstrap_config_1.isBs3();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BsDropdownDirective.prototype, "_showInline", {
        get: function () {
            return !this.container;
        },
        enumerable: true,
        configurable: true
    });
    BsDropdownDirective.prototype.ngOnInit = function () {
        var _this = this;
        // fix: seems there are an issue with `routerLinkActive`
        // which result in duplicated call ngOnInit without call to ngOnDestroy
        // read more: https://github.com/valor-software/ngx-bootstrap/issues/1885
        if (this._isInited) {
            return;
        }
        this._isInited = true;
        // attach DOM listeners
        this._dropdown.listen({
            // because of dropdown inline mode
            outsideClick: false,
            triggers: this.triggers,
            show: function () { return _this.show(); }, toggle: function (value) { return _this.toggle(value); }
        });
        // toggle visibility on toggle element click
        this._subscriptions.push(this._state.toggleClick.subscribe(function (value) { return _this.toggle(value); }));
        // hide dropdown if set disabled while opened
        this._subscriptions.push(this._state.isDisabledChange
            .filter(function (value) { return value; })
            .subscribe(function (value) { return _this.hide(); }));
    };
    /**
     * Opens an element’s popover. This is considered a “manual” triggering of
     * the popover.
     */
    /**
       * Opens an element’s popover. This is considered a “manual” triggering of
       * the popover.
       */
    BsDropdownDirective.prototype.show = /**
       * Opens an element’s popover. This is considered a “manual” triggering of
       * the popover.
       */
    function () {
        var _this = this;
        if (this.isOpen || this.isDisabled) {
            return;
        }
        if (this._showInline) {
            if (!this._inlinedMenu) {
                this._state.dropdownMenu.then(function (dropdownMenu) {
                    var _placement = _this.placement || 'bottom left';
                    _this._dropdown.attachInline(dropdownMenu.viewContainer, dropdownMenu.templateRef);
                    _this._inlinedMenu = _this._dropdown._inlineViewRef;
                    _this.addBs4Polyfills();
                })
                    .catch();
            }
            this.addBs4Polyfills();
            this._isInlineOpen = true;
            this.onShown.emit(true);
            this._state.isOpenChange.emit(true);
            return;
        }
        this._state.dropdownMenu.then(function (dropdownMenu) {
            // check direction in which dropdown should be opened
            var _dropup = _this.dropup ||
                (typeof _this.dropup !== 'undefined' && _this.dropup);
            _this._state.direction = _dropup ? 'up' : 'down';
            var _placement = _this.placement || (_dropup ? 'top left' : 'bottom left');
            // show dropdown
            // show dropdown
            _this._dropdown
                .attach(dropdown_container_component_1.BsDropdownContainerComponent)
                .to(_this.container)
                .position({ attachment: _placement })
                .show({
                content: dropdownMenu.templateRef,
                placement: _placement
            });
            _this._state.isOpenChange.emit(true);
        })
            .catch();
    };
    /**
     * Closes an element’s popover. This is considered a “manual” triggering of
     * the popover.
     */
    /**
       * Closes an element’s popover. This is considered a “manual” triggering of
       * the popover.
       */
    BsDropdownDirective.prototype.hide = /**
       * Closes an element’s popover. This is considered a “manual” triggering of
       * the popover.
       */
    function () {
        if (!this.isOpen) {
            return;
        }
        if (this._showInline) {
            this.removeShowClass();
            this.removeDropupStyles();
            this._isInlineOpen = false;
            this.onHidden.emit(true);
        }
        else {
            this._dropdown.hide();
        }
        this._state.isOpenChange.emit(false);
    };
    /**
     * Toggles an element’s popover. This is considered a “manual” triggering of
     * the popover. With parameter <code>true</code> allows toggling, with parameter <code>false</code>
     * only hides opened dropdown. Parameter usage will be removed in ngx-bootstrap v3
     */
    /**
       * Toggles an element’s popover. This is considered a “manual” triggering of
       * the popover. With parameter <code>true</code> allows toggling, with parameter <code>false</code>
       * only hides opened dropdown. Parameter usage will be removed in ngx-bootstrap v3
       */
    BsDropdownDirective.prototype.toggle = /**
       * Toggles an element’s popover. This is considered a “manual” triggering of
       * the popover. With parameter <code>true</code> allows toggling, with parameter <code>false</code>
       * only hides opened dropdown. Parameter usage will be removed in ngx-bootstrap v3
       */
    function (value) {
        if (this.isOpen || !value) {
            return this.hide();
        }
        return this.show();
    };
    BsDropdownDirective.prototype.containsItem = function (item) {
        return this._elementRef.nativeElement.contains(item.elementRef.nativeElement);
    };
    BsDropdownDirective.prototype.ngOnDestroy = function () {
        // clean up subscriptions and destroy dropdown
        for (var _i = 0, _a = this._subscriptions; _i < _a.length; _i++) {
            var sub = _a[_i];
            sub.unsubscribe();
        }
        this._dropdown.dispose();
    };
    BsDropdownDirective.prototype.addBs4Polyfills = function () {
        if (!ng2_bootstrap_config_1.isBs3()) {
            this.addShowClass();
            this.checkRightAlignment();
            this.addDropupStyles();
        }
    };
    BsDropdownDirective.prototype.addShowClass = function () {
        if (this._inlinedMenu && this._inlinedMenu.rootNodes[0]) {
            this._renderer.addClass(this._inlinedMenu.rootNodes[0], 'show');
        }
    };
    BsDropdownDirective.prototype.removeShowClass = function () {
        if (this._inlinedMenu && this._inlinedMenu.rootNodes[0]) {
            this._renderer.removeClass(this._inlinedMenu.rootNodes[0], 'show');
        }
    };
    BsDropdownDirective.prototype.checkRightAlignment = function () {
        if (this._inlinedMenu && this._inlinedMenu.rootNodes[0]) {
            var isRightAligned = this._inlinedMenu.rootNodes[0].classList.contains('dropdown-menu-right');
            this._renderer.setStyle(this._inlinedMenu.rootNodes[0], 'left', isRightAligned ? 'auto' : '0');
            this._renderer.setStyle(this._inlinedMenu.rootNodes[0], 'right', isRightAligned ? '0' : 'auto');
        }
    };
    BsDropdownDirective.prototype.addDropupStyles = function () {
        if (this._inlinedMenu && this._inlinedMenu.rootNodes[0]) {
            // a little hack to not break support of bootstrap 4 beta
            this._renderer.setStyle(this._inlinedMenu.rootNodes[0], 'top', this.dropup ? 'auto' : '100%');
            this._renderer.setStyle(this._inlinedMenu.rootNodes[0], 'transform', this.dropup ? 'translateY(-101%)' : 'translateY(0)');
        }
    };
    BsDropdownDirective.prototype.removeDropupStyles = function () {
        if (this._inlinedMenu && this._inlinedMenu.rootNodes[0]) {
            this._renderer.removeStyle(this._inlinedMenu.rootNodes[0], 'top');
            this._renderer.removeStyle(this._inlinedMenu.rootNodes[0], 'transform');
        }
    };
    BsDropdownDirective.decorators = [
        { type: core_1.Directive, args: [{
                    selector: '[mdbDropdown],[dropdown]',
                    exportAs: 'bs-dropdown',
                    providers: [dropdown_state_1.BsDropdownState],
                    host: {
                        '[class.dropup]': 'dropup',
                        '[class.open]': 'isOpen',
                        '[class.show]': 'isOpen && isBs4'
                    }
                },] },
    ];
    /** @nocollapse */
    BsDropdownDirective.ctorParameters = function () { return [
        { type: core_1.ElementRef, },
        { type: core_1.Renderer2, },
        { type: core_1.ViewContainerRef, },
        { type: component_loader_1.ComponentLoaderFactory, },
        { type: dropdown_config_1.BsDropdownConfig, },
        { type: dropdown_state_1.BsDropdownState, },
    ]; };
    BsDropdownDirective.propDecorators = {
        "placement": [{ type: core_1.Input },],
        "triggers": [{ type: core_1.Input },],
        "container": [{ type: core_1.Input },],
        "dropup": [{ type: core_1.Input },],
        "autoClose": [{ type: core_1.Input },],
        "isDisabled": [{ type: core_1.Input },],
        "isOpen": [{ type: core_1.Input },],
        "level": [{ type: core_1.Input, args: ['dropdown',] },],
        "isOpenChange": [{ type: core_1.Output },],
        "onShown": [{ type: core_1.Output },],
        "onHidden": [{ type: core_1.Output },],
        "childDropdowns": [{ type: core_1.ContentChildren, args: [BsDropdownDirective,] },],
    };
    return BsDropdownDirective;
}());
exports.BsDropdownDirective = BsDropdownDirective;
//# sourceMappingURL=dropdown.directive.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/dropdown/dropdown.module.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var component_loader_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/utils/component-loader/index.js");
var positioning_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/utils/positioning/index.js");
var dropdown_container_component_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/dropdown/dropdown-container.component.js");
var dropdown_menu_directive_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/dropdown/dropdown-menu.directive.js");
var dropdown_toggle_directive_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/dropdown/dropdown-toggle.directive.js");
var dropdown_config_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/dropdown/dropdown.config.js");
var dropdown_directive_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/dropdown/dropdown.directive.js");
var dropdown_state_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/dropdown/dropdown.state.js");
var dropdown_button_directive_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/dropdown/dropdown-button.directive.js");
var dropdown_item_directive_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/dropdown/dropdown-item.directive.js");
var BsDropdownModule = /** @class */ (function () {
    function BsDropdownModule() {
    }
    BsDropdownModule.forRoot = function (config) {
        return {
            ngModule: BsDropdownModule, providers: [
                component_loader_1.ComponentLoaderFactory,
                positioning_1.PositioningService,
                dropdown_state_1.BsDropdownState,
                { provide: dropdown_config_1.BsDropdownConfig, useValue: config ? config : { autoClose: true } }
            ]
        };
    };
    BsDropdownModule.decorators = [
        { type: core_1.NgModule, args: [{
                    declarations: [
                        dropdown_menu_directive_1.BsDropdownMenuDirective,
                        dropdown_toggle_directive_1.BsDropdownToggleDirective,
                        dropdown_container_component_1.BsDropdownContainerComponent,
                        dropdown_directive_1.BsDropdownDirective,
                        dropdown_button_directive_1.DropdownButtonDirective,
                        dropdown_item_directive_1.DropdownItemDirective
                    ],
                    exports: [
                        dropdown_menu_directive_1.BsDropdownMenuDirective,
                        dropdown_toggle_directive_1.BsDropdownToggleDirective,
                        dropdown_directive_1.BsDropdownDirective,
                        dropdown_button_directive_1.DropdownButtonDirective,
                        dropdown_item_directive_1.DropdownItemDirective
                    ],
                    entryComponents: [dropdown_container_component_1.BsDropdownContainerComponent]
                },] },
    ];
    return BsDropdownModule;
}());
exports.BsDropdownModule = BsDropdownModule;
//# sourceMappingURL=dropdown.module.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/dropdown/dropdown.state.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var BsDropdownState = /** @class */ (function () {
    function BsDropdownState() {
        var _this = this;
        this.direction = 'down';
        this.isOpenChange = new core_1.EventEmitter();
        this.isDisabledChange = new core_1.EventEmitter();
        this.toggleClick = new core_1.EventEmitter();
        this.onHover = new core_1.EventEmitter();
        this.onClick = new core_1.EventEmitter();
        this.dropdownMenu = new Promise(function (resolve) {
            _this.resolveDropdownMenu = resolve;
        });
    }
    BsDropdownState.decorators = [
        { type: core_1.Injectable },
    ];
    /** @nocollapse */
    BsDropdownState.ctorParameters = function () { return []; };
    return BsDropdownState;
}());
exports.BsDropdownState = BsDropdownState;
//# sourceMappingURL=dropdown.state.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/dropdown/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dropdown_directive_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/dropdown/dropdown.directive.js");
exports.BsDropdownDirective = dropdown_directive_1.BsDropdownDirective;
var dropdown_menu_directive_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/dropdown/dropdown-menu.directive.js");
exports.BsDropdownMenuDirective = dropdown_menu_directive_1.BsDropdownMenuDirective;
var dropdown_toggle_directive_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/dropdown/dropdown-toggle.directive.js");
exports.BsDropdownToggleDirective = dropdown_toggle_directive_1.BsDropdownToggleDirective;
var dropdown_button_directive_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/dropdown/dropdown-button.directive.js");
exports.DropdownButtonDirective = dropdown_button_directive_1.DropdownButtonDirective;
var dropdown_item_directive_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/dropdown/dropdown-item.directive.js");
exports.DropdownItemDirective = dropdown_item_directive_1.DropdownItemDirective;
var dropdown_container_component_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/dropdown/dropdown-container.component.js");
exports.BsDropdownContainerComponent = dropdown_container_component_1.BsDropdownContainerComponent;
var dropdown_state_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/dropdown/dropdown.state.js");
exports.BsDropdownState = dropdown_state_1.BsDropdownState;
var dropdown_config_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/dropdown/dropdown.config.js");
exports.BsDropdownConfig = dropdown_config_1.BsDropdownConfig;
var dropdown_module_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/dropdown/dropdown.module.js");
exports.BsDropdownModule = dropdown_module_1.BsDropdownModule;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var dropdown_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/dropdown/index.js");
var tabset_module_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/tabset/tabset.module.js");
var navtab_module_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/navtab/navtab.module.js");
var accordion_module_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/accordion/accordion.module.js");
var panel_module_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/panel/panel.module.js");
var popover_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/popover/index.js");
exports.PopoverDirective = popover_1.PopoverDirective;
exports.PopoverModule = popover_1.PopoverModule;
exports.PopoverConfig = popover_1.PopoverConfig;
exports.PopoverContainerComponent = popover_1.PopoverContainerComponent;
__export(__webpack_require__("./node_modules/@farris/ide-devkit/components/alert/index.js"));
__export(__webpack_require__("./node_modules/@farris/ide-devkit/components/tooltip/index.js"));
__export(__webpack_require__("./node_modules/@farris/ide-devkit/components/modal/index.js"));
// export * from './perfect-scorll';
__export(__webpack_require__("./node_modules/@farris/ide-devkit/components/navbar/index.js"));
__export(__webpack_require__("./node_modules/@farris/ide-devkit/components/ng2tree-common/index.js"));
__export(__webpack_require__("./node_modules/@farris/ide-devkit/components/angular-editor/index.js"));
var dropdown_2 = __webpack_require__("./node_modules/@farris/ide-devkit/components/dropdown/index.js");
exports.BsDropdownConfig = dropdown_2.BsDropdownConfig;
exports.BsDropdownContainerComponent = dropdown_2.BsDropdownContainerComponent;
exports.BsDropdownDirective = dropdown_2.BsDropdownDirective;
exports.BsDropdownMenuDirective = dropdown_2.BsDropdownMenuDirective;
exports.BsDropdownModule = dropdown_2.BsDropdownModule;
exports.BsDropdownState = dropdown_2.BsDropdownState;
exports.BsDropdownToggleDirective = dropdown_2.BsDropdownToggleDirective;
exports.DropdownButtonDirective = dropdown_2.DropdownButtonDirective;
exports.DropdownItemDirective = dropdown_2.DropdownItemDirective;
// export { DataModelSelectModule, DataModelSelectComponent } from './data-model-select';
__export(__webpack_require__("./node_modules/@farris/ide-devkit/components/ng2-right-click-menu/index.js"));
__export(__webpack_require__("./node_modules/@farris/ide-devkit/components/property-panel/index.js"));
__export(__webpack_require__("./node_modules/@farris/ide-devkit/components/wizard/index.js"));
var tabset_module_2 = __webpack_require__("./node_modules/@farris/ide-devkit/components/tabset/tabset.module.js");
exports.NgbTabsetModule = tabset_module_2.NgbTabsetModule;
exports.NgbTabsetConfig = tabset_module_2.NgbTabsetConfig;
exports.NgbTabset = tabset_module_2.NgbTabset;
exports.NgbTab = tabset_module_2.NgbTab;
exports.NgbTabContent = tabset_module_2.NgbTabContent;
exports.NgbTabTitle = tabset_module_2.NgbTabTitle;
var navtab_module_2 = __webpack_require__("./node_modules/@farris/ide-devkit/components/navtab/navtab.module.js");
exports.NgbNavTabsetModule = navtab_module_2.NgbNavTabsetModule;
exports.NgbNavTabsetConfig = navtab_module_2.NgbNavTabsetConfig;
exports.NgbNavTabset = navtab_module_2.NgbNavTabset;
exports.NgbNavTab = navtab_module_2.NgbNavTab;
exports.NgbNavTabContent = navtab_module_2.NgbNavTabContent;
exports.NgbNavTabTitle = navtab_module_2.NgbNavTabTitle;
var MODULES = [
    dropdown_1.BsDropdownModule
];
var NGB_MODULES = [
    tabset_module_1.NgbTabsetModule,
    navtab_module_1.NgbNavTabsetModule,
    accordion_module_1.NgbAccordionModule
];
var IDE_MODULES = [
    panel_module_1.PanelModule
];
var MDBRootModule = /** @class */ (function () {
    function MDBRootModule() {
    }
    MDBRootModule.decorators = [
        { type: core_1.NgModule, args: [{
                    imports: [
                        dropdown_1.BsDropdownModule.forRoot()
                    ],
                    exports: MODULES,
                    schemas: [core_1.NO_ERRORS_SCHEMA]
                },] },
    ];
    return MDBRootModule;
}());
exports.MDBRootModule = MDBRootModule;
var MDBBootstrapModule = /** @class */ (function () {
    function MDBBootstrapModule() {
    }
    MDBBootstrapModule.forRoot = function () {
        return { ngModule: MDBRootModule };
    };
    MDBBootstrapModule.decorators = [
        { type: core_1.NgModule, args: [{ exports: MODULES },] },
    ];
    return MDBBootstrapModule;
}());
exports.MDBBootstrapModule = MDBBootstrapModule;
var NgbRootModule = /** @class */ (function () {
    function NgbRootModule() {
    }
    NgbRootModule.decorators = [
        { type: core_1.NgModule, args: [{
                    imports: [
                        tabset_module_1.NgbTabsetModule.forRoot(),
                        navtab_module_1.NgbNavTabsetModule.forRoot(),
                        accordion_module_1.NgbAccordionModule.forRoot()
                    ],
                    exports: NGB_MODULES
                },] },
    ];
    return NgbRootModule;
}());
exports.NgbRootModule = NgbRootModule;
var NgbModule = /** @class */ (function () {
    function NgbModule() {
    }
    NgbModule.forRoot = function () { return { ngModule: NgbRootModule }; };
    NgbModule.decorators = [
        { type: core_1.NgModule, args: [{ imports: NGB_MODULES, exports: NGB_MODULES },] },
    ];
    return NgbModule;
}());
exports.NgbModule = NgbModule;
var IDERootModule = /** @class */ (function () {
    function IDERootModule() {
    }
    IDERootModule.decorators = [
        { type: core_1.NgModule, args: [{
                    imports: [
                        panel_module_1.PanelModule.forRoot()
                    ],
                    exports: IDE_MODULES
                },] },
    ];
    return IDERootModule;
}());
exports.IDERootModule = IDERootModule;
// @NgModule({ imports: IDE_MODULES, exports: IDE_MODULES })
// export class IDEModule {
//   static forRoot(): ModuleWithProviders { return { ngModule: IDERootModule }; }
// }
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/modal/bs-modal-ref.service.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var BsModalRef = /** @class */ (function () {
    function BsModalRef() {
        /**
           * Hides the modal
           */
        this.hide = Function;
    }
    BsModalRef.decorators = [
        { type: core_1.Injectable },
    ];
    return BsModalRef;
}());
exports.BsModalRef = BsModalRef;
//# sourceMappingURL=bs-modal-ref.service.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/modal/bs-modal.service.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var component_loader_factory_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/utils/component-loader/component-loader.factory.js");
var modal_backdrop_component_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/modal/modal-backdrop.component.js");
var modal_container_component_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/modal/modal-container.component.js");
var modal_options_class_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/modal/modal-options.class.js");
var bs_modal_ref_service_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/modal/bs-modal-ref.service.js");
var BsModalService = /** @class */ (function () {
    function BsModalService(rendererFactory, clf) {
        this.clf = clf;
        // constructor props
        this.config = modal_options_class_1.modalConfigDefaults;
        this.onShow = new core_1.EventEmitter();
        this.onShown = new core_1.EventEmitter();
        this.onHide = new core_1.EventEmitter();
        this.onHidden = new core_1.EventEmitter();
        this.isBodyOverflowing = false;
        this.originalBodyPadding = 0;
        this.scrollbarWidth = 0;
        this.modalsCount = 0;
        this.lastDismissReason = '';
        this.loaders = [];
        this._backdropLoader = this.clf.createLoader(null, null, null);
        this._renderer = rendererFactory.createRenderer(null, null);
    }
    /** Shows a modal */
    /** Shows a modal */
    BsModalService.prototype.show = /** Shows a modal */
    function (content, config) {
        this.modalsCount++;
        this._createLoaders();
        this.config = Object.assign({}, modal_options_class_1.modalConfigDefaults, config);
        this._showBackdrop();
        this.lastDismissReason = null;
        return this._showModal(content);
    };
    BsModalService.prototype.hide = function (level) {
        var _this = this;
        if (this.modalsCount === 1) {
            this._hideBackdrop();
            this.resetScrollbar();
        }
        this.modalsCount = this.modalsCount >= 1 ? this.modalsCount - 1 : 0;
        setTimeout(function () {
            _this._hideModal(level);
            _this.removeLoaders(level);
        }, this.config.animated ? modal_options_class_1.TRANSITION_DURATIONS.BACKDROP : 0);
    };
    BsModalService.prototype._showBackdrop = function () {
        var isBackdropEnabled = this.config.backdrop || this.config.backdrop === 'static';
        var isBackdropInDOM = !this.backdropRef || !this.backdropRef.instance.isShown;
        if (this.modalsCount === 1) {
            this.removeBackdrop();
            if (isBackdropEnabled && isBackdropInDOM) {
                this._backdropLoader
                    .attach(modal_backdrop_component_1.ModalBackdropComponent)
                    .to('body')
                    .show({ isAnimated: this.config.animated });
                this.backdropRef = this._backdropLoader._componentRef;
            }
        }
    };
    BsModalService.prototype._hideBackdrop = function () {
        var _this = this;
        if (!this.backdropRef) {
            return;
        }
        this.backdropRef.instance.isShown = false;
        var duration = this.config.animated ? modal_options_class_1.TRANSITION_DURATIONS.BACKDROP : 0;
        setTimeout(function () { return _this.removeBackdrop(); }, duration);
    };
    BsModalService.prototype._showModal = function (content) {
        var modalLoader = this.loaders[this.loaders.length - 1];
        var bsModalRef = new bs_modal_ref_service_1.BsModalRef();
        var modalContainerRef = modalLoader
            .provide({ provide: modal_options_class_1.ModalOptions, useValue: this.config })
            .provide({ provide: bs_modal_ref_service_1.BsModalRef, useValue: bsModalRef })
            .attach(modal_container_component_1.ModalContainerComponent)
            .to('body')
            .show({ content: content, isAnimated: this.config.animated, initialState: this.config.initialState, bsModalService: this });
        modalContainerRef.instance.level = this.getModalsCount();
        bsModalRef.hide = function () {
            modalContainerRef.instance.hide();
        };
        bsModalRef.content = modalLoader.getInnerComponent() || null;
        return bsModalRef;
    };
    BsModalService.prototype._hideModal = function (level) {
        var modalLoader = this.loaders[level - 1];
        if (modalLoader) {
            modalLoader.hide();
        }
    };
    BsModalService.prototype.getModalsCount = function () {
        return this.modalsCount;
    };
    BsModalService.prototype.setDismissReason = function (reason) {
        this.lastDismissReason = reason;
    };
    BsModalService.prototype.removeBackdrop = function () {
        this._backdropLoader.hide();
        this.backdropRef = null;
    };
    /** AFTER PR MERGE MODAL.COMPONENT WILL BE USING THIS CODE */
    /** Scroll bar tricks */
    /** @internal */
    /** AFTER PR MERGE MODAL.COMPONENT WILL BE USING THIS CODE */
    /** Scroll bar tricks */
    /** @internal */
    BsModalService.prototype.checkScrollbar = /** AFTER PR MERGE MODAL.COMPONENT WILL BE USING THIS CODE */
    /** Scroll bar tricks */
    /** @internal */
    function () {
        this.isBodyOverflowing = document.body.clientWidth < window.innerWidth;
        this.scrollbarWidth = this.getScrollbarWidth();
    };
    BsModalService.prototype.setScrollbar = function () {
        if (!document) {
            return;
        }
        this.originalBodyPadding = parseInt(window
            .getComputedStyle(document.body)
            .getPropertyValue('padding-right') || '0', 10);
        if (this.isBodyOverflowing) {
            document.body.style.paddingRight = this.originalBodyPadding +
                this.scrollbarWidth + "px";
        }
    };
    BsModalService.prototype.resetScrollbar = function () {
        document.body.style.paddingRight = this.originalBodyPadding + "px";
    };
    // thx d.walsh
    // thx d.walsh
    BsModalService.prototype.getScrollbarWidth = 
    // thx d.walsh
    function () {
        var scrollDiv = this._renderer.createElement('div');
        this._renderer.addClass(scrollDiv, modal_options_class_1.CLASS_NAME.SCROLLBAR_MEASURER);
        this._renderer.appendChild(document.body, scrollDiv);
        var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
        this._renderer.removeChild(document.body, scrollDiv);
        return scrollbarWidth;
    };
    BsModalService.prototype._createLoaders = function () {
        var loader = this.clf.createLoader(null, null, null);
        this.copyEvent(loader.onBeforeShow, this.onShow);
        this.copyEvent(loader.onShown, this.onShown);
        this.copyEvent(loader.onBeforeHide, this.onHide);
        this.copyEvent(loader.onHidden, this.onHidden);
        this.loaders.push(loader);
    };
    BsModalService.prototype.removeLoaders = function (level) {
        this.loaders.splice(level - 1, 1);
        this.loaders.forEach(function (loader, i) {
            loader.instance.level = i + 1;
        });
    };
    BsModalService.prototype.copyEvent = function (from, to) {
        var _this = this;
        from.subscribe(function () {
            to.emit(_this.lastDismissReason);
        });
    };
    BsModalService.decorators = [
        { type: core_1.Injectable },
    ];
    /** @nocollapse */
    BsModalService.ctorParameters = function () { return [
        { type: core_1.RendererFactory2, },
        { type: component_loader_factory_1.ComponentLoaderFactory, },
    ]; };
    return BsModalService;
}());
exports.BsModalService = BsModalService;
//# sourceMappingURL=bs-modal.service.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/modal/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var bs_modal_ref_service_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/modal/bs-modal-ref.service.js");
exports.BsModalRef = bs_modal_ref_service_1.BsModalRef;
var modal_backdrop_options_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/modal/modal-backdrop.options.js");
exports.ModalBackdropOptions = modal_backdrop_options_1.ModalBackdropOptions;
var modal_container_component_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/modal/modal-container.component.js");
exports.ModalContainerComponent = modal_container_component_1.ModalContainerComponent;
var modal_backdrop_component_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/modal/modal-backdrop.component.js");
exports.ModalBackdropComponent = modal_backdrop_component_1.ModalBackdropComponent;
var modal_options_class_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/modal/modal-options.class.js");
exports.ModalOptions = modal_options_class_1.ModalOptions;
var modal_directive_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/modal/modal.directive.js");
exports.ModalDirective = modal_directive_1.ModalDirective;
var modal_module_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/modal/modal.module.js");
exports.ModalModule = modal_module_1.ModalModule;
var bs_modal_service_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/modal/bs-modal.service.js");
exports.BsModalService = bs_modal_service_1.BsModalService;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/modal/modal-backdrop.component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var modal_options_class_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/modal/modal-options.class.js");
var theme_provider_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/utils/theme-provider.js");
var utils_class_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/utils/utils.class.js");
/** This component will be added as background layout for modals if enabled */
var ModalBackdropComponent = /** @class */ (function () {
    function ModalBackdropComponent(element, renderer) {
        this._isShown = false;
        this.element = element;
        this.renderer = renderer;
    }
    Object.defineProperty(ModalBackdropComponent.prototype, "isAnimated", {
        get: function () {
            return this._isAnimated;
        },
        set: function (value) {
            this._isAnimated = value;
            // this.renderer.setElementClass(this.element.nativeElement, `${ClassName.FADE}`, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ModalBackdropComponent.prototype, "isShown", {
        get: function () {
            return this._isShown;
        },
        set: function (value) {
            this._isShown = value;
            if (value) {
                this.renderer.addClass(this.element.nativeElement, "" + modal_options_class_1.CLASS_NAME.IN);
            }
            else {
                this.renderer.removeClass(this.element.nativeElement, "" + modal_options_class_1.CLASS_NAME.IN);
            }
            if (!theme_provider_1.isBs3()) {
                if (value) {
                    this.renderer.addClass(this.element.nativeElement, "" + modal_options_class_1.CLASS_NAME.SHOW);
                }
                else {
                    this.renderer.removeClass(this.element.nativeElement, "" + modal_options_class_1.CLASS_NAME.SHOW);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    ModalBackdropComponent.prototype.ngOnInit = function () {
        if (this.isAnimated) {
            this.renderer.addClass(this.element.nativeElement, "" + modal_options_class_1.CLASS_NAME.FADE);
            utils_class_1.Utils.reflow(this.element.nativeElement);
        }
        this.isShown = true;
    };
    ModalBackdropComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'bs-modal-backdrop',
                    template: ' ',
                    host: { class: modal_options_class_1.CLASS_NAME.BACKDROP }
                },] },
    ];
    /** @nocollapse */
    ModalBackdropComponent.ctorParameters = function () { return [
        { type: core_1.ElementRef, },
        { type: core_1.Renderer2, },
    ]; };
    return ModalBackdropComponent;
}());
exports.ModalBackdropComponent = ModalBackdropComponent;
//# sourceMappingURL=modal-backdrop.component.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/modal/modal-backdrop.options.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ModalBackdropOptions = /** @class */ (function () {
    function ModalBackdropOptions(options) {
        this.animate = true;
        Object.assign(this, options);
    }
    return ModalBackdropOptions;
}());
exports.ModalBackdropOptions = ModalBackdropOptions;
//# sourceMappingURL=modal-backdrop.options.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/modal/modal-container.component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var modal_options_class_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/modal/modal-options.class.js");
var theme_provider_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/utils/theme-provider.js");
var ModalContainerComponent = /** @class */ (function () {
    function ModalContainerComponent(options, _element, _renderer) {
        this._element = _element;
        this._renderer = _renderer;
        this.isShown = false;
        this.isModalHiding = false;
        this.config = Object.assign({}, options);
    }
    ModalContainerComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (this.isAnimated) {
            this._renderer.addClass(this._element.nativeElement, modal_options_class_1.CLASS_NAME.FADE);
        }
        this._renderer.setStyle(this._element.nativeElement, 'display', 'block');
        setTimeout(function () {
            _this.isShown = true;
            _this._renderer.addClass(_this._element.nativeElement, theme_provider_1.isBs3() ? modal_options_class_1.CLASS_NAME.IN : modal_options_class_1.CLASS_NAME.SHOW);
        }, this.isAnimated ? modal_options_class_1.TRANSITION_DURATIONS.BACKDROP : 0);
        if (document && document.body) {
            if (this.bsModalService.getModalsCount() === 1) {
                this.bsModalService.checkScrollbar();
                this.bsModalService.setScrollbar();
            }
            this._renderer.addClass(document.body, modal_options_class_1.CLASS_NAME.OPEN);
        }
        if (this._element.nativeElement) {
            this._element.nativeElement.focus();
        }
    };
    ModalContainerComponent.prototype.onClick = function (event) {
        if (this.config.ignoreBackdropClick ||
            this.config.backdrop === 'static' ||
            event.target !== this._element.nativeElement) {
            return;
        }
        this.bsModalService.setDismissReason(modal_options_class_1.DISMISS_REASONS.BACKRDOP);
        this.hide();
    };
    ModalContainerComponent.prototype.onEsc = function (event) {
        if (!this.isShown) {
            return;
        }
        if (event.keyCode === 27) {
            event.preventDefault();
        }
        if (this.config.keyboard &&
            this.level === this.bsModalService.getModalsCount()) {
            this.bsModalService.setDismissReason(modal_options_class_1.DISMISS_REASONS.ESC);
            this.hide();
        }
    };
    ModalContainerComponent.prototype.ngOnDestroy = function () {
        if (this.isShown) {
            this.hide();
        }
    };
    ModalContainerComponent.prototype.hide = function () {
        var _this = this;
        if (this.isModalHiding || !this.isShown) {
            return;
        }
        this.isModalHiding = true;
        this._renderer.removeClass(this._element.nativeElement, theme_provider_1.isBs3() ? modal_options_class_1.CLASS_NAME.IN : modal_options_class_1.CLASS_NAME.SHOW);
        setTimeout(function () {
            _this.isShown = false;
            if (document &&
                document.body &&
                _this.bsModalService.getModalsCount() === 1) {
                _this._renderer.removeClass(document.body, modal_options_class_1.CLASS_NAME.OPEN);
            }
            _this.bsModalService.hide(_this.level);
            _this.isModalHiding = false;
        }, this.isAnimated ? modal_options_class_1.TRANSITION_DURATIONS.MODAL : 0);
    };
    ModalContainerComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'modal-container',
                    template: "\n    <div [class]=\"'modal-dialog' + (config.class ? ' ' + config.class : '')\" role=\"document\">\n      <div class=\"modal-content\">\n        <ng-content></ng-content>\n      </div>\n    </div>\n  ",
                    host: {
                        class: 'modal',
                        role: 'dialog',
                        tabindex: '-1',
                        '[attr.aria-modal]': 'true'
                    }
                },] },
    ];
    /** @nocollapse */
    ModalContainerComponent.ctorParameters = function () { return [
        { type: modal_options_class_1.ModalOptions, },
        { type: core_1.ElementRef, },
        { type: core_1.Renderer2, },
    ]; };
    ModalContainerComponent.propDecorators = {
        "onClick": [{ type: core_1.HostListener, args: ['click', ['$event'],] },],
        "onEsc": [{ type: core_1.HostListener, args: ['window:keydown.esc', ['$event'],] },],
    };
    return ModalContainerComponent;
}());
exports.ModalContainerComponent = ModalContainerComponent;
//# sourceMappingURL=modal-container.component.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/modal/modal-options.class.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var ModalOptions = /** @class */ (function () {
    function ModalOptions() {
    }
    ModalOptions.decorators = [
        { type: core_1.Injectable },
    ];
    return ModalOptions;
}());
exports.ModalOptions = ModalOptions;
exports.modalConfigDefaults = {
    backdrop: true,
    keyboard: true,
    focus: true,
    show: false,
    ignoreBackdropClick: false,
    class: '',
    animated: true,
    initialState: {}
};
exports.CLASS_NAME = {
    SCROLLBAR_MEASURER: 'modal-scrollbar-measure',
    BACKDROP: 'modal-backdrop',
    OPEN: 'modal-open',
    FADE: 'fade',
    IN: 'in',
    // bs3
    SHOW: 'show' // bs4
};
exports.SELECTOR = {
    DIALOG: '.modal-dialog',
    DATA_TOGGLE: '[data-toggle="modal"]',
    DATA_DISMISS: '[data-dismiss="modal"]',
    FIXED_CONTENT: '.navbar-fixed-top, .navbar-fixed-bottom, .is-fixed'
};
exports.TRANSITION_DURATIONS = {
    MODAL: 300,
    BACKDROP: 150
};
exports.DISMISS_REASONS = {
    BACKRDOP: 'backdrop-click',
    ESC: 'esc'
};
//# sourceMappingURL=modal-options.class.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/modal/modal.directive.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* tslint:disable:max-file-line-count */
// todo: should we support enforce focus in?
// todo: in original bs there are was a way to prevent modal from showing
// todo: original modal had resize events
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var browser_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/utils/facade/browser.js");
var theme_provider_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/utils/theme-provider.js");
var utils_class_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/utils/utils.class.js");
var modal_backdrop_component_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/modal/modal-backdrop.component.js");
var modal_options_class_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/modal/modal-options.class.js");
var component_loader_factory_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/utils/component-loader/component-loader.factory.js");
var TRANSITION_DURATION = 300;
var BACKDROP_TRANSITION_DURATION = 150;
/** Mark any code with directive to show it's content in modal */
var ModalDirective = /** @class */ (function () {
    function ModalDirective(_element, _viewContainerRef, _renderer, clf) {
        this._element = _element;
        this._renderer = _renderer;
        /** This event fires immediately when the `show` instance method is called. */
        this.onShow = new core_1.EventEmitter();
        /** This event is fired when the modal has been made visible to the user
           * (will wait for CSS transitions to complete)
           */
        this.onShown = new core_1.EventEmitter();
        /** This event is fired immediately when
           * the hide instance method has been called.
           */
        this.onHide = new core_1.EventEmitter();
        /** This event is fired when the modal has finished being
           * hidden from the user (will wait for CSS transitions to complete).
           */
        this.onHidden = new core_1.EventEmitter();
        this._isShown = false;
        this.isBodyOverflowing = false;
        this.originalBodyPadding = 0;
        this.scrollbarWidth = 0;
        this.timerHideModal = 0;
        this.timerRmBackDrop = 0;
        this.isNested = false;
        this._backdrop = clf.createLoader(_element, _viewContainerRef, _renderer);
    }
    Object.defineProperty(ModalDirective.prototype, "config", {
        get: function () {
            return this._config;
        },
        set: /** allows to set modal configuration via element property */
        function (conf) {
            this._config = this.getConfig(conf);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ModalDirective.prototype, "isShown", {
        get: function () {
            return this._isShown;
        },
        enumerable: true,
        configurable: true
    });
    ModalDirective.prototype.onClick = function (event) {
        if (this.config.ignoreBackdropClick ||
            this.config.backdrop === 'static' ||
            event.target !== this._element.nativeElement) {
            return;
        }
        this.dismissReason = modal_options_class_1.DISMISS_REASONS.BACKRDOP;
        this.hide(event);
    };
    // todo: consider preventing default and stopping propagation
    ModalDirective.prototype.onEsc = 
    // todo: consider preventing default and stopping propagation
    function (event) {
        if (!this._isShown) {
            return;
        }
        if (event.keyCode === 27) {
            event.preventDefault();
        }
        if (this.config.keyboard) {
            this.dismissReason = modal_options_class_1.DISMISS_REASONS.ESC;
            this.hide();
        }
    };
    ModalDirective.prototype.ngOnDestroy = function () {
        this.config = void 0;
        if (this._isShown) {
            this._isShown = false;
            this.hideModal();
            this._backdrop.dispose();
        }
    };
    ModalDirective.prototype.ngOnInit = function () {
        var _this = this;
        this._config = this._config || this.getConfig();
        setTimeout(function () {
            if (_this._config.show) {
                _this.show();
            }
        }, 0);
    };
    /* Public methods */
    /** Allows to manually toggle modal visibility */
    /* Public methods */
    /** Allows to manually toggle modal visibility */
    ModalDirective.prototype.toggle = /* Public methods */
    /** Allows to manually toggle modal visibility */
    function () {
        return this._isShown ? this.hide() : this.show();
    };
    /** Allows to manually open modal */
    /** Allows to manually open modal */
    ModalDirective.prototype.show = /** Allows to manually open modal */
    function () {
        var _this = this;
        this.dismissReason = null;
        this.onShow.emit(this);
        if (this._isShown) {
            return;
        }
        clearTimeout(this.timerHideModal);
        clearTimeout(this.timerRmBackDrop);
        this._isShown = true;
        this.checkScrollbar();
        this.setScrollbar();
        if (browser_1.document && browser_1.document.body) {
            if (browser_1.document.body.classList.contains(modal_options_class_1.CLASS_NAME.OPEN)) {
                this.isNested = true;
            }
            else {
                this._renderer.addClass(browser_1.document.body, modal_options_class_1.CLASS_NAME.OPEN);
            }
        }
        this.showBackdrop(function () {
            _this.showElement();
        });
    };
    /** Allows to manually close modal */
    /** Allows to manually close modal */
    ModalDirective.prototype.hide = /** Allows to manually close modal */
    function (event) {
        var _this = this;
        if (event) {
            event.preventDefault();
        }
        this.onHide.emit(this);
        // todo: add an option to prevent hiding
        if (!this._isShown) {
            return;
        }
        clearTimeout(this.timerHideModal);
        clearTimeout(this.timerRmBackDrop);
        this._isShown = false;
        this._renderer.removeClass(this._element.nativeElement, modal_options_class_1.CLASS_NAME.IN);
        if (!theme_provider_1.isBs3()) {
            this._renderer.removeClass(this._element.nativeElement, modal_options_class_1.CLASS_NAME.SHOW);
        }
        // this._addClassIn = false;
        if (this._config.animated) {
            this.timerHideModal = setTimeout(function () { return _this.hideModal(); }, TRANSITION_DURATION);
        }
        else {
            this.hideModal();
        }
    };
    /** Private methods @internal */
    /** Private methods @internal */
    ModalDirective.prototype.getConfig = /** Private methods @internal */
    function (config) {
        return Object.assign({}, modal_options_class_1.modalConfigDefaults, config);
    };
    /**
     *  Show dialog
     *  @internal
     */
    /**
       *  Show dialog
       *  @internal
       */
    ModalDirective.prototype.showElement = /**
       *  Show dialog
       *  @internal
       */
    function () {
        var _this = this;
        // todo: replace this with component loader usage
        if (!this._element.nativeElement.parentNode ||
            this._element.nativeElement.parentNode.nodeType !== Node.ELEMENT_NODE) {
            // don't move modals dom position
            if (browser_1.document && browser_1.document.body) {
                browser_1.document.body.appendChild(this._element.nativeElement);
            }
        }
        this._renderer.setAttribute(this._element.nativeElement, 'aria-hidden', 'false');
        this._renderer.setAttribute(this._element.nativeElement, 'aria-modal', 'true');
        this._renderer.setStyle(this._element.nativeElement, 'display', 'block');
        this._renderer.setProperty(this._element.nativeElement, 'scrollTop', 0);
        if (this._config.animated) {
            utils_class_1.Utils.reflow(this._element.nativeElement);
        }
        // this._addClassIn = true;
        this._renderer.addClass(this._element.nativeElement, modal_options_class_1.CLASS_NAME.IN);
        if (!theme_provider_1.isBs3()) {
            this._renderer.addClass(this._element.nativeElement, modal_options_class_1.CLASS_NAME.SHOW);
        }
        var transitionComplete = function () {
            if (_this._config.focus) {
                _this._element.nativeElement.focus();
            }
            _this.onShown.emit(_this);
        };
        if (this._config.animated) {
            setTimeout(transitionComplete, TRANSITION_DURATION);
        }
        else {
            transitionComplete();
        }
    };
    /** @internal */
    /** @internal */
    ModalDirective.prototype.hideModal = /** @internal */
    function () {
        var _this = this;
        this._renderer.setAttribute(this._element.nativeElement, 'aria-hidden', 'true');
        this._renderer.setStyle(this._element.nativeElement, 'display', 'none');
        this.showBackdrop(function () {
            if (!_this.isNested) {
                if (browser_1.document && browser_1.document.body) {
                    _this._renderer.removeClass(browser_1.document.body, modal_options_class_1.CLASS_NAME.OPEN);
                }
                _this.resetScrollbar();
            }
            _this.resetAdjustments();
            _this.focusOtherModal();
            _this.onHidden.emit(_this);
        });
    };
    // todo: original show was calling a callback when done, but we can use
    // promise
    /** @internal */
    // todo: original show was calling a callback when done, but we can use
    // promise
    /** @internal */
    ModalDirective.prototype.showBackdrop = 
    // todo: original show was calling a callback when done, but we can use
    // promise
    /** @internal */
    function (callback) {
        var _this = this;
        if (this._isShown &&
            this.config.backdrop &&
            (!this.backdrop || !this.backdrop.instance.isShown)) {
            this.removeBackdrop();
            this._backdrop
                .attach(modal_backdrop_component_1.ModalBackdropComponent)
                .to('body')
                .show({ isAnimated: this._config.animated });
            this.backdrop = this._backdrop._componentRef;
            if (!callback) {
                return;
            }
            if (!this._config.animated) {
                callback();
                return;
            }
            setTimeout(callback, BACKDROP_TRANSITION_DURATION);
        }
        else if (!this._isShown && this.backdrop) {
            this.backdrop.instance.isShown = false;
            var callbackRemove = function () {
                _this.removeBackdrop();
                if (callback) {
                    callback();
                }
            };
            if (this.backdrop.instance.isAnimated) {
                this.timerRmBackDrop = setTimeout(callbackRemove, BACKDROP_TRANSITION_DURATION);
            }
            else {
                callbackRemove();
            }
        }
        else if (callback) {
            callback();
        }
    };
    /** @internal */
    /** @internal */
    ModalDirective.prototype.removeBackdrop = /** @internal */
    function () {
        this._backdrop.hide();
    };
    /** Events tricks */
    // no need for it
    // protected setEscapeEvent():void {
    //   if (this._isShown && this._config.keyboard) {
    //     $(this._element).on(Event.KEYDOWN_DISMISS, (event) => {
    //       if (event.which === 27) {
    //         this.hide()
    //       }
    //     })
    //
    //   } else if (!this._isShown) {
    //     $(this._element).off(Event.KEYDOWN_DISMISS)
    //   }
    // }
    // protected setResizeEvent():void {
    // console.log(this.renderer.listenGlobal('', Event.RESIZE));
    // if (this._isShown) {
    //   $(window).on(Event.RESIZE, $.proxy(this._handleUpdate, this))
    // } else {
    //   $(window).off(Event.RESIZE)
    // }
    // }
    /** Events tricks */
    // no need for it
    // protected setEscapeEvent():void {
    //   if (this._isShown && this._config.keyboard) {
    //     $(this._element).on(Event.KEYDOWN_DISMISS, (event) => {
    //       if (event.which === 27) {
    //         this.hide()
    //       }
    //     })
    //
    //   } else if (!this._isShown) {
    //     $(this._element).off(Event.KEYDOWN_DISMISS)
    //   }
    // }
    // protected setResizeEvent():void {
    // console.log(this.renderer.listenGlobal('', Event.RESIZE));
    // if (this._isShown) {
    //   $(window).on(Event.RESIZE, $.proxy(this._handleUpdate, this))
    // } else {
    //   $(window).off(Event.RESIZE)
    // }
    // }
    ModalDirective.prototype.focusOtherModal = /** Events tricks */
    // no need for it
    // protected setEscapeEvent():void {
    //   if (this._isShown && this._config.keyboard) {
    //     $(this._element).on(Event.KEYDOWN_DISMISS, (event) => {
    //       if (event.which === 27) {
    //         this.hide()
    //       }
    //     })
    //
    //   } else if (!this._isShown) {
    //     $(this._element).off(Event.KEYDOWN_DISMISS)
    //   }
    // }
    // protected setResizeEvent():void {
    // console.log(this.renderer.listenGlobal('', Event.RESIZE));
    // if (this._isShown) {
    //   $(window).on(Event.RESIZE, $.proxy(this._handleUpdate, this))
    // } else {
    //   $(window).off(Event.RESIZE)
    // }
    // }
    function () {
        if (this._element.nativeElement.parentElement == null)
            return;
        var otherOpenedModals = this._element.nativeElement.parentElement.querySelectorAll('.in[bsModal]');
        if (!otherOpenedModals.length) {
            return;
        }
        otherOpenedModals[otherOpenedModals.length - 1].focus();
    };
    /** @internal */
    /** @internal */
    ModalDirective.prototype.resetAdjustments = /** @internal */
    function () {
        this._renderer.setStyle(this._element.nativeElement, 'paddingLeft', '');
        this._renderer.setStyle(this._element.nativeElement, 'paddingRight', '');
    };
    /** Scroll bar tricks */
    /** @internal */
    /** Scroll bar tricks */
    /** @internal */
    ModalDirective.prototype.checkScrollbar = /** Scroll bar tricks */
    /** @internal */
    function () {
        this.isBodyOverflowing = browser_1.document.body.clientWidth < browser_1.window.innerWidth;
        this.scrollbarWidth = this.getScrollbarWidth();
    };
    ModalDirective.prototype.setScrollbar = function () {
        if (!browser_1.document) {
            return;
        }
        this.originalBodyPadding = parseInt(browser_1.window
            .getComputedStyle(browser_1.document.body)
            .getPropertyValue('padding-right') || 0, 10);
        if (this.isBodyOverflowing) {
            browser_1.document.body.style.paddingRight = this.originalBodyPadding +
                this.scrollbarWidth + "px";
        }
    };
    ModalDirective.prototype.resetScrollbar = function () {
        browser_1.document.body.style.paddingRight = this.originalBodyPadding + 'px';
    };
    // thx d.walsh
    // thx d.walsh
    ModalDirective.prototype.getScrollbarWidth = 
    // thx d.walsh
    function () {
        var scrollDiv = this._renderer.createElement('div');
        this._renderer.addClass(scrollDiv, modal_options_class_1.CLASS_NAME.SCROLLBAR_MEASURER);
        this._renderer.appendChild(browser_1.document.body, scrollDiv);
        var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
        this._renderer.removeChild(browser_1.document.body, scrollDiv);
        return scrollbarWidth;
    };
    ModalDirective.decorators = [
        { type: core_1.Directive, args: [{
                    selector: '[bsModal]',
                    exportAs: 'bs-modal'
                },] },
    ];
    /** @nocollapse */
    ModalDirective.ctorParameters = function () { return [
        { type: core_1.ElementRef, },
        { type: core_1.ViewContainerRef, },
        { type: core_1.Renderer2, },
        { type: component_loader_factory_1.ComponentLoaderFactory, },
    ]; };
    ModalDirective.propDecorators = {
        "config": [{ type: core_1.Input },],
        "onShow": [{ type: core_1.Output },],
        "onShown": [{ type: core_1.Output },],
        "onHide": [{ type: core_1.Output },],
        "onHidden": [{ type: core_1.Output },],
        "onClick": [{ type: core_1.HostListener, args: ['click', ['$event'],] },],
        "onEsc": [{ type: core_1.HostListener, args: ['keydown.esc', ['$event'],] },],
    };
    return ModalDirective;
}());
exports.ModalDirective = ModalDirective;
//# sourceMappingURL=modal.directive.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/modal/modal.module.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var modal_backdrop_component_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/modal/modal-backdrop.component.js");
var modal_directive_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/modal/modal.directive.js");
var positioning_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/utils/positioning/index.js");
var component_loader_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/utils/component-loader/index.js");
var modal_container_component_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/modal/modal-container.component.js");
var bs_modal_service_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/modal/bs-modal.service.js");
var ModalModule = /** @class */ (function () {
    function ModalModule() {
    }
    ModalModule.forRoot = function () {
        return {
            ngModule: ModalModule,
            providers: [bs_modal_service_1.BsModalService, component_loader_1.ComponentLoaderFactory, positioning_1.PositioningService]
        };
    };
    ModalModule.decorators = [
        { type: core_1.NgModule, args: [{
                    declarations: [
                        modal_backdrop_component_1.ModalBackdropComponent,
                        modal_directive_1.ModalDirective,
                        modal_container_component_1.ModalContainerComponent
                    ],
                    exports: [modal_backdrop_component_1.ModalBackdropComponent, modal_directive_1.ModalDirective],
                    entryComponents: [modal_backdrop_component_1.ModalBackdropComponent, modal_container_component_1.ModalContainerComponent]
                },] },
    ];
    return ModalModule;
}());
exports.ModalModule = ModalModule;
//# sourceMappingURL=modal.module.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/navbar/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var navbar_directive_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/navbar/navbar.directive.js");
exports.NavbarDirective = navbar_directive_1.NavbarDirective;
var navbar_state_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/navbar/navbar.state.js");
exports.NavbarState = navbar_state_1.NavbarState;
var navbar_module_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/navbar/navbar.module.js");
exports.NavbarModule = navbar_module_1.NavbarModule;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/navbar/navbar.directive.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var navbar_state_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/navbar/navbar.state.js");
var core_2 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var dropdown_config_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/dropdown/dropdown.config.js");
var dropdown_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/dropdown/index.js");
var NavbarDirective = /** @class */ (function () {
    function NavbarDirective(_elementRef, _config, _state) {
        this._elementRef = _elementRef;
        this._config = _config;
        this._state = _state;
        this._state.autoClose = this._config.autoClose;
        this.onItemClick = this._state.onItemClick;
    }
    NavbarDirective.prototype.onDocumentClick = function (event) {
        this._state.hideAllDropdown();
    };
    NavbarDirective.prototype.onEsc = function () {
        if (this._state.autoClose) {
            this._state.hideCurrentDropdown();
        }
    };
    NavbarDirective.prototype.ngOnInit = function () {
    };
    NavbarDirective.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.childDropdowns.forEach(function (item) { return _this._state.addDropdown(item); });
    };
    NavbarDirective.decorators = [
        { type: core_1.Directive, args: [{
                    selector: '[navbar]',
                    exportAs: 'navbar',
                    providers: [navbar_state_1.NavbarState]
                },] },
    ];
    /** @nocollapse */
    NavbarDirective.ctorParameters = function () { return [
        { type: core_2.ElementRef, },
        { type: dropdown_config_1.BsDropdownConfig, },
        { type: navbar_state_1.NavbarState, },
    ]; };
    NavbarDirective.propDecorators = {
        "childDropdowns": [{ type: core_1.ContentChildren, args: [dropdown_1.BsDropdownDirective,] },],
        "childDropdowns2": [{ type: core_1.ViewChildren, args: [dropdown_1.BsDropdownDirective,] },],
        "onDocumentClick": [{ type: core_1.HostListener, args: ['document:click', ['$event'],] },],
        "onEsc": [{ type: core_1.HostListener, args: ['keyup.esc',] },],
    };
    return NavbarDirective;
}());
exports.NavbarDirective = NavbarDirective;
//# sourceMappingURL=navbar.directive.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/navbar/navbar.module.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var navbar_directive_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/navbar/navbar.directive.js");
var navbar_state_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/navbar/navbar.state.js");
var NavbarModule = /** @class */ (function () {
    function NavbarModule() {
    }
    NavbarModule.decorators = [
        { type: core_1.NgModule, args: [{
                    declarations: [navbar_directive_1.NavbarDirective],
                    providers: [navbar_state_1.NavbarState],
                    exports: [navbar_directive_1.NavbarDirective]
                },] },
    ];
    return NavbarModule;
}());
exports.NavbarModule = NavbarModule;
//# sourceMappingURL=navbar.module.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/navbar/navbar.state.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var NavbarState = /** @class */ (function () {
    function NavbarState() {
        this.dropdownInstances = [];
        this.menuItems = [];
        this.subscriptions = [];
        this.onItemClick = new core_1.EventEmitter();
    }
    NavbarState.prototype.addDropdown = function (dropdown) {
        var _this = this;
        if (!this.dropdownInstances.find(function (item) { return item === dropdown; })) {
            this.dropdownInstances.push(dropdown);
            this.subscribeDropdown(dropdown);
            dropdown.onShown.subscribe(function () {
                return setTimeout(function () {
                    dropdown.childDropdowns.forEach(function (item) { return _this.addDropdown(item); });
                });
            });
        }
    };
    NavbarState.prototype.addMenuItem = function (menuItem) {
        if (!this.menuItems.find(function (item) { return item === menuItem; })) {
            this.menuItems.push(menuItem);
            this.subscribeMenuItem(menuItem);
        }
    };
    NavbarState.prototype.subscribeDropdown = function (dropdown) {
        var _this = this;
        // 在下拉菜单显示、隐藏时，记录下显示状态。
        // this.subscriptions.push(
        //   dropdown.onShown.subscribe((value) => {
        //     debugger;
        //     if(dropdown.isSubMenu) {
        //
        //     }
        //   })
        // );
        //
        // this.subscriptions.push(
        //   dropdown.onHidden.subscribe((value) => {
        //
        //   })
        // );
        this.subscriptions.push(dropdown.state.onClick.subscribe(function (event) {
            if (dropdown.level === 1) {
                if (dropdown.isOpen && _this.level1Dropdown === dropdown) {
                    _this.innerHideL1Dropdown();
                }
                else {
                    _this.innerShowL1Dropdown(dropdown);
                }
            }
            else if (dropdown.level === 2) {
                if (!dropdown.isOpen || _this.level2Dropdown !== dropdown) {
                    _this.innerShowL2Dropdown(dropdown);
                }
            }
            event.stopPropagation();
        }));
        this.subscriptions.push(dropdown.state.onHover.subscribe(function () {
            if (!_this.level1Dropdown) {
                // 菜单没展开，鼠标悬停没有效果
                return;
            }
            _this.show(dropdown);
        }));
    };
    NavbarState.prototype.subscribeMenuItem = function (menuItem) {
        var _this = this;
        this.subscriptions.push(menuItem.onHover.subscribe(function () {
            if (!_this.level1Dropdown) {
                return;
            }
            if (_this.level1Dropdown.containsItem(menuItem)) {
                _this.innerHideL2Dropdown();
            }
        }));
        this.subscriptions.push(menuItem.onClick.subscribe(function (command) {
            _this.onItemClick.emit(command);
        }));
    };
    NavbarState.prototype.ngOnDestroy = function () {
        this.subscriptions.forEach(function (sub) {
            sub.unsubscribe();
        });
    };
    NavbarState.prototype.hideCurrentDropdown = function () {
        if (this.level2Dropdown) {
            this.innerHideL2Dropdown();
        }
        else {
            this.innerHideL1Dropdown();
        }
    };
    NavbarState.prototype.hideAllDropdown = function () {
        this.innerHideL2Dropdown();
        this.innerHideL1Dropdown();
    };
    NavbarState.prototype.show = function (dropdown) {
        if (dropdown.level === 1) {
            if (dropdown !== this.level1Dropdown) {
                this.innerShowL1Dropdown(dropdown);
            }
            this.innerHideL2Dropdown();
        }
        else if (dropdown.level === 2) {
            if (dropdown !== this.level2Dropdown) {
                this.innerShowL2Dropdown(dropdown);
            }
        }
        /*if (this.isMenuShown && this.isSubMenuShown && this.parentDropdown && this.parentDropdown.containsItem(dropdown)) {
              // 要显示的是子菜单，不是当前子菜单
              if (this.currentDropdown && this.currentDropdown !== dropdown) {
                this.currentDropdown.hide();
              }
              dropdown.show();
              this.currentDropdown = dropdown;
              this.isSubMenuShown = true;
            } else if (this.isMenuShown && !this.isSubMenuShown && this.currentDropdown && this.currentDropdown.containsItem(dropdown)) {
        
            } else {
              // 主菜单
              if (this.isSubMenuShown && this.currentDropdown && this.parentDropdown) {
                this.currentDropdown.hide();
                this.currentDropdown = null;
                this.isSubMenuShown = false;
              }
              if (this.isMenuShown && this.currentDropdown && this.currentDropdown !== dropdown) {
                this.currentDropdown.hide();
              }
              dropdown.show();
              this.currentDropdown = dropdown;
              this.isMenuShown = true;
            }*/
    };
    NavbarState.prototype.hide = function (dropdown) {
        // if
    };
    NavbarState.prototype.innerShowL1Dropdown = function (target) {
        if (this.level1Dropdown) {
            this.level1Dropdown.hide();
        }
        target.show();
        this.level1Dropdown = target;
    };
    NavbarState.prototype.innerHideL1Dropdown = function () {
        if (this.level1Dropdown) {
            this.level1Dropdown.hide();
            this.level1Dropdown = null;
        }
    };
    NavbarState.prototype.innerShowL2Dropdown = function (target) {
        if (this.level2Dropdown) {
            this.level2Dropdown.hide();
        }
        target.show();
        this.level2Dropdown = target;
    };
    NavbarState.prototype.innerHideL2Dropdown = function () {
        if (this.level2Dropdown) {
            this.level2Dropdown.hide();
            this.level2Dropdown = null;
        }
    };
    NavbarState.decorators = [
        { type: core_1.Injectable },
    ];
    /** @nocollapse */
    NavbarState.ctorParameters = function () { return []; };
    return NavbarState;
}());
exports.NavbarState = NavbarState;
//# sourceMappingURL=navbar.state.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/navtab/navtab-config.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
/**
 * Configuration service for the NgbNavTabset component.
 * You can inject this service, typically in your root component, and customize the values of its properties in
 * order to provide default values for all the tabsets used in the application.
 */
var NgbNavTabsetConfig = /** @class */ (function () {
    function NgbNavTabsetConfig() {
        this.justify = 'start';
        this.orientation = 'horizontal';
        this.type = 'tabs';
    }
    NgbNavTabsetConfig.decorators = [
        { type: core_1.Injectable },
    ];
    return NgbNavTabsetConfig;
}());
exports.NgbNavTabsetConfig = NgbNavTabsetConfig;
//# sourceMappingURL=navtab-config.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/navtab/navtab.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var navtab_config_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/navtab/navtab-config.js");
var nextId = 0;
/**
 * This directive should be used to wrap tab titles that need to contain HTML markup or other directives.
 */
var NgbNavTabTitle = /** @class */ (function () {
    function NgbNavTabTitle(templateRef) {
        this.templateRef = templateRef;
    }
    NgbNavTabTitle.decorators = [
        { type: core_1.Directive, args: [{ selector: 'ng-template[ngbNavTabTitle]' },] },
    ];
    /** @nocollapse */
    NgbNavTabTitle.ctorParameters = function () { return [
        { type: core_1.TemplateRef, },
    ]; };
    return NgbNavTabTitle;
}());
exports.NgbNavTabTitle = NgbNavTabTitle;
/**
 * This directive must be used to wrap content to be displayed in a tab.
 */
var NgbNavTabContent = /** @class */ (function () {
    function NgbNavTabContent(templateRef) {
        this.templateRef = templateRef;
    }
    NgbNavTabContent.decorators = [
        { type: core_1.Directive, args: [{ selector: 'ng-template[ngbNavTabContent]' },] },
    ];
    /** @nocollapse */
    NgbNavTabContent.ctorParameters = function () { return [
        { type: core_1.TemplateRef, },
    ]; };
    return NgbNavTabContent;
}());
exports.NgbNavTabContent = NgbNavTabContent;
/**
 * A directive representing an individual tab.
 */
var NgbNavTab = /** @class */ (function () {
    function NgbNavTab() {
        /**
           * Unique tab identifier. Must be unique for the entire document for proper accessibility support.
           */
        this.id = "ngb-tab-" + nextId++;
        /**
           * Allows toggling disabled state of a given state. Disabled tabs can't be selected.
           */
        this.disabled = false;
    }
    NgbNavTab.decorators = [
        { type: core_1.Directive, args: [{ selector: 'ngb-navtab' },] },
    ];
    /** @nocollapse */
    NgbNavTab.propDecorators = {
        "id": [{ type: core_1.Input },],
        "title": [{ type: core_1.Input },],
        "disabled": [{ type: core_1.Input },],
        "contentTpl": [{ type: core_1.ContentChild, args: [NgbNavTabContent,] },],
        "titleTpl": [{ type: core_1.ContentChild, args: [NgbNavTabTitle,] },],
    };
    return NgbNavTab;
}());
exports.NgbNavTab = NgbNavTab;
/**
 * A component that makes it easy to create tabbed interface.
 */
var NgbNavTabset = /** @class */ (function () {
    function NgbNavTabset(config) {
        /**
           * Whether the closed tabs should be hidden without destroying them
           */
        this.destroyOnHide = true;
        /**
           * A tab change event fired right before the tab selection happens. See NgbNavTabChangeEvent for payload details
           */
        this.tabChange = new core_1.EventEmitter();
        this.type = config.type;
        this.justify = config.justify;
        this.orientation = config.orientation;
    }
    Object.defineProperty(NgbNavTabset.prototype, "justify", {
        set: /**
           * The horizontal alignment of the nav with flexbox utilities. Can be one of 'start', 'center', 'end', 'fill' or
           * 'justified'
           * The default value is 'start'.
           */
        function (className) {
            if (className === 'fill' || className === 'justified') {
                this.justifyClass = "nav-" + className;
            }
            else {
                this.justifyClass = "justify-content-" + className;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Selects the tab with the given id and shows its associated pane.
     * Any other tab that was previously selected becomes unselected and its associated pane is hidden.
     */
    /**
       * Selects the tab with the given id and shows its associated pane.
       * Any other tab that was previously selected becomes unselected and its associated pane is hidden.
       */
    NgbNavTabset.prototype.select = /**
       * Selects the tab with the given id and shows its associated pane.
       * Any other tab that was previously selected becomes unselected and its associated pane is hidden.
       */
    function (tabId) {
        var selectedTab = this._getTabById(tabId);
        if (selectedTab && !selectedTab.disabled && this.activeId !== selectedTab.id) {
            var defaultPrevented_1 = false;
            this.tabChange.emit({ activeId: this.activeId, nextId: selectedTab.id, preventDefault: function () { defaultPrevented_1 = true; } });
            if (!defaultPrevented_1) {
                this.activeId = selectedTab.id;
            }
        }
    };
    NgbNavTabset.prototype.ngAfterContentChecked = function () {
        // auto-correct activeId that might have been set incorrectly as input
        var activeTab = this._getTabById(this.activeId);
        this.activeId = activeTab ? activeTab.id : (this.tabs.length ? this.tabs.first.id : null);
    };
    NgbNavTabset.prototype._getTabById = function (id) {
        var tabsWithId = this.tabs.filter(function (tab) { return tab.id === id; });
        return tabsWithId.length ? tabsWithId[0] : null;
    };
    NgbNavTabset.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'ngb-navtabset',
                    exportAs: 'NgbNavTabset',
                    template: "\n    <ul [class]=\"'web-ide-activity-bar nav nav-' + type + (orientation == 'horizontal'?  ' '\n      + justifyClass : ' flex-column')\" role=\"tablist\">\n      <li class=\"nav-item\" *ngFor=\"let tab of tabs\">\n        <a [id]=\"tab.id\" class=\"nav-link\" [class.active]=\"tab.id === activeId\" [class.disabled]=\"tab.disabled\"\n          href (click)=\"!!select(tab.id)\" role=\"tab\" [attr.tabindex]=\"(tab.disabled ? '-1': undefined)\"\n          [attr.aria-controls]=\"(!destroyOnHide || tab.id === activeId ? tab.id + '-panel' : null)\"\n          [attr.aria-expanded]=\"tab.id === activeId\" [attr.aria-disabled]=\"tab.disabled\">\n          {{tab.title}}<ng-template [ngTemplateOutlet]=\"tab.titleTpl?.templateRef\"></ng-template>\n        </a>\n      </li>\n    </ul>\n    <div class=\"web-ide-side-bar tab-content\">\n      <ng-template ngFor let-tab [ngForOf]=\"tabs\">\n        <div\n          class=\"tab-pane {{tab.id === activeId ? 'active' : null}}\"\n          *ngIf=\"!destroyOnHide || tab.id === activeId\"\n          role=\"tabpanel\"\n          [attr.aria-labelledby]=\"tab.id\" id=\"{{tab.id}}-panel\"\n          [attr.aria-expanded]=\"tab.id === activeId\">\n          <ng-template [ngTemplateOutlet]=\"tab.contentTpl.templateRef\"></ng-template>\n        </div>\n      </ng-template>\n    </div>\n  ",
                    styles: [":host { display: flex !important; flex: 1; }"]
                },] },
    ];
    /** @nocollapse */
    NgbNavTabset.ctorParameters = function () { return [
        { type: navtab_config_1.NgbNavTabsetConfig, },
    ]; };
    NgbNavTabset.propDecorators = {
        "tabs": [{ type: core_1.ContentChildren, args: [NgbNavTab,] },],
        "activeId": [{ type: core_1.Input },],
        "destroyOnHide": [{ type: core_1.Input },],
        "justify": [{ type: core_1.Input },],
        "orientation": [{ type: core_1.Input },],
        "type": [{ type: core_1.Input },],
        "tabChange": [{ type: core_1.Output },],
    };
    return NgbNavTabset;
}());
exports.NgbNavTabset = NgbNavTabset;
//# sourceMappingURL=navtab.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/navtab/navtab.module.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/esm5/common.js");
var navtab_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/navtab/navtab.js");
var navtab_config_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/navtab/navtab-config.js");
var navtab_2 = __webpack_require__("./node_modules/@farris/ide-devkit/components/navtab/navtab.js");
exports.NgbNavTabset = navtab_2.NgbNavTabset;
exports.NgbNavTab = navtab_2.NgbNavTab;
exports.NgbNavTabContent = navtab_2.NgbNavTabContent;
exports.NgbNavTabTitle = navtab_2.NgbNavTabTitle;
var navtab_config_2 = __webpack_require__("./node_modules/@farris/ide-devkit/components/navtab/navtab-config.js");
exports.NgbNavTabsetConfig = navtab_config_2.NgbNavTabsetConfig;
var NGB_TABSET_DIRECTIVES = [navtab_1.NgbNavTabset, navtab_1.NgbNavTab, navtab_1.NgbNavTabContent, navtab_1.NgbNavTabTitle];
var NgbNavTabsetModule = /** @class */ (function () {
    function NgbNavTabsetModule() {
    }
    NgbNavTabsetModule.forRoot = function () { return { ngModule: NgbNavTabsetModule, providers: [navtab_config_1.NgbNavTabsetConfig] }; };
    NgbNavTabsetModule.decorators = [
        { type: core_1.NgModule, args: [{ declarations: NGB_TABSET_DIRECTIVES, exports: NGB_TABSET_DIRECTIVES, imports: [common_1.CommonModule] },] },
    ];
    return NgbNavTabsetModule;
}());
exports.NgbNavTabsetModule = NgbNavTabsetModule;
//# sourceMappingURL=navtab.module.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/ng2-right-click-menu/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var sh_context_menu_module_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/ng2-right-click-menu/sh-context-menu.module.js");
exports.ShContextMenuModule = sh_context_menu_module_1.ShContextMenuModule;
var sh_context_menu_component_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/ng2-right-click-menu/sh-context-menu.component.js");
exports.ShContextMenuComponent = sh_context_menu_component_1.ShContextMenuComponent;
var sh_attach_menu_directive_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/ng2-right-click-menu/sh-attach-menu.directive.js");
exports.ShAttachMenuDirective = sh_attach_menu_directive_1.ShAttachMenuDirective;
var sh_context_menu_item_directive_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/ng2-right-click-menu/sh-context-menu-item.directive.js");
exports.ShContextMenuItemDirective = sh_context_menu_item_directive_1.ShContextMenuItemDirective;
var sh_context_menu_service_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/ng2-right-click-menu/sh-context-menu.service.js");
exports.ShContextMenuService = sh_context_menu_service_1.ShContextMenuService;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/ng2-right-click-menu/sh-attach-menu.directive.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var sh_context_menu_service_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/ng2-right-click-menu/sh-context-menu.service.js");
var sh_context_menu_component_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/ng2-right-click-menu/sh-context-menu.component.js");
var fromEvent_1 = __webpack_require__("./node_modules/rxjs/observable/fromEvent.js");
var merge_1 = __webpack_require__("./node_modules/rxjs/observable/merge.js");
var ShAttachMenuDirective = /** @class */ (function () {
    function ShAttachMenuDirective(ctxService, elm) {
        this.ctxService = ctxService;
        this.elm = elm;
    }
    ShAttachMenuDirective.prototype.ngOnInit = function () {
        this.setupEvents();
    };
    ShAttachMenuDirective.prototype.setupEvents = function () {
        var _this = this;
        var observables = [];
        if (!this.triggers) {
            observables.push(fromEvent_1.fromEvent(this.elm.nativeElement, 'contextmenu'));
        }
        else {
            this.triggers.forEach(function (t) {
                observables.push(fromEvent_1.fromEvent(_this.elm.nativeElement, t));
            });
        }
        this.sub = merge_1.merge.apply(void 0, observables).subscribe(this.openMenu.bind(this));
    };
    ShAttachMenuDirective.prototype.openMenu = function (event) {
        this.ctxService.openMenu({
            menu: this.menu,
            mouseEvent: event,
            targetElement: this.elm,
            data: this.data
        });
    };
    ShAttachMenuDirective.prototype.ngOnDestroy = function () {
        this.sub.unsubscribe();
    };
    ShAttachMenuDirective.decorators = [
        { type: core_1.Directive, args: [{
                    selector: '[shAttachMenu]'
                },] },
    ];
    /** @nocollapse */
    ShAttachMenuDirective.ctorParameters = function () { return [
        { type: sh_context_menu_service_1.ShContextMenuService, },
        { type: core_1.ElementRef, },
    ]; };
    ShAttachMenuDirective.propDecorators = {
        "menu": [{ type: core_1.Input, args: ['shAttachMenu',] },],
        "triggers": [{ type: core_1.Input, args: ['shMenuTriggers',] },],
        "data": [{ type: core_1.Input, args: ['shMenuData',] },],
    };
    return ShAttachMenuDirective;
}());
exports.ShAttachMenuDirective = ShAttachMenuDirective;
//# sourceMappingURL=sh-attach-menu.directive.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/ng2-right-click-menu/sh-context-menu-item.directive.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var MenuItemContext = /** @class */ (function () {
    function MenuItemContext() {
        this.$implicit = {};
    }
    return MenuItemContext;
}());
exports.MenuItemContext = MenuItemContext;
var ShContextMenuItemDirective = /** @class */ (function () {
    function ShContextMenuItemDirective(template) {
        this.template = template;
        this.closeOnClick = true;
        this.click = new core_1.EventEmitter();
        this.context = new MenuItemContext();
    }
    ShContextMenuItemDirective.prototype.setNotActive = function () {
        this._active = false;
        if (this.subMenu) {
            this.subMenu.setNotActive();
        }
    };
    ShContextMenuItemDirective.prototype.setActive = function () {
        this._active = true;
    };
    ShContextMenuItemDirective.decorators = [
        { type: core_1.Directive, args: [{
                    selector: '[shContextMenuItem]'
                },] },
    ];
    /** @nocollapse */
    ShContextMenuItemDirective.ctorParameters = function () { return [
        { type: core_1.TemplateRef, decorators: [{ type: core_1.Optional },] },
    ]; };
    ShContextMenuItemDirective.propDecorators = {
        "subMenu": [{ type: core_1.Input },],
        "divider": [{ type: core_1.Input },],
        "visible": [{ type: core_1.Input },],
        "disabled": [{ type: core_1.Input },],
        "closeOnClick": [{ type: core_1.Input },],
        "click": [{ type: core_1.Output },],
    };
    return ShContextMenuItemDirective;
}());
exports.ShContextMenuItemDirective = ShContextMenuItemDirective;
//# sourceMappingURL=sh-context-menu-item.directive.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/ng2-right-click-menu/sh-context-menu.component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var sh_context_menu_item_directive_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/ng2-right-click-menu/sh-context-menu-item.directive.js");
var sh_context_menu_service_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/ng2-right-click-menu/sh-context-menu.service.js");
var ShContextMenuComponent = /** @class */ (function () {
    function ShContextMenuComponent(ctxService) {
        this.ctxService = ctxService;
        this.contentChildrenItems = new core_1.QueryList();
        this.viewChildrenItems = new core_1.QueryList();
    }
    Object.defineProperty(ShContextMenuComponent.prototype, "menuItems", {
        get: function () {
            // when using the ShContextMenuComponent as menu, the ContentChildren is the source
            if (this.contentChildrenItems.length) {
                return this.contentChildrenItems;
            }
            // when using a custom component as menu the ViewChildren is the source
            return this.viewChildrenItems;
        },
        enumerable: true,
        configurable: true
    });
    ShContextMenuComponent.prototype.onEnter = function ($event, item, elm) {
        this.ctxService.closeSubMenus(this);
        this.setNotActive();
        if (!item.subMenu || !item.visible) {
            return;
        }
        this.setActive(item);
        this.ctxService.openSubMenu({
            data: item.context.$implicit,
            targetElement: new core_1.ElementRef(elm),
            menu: item.subMenu,
            mouseEvent: $event,
            parentMenu: this
        });
    };
    ShContextMenuComponent.prototype.setActive = function (item) {
        item.setActive();
        this.subActive = true;
    };
    ShContextMenuComponent.prototype.onClick = function (event, item) {
        // TODO: move click handling to service
        if (item.divider) {
            return;
        }
        if (!item.subMenu && item.closeOnClick) {
            this.ctxService.destroy();
            item.click.emit({
                data: item.context.$implicit,
                event: event
            });
        }
    };
    ShContextMenuComponent.prototype.callWithContext = function (fn, fallbackContext, data, event) {
        return fn.call(this.thisContext ? this.thisContext : fallbackContext, { data: data, event: event });
    };
    ShContextMenuComponent.prototype.close = function () {
        this.setNotActive();
        this.menuContainer.detach();
        if (this.overlayRef) {
            this.overlayRef.detach();
        }
    };
    ShContextMenuComponent.prototype.ngOnDestroy = function () {
        this.close();
    };
    ShContextMenuComponent.prototype.setNotActive = function () {
        this.subActive = false;
        this.menuItems.forEach(function (i) { return i.setNotActive(); });
    };
    ShContextMenuComponent.prototype.isVisible = function (item) {
        if (!item.visible) {
            return true;
        }
        return this.callWithContext(item.visible, this, item.context.$implicit, null);
    };
    ShContextMenuComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'sh-context-menu',
                    encapsulation: core_1.ViewEncapsulation.None,
                    styles: [".sh-backdrop { background-color: transparent; } .sh-context-menu { background: #ffffff; min-width: 150px; border: 1px solid rgba(0, 0, 0, 0.2); border-radius: 3px; box-shadow: 0 0 10px 2px rgba(0, 0, 0, 0.1); color: #656565; margin: 0; } .sh-context-menu--item { padding: 7px 10px 7px 15px; transition: all 0.15s; } .sh-context-menu--item:hover, .sh-context-menu--item__sub-active { /* background-color: #4b8bec; */ background-color: #ededed; /* color: white; */ cursor: pointer; } .sh-context-menu--item.sh-context-menu--item__divider:hover { background-color: #ececec; color: black; cursor: default; } .sh-context-menu--item__divider { height: 1px; padding: 0; overflow: hidden; border-bottom: 1px solid #d0d0d0; } .sh-context-menu--item.sh-sub-anchor { position: relative; min-width: 140px; } .sh-sub-anchor:after { content: \"\"; top: 50%; right: 6px; transform: translateY(-50%); position: absolute; border-top: 4px solid transparent; border-bottom: 4px solid transparent; border-left: 5px solid black; } .sh-context-menu--item__disable { color: #a6a2a2; }"],
                    template: "\n    <ng-container #menuContainer></ng-container>\n    <ng-template #menuTemplate>\n      <div class=\"sh-context-menu\">\n        <div\n          *ngFor=\"let menuItem of menuItems\"\n          #itemElement\n          [ngClass]=\"{'sh-sub-anchor': menuItem.subMenu && menuItem.visible,\n           'sh-context-menu--item__disable': !menuItem.visible,\n           'sh-context-menu--item__divider': menuItem.divider,\n           'sh-context-menu--item__sub-active': subActive && menuItem.active}\"\n          class=\"sh-context-menu--item\"\n          (mouseenter)=\"onEnter($event, menuItem, itemElement)\"\n          (click)=\"onClick($event, menuItem)\">\n          <ng-container *ngIf=\"!menuItem.divider || !isVisible(menuItem)\">\n            <ng-content *ngTemplateOutlet=\"menuItem.template; context: menuItem.context\"></ng-content>\n          </ng-container>\n        </div>\n      </div>\n    </ng-template>\n  "
                },] },
    ];
    /** @nocollapse */
    ShContextMenuComponent.ctorParameters = function () { return [
        { type: sh_context_menu_service_1.ShContextMenuService, },
    ]; };
    ShContextMenuComponent.propDecorators = {
        "thisContext": [{ type: core_1.Input, args: ['this',] },],
        "contentChildrenItems": [{ type: core_1.ContentChildren, args: [sh_context_menu_item_directive_1.ShContextMenuItemDirective, { read: sh_context_menu_item_directive_1.ShContextMenuItemDirective },] },],
        "viewChildrenItems": [{ type: core_1.ViewChildren, args: [sh_context_menu_item_directive_1.ShContextMenuItemDirective, { read: sh_context_menu_item_directive_1.ShContextMenuItemDirective },] },],
        "menuTemplate": [{ type: core_1.ViewChild, args: ['menuTemplate', { read: core_1.TemplateRef },] },],
        "menuContainer": [{ type: core_1.ViewChild, args: ['menuContainer', { read: core_1.ViewContainerRef },] },],
    };
    return ShContextMenuComponent;
}());
exports.ShContextMenuComponent = ShContextMenuComponent;
//# sourceMappingURL=sh-context-menu.component.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/ng2-right-click-menu/sh-context-menu.module.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/esm5/common.js");
var sh_context_menu_component_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/ng2-right-click-menu/sh-context-menu.component.js");
var sh_attach_menu_directive_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/ng2-right-click-menu/sh-attach-menu.directive.js");
var sh_context_menu_service_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/ng2-right-click-menu/sh-context-menu.service.js");
var sh_context_menu_item_directive_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/ng2-right-click-menu/sh-context-menu-item.directive.js");
var overlay_1 = __webpack_require__("./node_modules/@angular/cdk/esm5/overlay.es5.js");
var ShContextMenuModule = /** @class */ (function () {
    function ShContextMenuModule() {
    }
    ShContextMenuModule.decorators = [
        { type: core_1.NgModule, args: [{
                    declarations: [
                        sh_attach_menu_directive_1.ShAttachMenuDirective,
                        sh_context_menu_component_1.ShContextMenuComponent,
                        sh_context_menu_item_directive_1.ShContextMenuItemDirective
                    ],
                    exports: [
                        sh_attach_menu_directive_1.ShAttachMenuDirective,
                        sh_context_menu_component_1.ShContextMenuComponent,
                        sh_context_menu_item_directive_1.ShContextMenuItemDirective
                    ],
                    providers: [
                        sh_context_menu_service_1.ShContextMenuService
                    ],
                    imports: [
                        common_1.CommonModule,
                        overlay_1.OverlayModule
                    ],
                    entryComponents: [
                        sh_context_menu_component_1.ShContextMenuComponent
                    ]
                },] },
    ];
    return ShContextMenuModule;
}());
exports.ShContextMenuModule = ShContextMenuModule;
//# sourceMappingURL=sh-context-menu.module.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/ng2-right-click-menu/sh-context-menu.service.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var overlay_1 = __webpack_require__("./node_modules/@angular/cdk/esm5/overlay.es5.js");
var portal_1 = __webpack_require__("./node_modules/@angular/cdk/esm5/portal.es5.js");
var fromEvent_1 = __webpack_require__("./node_modules/rxjs/observable/fromEvent.js");
var ShContextMenuService = /** @class */ (function () {
    function ShContextMenuService(overlay) {
        this.overlay = overlay;
        this.activeOverlays = [];
    }
    ShContextMenuService.prototype.openMenu = function (ctxEvent) {
        this.closeCurrentOverlays();
        var menu = ctxEvent.menu, mouseEvent = ctxEvent.mouseEvent, targetElement = ctxEvent.targetElement, data = ctxEvent.data;
        this.activeMenu = menu;
        mouseEvent.preventDefault();
        mouseEvent.stopPropagation();
        this.overrideGetBoundingClientRect(targetElement, mouseEvent);
        var scrollStrategy = this.buildCloseScrollStrategy();
        var positionStrategy = this.buildConnectedPositionStrategy(targetElement);
        this.attachContextToItems(menu, data);
        var overlayRef = this.createAndAttachOverlay(positionStrategy, scrollStrategy, menu, true);
        this.attachOverlayRef(menu, overlayRef);
        this.registerBackdropEvents(overlayRef);
    };
    ShContextMenuService.prototype.openSubMenu = function (ctxEvent) {
        var menu = ctxEvent.menu, mouseEvent = ctxEvent.mouseEvent, targetElement = ctxEvent.targetElement, data = ctxEvent.data, parentMenu = ctxEvent.parentMenu;
        mouseEvent.preventDefault();
        mouseEvent.stopPropagation();
        var scrollStrategy = this.buildCloseScrollStrategy();
        var positionStrategy = this.buildConnectedPositionStrategyForSubMenu(targetElement);
        var overlayRef = this.createAndAttachOverlay(positionStrategy, scrollStrategy, menu, false);
        this.attachContextToItems(menu, data);
        this.attachThisContext(menu, parentMenu);
        this.attachOverlayRef(menu, overlayRef);
    };
    ShContextMenuService.prototype.destroy = function () {
        this.closeCurrentOverlays();
        this.backDropSub.unsubscribe();
    };
    ShContextMenuService.prototype.ngOnDestroy = function () {
        this.destroy();
    };
    ShContextMenuService.prototype.closeSubMenus = function (menu) {
        var _this = this;
        var itemsWithSubMenus = menu
            .menuItems
            .filter(function (i) { return !!i.subMenu && !!i.subMenu.overlayRef; });
        if (itemsWithSubMenus.length) {
            itemsWithSubMenus.forEach(function (sm) { return _this.closeSubMenus(sm.subMenu); });
            var overlayRefs = itemsWithSubMenus
                .map(function (i) { return i.subMenu.overlayRef; });
            overlayRefs.forEach(function (r) { return r.dispose(); });
        }
    };
    ShContextMenuService.prototype.registerBackdropEvents = function (overlayRef) {
        var elm = overlayRef.backdropElement;
        this.backDropSub = fromEvent_1.fromEvent(elm, 'mousedown')
            .subscribe(this.closeCurrentOverlays.bind(this));
    };
    ShContextMenuService.prototype.createAndAttachOverlay = function (positionStrategy, scrollStrategy, menu, hasBackdrop) {
        if (hasBackdrop === void 0) { hasBackdrop = true; }
        var overlayRef = this.overlay.create({
            positionStrategy: positionStrategy,
            scrollStrategy: scrollStrategy,
            hasBackdrop: hasBackdrop,
            backdropClass: 'sh-backdrop'
        });
        /*
             TODO: try passing the TemplatePortal context (data)
             and then injecting it to the *ngTemplateOutlet in the component template
            */
        var menuPortal = new portal_1.TemplatePortal(menu.menuTemplate, menu.menuContainer);
        overlayRef.attach(menuPortal);
        this.activeOverlays.push(overlayRef);
        return overlayRef;
    };
    ShContextMenuService.prototype.buildCloseScrollStrategy = function () {
        return this.overlay.scrollStrategies.close();
    };
    ShContextMenuService.prototype.buildConnectedPositionStrategy = function (elm) {
        return this
            .overlay
            .position()
            .connectedTo(elm, { originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' })
            .withFallbackPosition({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' })
            .withFallbackPosition({ originX: 'end', originY: 'top' }, { overlayX: 'start', overlayY: 'top' })
            .withFallbackPosition({ originX: 'start', originY: 'top' }, { overlayX: 'end', overlayY: 'top' })
            .withFallbackPosition({ originX: 'end', originY: 'center' }, { overlayX: 'start', overlayY: 'center' })
            .withFallbackPosition({ originX: 'start', originY: 'center' }, { overlayX: 'end', overlayY: 'center' });
    };
    ShContextMenuService.prototype.buildConnectedPositionStrategyForSubMenu = function (elm) {
        return this
            .overlay
            .position()
            .connectedTo(elm, { originX: 'end', originY: 'top' }, { overlayX: 'start', overlayY: 'top' })
            .withFallbackPosition({ originX: 'start', originY: 'top' }, { overlayX: 'end', overlayY: 'top' })
            .withFallbackPosition({ originX: 'end', originY: 'bottom' }, { overlayX: 'start', overlayY: 'bottom' })
            .withFallbackPosition({ originX: 'start', originY: 'bottom' }, { overlayX: 'end', overlayY: 'bottom' });
    };
    /*
      we need to override getBoundingClientRect() to return the position of the menu.
      this is done because @angular/cdk use this function internally to determine where the overlay should be positioned
      https://github.com/angular/material2/blob/master/src/cdk/overlay/position/connected-position-strategy.ts#L288
     */
    /*
        we need to override getBoundingClientRect() to return the position of the menu.
        this is done because @angular/cdk use this function internally to determine where the overlay should be positioned
        https://github.com/angular/material2/blob/master/src/cdk/overlay/position/connected-position-strategy.ts#L288
       */
    ShContextMenuService.prototype.overrideGetBoundingClientRect = /*
        we need to override getBoundingClientRect() to return the position of the menu.
        this is done because @angular/cdk use this function internally to determine where the overlay should be positioned
        https://github.com/angular/material2/blob/master/src/cdk/overlay/position/connected-position-strategy.ts#L288
       */
    function (elm, event) {
        var clientX = event.clientX, clientY = event.clientY;
        elm.nativeElement.getBoundingClientRect = function () {
            return {
                bottom: clientY,
                height: 0,
                left: clientX,
                right: clientX,
                top: clientY,
                width: 0
            };
        };
    };
    ShContextMenuService.prototype.closeCurrentOverlays = function () {
        this.activeOverlays.forEach(function (o) {
            o.detach();
            o.dispose();
        });
        this.activeOverlays = [];
        // TODO: create close subject and emit.
        // subscribe in component
        if (this.activeMenu) {
            this.activeMenu.close();
        }
    };
    ShContextMenuService.prototype.attachContextToItems = function (menu, data) {
        menu.menuItems.forEach(function (i) { return i.context.$implicit = data; });
    };
    ShContextMenuService.prototype.attachThisContext = function (menu, parentMenu) {
        menu.thisContext = parentMenu.thisContext;
    };
    ShContextMenuService.prototype.attachOverlayRef = function (menu, overlayRef) {
        menu.overlayRef = overlayRef;
    };
    ShContextMenuService.decorators = [
        { type: core_1.Injectable },
    ];
    /** @nocollapse */
    ShContextMenuService.ctorParameters = function () { return [
        { type: overlay_1.Overlay, },
    ]; };
    return ShContextMenuService;
}());
exports.ShContextMenuService = ShContextMenuService;
//# sourceMappingURL=sh-context-menu.service.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/ng2tree-common/components/tree-node-content/tree-node-content.component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var TreeNodeContentComponent = /** @class */ (function () {
    function TreeNodeContentComponent(componentFactoryResolver) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.rightMenuClicked = new core_1.EventEmitter();
    }
    TreeNodeContentComponent.prototype.ngOnInit = function () {
        var _this = this;
        // 右键菜单相关
        this.rightMenuContainer.clear();
        if (this.originData.hasRightClickMenu) {
            var componentFactory = this.componentFactoryResolver.resolveComponentFactory(this.originData.rightClickMenuComponent);
            var componentRef = this.rightMenuContainer.createComponent(componentFactory);
            componentRef.instance['nodeData'] = this.originData;
            componentRef.instance['rightMenuClicked'].subscribe(function (event) {
                _this.rightMenuClicked.emit(event);
            });
        }
    };
    TreeNodeContentComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'ng2tree-node-content',
                    template: "<div class='tree-node-content' *ngIf=\"!originData.hasRightClickMenu\"> <span>{{ displayData }}</span> </div> <ng-container #rightMenuContainer> </ng-container>",
                    styles: [".tree-node-content:hover { background:rgb(168, 218, 167) }"]
                },] },
    ];
    /** @nocollapse */
    TreeNodeContentComponent.ctorParameters = function () { return [
        { type: core_1.ComponentFactoryResolver, },
    ]; };
    TreeNodeContentComponent.propDecorators = {
        "displayData": [{ type: core_1.Input },],
        "originData": [{ type: core_1.Input },],
        "rightMenuClicked": [{ type: core_1.Output },],
        "rightMenuContainer": [{ type: core_1.ViewChild, args: ['rightMenuContainer', { read: core_1.ViewContainerRef },] },],
    };
    return TreeNodeContentComponent;
}());
exports.TreeNodeContentComponent = TreeNodeContentComponent;
//# sourceMappingURL=tree-node-content.component.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/ng2tree-common/components/tree-node-drop-slot/tree-node-drop-slot.component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var tree_node_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/ng2tree-common/models/tree-node.js");
var TreeNodeDropSlotComponent = /** @class */ (function () {
    function TreeNodeDropSlotComponent() {
    }
    TreeNodeDropSlotComponent.prototype.onDragOver = function ($event) {
        $event.preventDefault();
        this.node.treeModel.setDropLocation({ component: this, parentNode: this.node, index: this.dropIndex });
    };
    TreeNodeDropSlotComponent.prototype.onDragLeave = function () {
        if (this.node.treeModel.isDraggingOver(this)) {
            this.node.treeModel.setDropLocation(null);
        }
    };
    TreeNodeDropSlotComponent.prototype.onDrop = function ($event) {
        $event.preventDefault();
        // this.node.mouseAction('drop', $event, { node: this.node, index: this.dropIndex });
        console.log('onDropEvent: tree-node-drop-slot');
        this.node.dropMouseAction($event, { parentNode: this.node, index: this.dropIndex });
    };
    TreeNodeDropSlotComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'ng2tree-node-drop-slot',
                    template: "<div class=\"node-drop-slot\" [class.is-dragging-over]=\"node.treeModel.isDraggingOver(this)\" (drop)=\"onDrop($event)\" (dragover)=\"onDragOver($event)\" (dragleave)=\"onDragLeave()\" > </div>",
                    styles: [".node-drop-slot {  display: block; height: 2px; width: 100% } .node-drop-slot.is-dragging-over {  background: #ddffee; height: 20px; border: 2px dotted #888;  }"]
                },] },
    ];
    /** @nocollapse */
    TreeNodeDropSlotComponent.propDecorators = {
        "node": [{ type: core_1.Input },],
        "dropIndex": [{ type: core_1.Input },],
    };
    return TreeNodeDropSlotComponent;
}());
exports.TreeNodeDropSlotComponent = TreeNodeDropSlotComponent;
//# sourceMappingURL=tree-node-drop-slot.component.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/ng2tree-common/components/tree-node/tree-node.component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var tree_node_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/ng2tree-common/models/tree-node.js");
var tree_node_content_directive_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/ng2tree-common/directives/tree-node-content.directive.js");
var tree_node_content_item_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/ng2tree-common/models/tree-node-content-item.js");
var tree_node_content_component_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/ng2tree-common/components/tree-node-content/tree-node-content.component.js");
var TreeNodeComponent = /** @class */ (function () {
    function TreeNodeComponent(componentFactoryResolver, viewContainerRef) {
        this.componentFactoryResolver = componentFactoryResolver;
    }
    // TODO: move to draggable directive
    // TODO: move to draggable directive
    TreeNodeComponent.prototype.onDragStart = 
    // TODO: move to draggable directive
    function ($event) {
        var _this = this;
        // 设置DragNode: 选择dragNode的父节点作为DragNode，通过index定位到指定的节点
        setTimeout(function () { return _this.node.treeModel.setDragNode({ parentNode: _this.node.parent, index: _this.nodeIndex }); }, 30);
    };
    TreeNodeComponent.prototype.onDragEnd = function () {
        this.node.treeModel.setDragNode(null);
    };
    TreeNodeComponent.prototype.onDragOver = function ($event) {
        $event.preventDefault();
        this.node.treeModel.setDropLocation({ component: this, parentNode: this.node, index: 0 });
    };
    TreeNodeComponent.prototype.onDrop = function ($event) {
        $event.preventDefault();
        // this.node.mouseAction('drop', $event, { node: this.node, index: 0 });
        this.node.treeModel.setFocus(true);
        this.node.dropMouseAction($event, { parentNode: this.node, index: 0 });
        console.log("onDrop: tree-node-component");
    };
    TreeNodeComponent.prototype.onDragLeave = function (nodeContentWrapper, $event) {
        if (!this.node.treeModel.isDraggingOver(this)) {
            return;
        }
        var rect = nodeContentWrapper.getBoundingClientRect();
        // If outside the element
        if ($event.clientX < rect.left || $event.clientX > rect.right ||
            $event.clientY < rect.top || $event.clientY > rect.bottom) {
            this.node.treeModel.setDropLocation(null);
        }
    };
    TreeNodeComponent.prototype.ngOnInit = function () {
        this._loadTreeNodeContent();
    };
    TreeNodeComponent.prototype.ngOnChanges = function () {
    };
    // 解决使用动态组件出现ExpressionChangedAfterItHasBeenCheckedError问题：
    // https://github.com/angular/angular/issues/17572
    // 解决使用动态组件出现ExpressionChangedAfterItHasBeenCheckedError问题：
    // https://github.com/angular/angular/issues/17572
    TreeNodeComponent.prototype._loadTreeNodeContent = 
    // 解决使用动态组件出现ExpressionChangedAfterItHasBeenCheckedError问题：
    // https://github.com/angular/angular/issues/17572
    function () {
        var _this = this;
        // 使用Item从逻辑上将TreeNodeContentComponent和data关联起来
        var treeNodeContentItem = new tree_node_content_item_1.TreeNodeContentItem(tree_node_content_component_1.TreeNodeContentComponent, this.node.displayField);
        // 使用 ComponentFactoryResolver 来为每个具体的组件解析出一个 ComponentFactory
        // 然后 ComponentFactory 会为每一个组件创建一个实例
        var componentFactory = this.componentFactoryResolver.resolveComponentFactory(treeNodeContentItem.component);
        var viewContainerRef = this.treeNodeContentHost.viewContainerRef;
        viewContainerRef.clear();
        var componentRef = viewContainerRef.createComponent(componentFactory);
        componentRef.instance.displayData = treeNodeContentItem.displayData; // 传入数据
        componentRef.instance.originData = this.node.data;
        componentRef.instance.rightMenuClicked.subscribe(function (event) {
            _this.node.rightMenuClicked(event);
        });
    };
    TreeNodeComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'ng2tree-node',
                    template: "<div class=\"tree-node tree-node-level-{{ node.level }}\" [class.tree-node-expanded]=\"node.isExpanded && node.hasChildren\" [class.tree-node-collapsed]=\"node.isCollapsed && node.hasChildren\" [class.tree-node-leaf]=\"node.isLeaf\" [class.tree-node-active]=\"node.isActive\" [class.tree-node-focused]=\"node.isFocused\"> <ng2tree-node-drop-slot *ngIf=\"nodeIndex === 0\" [dropIndex]=\"nodeIndex\" [node]=\"node.parent\" ></ng2tree-node-drop-slot> <span *ngIf=\"node.hasChildren\" class=\"toggle-children\" (click)=\"node.toggleActivated()\" (click)=\"node.toggle()\" > </span> <span *ngIf=\"!node.hasChildren\" class=\"toggle-children-placeholder\"> </span> <!-- 设置click事件的处理器 --> <div class=\"node-content-wrapper\" #nodeContentWrapper (click)=\"node.toggleActivated()\" (dblclick)=\"node.doublClick($event)\" (contextmenu)=\"node.contextMenu($event)\" [draggable]=\"node.allowDrag()\" (dragstart)=\"onDragStart($event)\" (drop)=\"onDrop($event)\" (dragend)=\"onDragEnd()\" (dragover)=\"onDragOver($event)\" (dragleave)=\"onDragLeave(nodeContentWrapper, $event)\" > <!-- 设置动态组件的锚点 --> <ng-template treeNodeContent-host></ng-template>  </div> <div class=\"tree-children\" [hidden]=\"node.isCollapsed\"> <ng2tree-node *ngFor=\"let child of node.childrenField; let i = index\" [node]=\"child\" [nodeIndex]=\"i\"> </ng2tree-node> </div> <ng2tree-node-drop-slot [dropIndex]=\"nodeIndex + 1\" [node]=\"node.parent\" ></ng2tree-node-drop-slot> </div>",
                    styles: [".tree-children { padding-left: 20px } .node-content-wrapper { display: inline-block; padding: 2px 5px; border-radius: 2px; transition: background-color .15s,box-shadow .15s; white-space: nowrap; } .tree-node-active > .node-content-wrapper { background: #beebff } .tree-node-active.tree-node-focused > .node-content-wrapper { background: rgb(93, 176, 231) } .tree-node-focused > .node-content-wrapper { background: #e7f4f9 } .node-content-wrapper:hover { background: #f7fbff } .tree-node-active > .node-content-wrapper, .tree-node-focused > .node-content-wrapper, .node-content-wrapper:hover { box-shadow: inset 0 0 1px #999; } .tree-node-expanded  .toggle-children {  background-image: url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3E%3Cpath fill='%23646465' d='M11 10H5.344L11 4.414V10z'/%3E%3C/svg%3E\"); } .tree-node-collapsed .toggle-children {  background-image: url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3E%3Cpath fill='%23646465' d='M6 4v8l4-4-4-4zm1 2.414L8.586 8 7 9.586V6.414z'/%3E%3C/svg%3E\"); } .toggle-children { height: 16px; width: 16px; background-size: 16px; display: inline-block; position: relative; background-repeat: no-repeat; background-position: center; right: -6px; top: 4px; overflow: hidden; } .toggle-children-placeholder { display: inline-block; height: 10px; width: 10px; position: relative; top: 1px; } .tree-node-icon{ width: 1rem; }"]
                },] },
    ];
    /** @nocollapse */
    TreeNodeComponent.ctorParameters = function () { return [
        { type: core_1.ComponentFactoryResolver, },
        { type: core_1.ViewContainerRef, },
    ]; };
    TreeNodeComponent.propDecorators = {
        "node": [{ type: core_1.Input },],
        "nodeIndex": [{ type: core_1.Input },],
        "treeNodeContentHost": [{ type: core_1.ViewChild, args: [tree_node_content_directive_1.TreeNodeContentDirective,] },],
    };
    return TreeNodeComponent;
}());
exports.TreeNodeComponent = TreeNodeComponent;
//# sourceMappingURL=tree-node.component.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/ng2tree-common/components/tree/tree.component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var tree_model_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/ng2tree-common/models/tree-model.js");
var tree_options_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/ng2tree-common/models/tree-options.js");
var keys_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/ng2tree-common/constants/keys.js");
var lodash_1 = __webpack_require__("./node_modules/lodash/lodash.js");
//约定使用下划线表示lodash，就像用$表示jQuery一样
//1.require关键字不被识别：
// https://stackoverflow.com/questions/31173738/typescript-getting-error-ts2304-cannot-find-name-require
// declare var require: any
// const _ = require('lodash');
//2.安装lodash的es版本：
// (1) $>npm i lodash-es
// (2) $>npm install --save @types/lodash
var TreeComponent = /** @class */ (function () {
    function TreeComponent(treeModel) {
        var _this = this;
        this.treeModel = treeModel;
        treeModel.eventNames.forEach(function (name) { return _this[name] = new core_1.EventEmitter(); }); //customEventName -> new EventEmitter()
    }
    Object.defineProperty(TreeComponent.prototype, "nodes", {
        set: function (nodes) { },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(TreeComponent.prototype, "options", {
        set: function (options) { },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(TreeComponent.prototype, "focused", {
        set: function (value) {
            this.treeModel.setFocus(value);
            // alert('focused on the tree');
        },
        enumerable: true,
        configurable: true
    });
    TreeComponent.prototype.ngOnChanges = function (changes) {
        this.treeModel.setData({
            nodes: changes.nodes && changes.nodes.currentValue,
            options: changes.options && changes.options.currentValue,
            events: lodash_1.pick(this, this.treeModel.eventNames)
        });
    };
    // 优先使用HostListener装饰器绑定事件，而不是使用Directive或Component的host元数据
    // When binding events to Directive or Component, Angular suggests to prefer to HostListener decorator,
    // rather than host metadata.
    TreeComponent.prototype.onKeydown = 
    // 优先使用HostListener装饰器绑定事件，而不是使用Directive或Component的host元数据
    // When binding events to Directive or Component, Angular suggests to prefer to HostListener decorator,
    // rather than host metadata.
    function ($event) {
        // alert('Pressed a key');
        var focusedNode = this.treeModel.focusedNode;
        if (!this.treeModel.isFocused) {
            return;
        }
        if (lodash_1.includes([keys_1.KEYS.DOWN, keys_1.KEYS.UP, keys_1.KEYS.LEFT,
            keys_1.KEYS.RIGHT, keys_1.KEYS.ENTER, keys_1.KEYS.SPACE], $event.keyCode)) {
            $event.preventDefault(); //取消事件的默认动作，实现仅对includes键响应
        }
        switch ($event.keyCode) {
            case keys_1.KEYS.DOWN:
                return this.treeModel.focusNextNode();
            case keys_1.KEYS.UP:
                return this.treeModel.focusPreviousNode();
            case keys_1.KEYS.LEFT:
                // alert('Focus Drill Up');
                if (focusedNode.isExpanded) {
                    focusedNode.toggle();
                }
                else {
                    this.treeModel.focusDrillUp();
                }
                return;
            case keys_1.KEYS.RIGHT:
                // alert('Focus Drill Down');
                if (focusedNode.isCollapsed) {
                    focusedNode.toggle();
                }
                else {
                    this.treeModel.focusDrillDown();
                }
                return;
            case keys_1.KEYS.ENTER:
            case keys_1.KEYS.SPACE:
                // alert('Enter or Space key.');
                return focusedNode && focusedNode.toggleActivated();
        }
    };
    TreeComponent.prototype.onMousedown = function ($event) {
        // alert('click');
        var insideClick = $event.target.closest('ng2tree'); //判断当前dom树上下文中是否包含树组件
        if (!insideClick) {
            this.treeModel.setFocus(false);
        }
    };
    TreeComponent.prototype.searchAndLocationNodeById = function (elementId) {
        console.log('succeeded to search and location Node By Id in treeComponent:', elementId);
        this.treeModel.locateNodeByID(elementId);
    };
    TreeComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'ng2tree',
                    template: "<div class=\"tree\"> <!-- <div class=\"localFileTreeOperateTest\"> <button (click)=\"treeModel.addStaticTreeNode()\">新增</button> <button (click)=\"treeModel.removeFocusedTreeNode()\">删除</button> </div> --> <ng2tree-node (click)=\"treeModel.setFocus(true)\" *ngFor=\"let child of treeModel.roots; let i = index\" [node]=\"child\" [nodeIndex]=\"i\"> </ng2tree-node> </div>",
                    styles: [".tree-children { padding-left: 20px } .tree { display: inline-block; cursor: pointer; -webkit-user-select: none;   /* Chrome/Safari/Opera */ -ms-user-select: none;       /* IE/Edge */ user-select: none;           /* non-prefixed version, currently not supported by any browser */ }"],
                    providers: [
                        tree_model_1.TreeModel
                    ]
                },] },
    ];
    /** @nocollapse */
    TreeComponent.ctorParameters = function () { return [
        { type: tree_model_1.TreeModel, },
    ]; };
    TreeComponent.propDecorators = {
        "nodes": [{ type: core_1.Input },],
        "options": [{ type: core_1.Input },],
        "focused": [{ type: core_1.Input },],
        "onToggle": [{ type: core_1.Output },],
        "onActiveChanged": [{ type: core_1.Output },],
        "onActivate": [{ type: core_1.Output },],
        "onDeactivate": [{ type: core_1.Output },],
        "onFocus": [{ type: core_1.Output },],
        "onBlur": [{ type: core_1.Output },],
        "onDoubleClick": [{ type: core_1.Output },],
        "onContextMenu": [{ type: core_1.Output },],
        "onRightMenuClicked": [{ type: core_1.Output },],
        "onKeydown": [{ type: core_1.HostListener, args: ['body: keydown', ['$event'],] },],
        "onMousedown": [{ type: core_1.HostListener, args: ['body: mousedown', ['$event'],] },],
    };
    return TreeComponent;
}());
exports.TreeComponent = TreeComponent;
//# sourceMappingURL=tree.component.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/ng2tree-common/constants/events.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.TREE_EVENTS = {
    onToggle: 'onToggle',
    onActiveChanged: 'onActiveChanged',
    onActivate: 'onActivate',
    onDeactivate: 'onDeactivate',
    onFocus: 'onFocus',
    onBlur: 'onBlur',
    onDoubleClick: 'onDoubleClick',
    onContextMenu: 'onContextMenu',
    onInitialized: 'onInitialized',
    onUpdateData: 'onUpdateData',
    onMoveNode: 'onMoveNode',
    onAddNode: 'onAddNode',
    onRemoveNode: 'onRemoveNode',
    onRightMenuClicked: 'onRightMenuClicked'
};
//# sourceMappingURL=events.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/ng2tree-common/constants/keys.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// keys used in the angular tree component
exports.KEYS = {
    LEFT: 37,
    UP: 38,
    RIGHT: 39,
    DOWN: 40,
    ENTER: 13,
    SPACE: 32
};
//# sourceMappingURL=keys.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/ng2tree-common/directives/tree-node-content.directive.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
// 定义辅助指令TreeNodeContent，用来在模板中标记插入点
var TreeNodeContentDirective = /** @class */ (function () {
    // 依赖注入ViewContainerRef，获取对容器视图的访问权限
    function TreeNodeContentDirective(viewContainerRef) {
        this.viewContainerRef = viewContainerRef;
    }
    TreeNodeContentDirective.decorators = [
        { type: core_1.Directive, args: [{
                    selector: '[treeNodeContent-host]'
                },] },
    ];
    /** @nocollapse */
    TreeNodeContentDirective.ctorParameters = function () { return [
        { type: core_1.ViewContainerRef, },
    ]; };
    return TreeNodeContentDirective;
}());
exports.TreeNodeContentDirective = TreeNodeContentDirective;
//# sourceMappingURL=tree-node-content.directive.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/ng2tree-common/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__("./node_modules/@farris/ide-devkit/components/ng2tree-common/tree.module.js"));
__export(__webpack_require__("./node_modules/@farris/ide-devkit/components/ng2tree-common/components/tree/tree.component.js"));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/ng2tree-common/models/tree-model.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var tree_node_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/ng2tree-common/models/tree-node.js");
var tree_options_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/ng2tree-common/models/tree-options.js");
var events_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/ng2tree-common/constants/events.js");
var lodash_1 = __webpack_require__("./node_modules/lodash/lodash.js");
var TreeModel = /** @class */ (function () {
    function TreeModel() {
        this.options = new tree_options_1.TreeOptions();
        // focused Node may be not actived
        // actived Node must be focused
        this.focusedNode = null;
        this.activeNode = null;
        this.eventNames = Object.keys(events_1.TREE_EVENTS);
        this.firstUpdate = true;
        this._dragNode = null;
        this._dropLocation = null;
    }
    TreeModel.prototype.setData = function (_a) {
        var nodes = _a.nodes, options = _a.options, events = _a.events;
        this.options = new tree_options_1.TreeOptions(options);
        this.events = events;
        this.update(nodes);
    };
    TreeModel.prototype.update = function (nodes) {
        var _this = this;
        // Update the tree:
        this.virtualRoot = new tree_node_1.TreeNode({ isVirtualRoot: true }, null, this);
        this.roots = nodes && nodes.map(function (child) { return new tree_node_1.TreeNode(child, _this.virtualRoot, _this); });
        this.virtualRoot[this.options.childrenField] = this.roots;
        this._loadTreeNodeContentComponent();
        // Fire event:
        if (this.firstUpdate) {
            if (this.roots) {
                this.fireEvent({ eventName: events_1.TREE_EVENTS.onInitialized });
                this.firstUpdate = false;
            }
        }
        else {
            this.fireEvent({ eventName: events_1.TREE_EVENTS.onUpdateData });
        }
    };
    //Used for code test
    //Used for code test
    TreeModel.prototype.addStaticTreeNode = 
    //Used for code test
    function () {
        this.createAndAddTreeNode({
            id: 1,
            name: 'root1',
            subTitle: 'the root',
            type: 'type1'
        }, this.focusedNode);
    };
    TreeModel.prototype.createAndAddTreeNode = function (data, parentNode) {
        var createdNode = this.createTreeNode(data, parentNode);
        this.addTreeNode(createdNode, parentNode);
    };
    TreeModel.prototype.createTreeNode = function (data, parent) {
        var createdNode = new tree_node_1.TreeNode(data, parent, this);
        return createdNode;
    };
    TreeModel.prototype.addTreeNode = function (addedNode, parentNode) {
        if (addedNode == null) {
            return;
        }
        if (parentNode == null) {
            //增加顶级树节点（没有父节点的树节点）
            this.roots.push(addedNode);
        }
        else {
            parentNode.childrenField.push(addedNode);
        }
        this.update(this.roots);
        this.fireEvent({ eventName: events_1.TREE_EVENTS.onAddNode, addedNode: addedNode, parentNode: parentNode });
    };
    TreeModel.prototype.removeFocusedTreeNode = function () {
        this.removeTreeNode(this.focusedNode);
    };
    //移除选中的已知节点
    //移除选中的已知节点
    TreeModel.prototype.removeTreeNode = 
    //移除选中的已知节点
    function (selectedTreeNode) {
        if (selectedTreeNode == null) {
            return;
        }
        var parent = selectedTreeNode.parent;
        if (parent == null) {
            //移除顶级树节点（没有父节点的树节点）
            var index = this.roots.indexOf(selectedTreeNode);
            this.roots.splice(index, 1); //移除数组中某一指定节点
        }
        else {
            if (parent.childrenField.length <= 0) {
                console.log("RemoveTreeNode Warning: it is impossible to remove element from an empty array");
                return;
            }
            //移除数组中某一指定节点
            var index = parent.childrenField.indexOf(selectedTreeNode);
            parent.childrenField.splice(index, 1);
        }
        this.update(this.roots);
        this.fireEvent({ eventName: events_1.TREE_EVENTS.onRemoveNode, selectedTreeNode: selectedTreeNode, parent: parent });
    };
    /**
     * 定位指定树节点
     * @param needLocatedNode 待定位节点
     */
    /**
         * 定位指定树节点
         * @param needLocatedNode 待定位节点
         */
    TreeModel.prototype.locateTreeNode = /**
         * 定位指定树节点
         * @param needLocatedNode 待定位节点
         */
    function (needLocatedNode) {
        if (needLocatedNode == null) {
            return;
        }
        var parentNode = needLocatedNode.parent;
        while (parentNode != null) {
            parentNode.isExpanded = true;
            parentNode = parentNode.parent;
        }
        needLocatedNode.focus();
        needLocatedNode.isActive = false;
        needLocatedNode.toggleActivated();
    };
    /**
     * 通过ID定位树节点
     * @param nodeID 待查找并定位节点的ID
     */
    /**
         * 通过ID定位树节点
         * @param nodeID 待查找并定位节点的ID
         */
    TreeModel.prototype.locateNodeByID = /**
         * 通过ID定位树节点
         * @param nodeID 待查找并定位节点的ID
         */
    function (nodeID) {
        var node = this.searchTreeNodeByID(nodeID);
        if (node == null) {
            return false;
        }
        this.locateTreeNode(node);
        return true;
    };
    /**
     * 查找指定树节点
     * @param nodeID 待查找节点ID
     */
    /**
         * 查找指定树节点
         * @param nodeID 待查找节点ID
         */
    TreeModel.prototype.searchTreeNodeByID = /**
         * 查找指定树节点
         * @param nodeID 待查找节点ID
         */
    function (nodeID) {
        return this.searchTreeNode(this.roots, nodeID);
    };
    /**
     * 在指定集合中，根据ID查找树节点
     * @param nodes 树集合
     * @param nodeID 待查找节点ID
     */
    /**
         * 在指定集合中，根据ID查找树节点
         * @param nodes 树集合
         * @param nodeID 待查找节点ID
         */
    TreeModel.prototype.searchTreeNode = /**
         * 在指定集合中，根据ID查找树节点
         * @param nodes 树集合
         * @param nodeID 待查找节点ID
         */
    function (nodes, nodeID) {
        var _this = this;
        if (nodes == null || nodes.length <= 0) {
            return null;
        }
        if (nodeID == null || nodeID.length < 0) {
            return null;
        }
        var searchedTreeNode = null;
        nodes.forEach(function (node) {
            if (node.idField == nodeID) {
                //回归
                searchedTreeNode = node;
                return;
            }
            if (node.childrenField == null || node.childrenField.length < 0) {
                //回归
                return;
            }
            var searchedNodeInChildren = _this.searchTreeNode(node.childrenField, nodeID); //递推
            if (searchedNodeInChildren != null) {
                searchedTreeNode = searchedNodeInChildren;
            }
            return; //回归
        });
        return searchedTreeNode; //返回
    };
    Object.defineProperty(TreeModel.prototype, "treeNodeContentComponent", {
        get: function () { return this._treeNodeContentComponent; },
        enumerable: true,
        configurable: true
    });
    ;
    // if treeNodeTemplate is a component - use it,
    // otherwise - it's a template, so wrap it with an AdHoc component
    // if treeNodeTemplate is a component - use it,
    // otherwise - it's a template, so wrap it with an AdHoc component
    TreeModel.prototype._loadTreeNodeContentComponent = 
    // if treeNodeTemplate is a component - use it,
    // otherwise - it's a template, so wrap it with an AdHoc component
    function () {
        this._treeNodeContentComponent = this.options.treeNodeTemplate;
        if (typeof this._treeNodeContentComponent === 'string') {
            // this._treeNodeContentComponent = this._createAdHocComponent(this._treeNodeContentComponent);
        }
    };
    Object.defineProperty(TreeModel.prototype, "isFocused", {
        // _createAdHocComponent(templateStr) {
        //     @Component({
        //         selector: 'TreeNodeTemplate',
        //         template: templateStr
        //     })
        //     class AdHocTreeNodeTemplateComponent {
        //         @Input() node: TreeNode;
        //     }
        //     return AdHocTreeNodeTemplateComponent;
        // }
        get: 
        // _createAdHocComponent(templateStr) {
        //     @Component({
        //         selector: 'TreeNodeTemplate',
        //         template: templateStr
        //     })
        //     class AdHocTreeNodeTemplateComponent {
        //         @Input() node: TreeNode;
        //     }
        //     return AdHocTreeNodeTemplateComponent;
        // }
        function () {
            return TreeModel.focusedTree === this;
        },
        enumerable: true,
        configurable: true
    });
    TreeModel.prototype.setFocus = function (value) {
        TreeModel.focusedTree = value ? this : null;
    };
    TreeModel.prototype.getFirstRoot = function () {
        return lodash_1.first(this.roots);
    };
    TreeModel.prototype.getLastRoot = function () {
        return lodash_1.last(this.roots);
    };
    TreeModel.prototype.focusNextNode = function () {
        var previousNode = this.focusedNode;
        var nextNode = previousNode ? previousNode.findNextNode() : this.getFirstRoot();
        nextNode && nextNode.focus(); // Short-circuit evaluation
    };
    TreeModel.prototype.focusPreviousNode = function () {
        var previousNode = this.focusedNode;
        var nextNode = previousNode ? previousNode.findPreviousNode() : this.getLastRoot();
        nextNode && nextNode.focus();
    };
    TreeModel.prototype.focusDrillUp = function () {
        var previousNode = this.focusedNode;
        var nextNode = previousNode && previousNode.realParent;
        nextNode && nextNode.focus();
    };
    TreeModel.prototype.focusDrillDown = function () {
        var previousNode = this.focusedNode;
        var nextNode = previousNode && previousNode.getFirstChild();
        nextNode && nextNode.focus();
    };
    TreeModel.prototype.fireEvent = function (event) {
        // https://stackoverflow.com/questions/35840576/differencse-between-eventemitter-next-and-eventemitter-emit-in-angular-2
        //  abandon next() function, begin to use emit() function
        // this.events[event.eventName].next(event);
        // this.events[event.eventName].emit(event,alert(event.eventName));//发射事件，并传递事件的对象
        this.events[event.eventName].emit(event);
    };
    /**
     * 判断是否执行移动节点操作，可以移动返回true，否则返回false
     * @param param0 param0.from 待移动节点的原有父节点
     *               param0.to 待移动节点的新父节点
     */
    /**
         * 判断是否执行移动节点操作，可以移动返回true，否则返回false
         * @param param0 param0.from 待移动节点的原有父节点
         *               param0.to 待移动节点的新父节点
         */
    TreeModel.prototype.canMoveNode = /**
         * 判断是否执行移动节点操作，可以移动返回true，否则返回false
         * @param param0 param0.from 待移动节点的原有父节点
         *               param0.to 待移动节点的新父节点
         */
    function (_a) {
        var from = _a.from, to = _a.to;
        // same node
        if (from.parentNode === to.parentNode && from.index === to.index) {
            return false;
        }
        var fromChildren = from.parentNode.children;
        var fromNode = fromChildren[from.index];
        return !to.parentNode.isDescendantOf(fromNode);
    };
    /**
     * 移动节点
     * @param param0 param0.from 待移动节点的原有父节点
     *               param0.to 待移动节点的新父节点
     */
    /**
         * 移动节点
         * @param param0 param0.from 待移动节点的原有父节点
         *               param0.to 待移动节点的新父节点
         */
    TreeModel.prototype.moveNode = /**
         * 移动节点
         * @param param0 param0.from 待移动节点的原有父节点
         *               param0.to 待移动节点的新父节点
         */
    function (_a) {
        var from = _a.from, to = _a.to;
        if (!this.canMoveNode({ from: from, to: to }))
            return;
        var fromChildren = from.parentNode.childrenField;
        // If node doesn't have children - create children array
        if (!to.parentNode.childrenField) {
            to.parentNode.childrenField = [];
        }
        var toChildren = to.parentNode.childrenField;
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice
        // The splice() method changes the contents of an array by removing existing elements and/or adding new elements.
        var node = fromChildren.splice(from.index, 1)[0];
        // Compensate for index if already removed from parent:
        var toIndex = (from.parentNode === to.parentNode && to.index > from.index) ? to.index - 1 : to.index;
        toChildren.splice(toIndex, 0, node);
        console.log("toChildren:" + toChildren);
        console.log("AfterMoveNode:" + this.roots);
        this.update(this.roots); // 实现node moved后，重新刷新这棵树
        this.fireEvent({ eventName: events_1.TREE_EVENTS.onMoveNode, node: node, to: to });
    };
    // TODO: move to a different service:
    // TODO: move to a different service:
    TreeModel.prototype.setDragNode = 
    // TODO: move to a different service:
    function (dragNode) {
        this._dragNode = dragNode;
    };
    TreeModel.prototype.getDragNode = function () {
        return this._dragNode || { parentNode: null, index: null };
    };
    TreeModel.prototype.isDragging = function () {
        return this.getDragNode().parentNode;
    };
    TreeModel.prototype.setDropLocation = function (dropLocation) {
        this._dropLocation = dropLocation;
    };
    TreeModel.prototype.getDropLocation = function () {
        return this._dropLocation || { component: null, parentNode: null, index: null };
    };
    TreeModel.prototype.isDraggingOver = function (component) {
        return this.getDropLocation().component === component;
    };
    TreeModel.prototype.cancelDrag = function () {
        this.setDropLocation(null);
        this.setDragNode(null);
    };
    TreeModel.focusedTree = null;
    TreeModel.decorators = [
        { type: core_1.Injectable },
    ];
    return TreeModel;
}());
exports.TreeModel = TreeModel;
//# sourceMappingURL=tree-model.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/ng2tree-common/models/tree-node-content-item.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var TreeNodeContentItem = /** @class */ (function () {
    function TreeNodeContentItem(component, displayData) {
        this.component = component;
        this.displayData = displayData;
    }
    return TreeNodeContentItem;
}());
exports.TreeNodeContentItem = TreeNodeContentItem;
//# sourceMappingURL=tree-node-content-item.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/ng2tree-common/models/tree-node.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/ng2tree-common/constants/events.js");
var TreeNode = /** @class */ (function () {
    function TreeNode(data, parent, treeModel) {
        if (parent === void 0) { parent = null; }
        var _this = this;
        this.data = data;
        this.isVirtualRoot = false;
        this._isActive = false;
        Object.assign(this, data, { parent: parent, treeModel: treeModel });
        this.treeModel = treeModel;
        this.parent = parent;
        this.level = this.parent ? this.parent.level + 1 : 0;
        if (this.isExpandedField) {
            this.isExpanded = true;
        }
        // 验证字段添加
        // console.log(this.idField);
        // console.log(this.typeField);
        this.childrenField = this.childrenField.map(function (child) { return new TreeNode(child, _this, treeModel); });
    }
    Object.defineProperty(TreeNode.prototype, "isExpanded", {
        get: function () { return this._isExpanded; },
        set: function (value) { this._isExpanded = value; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeNode.prototype, "isCollapsed", {
        get: function () { return !this._isExpanded; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeNode.prototype, "isActive", {
        get: function () {
            return this._isActive;
        },
        set: function (value) {
            this._isActive = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeNode.prototype, "options", {
        // Proxy of treeModel
        get: 
        // Proxy of treeModel
        function () {
            return this.treeModel.options;
        },
        enumerable: true,
        configurable: true
    });
    TreeNode.prototype.fireEvent = function (event) {
        this.treeModel.fireEvent(event);
    };
    Object.defineProperty(TreeNode.prototype, "idField", {
        // 表现的更像一个字段，将其封装成属性，并根据开放的读写权限，设置get/set
        get: 
        // 表现的更像一个字段，将其封装成属性，并根据开放的读写权限，设置get/set
        function () {
            return this[this.options.idField];
        },
        set: function (value) {
            this[this.options.idField] = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeNode.prototype, "childrenField", {
        get: function () {
            return this[this.options.childrenField] || [];
        },
        set: function (value) {
            this[this.options.childrenField] = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeNode.prototype, "displayField", {
        get: function () {
            return this[this.options.displayField];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeNode.prototype, "typeField", {
        get: function () {
            return this[this.options.typeField];
        },
        set: function (value) {
            this[this.options.typeField] = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeNode.prototype, "isExpandedField", {
        get: function () {
            return this[this.options.isExpandedField];
        },
        set: function (value) {
            this[this.options.isExpandedField] = value;
        },
        enumerable: true,
        configurable: true
    });
    TreeNode.prototype.allowDrag = function () {
        //表现的更像一个动作，将其封装成方法
        return this.options.allowDrag;
    };
    TreeNode.prototype.enableCustomContextMenu = function () {
        return this.options.enableCustomContextMenu;
    };
    Object.defineProperty(TreeNode.prototype, "isRoot", {
        get: function () { return this.parent.isVirtualRoot; } //父节点为空，表示这个一个根节点
        //父节点为空，表示这个一个根节点
        ,
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeNode.prototype, "realParent", {
        get: function () { return this.isRoot ? null : this.parent; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeNode.prototype, "isLeaf", {
        get: function () { return !this.childrenField.length; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeNode.prototype, "hasChildren", {
        get: function () { return !this.isLeaf; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeNode.prototype, "isFocused", {
        get: function () { return this.treeModel.focusedNode == this; },
        enumerable: true,
        configurable: true
    });
    TreeNode.prototype.getFirstChild = function () {
        return this.childrenField && this.childrenField[0];
    };
    TreeNode.prototype.getLastChild = function () {
        return this.childrenField && this.childrenField[this.childrenField.length - 1];
    };
    TreeNode.prototype._getIndexInParent = function () {
        return this.parent && this.parent.childrenField.indexOf(this);
    };
    TreeNode.prototype.findAdjacentSibling = function (steps) {
        var index = this._getIndexInParent();
        return this.parent && this.parent.childrenField[index + steps];
    };
    TreeNode.prototype.findNextSibling = function () {
        return this.findAdjacentSibling(+1);
    };
    TreeNode.prototype.findPreviousSibling = function () {
        return this.findAdjacentSibling(-1);
    };
    TreeNode.prototype.findNextNode = function (goInside) {
        if (goInside === void 0) { goInside = true; }
        // 查找Next Node时，默认进行内部查找
        return goInside && this.isExpanded && this.getFirstChild() ||
            this.findNextSibling() ||
            this.parent && this.parent.findNextNode(false);
    };
    TreeNode.prototype.findPreviousNode = function () {
        var previousSibling = this.findPreviousSibling();
        if (!previousSibling) {
            return this.realParent;
        }
        return previousSibling.isCollapsed
            ? previousSibling
            : previousSibling.getLastChild();
    };
    TreeNode.prototype.isDescendantOf = function (node) {
        if (this === node) {
            return true;
        }
        else {
            return this.parent && this.parent.isDescendantOf(node);
        }
    };
    // 切换方法
    // 切换节点的折叠（Collapsed）与扩展（Expanded）状态
    // 切换方法
    // 切换节点的折叠（Collapsed）与扩展（Expanded）状态
    TreeNode.prototype.toggle = 
    // 切换方法
    // 切换节点的折叠（Collapsed）与扩展（Expanded）状态
    function () {
        this.isExpanded = !this.isExpanded;
        this.fireEvent({ eventName: events_1.TREE_EVENTS.onToggle, node: this, isExpanded: this.isExpanded });
    };
    TreeNode.prototype._activate = function () {
        this._isActive = true;
        this.fireEvent({ eventName: events_1.TREE_EVENTS.onActivate, node: this });
        this.focus();
    };
    TreeNode.prototype._deactivate = function () {
        this._isActive = false;
        this.fireEvent({ eventName: events_1.TREE_EVENTS.onDeactivate, node: this });
    };
    TreeNode.prototype.toggleActivated = function () {
        if (this.isActive) {
            this._deactivate();
            this.treeModel.activeNode = null;
        }
        else {
            if (this.treeModel.activeNode) {
                this.treeModel.activeNode._deactivate();
            }
            this._activate();
            this.treeModel.activeNode = this;
        }
        this.fireEvent({ eventName: events_1.TREE_EVENTS.onActiveChanged, node: this, isActive: this.isActive });
    };
    TreeNode.prototype.focus = function () {
        var previousNode = this.treeModel.focusedNode;
        this.treeModel.focusedNode = this;
        if (previousNode) {
            this.fireEvent({ eventName: events_1.TREE_EVENTS.onBlur, node: previousNode });
        }
        this.fireEvent({ eventName: events_1.TREE_EVENTS.onFocus, node: this });
    };
    TreeNode.prototype.blur = function () {
        var previousNode = this.treeModel.focusedNode;
        this.treeModel.focusedNode = null;
        if (previousNode) {
            this.fireEvent({ eventName: events_1.TREE_EVENTS.onBlur, node: this });
        }
    };
    // 双击事件
    // 双击事件
    TreeNode.prototype.doublClick = 
    // 双击事件
    function (rawEvent) {
        this.fireEvent({ eventName: events_1.TREE_EVENTS.onDoubleClick, node: this, rawEvent: rawEvent });
    };
    // 右键快捷菜单
    // 右键快捷菜单
    TreeNode.prototype.contextMenu = 
    // 右键快捷菜单
    function (rawEvent) {
        if (this.enableCustomContextMenu()) {
            //启用右键菜单功能后，禁用默认的右键菜单
            rawEvent.preventDefault();
        }
        this.fireEvent({ eventName: events_1.TREE_EVENTS.onContextMenu, node: this, rawEvent: rawEvent });
    };
    TreeNode.prototype.dropMouseAction = function ($event, data) {
        if (data === void 0) { data = null; }
        // 1.设置focus
        this.treeModel.setFocus(true);
        // 2.执行事件处理器
        this._dropEventHandler(this.treeModel, this, $event, data);
        // 3.完成drop操作后，重置drag状态
        this.treeModel.cancelDrag();
    };
    TreeNode.prototype._dropEventHandler = function (tree, node, $event, to) {
        tree.moveNode({ from: tree.getDragNode(), to: to });
        // console.log("dropEventHandler:"+tree.roots);
    };
    // 点击右键菜单项
    // 点击右键菜单项
    TreeNode.prototype.rightMenuClicked = 
    // 点击右键菜单项
    function (event) {
        this.fireEvent({ eventName: events_1.TREE_EVENTS.onRightMenuClicked, node: this, rawEvent: event });
    };
    return TreeNode;
}());
exports.TreeNode = TreeNode;
//# sourceMappingURL=tree-node.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/ng2tree-common/models/tree-options.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var TreeOptions = /** @class */ (function () {
    function TreeOptions(options) {
        if (options === void 0) { options = {}; }
        //option是一个对象
        // nothing need to do
        this.options = options;
    }
    Object.defineProperty(TreeOptions.prototype, "idField", {
        // 字段不应直接暴露
        get: 
        // 字段不应直接暴露
        function () { return this.options.childrenField || 'id'; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeOptions.prototype, "displayField", {
        get: function () { return this.options.displayField || 'name'; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeOptions.prototype, "typeField", {
        get: function () { return this.options.typeField || 'type'; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeOptions.prototype, "childrenField", {
        get: function () { return this.options.childrenField || 'children'; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeOptions.prototype, "isExpandedField", {
        get: function () { return this.options.isExpandedField || 'isExpanded'; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeOptions.prototype, "treeNodeTemplate", {
        get: function () { return this.options.treeNodeTemplate || '{{ node.displayField }}'; } //插值表达式
        //插值表达式
        ,
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeOptions.prototype, "allowDrag", {
        get: function () { return this.options.allowDrag; } //是否启用拖拽功能
        //是否启用拖拽功能
        ,
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeOptions.prototype, "enableCustomContextMenu", {
        get: function () { return this.options.enableCustomContextMenu; } //是否启用快捷菜单
        //是否启用快捷菜单
        ,
        enumerable: true,
        configurable: true
    });
    return TreeOptions;
}());
exports.TreeOptions = TreeOptions;
//# sourceMappingURL=tree-options.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/ng2tree-common/tree.module.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = __webpack_require__("./node_modules/@angular/common/esm5/common.js");
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var tree_component_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/ng2tree-common/components/tree/tree.component.js");
var tree_node_component_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/ng2tree-common/components/tree-node/tree-node.component.js");
var tree_node_content_component_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/ng2tree-common/components/tree-node-content/tree-node-content.component.js");
var tree_node_content_directive_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/ng2tree-common/directives/tree-node-content.directive.js");
var tree_node_drop_slot_component_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/ng2tree-common/components/tree-node-drop-slot/tree-node-drop-slot.component.js");
var TreeModule = /** @class */ (function () {
    function TreeModule() {
    }
    TreeModule.decorators = [
        { type: core_1.NgModule, args: [{
                    declarations: [
                        tree_component_1.TreeComponent,
                        tree_node_component_1.TreeNodeComponent,
                        tree_node_content_component_1.TreeNodeContentComponent,
                        tree_node_content_directive_1.TreeNodeContentDirective,
                        tree_node_drop_slot_component_1.TreeNodeDropSlotComponent
                    ],
                    imports: [
                        common_1.CommonModule
                    ],
                    providers: [],
                    entryComponents: [
                        tree_node_content_component_1.TreeNodeContentComponent
                    ],
                    exports: [
                        tree_component_1.TreeComponent,
                        tree_node_component_1.TreeNodeComponent,
                        tree_node_content_component_1.TreeNodeContentComponent,
                        tree_node_content_directive_1.TreeNodeContentDirective,
                        tree_node_drop_slot_component_1.TreeNodeDropSlotComponent
                    ]
                },] },
    ];
    return TreeModule;
}());
exports.TreeModule = TreeModule;
//# sourceMappingURL=tree.module.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/panel/panel.module.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var sash_directive_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/panel/sash.directive.js");
var PanelModule = /** @class */ (function () {
    function PanelModule() {
    }
    PanelModule.forRoot = function (config) {
        return {
            ngModule: PanelModule
        };
    };
    PanelModule.decorators = [
        { type: core_1.NgModule, args: [{
                    declarations: [
                        sash_directive_1.SashDirective
                    ],
                    exports: [
                        sash_directive_1.SashDirective
                    ]
                },] },
    ];
    return PanelModule;
}());
exports.PanelModule = PanelModule;
//# sourceMappingURL=panel.module.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/panel/sash.directive.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var SashDirective = /** @class */ (function () {
    function SashDirective(_elementRef, renderer, _viewContainerRef) {
        this._elementRef = _elementRef;
        this.renderer = renderer;
        this._viewContainerRef = _viewContainerRef;
        this.widthChanged = new core_1.EventEmitter();
    }
    SashDirective.prototype.onMouseDown = function () {
        console.log('mousedown');
        this.bindDocumentClickListener();
    };
    SashDirective.prototype.onMouseUp = function () {
        console.log('mouseup');
    };
    SashDirective.prototype.ngOnInit = function () {
    };
    SashDirective.prototype.ngOnDestroy = function () {
    };
    SashDirective.prototype.bindDocumentClickListener = function () {
        var _this = this;
        if (!this.documentClickListener) {
            this.documentClickListener = this.renderer.listen('document', 'mouseup', function (event) {
                console.log('mouseup');
                console.log(event);
                _this.unbindDocumentMoveListener();
                _this.unbindDocumentClickListener();
            });
            if (!this.documentMoveListener) {
                this.bindDocumentClickListener = this.renderer.listen('document', 'mousemove', function (event) {
                    _this.panelWidth = event.clientX;
                    var newWidth = event.clientX;
                    _this.widthChanged.emit(newWidth);
                });
            }
        }
    };
    SashDirective.prototype.unbindDocumentClickListener = function () {
        if (this.documentClickListener) {
            this.documentClickListener();
            this.documentClickListener = null;
        }
    };
    SashDirective.prototype.unbindDocumentMoveListener = function () {
        if (this.bindDocumentClickListener) {
            this.bindDocumentClickListener();
            this.bindDocumentClickListener = null;
        }
    };
    SashDirective.decorators = [
        { type: core_1.Directive, args: [{
                    selector: '[sash]',
                    exportAs: 'sash'
                },] },
    ];
    /** @nocollapse */
    SashDirective.ctorParameters = function () { return [
        { type: core_1.ElementRef, },
        { type: core_1.Renderer2, },
        { type: core_1.ViewContainerRef, },
    ]; };
    SashDirective.propDecorators = {
        "panelWidth": [{ type: core_1.Input },],
        "widthChanged": [{ type: core_1.Output },],
        "onMouseDown": [{ type: core_1.HostListener, args: ['mousedown',] },],
        "onMouseUp": [{ type: core_1.HostListener, args: ['mouseup',] },],
    };
    return SashDirective;
}());
exports.SashDirective = SashDirective;
//# sourceMappingURL=sash.directive.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/popover/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var popover_directive_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/popover/popover.directive.js");
exports.PopoverDirective = popover_directive_1.PopoverDirective;
var popover_module_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/popover/popover.module.js");
exports.PopoverModule = popover_module_1.PopoverModule;
var popover_config_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/popover/popover.config.js");
exports.PopoverConfig = popover_config_1.PopoverConfig;
var popover_container_component_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/popover/popover-container.component.js");
exports.PopoverContainerComponent = popover_container_component_1.PopoverContainerComponent;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/popover/popover-container.component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var popover_config_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/popover/popover.config.js");
var theme_provider_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/utils/theme-provider.js");
var PopoverContainerComponent = /** @class */ (function () {
    function PopoverContainerComponent(config) {
        Object.assign(this, config);
    }
    Object.defineProperty(PopoverContainerComponent.prototype, "isBs3", {
        get: function () {
            return theme_provider_1.isBs3();
        },
        enumerable: true,
        configurable: true
    });
    PopoverContainerComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'popover-container',
                    changeDetection: core_1.ChangeDetectionStrategy.OnPush,
                    // tslint:disable-next-line
                    host: {
                        '[class]': '"popover in popover-" + placement + " " + "bs-popover-" + placement + " " + placement + " " + containerClass',
                        '[class.show]': '!isBs3',
                        role: 'tooltip',
                        style: 'display:block;'
                    },
                    styles: [
                        "\n    :host.bs-popover-top .arrow, :host.bs-popover-bottom .arrow {\n      left: 50%;\n      margin-left: -8px;\n    }\n    :host.bs-popover-left .arrow, :host.bs-popover-right .arrow {\n      top: 50%;\n      margin-top: -8px;\n    }\n  "
                    ],
                    template: "<div class=\"popover-arrow arrow\"></div> <div class=\"popover-title popover-header\" *ngIf=\"title\" style=\"padding: 8px;line-height: 16px;\">{{ title }}</div> <div class=\"popover-content popover-body\"> <ng-content></ng-content> </div>"
                },] },
    ];
    /** @nocollapse */
    PopoverContainerComponent.ctorParameters = function () { return [
        { type: popover_config_1.PopoverConfig, },
    ]; };
    PopoverContainerComponent.propDecorators = {
        "placement": [{ type: core_1.Input },],
        "title": [{ type: core_1.Input },],
    };
    return PopoverContainerComponent;
}());
exports.PopoverContainerComponent = PopoverContainerComponent;
//# sourceMappingURL=popover-container.component.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/popover/popover.config.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
/**
 * Configuration service for the Popover directive.
 * You can inject this service, typically in your root component, and customize
 * the values of its properties in order to provide default values for all the
 * popovers used in the application.
 */
var PopoverConfig = /** @class */ (function () {
    function PopoverConfig() {
        /**
           * Placement of a popover. Accepts: "top", "bottom", "left", "right", "auto"
           */
        this.placement = 'top';
        /**
           * Specifies events that should trigger. Supports a space separated list of
           * event names.
           */
        this.triggers = 'click';
        this.outsideClick = false;
    }
    PopoverConfig.decorators = [
        { type: core_1.Injectable },
    ];
    return PopoverConfig;
}());
exports.PopoverConfig = PopoverConfig;
//# sourceMappingURL=popover.config.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/popover/popover.directive.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var popover_config_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/popover/popover.config.js");
var component_loader_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/utils/component-loader/index.js");
var popover_container_component_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/popover/popover-container.component.js");
/**
 * A lightweight, extensible directive for fancy popover creation.
 */
var PopoverDirective = /** @class */ (function () {
    function PopoverDirective(_elementRef, _renderer, _viewContainerRef, _config, cis) {
        /**
           * Close popover on outside click
           */
        this.outsideClick = false;
        /**
           * Css class for popover container
           */
        this.containerClass = '';
        this._isInited = false;
        this._popover = cis
            .createLoader(_elementRef, _viewContainerRef, _renderer)
            .provide({ provide: popover_config_1.PopoverConfig, useValue: _config });
        Object.assign(this, _config);
        this.onShown = this._popover.onShown;
        this.onHidden = this._popover.onHidden;
        // fix: no focus on button on Mac OS #1795
        if (typeof window !== 'undefined') {
            _elementRef.nativeElement.addEventListener('click', function () {
                try {
                    _elementRef.nativeElement.focus();
                }
                catch (err) {
                    return;
                }
            });
        }
    }
    Object.defineProperty(PopoverDirective.prototype, "isOpen", {
        get: /**
           * Returns whether or not the popover is currently being shown
           */
        function () {
            return this._popover.isShown;
        },
        set: function (value) {
            if (value) {
                this.show();
            }
            else {
                this.hide();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Opens an element’s popover. This is considered a “manual” triggering of
     * the popover.
     */
    /**
       * Opens an element’s popover. This is considered a “manual” triggering of
       * the popover.
       */
    PopoverDirective.prototype.show = /**
       * Opens an element’s popover. This is considered a “manual” triggering of
       * the popover.
       */
    function () {
        if (this._popover.isShown || !this.popover) {
            return;
        }
        this._popover
            .attach(popover_container_component_1.PopoverContainerComponent)
            .to(this.container)
            .position({ attachment: this.placement })
            .show({
            content: this.popover,
            context: this.popoverContext,
            placement: this.placement,
            title: this.popoverTitle,
            containerClass: this.containerClass
        });
        this.isOpen = true;
    };
    /**
     * Closes an element’s popover. This is considered a “manual” triggering of
     * the popover.
     */
    /**
       * Closes an element’s popover. This is considered a “manual” triggering of
       * the popover.
       */
    PopoverDirective.prototype.hide = /**
       * Closes an element’s popover. This is considered a “manual” triggering of
       * the popover.
       */
    function () {
        if (this.isOpen) {
            this._popover.hide();
            this.isOpen = false;
        }
    };
    /**
     * Toggles an element’s popover. This is considered a “manual” triggering of
     * the popover.
     */
    /**
       * Toggles an element’s popover. This is considered a “manual” triggering of
       * the popover.
       */
    PopoverDirective.prototype.toggle = /**
       * Toggles an element’s popover. This is considered a “manual” triggering of
       * the popover.
       */
    function () {
        if (this.isOpen) {
            return this.hide();
        }
        this.show();
    };
    PopoverDirective.prototype.ngOnInit = function () {
        var _this = this;
        // fix: seems there are an issue with `routerLinkActive`
        // which result in duplicated call ngOnInit without call to ngOnDestroy
        // read more: https://github.com/valor-software/ngx-bootstrap/issues/1885
        if (this._isInited) {
            return;
        }
        this._isInited = true;
        this._popover.listen({
            triggers: this.triggers,
            outsideClick: this.outsideClick,
            show: function () { return _this.show(); }
        });
    };
    PopoverDirective.prototype.ngOnDestroy = function () {
        this._popover.dispose();
    };
    PopoverDirective.decorators = [
        { type: core_1.Directive, args: [{ selector: '[popover]', exportAs: 'bs-popover' },] },
    ];
    /** @nocollapse */
    PopoverDirective.ctorParameters = function () { return [
        { type: core_1.ElementRef, },
        { type: core_1.Renderer2, },
        { type: core_1.ViewContainerRef, },
        { type: popover_config_1.PopoverConfig, },
        { type: component_loader_1.ComponentLoaderFactory, },
    ]; };
    PopoverDirective.propDecorators = {
        "popover": [{ type: core_1.Input },],
        "popoverContext": [{ type: core_1.Input },],
        "popoverTitle": [{ type: core_1.Input },],
        "placement": [{ type: core_1.Input },],
        "outsideClick": [{ type: core_1.Input },],
        "triggers": [{ type: core_1.Input },],
        "container": [{ type: core_1.Input },],
        "containerClass": [{ type: core_1.Input },],
        "isOpen": [{ type: core_1.Input },],
        "onShown": [{ type: core_1.Output },],
        "onHidden": [{ type: core_1.Output },],
    };
    return PopoverDirective;
}());
exports.PopoverDirective = PopoverDirective;
//# sourceMappingURL=popover.directive.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/popover/popover.module.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/esm5/common.js");
var component_loader_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/utils/component-loader/index.js");
var positioning_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/utils/positioning/index.js");
var popover_config_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/popover/popover.config.js");
var popover_directive_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/popover/popover.directive.js");
var popover_container_component_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/popover/popover-container.component.js");
var PopoverModule = /** @class */ (function () {
    function PopoverModule() {
    }
    PopoverModule.forRoot = function () {
        return {
            ngModule: PopoverModule,
            providers: [popover_config_1.PopoverConfig, component_loader_1.ComponentLoaderFactory, positioning_1.PositioningService]
        };
    };
    PopoverModule.decorators = [
        { type: core_1.NgModule, args: [{
                    imports: [common_1.CommonModule],
                    declarations: [popover_directive_1.PopoverDirective, popover_container_component_1.PopoverContainerComponent],
                    exports: [popover_directive_1.PopoverDirective],
                    entryComponents: [popover_container_component_1.PopoverContainerComponent]
                },] },
    ];
    return PopoverModule;
}());
exports.PopoverModule = PopoverModule;
//# sourceMappingURL=popover.module.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/property-panel/components/property-item-list/property-item-list.component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var property_entity_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/property-panel/entity/property-entity.js");
var PropertyItemListComponent = /** @class */ (function () {
    function PropertyItemListComponent() {
        this.valueChanged = new core_1.EventEmitter();
    }
    PropertyItemListComponent.prototype.ngOnInit = function () { };
    PropertyItemListComponent.prototype.elementValueChanged = function (changeObject) {
        this.propertyData[changeObject.propertyID] = changeObject.propertyValue;
        if (this.category.setPropertyRelates && typeof (this.category.setPropertyRelates) === 'function') {
            this.category.setPropertyRelates(changeObject, this.propertyData);
        }
        this.valueChanged.emit(changeObject);
    };
    PropertyItemListComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'webide-property-item-list',
                    template: "<div *ngFor=\"let item of category.properties\"> <webide-property-item (valueChanged)=\"elementValueChanged($event)\" [elementValue]=\"propertyData[item.propertyID]\" [elementConfig]=\"item\"></webide-property-item> </div>",
                    styles: [""]
                },] },
    ];
    /** @nocollapse */
    PropertyItemListComponent.ctorParameters = function () { return []; };
    PropertyItemListComponent.propDecorators = {
        "category": [{ type: core_1.Input },],
        "propertyData": [{ type: core_1.Input },],
        "valueChanged": [{ type: core_1.Output },],
    };
    return PropertyItemListComponent;
}());
exports.PropertyItemListComponent = PropertyItemListComponent;
//# sourceMappingURL=property-item-list.component.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/property-panel/components/property-item/property-item.component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var property_entity_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/property-panel/entity/property-entity.js");
var modal_1 = __webpack_require__("./node_modules/@farris/ui/container/modal/index.js");
var PropertyItemComponent = /** @class */ (function () {
    function PropertyItemComponent(resolver, modalService, injector) {
        this.resolver = resolver;
        this.modalService = modalService;
        this.injector = injector;
        this.valueChanged = new core_1.EventEmitter();
        this.selectOptions = [];
        this.itemType = 'string';
        this.numberRestriction = {
            format: 'n2',
            min: '',
            max: ''
        };
    }
    PropertyItemComponent.prototype.ngOnChanges = function (changes) {
        this.refresh();
    };
    PropertyItemComponent.prototype.ngOnInit = function () {
        this.refresh();
    };
    PropertyItemComponent.prototype.refresh = function () {
        var propertyType = this.itemType = this.elementConfig.propertyType;
        switch (propertyType) {
            case 'boolean': {
                this.itemType = 'select';
                this.selectOptions = [{ key: true, value: true }, { key: false, value: false }];
                break;
            }
            case 'select': {
                this.selectOptions = this.elementConfig.iterator;
                break;
            }
            case 'modal': {
                if (this.elementConfig.converter) {
                    this.elementShowValue = this.elementConfig.converter.convertTo(this.elementValue);
                }
                else if (this.elementValue) {
                    this.elementShowValue = JSON.stringify(this.elementValue);
                }
                break;
            }
            case 'number': {
                var precision = this.elementConfig.precision;
                if (precision !== undefined && precision > -1) {
                    this.numberRestriction.format = 'n' + (precision === 0 ? '' : precision);
                }
                this.numberRestriction.min = this.elementConfig.min || '';
                this.numberRestriction.max = this.elementConfig.max || '';
            }
        }
    };
    /**
     * 变更属性值
     */
    /**
       * 变更属性值
       */
    PropertyItemComponent.prototype.changeValue = /**
       * 变更属性值
       */
    function () {
        var object = {
            propertyID: this.elementConfig.propertyID,
            propertyValue: this.elementValue
        };
        this.valueChanged.emit(object);
    };
    /**
     * 自定义编辑器使用模态框打开
     */
    /**
       * 自定义编辑器使用模态框打开
       */
    PropertyItemComponent.prototype.openModal = /**
       * 自定义编辑器使用模态框打开
       */
    function () {
        this.createEditorComponent();
    };
    /**
     * 创建自定义编辑器
     */
    /**
       * 创建自定义编辑器
       */
    PropertyItemComponent.prototype.createEditorComponent = /**
       * 创建自定义编辑器
       */
    function () {
        var _this = this;
        var editor = this.elementConfig.editor;
        if (!editor) {
            return;
        }
        // 创建模态框组件
        var compFactory = this.resolver.resolveComponentFactory(editor);
        var compRef = compFactory.create(this.injector);
        compRef.instance.value = this.elementValue;
        if (this.elementConfig.editorParams && compRef.instance.editorParams) {
            // 编辑器需要的额外参数
            compRef.instance.editorParams = this.elementConfig.editorParams;
        }
        var modalConfig = compRef.instance.modalConfig;
        if (!modalConfig) {
            modalConfig = {
                title: '属性配置',
                width: 800,
                height: 400,
                showButtons: false
            };
        }
        else if (modalConfig.showButtons) {
            modalConfig.buttons = compRef.instance.modalFooter;
        }
        var dialog = this.modalService.show(compRef, modalConfig);
        // 监听关闭模态框
        if (!compRef.instance.closeModal) {
            return;
        }
        compRef.instance.closeModal.subscribe(function (data) {
            // 数据转换
            if (data) {
                if (!_this.elementConfig.converter) {
                    _this.elementShowValue = JSON.stringify(data);
                }
                else {
                    _this.elementShowValue = _this.elementConfig.converter.convertTo(data);
                }
                var changeObject = {
                    propertyID: _this.elementConfig.propertyID,
                    propertyValue: data
                };
                _this.valueChanged.emit(changeObject);
            }
            dialog.close();
        });
    };
    PropertyItemComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'webide-property-item',
                    template: "<div class=\"farris-group-wrap property-item\" [style.display]=\"isHide ||!elementConfig.visible?'none':'block'\"> <div class=\"form-group farris-form-group\"> <label class=\"col-form-label\" [popover]=\"popTemplate\" [popoverTitle]=\"elementConfig.propertyName\" placement=\"left\" container=\"body\" triggers=\"mouseenter:mouseleave\"> <span class=\"farris-label-text\">{{elementConfig.propertyName}}</span> </label> <div class=\"farris-input-wrap\" *ngIf=\"itemType=='string'\"> <input type=\"input\" class=\"form-control form-control-sm\" [(ngModel)]=\"elementValue\" (blur)=\"changeValue($event)\" [readonly]=\"elementConfig.readonly?'readonly':''\"> </div> <div class=\"farris-input-wrap\" *ngIf=\"itemType=='number'\"> <kendo-numerictextbox class=\"form-control form-control-sm\" [(ngModel)]=\"elementValue\" [format]=\"numberRestriction.format\" [min]=\"numberRestriction.min\" [max]=\"numberRestriction.max\" [readonly]=\"elementConfig.readonly?true:false\" (blur)=\"changeValue($event)\"> </kendo-numerictextbox> </div> <div class=\"farris-input-wrap\" *ngIf=\"itemType=='select'\"> <kendo-dropdownlist class=\"form-control form-control-sm\" [data]=\"selectOptions\" textField=\"value\" valueField=\"key\" [valuePrimitive]=\"true\" [(ngModel)]=\"elementValue\" (valueChange)=\"changeValue($event)\" [readonly]=\"elementConfig.readonly?true:false\"> </kendo-dropdownlist> </div> <div class=\"farris-input-wrap\" *ngIf=\"itemType=='datetime'\"> <kendo-datepicker class=\"form-control form-control-sm\" [(ngModel)]=\"elementValue\" [readonly]=\"elementConfig.readonly?true:false\" (valueChange)=\"changeValue($event)\"> </kendo-datepicker> </div> <div class=\"farris-input-wrap modalIcon\" *ngIf=\"itemType=='modal'\"> <input type=\"input\" class=\"form-control form-control-sm\" [(ngModel)]=\"elementShowValue\" (blur)=\"changeValue($event)\" readonly> <i class=\"fa fa-clone\" (click)=\"openModal()\"></i> </div> </div> </div> <ng-template #popTemplate> <div> <span class=\"font-weight-bold\">Property ID: </span> {{elementConfig.propertyID}}</div> <div> <span class=\"font-weight-bold\">Property Name: </span> {{elementConfig.propertyName}}</div> <div> <span class=\"font-weight-bold\">Description: </span> {{elementConfig.description}}</div> <div> <span class=\"font-weight-bold\">Default Value: </span> {{elementConfig.defaultValue}}</div> </ng-template>",
                    styles: [".property-item .form-group { margin-bottom: 2px; } .property-item .modalIcon input { padding-right: 30px; } .property-item .modalIcon .fa { position: absolute; top: 7px; right: 10px; cursor: pointer; } .property-item .form-control[readonly] { background-color: #fff; } .property-item .form-control:disabled, .property-item .form-control[readonly] { color: #4B4C4C; }"]
                },] },
    ];
    /** @nocollapse */
    PropertyItemComponent.ctorParameters = function () { return [
        { type: core_1.ComponentFactoryResolver, },
        { type: modal_1.BsModalService, },
        { type: core_1.Injector, },
    ]; };
    PropertyItemComponent.propDecorators = {
        "elementConfig": [{ type: core_1.Input },],
        "elementValue": [{ type: core_1.Input },],
        "isHide": [{ type: core_1.Input },],
        "valueChanged": [{ type: core_1.Output },],
    };
    return PropertyItemComponent;
}());
exports.PropertyItemComponent = PropertyItemComponent;
//# sourceMappingURL=property-item.component.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/property-panel/components/property-panel/property-panel.component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var PropertyPanelComponent = /** @class */ (function () {
    function PropertyPanelComponent() {
        this.isOpen = true;
        this.propertyData = {};
        this.propertyChanged = new core_1.EventEmitter();
        this.showCloseBtn = true;
    }
    PropertyPanelComponent.prototype.ngOnInit = function () {
        if (this.width) {
            this.eastDiv.nativeElement.style.width = this.width + 'px';
        }
        else {
            this.eastDiv.nativeElement.style.width = 'inherit';
        }
        if (this.height) {
            this.eastDiv.nativeElement.style.height = this.height + 'px';
        }
        else {
            this.eastDiv.nativeElement.style.height = '100%';
        }
    };
    PropertyPanelComponent.prototype.changeStatus = function (item) {
        if (this.propertyConfig.length < 2) {
            return;
        }
        if (!item.status || item.status === 'open') {
            item.status = 'closed';
        }
        else {
            item.status = 'open';
        }
    };
    // 隐藏面板
    // 隐藏面板
    PropertyPanelComponent.prototype.collapse = 
    // 隐藏面板
    function () {
        this.isOpen = false;
    };
    /**
     * 抛出属性变更事件
     * @param changeObject
     */
    /**
       * 抛出属性变更事件
       * @param changeObject
       */
    PropertyPanelComponent.prototype._propertyhandler = /**
       * 抛出属性变更事件
       * @param changeObject
       */
    function (changeObject) {
        this.propertyChanged.emit(changeObject);
    };
    PropertyPanelComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'app-property-panel',
                    template: "<div #east [style.display]=\"isOpen?'block':'none'\" > <div class=\"propertyPanel panel d-flex flex-column\"> <div class=\"title\"> <div class=\"title-label\"> <span title=\"属性\">属性面板</span> </div> <div class=\"title-actions\"> <div class=\"monaco-toolbar\"> <div class=\"monaco-action-bar animated\"> <ul class=\"actions-container\" role=\"toolbar\" aria-label=\"属性面板\"> <!-- <li class=\"action-item\"> <a class=\"action-label icon collapse-property\" title=\"全部折叠\"></a> </li> --> <li class=\"action-item\" (click)=\"collapse()\" *ngIf=\"showCloseBtn\"> <a class=\"hide-panel\" title=\"关闭\"></a> </li> </ul> </div> </div> </div> </div> <div #propertyPanel class=\"panel-body\" [style.height]=\"(height - 35) + 'px'\"> <perfect-scrollbar [config]=\"{suppressScrollX: true}\"> <ul class=\"property-grid\"> <li *ngFor=\"let category of propertyConfig\"> <span [class]=\"category.status === 'closed' ? 'group-label collapse': 'group-label expand' \" (click)=\"changeStatus(category)\">{{ category.categoryName }}</span> <div [style.display]=\"!category.status || category.status === 'open'?'block':'none'\" class=\"py-1 px-2\"> <webide-property-item-list [category]=\"category\" [propertyData]=\"propertyData\" (valueChanged)=\"_propertyhandler($event)\"></webide-property-item-list> </div> </li> </ul> </perfect-scrollbar> </div> </div> </div>",
                    styles: [":host { width: inherit; height: inherit; } .propertyPanel { width: 100%; height: 100%; background: #F5F5F5; border: 1px solid #BCC1C4;     background-color: #f0f2f5; } .propertyPanel .title { position: relative; } .propertyPanel .title>.title-label { line-height: 35px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; padding-left: 12px; background: #E3E6E8; color: #333333; } .propertyPanel .title .title-actions { position: absolute; right: 10px; top: 0px; padding-left: 35px; height: 35px; -ms-flex: 1; flex: 1; box-sizing: border-box; } .propertyPanel .title .title-actions { position: absolute; right: 10px; top: 0px; } .propertyPanel .property-grid .group-label.expand { background-image: url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3E%3Cpath fill='%23646465' d='M11 10H5.344L11 4.414V10z'/%3E%3C/svg%3E\"); } .propertyPanel .property-grid .group-label { line-height: 30px; display: block; padding-left: 18px; background-size: 16px; background-repeat: no-repeat; background-size: 16px; background-position: 0px 50%; font-weight: bold; cursor: pointer; background-color: #cfd3d6; color: #6c6c6c; } .propertyPanel .property-grid .group-label.collapse { background-image: url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3E%3Cpath fill='%23646465' d='M6 4v8l4-4-4-4zm1 2.414L8.586 8 7 9.586V6.414z'/%3E%3C/svg%3E\"); } .propertyPanel .panel-body { overflow: auto; height: 100%; } .propertyPanel .property-grid { list-style: none; margin: 0; padding: 0; } .propertyPanel .action-item { cursor: pointer; display: inline-block; transition: transform 50ms ease; position: relative; padding: 0px; } .propertyPanel .action-item .hide-panel { height: 35px; display: block; line-height: 35px; min-width: 28px; color: rgba(66, 66, 66, 0.75); background-color: transparent !important; outline: none !important; background: url(\"data:image/svg+xml;charset=utf-8,%3Csvg width='16' height='16' viewBox='0 0 16 16' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M9.784 8L13 11.217 11.215 13 8.001 9.786 4.785 13 3 11.216l3.214-3.215L3 4.785 4.784 3 8 6.216 11.216 3 13 4.785 9.784 8.001z' fill='%23424242'/%3E%3C/svg%3E\") no-repeat 50% 50%; }"]
                },] },
    ];
    /** @nocollapse */
    PropertyPanelComponent.ctorParameters = function () { return []; };
    PropertyPanelComponent.propDecorators = {
        "width": [{ type: core_1.Input },],
        "height": [{ type: core_1.Input },],
        "propertyConfig": [{ type: core_1.Input },],
        "propertyData": [{ type: core_1.Input },],
        "propertyChanged": [{ type: core_1.Output },],
        "showCloseBtn": [{ type: core_1.Input },],
        "eastDiv": [{ type: core_1.ViewChild, args: ['east',] },],
    };
    return PropertyPanelComponent;
}());
exports.PropertyPanelComponent = PropertyPanelComponent;
//# sourceMappingURL=property-panel.component.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/property-panel/entity/property-entity.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// 控件全部配置
var 
// 控件全部配置
ElementPropertyConfig = /** @class */ (function () {
    function ElementPropertyConfig() {
    }
    return ElementPropertyConfig;
}());
exports.ElementPropertyConfig = ElementPropertyConfig;
// 属性实体
var 
// 属性实体
PropertyEntity = /** @class */ (function () {
    function PropertyEntity() {
        this.readonly = false;
        this.visible = true;
    }
    return PropertyEntity;
}());
exports.PropertyEntity = PropertyEntity;
//# sourceMappingURL=property-entity.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/property-panel/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__("./node_modules/@farris/ide-devkit/components/property-panel/property-panel.module.js"));
__export(__webpack_require__("./node_modules/@farris/ide-devkit/components/property-panel/entity/property-entity.js"));
__export(__webpack_require__("./node_modules/@farris/ide-devkit/components/property-panel/components/property-panel/property-panel.component.js"));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/property-panel/property-panel.module.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/esm5/common.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/esm5/forms.js");
var popover_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/popover/index.js");
var property_panel_component_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/property-panel/components/property-panel/property-panel.component.js");
var property_item_list_component_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/property-panel/components/property-item-list/property-item-list.component.js");
var property_item_component_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/property-panel/components/property-item/property-item.component.js");
var kendo_angular_inputs_1 = __webpack_require__("./node_modules/@progress/kendo-angular-inputs/dist/es/index.js");
var kendo_angular_dropdowns_1 = __webpack_require__("./node_modules/@progress/kendo-angular-dropdowns/dist/es/index.js");
var modal_1 = __webpack_require__("./node_modules/@farris/ui/container/modal/index.js");
var perfect_scorll_1 = __webpack_require__("./node_modules/@farris/ui/perfect-scorll/index.js");
var kendo_angular_dateinputs_1 = __webpack_require__("./node_modules/@progress/kendo-angular-dateinputs/dist/es/index.js");
var PropertyPanelModule = /** @class */ (function () {
    function PropertyPanelModule() {
    }
    PropertyPanelModule.decorators = [
        { type: core_1.NgModule, args: [{
                    declarations: [
                        property_panel_component_1.PropertyPanelComponent,
                        property_item_list_component_1.PropertyItemListComponent,
                        property_item_component_1.PropertyItemComponent
                    ],
                    imports: [
                        common_1.CommonModule,
                        forms_1.FormsModule,
                        popover_1.PopoverModule.forRoot(),
                        perfect_scorll_1.PerfectScrollbarModule,
                        kendo_angular_inputs_1.InputsModule,
                        kendo_angular_dropdowns_1.DropDownsModule,
                        modal_1.FarrisDialogModule,
                        kendo_angular_dateinputs_1.DateInputsModule
                    ],
                    exports: [property_panel_component_1.PropertyPanelComponent],
                    entryComponents: [property_panel_component_1.PropertyPanelComponent, property_item_component_1.PropertyItemComponent]
                },] },
    ];
    /** @nocollapse */
    PropertyPanelModule.ctorParameters = function () { return []; };
    return PropertyPanelModule;
}());
exports.PropertyPanelModule = PropertyPanelModule;
//# sourceMappingURL=property-panel.module.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/tabset/tabset-config.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
/**
 * Configuration service for the NgbTabset component.
 * You can inject this service, typically in your root component, and customize the values of its properties in
 * order to provide default values for all the tabsets used in the application.
 */
var NgbTabsetConfig = /** @class */ (function () {
    function NgbTabsetConfig() {
        this.justify = 'start';
        this.orientation = 'horizontal';
        this.type = 'tabs';
    }
    NgbTabsetConfig.decorators = [
        { type: core_1.Injectable },
    ];
    return NgbTabsetConfig;
}());
exports.NgbTabsetConfig = NgbTabsetConfig;
//# sourceMappingURL=tabset-config.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/tabset/tabset.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var tabset_config_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/tabset/tabset-config.js");
var nextId = 0;
/**
 * This directive should be used to wrap tab titles that need to contain HTML markup or other directives.
 */
var NgbTabTitle = /** @class */ (function () {
    function NgbTabTitle(templateRef) {
        this.templateRef = templateRef;
    }
    NgbTabTitle.decorators = [
        { type: core_1.Directive, args: [{ selector: 'ng-template[ngbTabTitle]' },] },
    ];
    /** @nocollapse */
    NgbTabTitle.ctorParameters = function () { return [
        { type: core_1.TemplateRef, },
    ]; };
    return NgbTabTitle;
}());
exports.NgbTabTitle = NgbTabTitle;
/**
 * This directive must be used to wrap content to be displayed in a tab.
 */
var NgbTabContent = /** @class */ (function () {
    function NgbTabContent(templateRef) {
        this.templateRef = templateRef;
    }
    NgbTabContent.decorators = [
        { type: core_1.Directive, args: [{ selector: 'ng-template[ngbTabContent]' },] },
    ];
    /** @nocollapse */
    NgbTabContent.ctorParameters = function () { return [
        { type: core_1.TemplateRef, },
    ]; };
    return NgbTabContent;
}());
exports.NgbTabContent = NgbTabContent;
/**
 * A directive representing an individual tab.
 */
var NgbTab = /** @class */ (function () {
    function NgbTab() {
        /**
           * Unique tab identifier. Must be unique for the entire document for proper accessibility support.
           */
        this.id = "ngb-tab-" + nextId++;
        /**
           * Allows toggling disabled state of a given state. Disabled tabs can't be selected.
           */
        this.disabled = false;
    }
    NgbTab.decorators = [
        { type: core_1.Directive, args: [{ selector: 'ngb-tab' },] },
    ];
    /** @nocollapse */
    NgbTab.propDecorators = {
        "id": [{ type: core_1.Input },],
        "title": [{ type: core_1.Input },],
        "disabled": [{ type: core_1.Input },],
        "contentTpl": [{ type: core_1.ContentChild, args: [NgbTabContent,] },],
        "titleTpl": [{ type: core_1.ContentChild, args: [NgbTabTitle,] },],
    };
    return NgbTab;
}());
exports.NgbTab = NgbTab;
/**
 * A component that makes it easy to create tabbed interface.
 */
var NgbTabset = /** @class */ (function () {
    function NgbTabset(config) {
        /**
           * Whether the closed tabs should be hidden without destroying them
           */
        this.destroyOnHide = true;
        /**
           * A tab change event fired right before the tab selection happens. See NgbTabChangeEvent for payload details
           */
        this.tabChange = new core_1.EventEmitter();
        this.type = config.type;
        this.justify = config.justify;
        this.orientation = config.orientation;
    }
    Object.defineProperty(NgbTabset.prototype, "justify", {
        set: /**
           * The horizontal alignment of the nav with flexbox utilities. Can be one of 'start', 'center', 'end', 'fill' or
           * 'justified'
           * The default value is 'start'.
           */
        function (className) {
            if (className === 'fill' || className === 'justified') {
                this.justifyClass = "nav-" + className;
            }
            else {
                this.justifyClass = "justify-content-" + className;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Selects the tab with the given id and shows its associated pane.
     * Any other tab that was previously selected becomes unselected and its associated pane is hidden.
     */
    /**
       * Selects the tab with the given id and shows its associated pane.
       * Any other tab that was previously selected becomes unselected and its associated pane is hidden.
       */
    NgbTabset.prototype.select = /**
       * Selects the tab with the given id and shows its associated pane.
       * Any other tab that was previously selected becomes unselected and its associated pane is hidden.
       */
    function (tabId) {
        var selectedTab = this._getTabById(tabId);
        if (selectedTab && !selectedTab.disabled && this.activeId !== selectedTab.id) {
            var defaultPrevented_1 = false;
            this.tabChange.emit({ activeId: this.activeId, nextId: selectedTab.id, preventDefault: function () { defaultPrevented_1 = true; } });
            if (!defaultPrevented_1) {
                this.activeId = selectedTab.id;
            }
        }
    };
    NgbTabset.prototype.ngAfterContentChecked = function () {
        // auto-correct activeId that might have been set incorrectly as input
        var activeTab = this._getTabById(this.activeId);
        this.activeId = activeTab ? activeTab.id : (this.tabs.length ? this.tabs.first.id : null);
    };
    NgbTabset.prototype._getTabById = function (id) {
        var tabsWithId = this.tabs.filter(function (tab) { return tab.id === id; });
        return tabsWithId.length ? tabsWithId[0] : null;
    };
    NgbTabset.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'ngb-tabset',
                    exportAs: 'ngbTabset',
                    template: "\n    <ul [class]=\"'web-ide-content-tab-header nav nav-' + type + (orientation == 'horizontal'?  ' '\n      + justifyClass : ' flex-column')\" role=\"tablist\">\n      <li class=\"nav-item\" *ngFor=\"let tab of tabs\">\n        <a [id]=\"tab.id\" class=\"nav-link\" [class.active]=\"tab.id === activeId\" [class.disabled]=\"tab.disabled\"\n          href (click)=\"!!select(tab.id)\" role=\"tab\" [attr.tabindex]=\"(tab.disabled ? '-1': undefined)\"\n          [attr.aria-controls]=\"(!destroyOnHide || tab.id === activeId ? tab.id + '-panel' : null)\"\n          [attr.aria-expanded]=\"tab.id === activeId\" [attr.aria-disabled]=\"tab.disabled\">\n          {{tab.title}}<ng-template [ngTemplateOutlet]=\"tab.titleTpl?.templateRef\"></ng-template>\n        </a>\n      </li>\n    </ul>\n    <div class=\"web-ide-content tab-content d-flex\">\n      <ng-template ngFor let-tab [ngForOf]=\"tabs\">\n        <div\n          class=\"tab-pane {{tab.id === activeId ? 'active' : null}}\"\n          *ngIf=\"!destroyOnHide || tab.id === activeId\"\n          role=\"tabpanel\"\n          [attr.aria-labelledby]=\"tab.id\" id=\"{{tab.id}}-panel\"\n          [attr.aria-expanded]=\"tab.id === activeId\">\n          <ng-template [ngTemplateOutlet]=\"tab.contentTpl.templateRef\"></ng-template>\n        </div>\n      </ng-template>\n    </div>\n  ",
                    styles: [":host { display: flex !important; flex: 1; flex-direction: column; } "]
                },] },
    ];
    /** @nocollapse */
    NgbTabset.ctorParameters = function () { return [
        { type: tabset_config_1.NgbTabsetConfig, },
    ]; };
    NgbTabset.propDecorators = {
        "tabs": [{ type: core_1.ContentChildren, args: [NgbTab,] },],
        "activeId": [{ type: core_1.Input },],
        "destroyOnHide": [{ type: core_1.Input },],
        "justify": [{ type: core_1.Input },],
        "orientation": [{ type: core_1.Input },],
        "type": [{ type: core_1.Input },],
        "tabChange": [{ type: core_1.Output },],
    };
    return NgbTabset;
}());
exports.NgbTabset = NgbTabset;
//# sourceMappingURL=tabset.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/tabset/tabset.module.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/esm5/common.js");
var tabset_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/tabset/tabset.js");
var tabset_config_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/tabset/tabset-config.js");
var tabset_2 = __webpack_require__("./node_modules/@farris/ide-devkit/components/tabset/tabset.js");
exports.NgbTabset = tabset_2.NgbTabset;
exports.NgbTab = tabset_2.NgbTab;
exports.NgbTabContent = tabset_2.NgbTabContent;
exports.NgbTabTitle = tabset_2.NgbTabTitle;
var tabset_config_2 = __webpack_require__("./node_modules/@farris/ide-devkit/components/tabset/tabset-config.js");
exports.NgbTabsetConfig = tabset_config_2.NgbTabsetConfig;
var NGB_TABSET_DIRECTIVES = [tabset_1.NgbTabset, tabset_1.NgbTab, tabset_1.NgbTabContent, tabset_1.NgbTabTitle];
var NgbTabsetModule = /** @class */ (function () {
    function NgbTabsetModule() {
    }
    NgbTabsetModule.forRoot = function () { return { ngModule: NgbTabsetModule, providers: [tabset_config_1.NgbTabsetConfig] }; };
    NgbTabsetModule.decorators = [
        { type: core_1.NgModule, args: [{ declarations: NGB_TABSET_DIRECTIVES, exports: NGB_TABSET_DIRECTIVES, imports: [common_1.CommonModule] },] },
    ];
    return NgbTabsetModule;
}());
exports.NgbTabsetModule = NgbTabsetModule;
//# sourceMappingURL=tabset.module.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/tooltip/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tooltip_container_component_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/tooltip/tooltip-container.component.js");
exports.TooltipContainerComponent = tooltip_container_component_1.TooltipContainerComponent;
var tooltip_directive_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/tooltip/tooltip.directive.js");
exports.TooltipDirective = tooltip_directive_1.TooltipDirective;
var tooltip_module_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/tooltip/tooltip.module.js");
exports.TooltipModule = tooltip_module_1.TooltipModule;
var tooltip_config_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/tooltip/tooltip.config.js");
exports.TooltipConfig = tooltip_config_1.TooltipConfig;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/tooltip/tooltip-container.component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var tooltip_config_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/tooltip/tooltip.config.js");
var theme_provider_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/utils/theme-provider.js");
var TooltipContainerComponent = /** @class */ (function () {
    function TooltipContainerComponent(config) {
        Object.assign(this, config);
    }
    Object.defineProperty(TooltipContainerComponent.prototype, "isBs3", {
        get: function () {
            return theme_provider_1.isBs3();
        },
        enumerable: true,
        configurable: true
    });
    TooltipContainerComponent.prototype.ngAfterViewInit = function () {
        this.classMap = { in: false, fade: false };
        this.classMap[this.placement] = true;
        this.classMap["tooltip-" + this.placement] = true;
        this.classMap.in = true;
        if (this.animation) {
            this.classMap.fade = true;
        }
        if (this.containerClass) {
            this.classMap[this.containerClass] = true;
        }
    };
    TooltipContainerComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'bs-tooltip-container',
                    changeDetection: core_1.ChangeDetectionStrategy.OnPush,
                    // tslint:disable-next-line
                    host: {
                        '[class]': '"tooltip in tooltip-" + placement + " " + "bs-tooltip-" + placement + " " + placement + " " + containerClass',
                        '[class.show]': '!isBs3',
                        role: 'tooltip'
                    },
                    styles: [
                        "\n    :host.tooltip {\n      display: block;\n    }\n    :host.bs-tooltip-top .arrow, :host.bs-tooltip-bottom .arrow {\n      left: 50%;\n      margin-left: -6px;\n    }\n    :host.bs-tooltip-left .arrow, :host.bs-tooltip-right .arrow {\n      top: 50%;\n      margin-top: -6px;\n    }\n  "
                    ],
                    template: "\n    <div class=\"tooltip-arrow arrow\"></div>\n    <div class=\"tooltip-inner\"><ng-content></ng-content></div>\n    "
                },] },
    ];
    /** @nocollapse */
    TooltipContainerComponent.ctorParameters = function () { return [
        { type: tooltip_config_1.TooltipConfig, },
    ]; };
    return TooltipContainerComponent;
}());
exports.TooltipContainerComponent = TooltipContainerComponent;
//# sourceMappingURL=tooltip-container.component.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/tooltip/tooltip.config.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
/** Default values provider for tooltip */
var TooltipConfig = /** @class */ (function () {
    function TooltipConfig() {
        /** tooltip placement, supported positions: 'top', 'bottom', 'left', 'right' */
        this.placement = 'top';
        /** array of event names which triggers tooltip opening */
        this.triggers = 'hover focus';
    }
    TooltipConfig.decorators = [
        { type: core_1.Injectable },
    ];
    return TooltipConfig;
}());
exports.TooltipConfig = TooltipConfig;
//# sourceMappingURL=tooltip.config.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/tooltip/tooltip.directive.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var tooltip_container_component_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/tooltip/tooltip-container.component.js");
var tooltip_config_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/tooltip/tooltip.config.js");
var component_loader_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/utils/component-loader/index.js");
var decorators_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/utils/decorators.js");
var warn_once_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/utils/warn-once.js");
var triggers_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/utils/triggers.js");
var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
__webpack_require__("./node_modules/rxjs/add/observable/timer.js");
var TooltipDirective = /** @class */ (function () {
    function TooltipDirective(_viewContainerRef, _renderer, _elementRef, cis, config) {
        this._renderer = _renderer;
        this._elementRef = _elementRef;
        /** Fired when tooltip content changes */
        this.tooltipChange = new core_1.EventEmitter();
        /**
           * Css class for tooltip container
           */
        this.containerClass = '';
        /** @deprecated - removed, will be added to configuration */
        this._animation = true;
        /** @deprecated */
        this._fadeDuration = 150;
        /** @deprecated */
        this.tooltipStateChanged = new core_1.EventEmitter();
        this._tooltip = cis
            .createLoader(this._elementRef, _viewContainerRef, this._renderer)
            .provide({ provide: tooltip_config_1.TooltipConfig, useValue: config });
        Object.assign(this, config);
        this.onShown = this._tooltip.onShown;
        this.onHidden = this._tooltip.onHidden;
    }
    Object.defineProperty(TooltipDirective.prototype, "isOpen", {
        get: /**
           * Returns whether or not the tooltip is currently being shown
           */
        function () {
            return this._tooltip.isShown;
        },
        set: function (value) {
            if (value) {
                this.show();
            }
            else {
                this.hide();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TooltipDirective.prototype, "htmlContent", {
        set: /** @deprecated - please use `tooltip` instead */
        function (value) {
            warn_once_1.warnOnce('tooltipHtml was deprecated, please use `tooltip` instead');
            this.tooltip = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TooltipDirective.prototype, "_placement", {
        set: /** @deprecated - please use `placement` instead */
        function (value) {
            warn_once_1.warnOnce('tooltipPlacement was deprecated, please use `placement` instead');
            this.placement = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TooltipDirective.prototype, "_isOpen", {
        get: function () {
            warn_once_1.warnOnce('tooltipIsOpen was deprecated, please use `isOpen` instead');
            return this.isOpen;
        },
        set: /** @deprecated - please use `isOpen` instead*/
        function (value) {
            warn_once_1.warnOnce('tooltipIsOpen was deprecated, please use `isOpen` instead');
            this.isOpen = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TooltipDirective.prototype, "_enable", {
        get: function () {
            warn_once_1.warnOnce('tooltipEnable was deprecated, please use `isDisabled` instead');
            return this.isDisabled;
        },
        set: /** @deprecated - please use `isDisabled` instead */
        function (value) {
            warn_once_1.warnOnce('tooltipEnable was deprecated, please use `isDisabled` instead');
            this.isDisabled = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TooltipDirective.prototype, "_appendToBody", {
        get: function () {
            warn_once_1.warnOnce('tooltipAppendToBody was deprecated, please use `container="body"` instead');
            return this.container === 'body';
        },
        set: /** @deprecated - please use `container="body"` instead */
        function (value) {
            warn_once_1.warnOnce('tooltipAppendToBody was deprecated, please use `container="body"` instead');
            this.container = value ? 'body' : this.container;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TooltipDirective.prototype, "_popupClass", {
        set: /** @deprecated - will replaced with customClass */
        function (value) {
            warn_once_1.warnOnce('tooltipClass deprecated');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TooltipDirective.prototype, "_tooltipContext", {
        set: /** @deprecated - removed */
        function (value) {
            warn_once_1.warnOnce('tooltipContext deprecated');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TooltipDirective.prototype, "_tooltipPopupDelay", {
        set: /** @deprecated */
        function (value) {
            warn_once_1.warnOnce('tooltipPopupDelay is deprecated, use `delay` instead');
            this.delay = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TooltipDirective.prototype, "_tooltipTrigger", {
        get: /** @deprecated -  please use `triggers` instead */
        function () {
            warn_once_1.warnOnce('tooltipTrigger was deprecated, please use `triggers` instead');
            return this.triggers;
        },
        set: function (value) {
            warn_once_1.warnOnce('tooltipTrigger was deprecated, please use `triggers` instead');
            this.triggers = (value || '').toString();
        },
        enumerable: true,
        configurable: true
    });
    TooltipDirective.prototype.ngOnInit = function () {
        var _this = this;
        this._tooltip.listen({
            triggers: this.triggers,
            show: function () { return _this.show(); }
        });
        this.tooltipChange.subscribe(function (value) {
            if (!value) {
                _this._tooltip.hide();
            }
        });
    };
    /**
     * Toggles an element’s tooltip. This is considered a “manual” triggering of
     * the tooltip.
     */
    /**
       * Toggles an element’s tooltip. This is considered a “manual” triggering of
       * the tooltip.
       */
    TooltipDirective.prototype.toggle = /**
       * Toggles an element’s tooltip. This is considered a “manual” triggering of
       * the tooltip.
       */
    function () {
        if (this.isOpen) {
            return this.hide();
        }
        this.show();
    };
    /**
     * Opens an element’s tooltip. This is considered a “manual” triggering of
     * the tooltip.
     */
    /**
       * Opens an element’s tooltip. This is considered a “manual” triggering of
       * the tooltip.
       */
    TooltipDirective.prototype.show = /**
       * Opens an element’s tooltip. This is considered a “manual” triggering of
       * the tooltip.
       */
    function () {
        var _this = this;
        if (this.isOpen ||
            this.isDisabled ||
            this._delayTimeoutId ||
            !this.tooltip) {
            return;
        }
        var showTooltip = function () {
            if (_this._delayTimeoutId) {
                _this._delayTimeoutId = undefined;
            }
            _this._tooltip
                .attach(tooltip_container_component_1.TooltipContainerComponent)
                .to(_this.container)
                .position({ attachment: _this.placement })
                .show({
                content: _this.tooltip,
                placement: _this.placement,
                containerClass: _this.containerClass
            });
        };
        var cancelDelayedTooltipShowing = function () {
            if (_this._tooltipCancelShowFn) {
                _this._tooltipCancelShowFn();
            }
        };
        if (this.delay) {
            var timer_1 = Observable_1.Observable.timer(this.delay).subscribe(function () {
                showTooltip();
                cancelDelayedTooltipShowing();
            });
            if (this.triggers) {
                var triggers = triggers_1.parseTriggers(this.triggers);
                this._tooltipCancelShowFn = this._renderer.listen(this._elementRef.nativeElement, triggers[0].close, function () {
                    timer_1.unsubscribe();
                    cancelDelayedTooltipShowing();
                });
            }
        }
        else {
            showTooltip();
        }
    };
    /**
     * Closes an element’s tooltip. This is considered a “manual” triggering of
     * the tooltip.
     */
    /**
       * Closes an element’s tooltip. This is considered a “manual” triggering of
       * the tooltip.
       */
    TooltipDirective.prototype.hide = /**
       * Closes an element’s tooltip. This is considered a “manual” triggering of
       * the tooltip.
       */
    function () {
        var _this = this;
        if (this._delayTimeoutId) {
            clearTimeout(this._delayTimeoutId);
            this._delayTimeoutId = undefined;
        }
        if (!this._tooltip.isShown) {
            return;
        }
        this._tooltip.instance.classMap.in = false;
        setTimeout(function () {
            _this._tooltip.hide();
        }, this._fadeDuration);
    };
    TooltipDirective.prototype.ngOnDestroy = function () {
        this._tooltip.dispose();
    };
    TooltipDirective.decorators = [
        { type: core_1.Directive, args: [{
                    selector: '[tooltip], [tooltipHtml]',
                    exportAs: 'bs-tooltip'
                },] },
    ];
    /** @nocollapse */
    TooltipDirective.ctorParameters = function () { return [
        { type: core_1.ViewContainerRef, },
        { type: core_1.Renderer2, },
        { type: core_1.ElementRef, },
        { type: component_loader_1.ComponentLoaderFactory, },
        { type: tooltip_config_1.TooltipConfig, },
    ]; };
    TooltipDirective.propDecorators = {
        "tooltip": [{ type: core_1.Input },],
        "tooltipChange": [{ type: core_1.Output },],
        "placement": [{ type: core_1.Input },],
        "triggers": [{ type: core_1.Input },],
        "container": [{ type: core_1.Input },],
        "isOpen": [{ type: core_1.Input },],
        "isDisabled": [{ type: core_1.Input },],
        "containerClass": [{ type: core_1.Input },],
        "delay": [{ type: core_1.Input },],
        "onShown": [{ type: core_1.Output },],
        "onHidden": [{ type: core_1.Output },],
        "htmlContent": [{ type: core_1.Input, args: ['tooltipHtml',] },],
        "_placement": [{ type: core_1.Input, args: ['tooltipPlacement',] },],
        "_isOpen": [{ type: core_1.Input, args: ['tooltipIsOpen',] },],
        "_enable": [{ type: core_1.Input, args: ['tooltipEnable',] },],
        "_appendToBody": [{ type: core_1.Input, args: ['tooltipAppendToBody',] },],
        "_animation": [{ type: core_1.Input, args: ['tooltipAnimation',] },],
        "_popupClass": [{ type: core_1.Input, args: ['tooltipClass',] },],
        "_tooltipContext": [{ type: core_1.Input, args: ['tooltipContext',] },],
        "_tooltipPopupDelay": [{ type: core_1.Input, args: ['tooltipPopupDelay',] },],
        "_fadeDuration": [{ type: core_1.Input, args: ['tooltipFadeDuration',] },],
        "_tooltipTrigger": [{ type: core_1.Input, args: ['tooltipTrigger',] },],
        "tooltipStateChanged": [{ type: core_1.Output },],
    };
    __decorate([
        decorators_1.OnChange(),
        __metadata("design:type", Object)
    ], TooltipDirective.prototype, "tooltip", void 0);
    return TooltipDirective;
}());
exports.TooltipDirective = TooltipDirective;
//# sourceMappingURL=tooltip.directive.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/tooltip/tooltip.module.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = __webpack_require__("./node_modules/@angular/common/esm5/common.js");
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var tooltip_container_component_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/tooltip/tooltip-container.component.js");
var tooltip_directive_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/tooltip/tooltip.directive.js");
var tooltip_config_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/tooltip/tooltip.config.js");
var component_loader_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/utils/component-loader/index.js");
var positioning_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/utils/positioning/index.js");
var TooltipModule = /** @class */ (function () {
    function TooltipModule() {
    }
    TooltipModule.forRoot = function () {
        return {
            ngModule: TooltipModule,
            providers: [tooltip_config_1.TooltipConfig, component_loader_1.ComponentLoaderFactory, positioning_1.PositioningService]
        };
    };
    TooltipModule.decorators = [
        { type: core_1.NgModule, args: [{
                    imports: [common_1.CommonModule],
                    declarations: [tooltip_directive_1.TooltipDirective, tooltip_container_component_1.TooltipContainerComponent],
                    exports: [tooltip_directive_1.TooltipDirective],
                    entryComponents: [tooltip_container_component_1.TooltipContainerComponent]
                },] },
    ];
    return TooltipModule;
}());
exports.TooltipModule = TooltipModule;
//# sourceMappingURL=tooltip.module.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/utils/component-loader/component-loader.class.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var triggers_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/utils/triggers.js");
var content_ref_class_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/utils/component-loader/content-ref.class.js");
var ComponentLoader = /** @class */ (function () {
    /**
     * Do not use this directly, it should be instanced via
     * `ComponentLoadFactory.attach`
     * @internal
     */
    // tslint:disable-next-line
    function ComponentLoader(_viewContainerRef, _renderer, _elementRef, _injector, _componentFactoryResolver, _ngZone, _applicationRef, _posService) {
        this._viewContainerRef = _viewContainerRef;
        this._renderer = _renderer;
        this._elementRef = _elementRef;
        this._injector = _injector;
        this._componentFactoryResolver = _componentFactoryResolver;
        this._ngZone = _ngZone;
        this._applicationRef = _applicationRef;
        this._posService = _posService;
        this.onBeforeShow = new core_1.EventEmitter();
        this.onShown = new core_1.EventEmitter();
        this.onBeforeHide = new core_1.EventEmitter();
        this.onHidden = new core_1.EventEmitter();
        this._providers = [];
        this._isHiding = false;
        this._listenOpts = {};
        this._globalListener = Function.prototype;
    }
    Object.defineProperty(ComponentLoader.prototype, "isShown", {
        get: function () {
            if (this._isHiding) {
                return false;
            }
            return !!this._componentRef;
        },
        enumerable: true,
        configurable: true
    });
    ComponentLoader.prototype.attach = function (compType) {
        this._componentFactory = this._componentFactoryResolver
            .resolveComponentFactory(compType);
        return this;
    };
    // todo: add behaviour: to target element, `body`, custom element
    // todo: add behaviour: to target element, `body`, custom element
    ComponentLoader.prototype.to = 
    // todo: add behaviour: to target element, `body`, custom element
    function (container) {
        this.container = container || this.container;
        return this;
    };
    ComponentLoader.prototype.position = function (opts) {
        this.attachment = opts.attachment || this.attachment;
        this._elementRef = opts.target || this._elementRef;
        return this;
    };
    ComponentLoader.prototype.provide = function (provider) {
        this._providers.push(provider);
        return this;
    };
    // todo: appendChild to element or document.querySelector(this.container)
    // todo: appendChild to element or document.querySelector(this.container)
    ComponentLoader.prototype.show = 
    // todo: appendChild to element or document.querySelector(this.container)
    function (opts) {
        if (opts === void 0) { opts = {}; }
        this._subscribePositioning();
        this._innerComponent = null;
        if (!this._componentRef) {
            this.onBeforeShow.emit();
            this._contentRef = this._getContentRef(opts.content, opts.context, opts.initialState);
            var injector = core_1.ReflectiveInjector.resolveAndCreate(this._providers, this._injector);
            this._componentRef = this._componentFactory.create(injector, this._contentRef.nodes);
            this._applicationRef.attachView(this._componentRef.hostView);
            // this._componentRef = this._viewContainerRef
            //   .createComponent(this._componentFactory, 0, injector, this._contentRef.nodes);
            this.instance = this._componentRef.instance;
            Object.assign(this._componentRef.instance, opts);
            if (this.container instanceof core_1.ElementRef) {
                this.container.nativeElement.appendChild(this._componentRef.location.nativeElement);
            }
            if (this.container === 'body' && typeof document !== 'undefined') {
                document
                    .querySelector(this.container)
                    .appendChild(this._componentRef.location.nativeElement);
            }
            if (!this.container &&
                this._elementRef &&
                this._elementRef.nativeElement.parentElement) {
                this._elementRef.nativeElement.parentElement.appendChild(this._componentRef.location.nativeElement);
            }
            // we need to manually invoke change detection since events registered
            // via
            // Renderer::listen() are not picked up by change detection with the
            // OnPush strategy
            if (this._contentRef.componentRef) {
                this._innerComponent = this._contentRef.componentRef.instance;
                this._contentRef.componentRef.changeDetectorRef.markForCheck();
                this._contentRef.componentRef.changeDetectorRef.detectChanges();
            }
            this._componentRef.changeDetectorRef.markForCheck();
            this._componentRef.changeDetectorRef.detectChanges();
            this.onShown.emit(this._componentRef.instance);
        }
        this._registerOutsideClick();
        return this._componentRef;
    };
    ComponentLoader.prototype.hide = function () {
        if (!this._componentRef) {
            return this;
        }
        this.onBeforeHide.emit(this._componentRef.instance);
        var componentEl = this._componentRef.location.nativeElement;
        componentEl.parentNode.removeChild(componentEl);
        if (this._contentRef.componentRef) {
            this._contentRef.componentRef.destroy();
        }
        this._componentRef.destroy();
        if (this._viewContainerRef && this._contentRef.viewRef) {
            this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._contentRef.viewRef));
        }
        if (this._contentRef.viewRef) {
            this._contentRef.viewRef.destroy();
        }
        // this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._componentRef.hostView));
        //
        // if (this._contentRef.viewRef && this._viewContainerRef.indexOf(this._contentRef.viewRef) !== -1) {
        //   this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._contentRef.viewRef));
        // }
        this._contentRef = null;
        this._componentRef = null;
        this._removeGlobalListener();
        this.onHidden.emit();
        return this;
    };
    ComponentLoader.prototype.toggle = function () {
        if (this.isShown) {
            this.hide();
            return;
        }
        this.show();
    };
    ComponentLoader.prototype.dispose = function () {
        if (this.isShown) {
            this.hide();
        }
        this._unsubscribePositioning();
        if (this._unregisterListenersFn) {
            this._unregisterListenersFn();
        }
    };
    ComponentLoader.prototype.listen = function (listenOpts) {
        var _this = this;
        this.triggers = listenOpts.triggers || this.triggers;
        this._listenOpts.outsideClick = listenOpts.outsideClick;
        listenOpts.target = listenOpts.target || this._elementRef.nativeElement;
        var hide = (this._listenOpts.hide = function () {
            return listenOpts.hide ? listenOpts.hide() : void _this.hide();
        });
        var show = (this._listenOpts.show = function (registerHide) {
            listenOpts.show ? listenOpts.show(registerHide) : _this.show(registerHide);
            registerHide();
        });
        var toggle = function (registerHide) {
            _this.isShown ? hide() : show(registerHide);
        };
        this._unregisterListenersFn = triggers_1.listenToTriggersV2(this._renderer, {
            target: listenOpts.target,
            triggers: listenOpts.triggers,
            show: show,
            hide: hide,
            toggle: toggle
        });
        return this;
    };
    ComponentLoader.prototype._removeGlobalListener = function () {
        if (this._globalListener) {
            this._globalListener();
            this._globalListener = null;
        }
    };
    ComponentLoader.prototype.attachInline = function (vRef, template) {
        this._inlineViewRef = vRef.createEmbeddedView(template);
        return this;
    };
    ComponentLoader.prototype._registerOutsideClick = function () {
        var _this = this;
        if (!this._componentRef || !this._componentRef.location) {
            return;
        }
        // why: should run after first event bubble
        if (this._listenOpts.outsideClick) {
            var target_1 = this._componentRef.location.nativeElement;
            setTimeout(function () {
                _this._globalListener = triggers_1.registerOutsideClick(_this._renderer, {
                    targets: [target_1, _this._elementRef.nativeElement],
                    outsideClick: _this._listenOpts.outsideClick,
                    hide: function () { return _this._listenOpts.hide(); }
                });
            });
        }
    };
    ComponentLoader.prototype.getInnerComponent = function () {
        return this._innerComponent;
    };
    ComponentLoader.prototype._subscribePositioning = function () {
        var _this = this;
        if (this._zoneSubscription || !this.attachment) {
            return;
        }
        this._zoneSubscription = this._ngZone.onStable.subscribe(function () {
            if (!_this._componentRef) {
                return;
            }
            _this._posService.position({
                element: _this._componentRef.location,
                target: _this._elementRef,
                attachment: _this.attachment,
                appendToBody: _this.container === 'body'
            });
        });
    };
    ComponentLoader.prototype._unsubscribePositioning = function () {
        if (!this._zoneSubscription) {
            return;
        }
        this._zoneSubscription.unsubscribe();
        this._zoneSubscription = null;
    };
    ComponentLoader.prototype._getContentRef = function (content, context, initialState) {
        if (!content) {
            return new content_ref_class_1.ContentRef([]);
        }
        if (content instanceof core_1.TemplateRef) {
            if (this._viewContainerRef) {
                var _viewRef = this._viewContainerRef
                    .createEmbeddedView(content, context);
                _viewRef.markForCheck();
                return new content_ref_class_1.ContentRef([_viewRef.rootNodes], _viewRef);
            }
            var viewRef = content.createEmbeddedView({});
            this._applicationRef.attachView(viewRef);
            return new content_ref_class_1.ContentRef([viewRef.rootNodes], viewRef);
        }
        if (typeof content === 'function') {
            var contentCmptFactory = this._componentFactoryResolver.resolveComponentFactory(content);
            var modalContentInjector = core_1.ReflectiveInjector.resolveAndCreate(this._providers.slice(), this._injector);
            var componentRef = contentCmptFactory.create(modalContentInjector);
            Object.assign(componentRef.instance, initialState);
            this._applicationRef.attachView(componentRef.hostView);
            return new content_ref_class_1.ContentRef([[componentRef.location.nativeElement]], componentRef.hostView, componentRef);
        }
        // 支持传入的content是一个ComponentRef实例 added by liyz
        if (content instanceof core_1.ComponentRef) {
            Object.assign(content.instance, initialState);
            this._applicationRef.attachView(content.hostView);
            return new content_ref_class_1.ContentRef([[content.location.nativeElement]], content.hostView, content);
        }
        return new content_ref_class_1.ContentRef([[this._renderer.createText("" + content)]]);
    };
    return ComponentLoader;
}());
exports.ComponentLoader = ComponentLoader;
//# sourceMappingURL=component-loader.class.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/utils/component-loader/component-loader.factory.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var component_loader_class_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/utils/component-loader/component-loader.class.js");
var positioning_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/utils/positioning/index.js");
var ComponentLoaderFactory = /** @class */ (function () {
    function ComponentLoaderFactory(_componentFactoryResolver, _ngZone, _injector, _posService, _applicationRef) {
        this._componentFactoryResolver = _componentFactoryResolver;
        this._ngZone = _ngZone;
        this._injector = _injector;
        this._posService = _posService;
        this._applicationRef = _applicationRef;
    }
    /**
     *
     * @param _elementRef
     * @param _viewContainerRef
     * @param _renderer
     * @returns {ComponentLoader}
     */
    /**
       *
       * @param _elementRef
       * @param _viewContainerRef
       * @param _renderer
       * @returns {ComponentLoader}
       */
    ComponentLoaderFactory.prototype.createLoader = /**
       *
       * @param _elementRef
       * @param _viewContainerRef
       * @param _renderer
       * @returns {ComponentLoader}
       */
    function (_elementRef, _viewContainerRef, _renderer) {
        return new component_loader_class_1.ComponentLoader(_viewContainerRef, _renderer, _elementRef, this._injector, this._componentFactoryResolver, this._ngZone, this._applicationRef, this._posService);
    };
    ComponentLoaderFactory.decorators = [
        { type: core_1.Injectable },
    ];
    /** @nocollapse */
    ComponentLoaderFactory.ctorParameters = function () { return [
        { type: core_1.ComponentFactoryResolver, },
        { type: core_1.NgZone, },
        { type: core_1.Injector, },
        { type: positioning_1.PositioningService, },
        { type: core_1.ApplicationRef, },
    ]; };
    return ComponentLoaderFactory;
}());
exports.ComponentLoaderFactory = ComponentLoaderFactory;
//# sourceMappingURL=component-loader.factory.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/utils/component-loader/content-ref.class.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @copyright Valor Software
 * @copyright Angular ng-bootstrap team
 */
Object.defineProperty(exports, "__esModule", { value: true });
var ContentRef = /** @class */ (function () {
    function ContentRef(nodes, viewRef, componentRef) {
        this.nodes = nodes;
        this.viewRef = viewRef;
        this.componentRef = componentRef;
    }
    return ContentRef;
}());
exports.ContentRef = ContentRef;
//# sourceMappingURL=content-ref.class.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/utils/component-loader/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var component_loader_class_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/utils/component-loader/component-loader.class.js");
exports.ComponentLoader = component_loader_class_1.ComponentLoader;
var component_loader_factory_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/utils/component-loader/component-loader.factory.js");
exports.ComponentLoaderFactory = component_loader_factory_1.ComponentLoaderFactory;
var content_ref_class_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/utils/component-loader/content-ref.class.js");
exports.ContentRef = content_ref_class_1.ContentRef;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/utils/decorators.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/*tslint:disable:no-invalid-this */
function OnChange() {
    var sufix = 'Change';
    return function OnChangeHandler(target, propertyKey) {
        var _key = " __" + propertyKey + "Value";
        Object.defineProperty(target, propertyKey, {
            get: function () { return this[_key]; },
            set: function (value) {
                var prevValue = this[_key];
                this[_key] = value;
                if (prevValue !== value && this[propertyKey + sufix]) {
                    this[propertyKey + sufix].emit(value);
                }
            }
        });
    };
}
exports.OnChange = OnChange;
/* tslint:enable */
//# sourceMappingURL=decorators.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/utils/facade/browser.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*tslint:disable */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * JS version of browser APIs. This library can only run in the browser.
 */
var win = (typeof window !== 'undefined' && window) || {};
exports.window = win;
exports.document = win.document;
exports.location = win.location;
exports.gc = win['gc'] ? function () { return win['gc'](); } : function () { return null; };
exports.performance = win['performance'] ? win['performance'] : null;
exports.Event = win['Event'];
exports.MouseEvent = win['MouseEvent'];
exports.KeyboardEvent = win['KeyboardEvent'];
exports.EventTarget = win['EventTarget'];
exports.History = win['History'];
exports.Location = win['Location'];
exports.EventListener = win['EventListener'];
//# sourceMappingURL=browser.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/utils/ng2-bootstrap-config.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var browser_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/utils/facade/browser.js");
function isBs3() {
    return browser_1.window.__theme === 'bs4';
}
exports.isBs3 = isBs3;
//# sourceMappingURL=ng2-bootstrap-config.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/utils/positioning/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ng_positioning_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/utils/positioning/ng-positioning.js");
exports.positionElements = ng_positioning_1.positionElements;
exports.Positioning = ng_positioning_1.Positioning;
var positioning_service_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/utils/positioning/positioning.service.js");
exports.PositioningService = positioning_service_1.PositioningService;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/utils/positioning/ng-positioning.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @copyright Valor Software
 * @copyright Angular ng-bootstrap team
 */
Object.defineProperty(exports, "__esModule", { value: true });
// previous version:
// https://github.com/angular-ui/bootstrap/blob/07c31d0731f7cb068a1932b8e01d2312b796b4ec/src/position/position.js
// tslint:disable
var 
// previous version:
// https://github.com/angular-ui/bootstrap/blob/07c31d0731f7cb068a1932b8e01d2312b796b4ec/src/position/position.js
// tslint:disable
Positioning = /** @class */ (function () {
    function Positioning() {
    }
    Positioning.prototype.position = function (element, round) {
        if (round === void 0) { round = true; }
        var elPosition;
        var parentOffset = {
            width: 0,
            height: 0,
            top: 0,
            bottom: 0,
            left: 0,
            right: 0
        };
        if (this.getStyle(element, 'position') === 'fixed') {
            var bcRect = element.getBoundingClientRect();
            elPosition = {
                width: bcRect.width,
                height: bcRect.height,
                top: bcRect.top,
                bottom: bcRect.bottom,
                left: bcRect.left,
                right: bcRect.right
            };
        }
        else {
            var offsetParentEl = this.offsetParent(element);
            elPosition = this.offset(element, false);
            if (offsetParentEl !== document.documentElement) {
                parentOffset = this.offset(offsetParentEl, false);
            }
            parentOffset.top += offsetParentEl.clientTop;
            parentOffset.left += offsetParentEl.clientLeft;
        }
        elPosition.top -= parentOffset.top;
        elPosition.bottom -= parentOffset.top;
        elPosition.left -= parentOffset.left;
        elPosition.right -= parentOffset.left;
        if (round) {
            elPosition.top = Math.round(elPosition.top);
            elPosition.bottom = Math.round(elPosition.bottom);
            elPosition.left = Math.round(elPosition.left);
            elPosition.right = Math.round(elPosition.right);
        }
        return elPosition;
    };
    Positioning.prototype.offset = function (element, round) {
        if (round === void 0) { round = true; }
        var elBcr = element.getBoundingClientRect();
        var viewportOffset = {
            top: window.pageYOffset - document.documentElement.clientTop,
            left: window.pageXOffset - document.documentElement.clientLeft
        };
        var elOffset = {
            height: elBcr.height || element.offsetHeight,
            width: elBcr.width || element.offsetWidth,
            top: elBcr.top + viewportOffset.top,
            bottom: elBcr.bottom + viewportOffset.top,
            left: elBcr.left + viewportOffset.left,
            right: elBcr.right + viewportOffset.left
        };
        if (round) {
            elOffset.height = Math.round(elOffset.height);
            elOffset.width = Math.round(elOffset.width);
            elOffset.top = Math.round(elOffset.top);
            elOffset.bottom = Math.round(elOffset.bottom);
            elOffset.left = Math.round(elOffset.left);
            elOffset.right = Math.round(elOffset.right);
        }
        return elOffset;
    };
    Positioning.prototype.positionElements = function (hostElement, targetElement, placement, appendToBody) {
        var hostElPosition = appendToBody
            ? this.offset(hostElement, false)
            : this.position(hostElement, false);
        var targetElStyles = this.getAllStyles(targetElement);
        var shiftWidth = {
            left: hostElPosition.left,
            center: hostElPosition.left +
                hostElPosition.width / 2 -
                targetElement.offsetWidth / 2,
            right: hostElPosition.left + hostElPosition.width
        };
        var shiftHeight = {
            top: hostElPosition.top,
            center: hostElPosition.top +
                hostElPosition.height / 2 -
                targetElement.offsetHeight / 2,
            bottom: hostElPosition.top + hostElPosition.height
        };
        var targetElBCR = targetElement.getBoundingClientRect();
        var placementPrimary = placement.split(' ')[0] || 'top';
        var placementSecondary = placement.split(' ')[1] || 'center';
        var targetElPosition = {
            height: targetElBCR.height || targetElement.offsetHeight,
            width: targetElBCR.width || targetElement.offsetWidth,
            top: 0,
            bottom: targetElBCR.height || targetElement.offsetHeight,
            left: 0,
            right: targetElBCR.width || targetElement.offsetWidth
        };
        if (placementPrimary === 'auto') {
            var newPlacementPrimary = this.autoPosition(targetElPosition, hostElPosition, targetElement, placementSecondary);
            if (!newPlacementPrimary)
                newPlacementPrimary = this.autoPosition(targetElPosition, hostElPosition, targetElement);
            if (newPlacementPrimary)
                placementPrimary = newPlacementPrimary;
            targetElement.classList.add(placementPrimary);
        }
        switch (placementPrimary) {
            case 'top':
                targetElPosition.top =
                    hostElPosition.top -
                        (targetElement.offsetHeight +
                            parseFloat(targetElStyles.marginBottom));
                targetElPosition.bottom +=
                    hostElPosition.top - targetElement.offsetHeight;
                targetElPosition.left = shiftWidth[placementSecondary];
                targetElPosition.right += shiftWidth[placementSecondary];
                break;
            case 'bottom':
                targetElPosition.top = shiftHeight[placementPrimary];
                targetElPosition.bottom += shiftHeight[placementPrimary];
                targetElPosition.left = shiftWidth[placementSecondary];
                targetElPosition.right += shiftWidth[placementSecondary];
                break;
            case 'left':
                targetElPosition.top = shiftHeight[placementSecondary];
                targetElPosition.bottom += shiftHeight[placementSecondary];
                targetElPosition.left =
                    hostElPosition.left -
                        (targetElement.offsetWidth + parseFloat(targetElStyles.marginRight));
                targetElPosition.right +=
                    hostElPosition.left - targetElement.offsetWidth;
                break;
            case 'right':
                targetElPosition.top = shiftHeight[placementSecondary];
                targetElPosition.bottom += shiftHeight[placementSecondary];
                targetElPosition.left = shiftWidth[placementPrimary];
                targetElPosition.right += shiftWidth[placementPrimary];
                break;
        }
        targetElPosition.top = Math.round(targetElPosition.top);
        targetElPosition.bottom = Math.round(targetElPosition.bottom);
        targetElPosition.left = Math.round(targetElPosition.left);
        targetElPosition.right = Math.round(targetElPosition.right);
        return targetElPosition;
    };
    Positioning.prototype.autoPosition = function (targetElPosition, hostElPosition, targetElement, preferredPosition) {
        if ((!preferredPosition || preferredPosition === 'right') &&
            targetElPosition.left + hostElPosition.left - targetElement.offsetWidth <
                0) {
            return 'right';
        }
        else if ((!preferredPosition || preferredPosition === 'top') &&
            targetElPosition.bottom +
                hostElPosition.bottom +
                targetElement.offsetHeight >
                window.innerHeight) {
            return 'top';
        }
        else if ((!preferredPosition || preferredPosition === 'bottom') &&
            targetElPosition.top + hostElPosition.top - targetElement.offsetHeight < 0) {
            return 'bottom';
        }
        else if ((!preferredPosition || preferredPosition === 'left') &&
            targetElPosition.right +
                hostElPosition.right +
                targetElement.offsetWidth >
                window.innerWidth) {
            return 'left';
        }
        return null;
    };
    Positioning.prototype.getAllStyles = function (element) {
        return window.getComputedStyle(element);
    };
    Positioning.prototype.getStyle = function (element, prop) {
        return this.getAllStyles(element)[prop];
    };
    Positioning.prototype.isStaticPositioned = function (element) {
        return (this.getStyle(element, 'position') || 'static') === 'static';
    };
    Positioning.prototype.offsetParent = function (element) {
        var offsetParentEl = element.offsetParent || document.documentElement;
        while (offsetParentEl &&
            offsetParentEl !== document.documentElement &&
            this.isStaticPositioned(offsetParentEl)) {
            offsetParentEl = offsetParentEl.offsetParent;
        }
        return offsetParentEl || document.documentElement;
    };
    return Positioning;
}());
exports.Positioning = Positioning;
var positionService = new Positioning();
function positionElements(hostElement, targetElement, placement, appendToBody) {
    var pos = positionService.positionElements(hostElement, targetElement, placement, appendToBody);
    targetElement.style.top = pos.top + "px";
    targetElement.style.left = pos.left + "px";
}
exports.positionElements = positionElements;
//# sourceMappingURL=ng-positioning.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/utils/positioning/positioning.service.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var ng_positioning_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/utils/positioning/ng-positioning.js");
var PositioningService = /** @class */ (function () {
    function PositioningService() {
    }
    PositioningService.prototype.position = function (options) {
        var element = options.element, target = options.target, attachment = options.attachment, appendToBody = options.appendToBody;
        ng_positioning_1.positionElements(_getHtmlElement(target), _getHtmlElement(element), attachment, appendToBody);
    };
    PositioningService.decorators = [
        { type: core_1.Injectable },
    ];
    return PositioningService;
}());
exports.PositioningService = PositioningService;
function _getHtmlElement(element) {
    // it means that we got a selector
    if (typeof element === 'string') {
        return document.querySelector(element);
    }
    if (element instanceof core_1.ElementRef) {
        return element.nativeElement;
    }
    return element;
}
//# sourceMappingURL=positioning.service.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/utils/theme-provider.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var browser_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/utils/facade/browser.js");
var guessedVersion;
function _guessBsVersion() {
    if (typeof document === 'undefined') {
        return null;
    }
    var spanEl = document.createElement('span');
    spanEl.innerText = 'test bs version';
    document.body.appendChild(spanEl);
    spanEl.classList.add('d-none');
    var rect = spanEl.getBoundingClientRect();
    document.body.removeChild(spanEl);
    if (!rect) {
        return 'bs3';
    }
    return rect.top === 0 ? 'bs4' : 'bs3';
}
function setTheme(theme) {
    guessedVersion = theme;
}
exports.setTheme = setTheme;
// todo: in ngx-bootstrap, bs4 will became a default one
function isBs3() {
    if (typeof browser_1.window === 'undefined') {
        return true;
    }
    if (typeof browser_1.window.__theme === 'undefined') {
        if (guessedVersion) {
            return guessedVersion === 'bs3';
        }
        guessedVersion = _guessBsVersion();
        return guessedVersion === 'bs3';
    }
    return browser_1.window.__theme !== 'bs4';
}
exports.isBs3 = isBs3;
//# sourceMappingURL=theme-provider.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/utils/trigger.class.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @copyright Valor Software
 * @copyright Angular ng-bootstrap team
 */
Object.defineProperty(exports, "__esModule", { value: true });
var Trigger = /** @class */ (function () {
    function Trigger(open, close) {
        this.open = open;
        this.close = close || open;
    }
    Trigger.prototype.isManual = function () { return this.open === 'manual' || this.close === 'manual'; };
    return Trigger;
}());
exports.Trigger = Trigger;
//# sourceMappingURL=trigger.class.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/utils/triggers.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var trigger_class_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/utils/trigger.class.js");
var DEFAULT_ALIASES = {
    hover: ['mouseover', 'mouseout'],
    focus: ['focusin', 'focusout']
};
function parseTriggers(triggers, aliases) {
    if (aliases === void 0) { aliases = DEFAULT_ALIASES; }
    var trimmedTriggers = (triggers || '').trim();
    if (trimmedTriggers.length === 0) {
        return [];
    }
    var parsedTriggers = trimmedTriggers
        .split(/\s+/)
        .map(function (trigger) { return trigger.split(':'); })
        .map(function (triggerPair) {
        var alias = aliases[triggerPair[0]] || triggerPair;
        return new trigger_class_1.Trigger(alias[0], alias[1]);
    });
    var manualTriggers = parsedTriggers.filter(function (triggerPair) {
        return triggerPair.isManual();
    });
    if (manualTriggers.length > 1) {
        throw new Error('Triggers parse error: only one manual trigger is allowed');
    }
    if (manualTriggers.length === 1 && parsedTriggers.length > 1) {
        throw new Error('Triggers parse error: manual trigger can\'t be mixed with other triggers');
    }
    return parsedTriggers;
}
exports.parseTriggers = parseTriggers;
function listenToTriggers(renderer, target, triggers, showFn, hideFn, toggleFn) {
    var parsedTriggers = parseTriggers(triggers);
    var listeners = [];
    if (parsedTriggers.length === 1 && parsedTriggers[0].isManual()) {
        return Function.prototype;
    }
    parsedTriggers.forEach(function (trigger) {
        if (trigger.open === trigger.close) {
            listeners.push(renderer.listen(target, trigger.open, toggleFn));
            return;
        }
        listeners.push(renderer.listen(target, trigger.open, showFn), renderer.listen(target, trigger.close, hideFn));
    });
    return function () {
        listeners.forEach(function (unsubscribeFn) { return unsubscribeFn(); });
    };
}
exports.listenToTriggers = listenToTriggers;
function listenToTriggersV2(renderer, options) {
    var parsedTriggers = parseTriggers(options.triggers);
    var target = options.target;
    // do nothing
    if (parsedTriggers.length === 1 && parsedTriggers[0].isManual()) {
        return Function.prototype;
    }
    // all listeners
    var listeners = [];
    // lazy listeners registration
    var _registerHide = [];
    var registerHide = function () {
        // add hide listeners to unregister array
        _registerHide.forEach(function (fn) { return listeners.push(fn()); });
        // register hide events only once
        _registerHide.length = 0;
    };
    // register open\close\toggle listeners
    parsedTriggers.forEach(function (trigger) {
        var useToggle = trigger.open === trigger.close;
        var showFn = useToggle ? options.toggle : options.show;
        if (!useToggle) {
            _registerHide.push(function () {
                return renderer.listen(target, trigger.close, options.hide);
            });
        }
        listeners.push(renderer.listen(target, trigger.open, function () { return showFn(registerHide); }));
    });
    return function () {
        listeners.forEach(function (unsubscribeFn) { return unsubscribeFn(); });
    };
}
exports.listenToTriggersV2 = listenToTriggersV2;
function registerOutsideClick(renderer, options) {
    if (!options.outsideClick) {
        return Function.prototype;
    }
    return renderer.listen('document', 'click', function (event) {
        if (options.target && options.target.contains(event.target)) {
            return;
        }
        if (options.targets &&
            options.targets.some(function (target) { return target.contains(event.target); })) {
            return;
        }
        options.hide();
    });
}
exports.registerOutsideClick = registerOutsideClick;
//# sourceMappingURL=triggers.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/utils/util.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function toInteger(value) {
    return parseInt("" + value, 10);
}
exports.toInteger = toInteger;
function toString(value) {
    return (value !== undefined && value !== null) ? "" + value : '';
}
exports.toString = toString;
function getValueInRange(value, max, min) {
    if (min === void 0) { min = 0; }
    return Math.max(Math.min(value, max), min);
}
exports.getValueInRange = getValueInRange;
function isString(value) {
    return typeof value === 'string';
}
exports.isString = isString;
function isNumber(value) {
    return !isNaN(toInteger(value));
}
exports.isNumber = isNumber;
function isInteger(value) {
    return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;
}
exports.isInteger = isInteger;
function isDefined(value) {
    return value !== undefined && value !== null;
}
exports.isDefined = isDefined;
function padNumber(value) {
    if (isNumber(value)) {
        return ("0" + value).slice(-2);
    }
    else {
        return '';
    }
}
exports.padNumber = padNumber;
function regExpEscape(text) {
    return text.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
}
exports.regExpEscape = regExpEscape;
//# sourceMappingURL=util.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/utils/utils.class.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var browser_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/utils/facade/browser.js");
var Utils = /** @class */ (function () {
    function Utils() {
    }
    Utils.reflow = function (element) {
        (function (bs) { return bs; })(element.offsetHeight);
    };
    // source: https://github.com/jquery/jquery/blob/master/src/css/var/getStyles.js
    // source: https://github.com/jquery/jquery/blob/master/src/css/var/getStyles.js
    Utils.getStyles = 
    // source: https://github.com/jquery/jquery/blob/master/src/css/var/getStyles.js
    function (elem) {
        // Support: IE <=11 only, Firefox <=30 (#15098, #14150)
        // IE throws on elements created in popups
        // FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
        var view = elem.ownerDocument.defaultView;
        if (!view || !view.opener) {
            view = browser_1.window;
        }
        return view.getComputedStyle(elem);
    };
    return Utils;
}());
exports.Utils = Utils;
//# sourceMappingURL=utils.class.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/utils/warn-once.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var _messagesHash = {};
var _hideMsg = typeof console === 'undefined' || !('warn' in console);
function warnOnce(msg) {
    if (!core_1.isDevMode() || _hideMsg || msg in _messagesHash) {
        return;
    }
    _messagesHash[msg] = true;
    /*tslint:disable-next-line*/
    console.warn(msg);
}
exports.warnOnce = warnOnce;
//# sourceMappingURL=warn-once.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/wizard/component/wizard.component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var lodash_1 = __webpack_require__("./node_modules/lodash/lodash.js");
var WizardComponent = /** @class */ (function () {
    function WizardComponent(viewContainerRef, componentFactoryResolver) {
        this.viewContainerRef = viewContainerRef;
        this.componentFactoryResolver = componentFactoryResolver;
        this.clickCancelBtn = new core_1.EventEmitter();
        this.clickFinishBtn = new core_1.EventEmitter();
        this.title = '';
        this.steps = [];
        this.curStepIndex = 0;
    }
    WizardComponent.prototype.ngOnInit = function () {
        if (this.steps && this.steps.length > 0) {
            this.curStep = this.steps[this.curStepIndex];
            this.createStepComponent(this.steps[this.curStepIndex]);
        }
    };
    WizardComponent.prototype.createStepComponent = function (step) {
        var _this = this;
        this.stepContainer.clear();
        var componentFactory = this.componentFactoryResolver.resolveComponentFactory(step.component);
        this.curComponentRef = this.stepContainer.createComponent(componentFactory);
        this.curComponentRef.instance.data = step.data;
        // 新增步骤
        if (this.curComponentRef.instance.addStep) {
            this.curComponentRef.instance.addStep.subscribe(function (stepList) {
                var curIndex = lodash_1.findIndex(_this.steps, _this.curStep);
                (_a = _this.steps).splice.apply(_a, [curIndex + 1, 0].concat(stepList));
                _this.curStep.nextStep = stepList[0].stepId;
                _this.curStep.showFinishBtn = false;
                _this.curStep.showNextStepBtn = true;
                var _a;
            });
        }
        // 删除步骤
        if (this.curComponentRef.instance.removeStep) {
            this.curComponentRef.instance.removeStep.subscribe(function (data) {
                lodash_1.merge(_this.curStep, data.curStep);
                data.removeSteps.forEach(function (removeStep) {
                    var index = lodash_1.findIndex(_this.steps, removeStep);
                    _this.steps.splice(index, 1);
                });
            });
        }
        // 变更步骤
        if (this.curComponentRef.instance.changeStep) {
            this.curComponentRef.instance.changeStep.subscribe(function (stepList) {
                stepList.forEach(function (changeStep) {
                    var oldStep = lodash_1.find(_this.steps, function (s) { return s.stepId === changeStep.stepId; });
                    lodash_1.merge(oldStep, changeStep);
                });
            });
        }
    };
    WizardComponent.prototype.jumpStep = function (nextStep) {
        // 判断跳转方向
        if (nextStep === this.curStep) {
            return;
        }
        var nextIndex = lodash_1.findIndex(this.steps, function (s) { return s.stepId === nextStep.stepId; });
        if (nextIndex === this.curStepIndex) {
            return;
        }
        if (nextIndex < this.curStepIndex) {
            // 向前跳
            this.curStep = nextStep;
            this.curStepIndex = nextIndex;
            this.createStepComponent(nextStep);
            return;
        }
        if (nextStep.stepId === this.curStep.nextStep) {
            // 下一步
            this.nextStep();
            return;
        }
        //  else if (this.finishedSteps.indexOf(nextStep.stepId) > -1) { // 已完成的后续步骤
        //   this.curStep = nextStep;
        //   this.curStepIndex = nextIndex;
        //   this.createStepComponent(nextStep);
        // }
    };
    /**
      * 点击上一步
      */
    /**
        * 点击上一步
        */
    WizardComponent.prototype.lastStep = /**
        * 点击上一步
        */
    function () {
        var self = this;
        this.curStepIndex = lodash_1.findIndex(this.steps, function (s) { return s.nextStep === self.curStep.stepId; });
        this.curStep = this.steps[this.curStepIndex];
        this.createStepComponent(this.curStep);
    };
    /**
     * 点击下一步
     */
    /**
       * 点击下一步
       */
    WizardComponent.prototype.nextStep = /**
       * 点击下一步
       */
    function () {
        var _this = this;
        // 校验
        var validationFunc = this.curComponentRef.instance.validation;
        if (validationFunc && typeof (validationFunc) === 'function') {
            var result = validationFunc();
            if (!result) {
                return;
            }
        }
        // 执行各Component定义的nextStepClick事件
        var clickNextStep = this.curComponentRef.instance.clickNextStep;
        if (clickNextStep && typeof (clickNextStep) === 'function') {
            var result = clickNextStep(); // 返回值接收boolean或observable类型
            if (typeof (result) === 'boolean') {
                this.moveToNextStep(result);
            }
            else {
                result.subscribe(function (data) {
                    _this.moveToNextStep(data);
                });
            }
        }
        else {
            this.moveToNextStep(true);
        }
    };
    WizardComponent.prototype.moveToNextStep = function (data) {
        if (!data) {
            return;
        }
        var curStep = this.curStep;
        if (curStep.nextStep === '') {
            return;
        }
        // this.finishedSteps.push(curStep.stepId);
        this.curStepIndex = lodash_1.findIndex(this.steps, function (s) { return s.stepId === curStep.nextStep; });
        if (this.curStepIndex > -1) {
            this.curStep = this.steps[this.curStepIndex];
            this.createStepComponent(this.curStep);
        }
    };
    /**
     * 取消
     */
    /**
       * 取消
       */
    WizardComponent.prototype.clickCancel = /**
       * 取消
       */
    function () {
        this.clickCancelBtn.emit();
    };
    /**
     * 完成
     */
    /**
       * 完成
       */
    WizardComponent.prototype.finishWizard = /**
       * 完成
       */
    function () {
        var validationFunc = this.curComponentRef.instance.validation;
        if (validationFunc && typeof (validationFunc) === 'function') {
            var result = validationFunc();
            if (!result) {
                return;
            }
        }
        var beforeFinish = this.curComponentRef.instance.beforeFinish;
        if (beforeFinish && typeof (beforeFinish) === 'function') {
            var result = beforeFinish();
            if (!result) {
                return;
            }
        }
        this.clickFinishBtn.emit();
    };
    WizardComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'app-wizard',
                    template: "<div class=\"stepWizard\"> <div class=\"createNav d-flex flex-wrap\" *ngIf=\"steps.length>2\"> <div *ngFor=\"let step of steps\" class=\"d-flex step\" [class.active]=\"curStep.stepId===step.stepId\"> <div class=\"d-flex\" *ngIf=\"step.show\" (click)=\"jumpStep(step)\"> <div class=\"stepTitle\">{{step.title}}</div> <div class=\"triangle_border_right\"> <span></span> </div> </div> </div> </div> <div class=\"content\"> <perfect-scrollbar [config]=\"{suppressScrollX: true}\"> <ng-container #stepContainer></ng-container> </perfect-scrollbar> </div> <div class=\"footBtns\"> <button type=\"button\" class=\"btn btn-outline-secondary btn-sm px-3 mx-2\" *ngIf=\"curStep.showCancelBtn\" (click)=\"clickCancel()\">取消</button> <button type=\"button\" class=\"btn btn-outline-primary btn-sm px-3 mx-2\" *ngIf=\"curStep.showLastStepBtn\" (click)=\"lastStep()\" type=\"submit\">上一步</button> <button type=\"button\" class=\"btn btn-outline-primary btn-sm px-3 mx-2\" *ngIf=\"curStep.showNextStepBtn\" (click)=\"nextStep()\" type=\"submit\">下一步</button> <button type=\"button\" class=\"btn btn-outline-primary btn-sm px-3 mx-2\" *ngIf=\"curStep.showFinishBtn\" (click)=\"finishWizard()\">完成</button> </div> </div>",
                    styles: [":host { position: absolute; top: 0; bottom: 0; left: 0; right: 0; } .stepWizard { height: 100%; display: flex; flex-direction: column; } .stepWizard .createNav { background: #e8edf2; height: 40px; overflow: hidden; } .stepWizard .createNav .stepTitle { padding: 0px 10px; color: #666666; line-height: 40px; cursor: pointer; font-size: 0.875rem; } .stepWizard .createNav .step.active .stepTitle { color: #FFFFFF; background-color: #346180 !important; } .stepWizard .createNav .step:not(:first-child).active .stepTitle { margin-left: -17px; padding-left: 25px; } .stepWizard .createNav .stepTitle.disable { color: #cdcdcf; } .stepWizard .createNav .step .triangle_border_right { width: 0; height: 0; border-width: 20px 0 20px 18px; border-style: solid; border-color: transparent transparent transparent #cccccc; position: relative; } .stepWizard .createNav .step .triangle_border_right span { display: block; width: 0; height: 0; border-width: 20px 0px 20px 18px; border-style: solid; border-color: transparent transparent transparent #e8edf2; position: absolute; top: -20px; left: -20px; } .stepWizard .createNav .step.active .triangle_border_right { width: 0; height: 0; border-width: 20px 0 20px 20px; border-color: transparent transparent transparent #e8edf2; } .stepWizard .createNav .step.active .triangle_border_right span { border-width: 20px 0 20px 20px; border-color: transparent transparent transparent #346180 !important; } .stepWizard .content { flex: 1; overflow: auto; font-size: 0.875rem; } .stepWizard .content .ps-content { width: inherit; height: inherit; } .stepWizard .footBtns { width: 100%; display: flex; -webkit-box-align: center; -ms-flex-align: center; align-items: center; -webkit-box-pack: end; -ms-flex-pack: end; justify-content: flex-end; padding: 10px 1rem; background: #F4F4F4; border-top: 1px solid #dddddd; } /* .stepWizard .createNav .step.finished .stepTitle { color: #FFFFFF; background-color: #397439; } .stepWizard .createNav .step.finished .triangle_border_right span { border-color: transparent transparent transparent #397439; } .stepWizard .createNav .step:not(:first-child).finished .stepTitle { margin-left: -17px; padding-left: 25px; } */"]
                },] },
    ];
    /** @nocollapse */
    WizardComponent.ctorParameters = function () { return [
        { type: core_1.ViewContainerRef, },
        { type: core_1.ComponentFactoryResolver, },
    ]; };
    WizardComponent.propDecorators = {
        "clickCancelBtn": [{ type: core_1.Output },],
        "clickFinishBtn": [{ type: core_1.Output },],
        "title": [{ type: core_1.Input },],
        "steps": [{ type: core_1.Input },],
        "stepContainer": [{ type: core_1.ViewChild, args: ['stepContainer', { read: core_1.ViewContainerRef },] },],
    };
    return WizardComponent;
}());
exports.WizardComponent = WizardComponent;
//# sourceMappingURL=wizard.component.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/wizard/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__("./node_modules/@farris/ide-devkit/components/wizard/component/wizard.component.js"));
__export(__webpack_require__("./node_modules/@farris/ide-devkit/components/wizard/wizard.module.js"));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/components/wizard/wizard.module.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/esm5/common.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/esm5/forms.js");
var perfect_scorll_1 = __webpack_require__("./node_modules/@farris/ui/perfect-scorll/index.js");
var wizard_component_1 = __webpack_require__("./node_modules/@farris/ide-devkit/components/wizard/component/wizard.component.js");
var WizardModule = /** @class */ (function () {
    function WizardModule() {
    }
    WizardModule.decorators = [
        { type: core_1.NgModule, args: [{
                    declarations: [
                        wizard_component_1.WizardComponent
                    ],
                    imports: [
                        common_1.CommonModule,
                        forms_1.FormsModule,
                        perfect_scorll_1.PerfectScrollbarModule
                    ],
                    exports: [wizard_component_1.WizardComponent]
                },] },
    ];
    /** @nocollapse */
    WizardModule.ctorParameters = function () { return []; };
    return WizardModule;
}());
exports.WizardModule = WizardModule;
//# sourceMappingURL=wizard.module.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/ideframework/eventbus/event-bus-proxy.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var EventBusProxy = /** @class */ (function () {
    function EventBusProxy(eventBus, hostType, eventTokenValueProvider) {
        this.eventBus = eventBus;
        this.hostType = hostType;
        this.eventTokenValueProvider = eventTokenValueProvider;
    }
    EventBusProxy.prototype.post = function (eventName, data) {
        this.eventBus.post(this.hostType, this.eventTokenValueProvider(), eventName, data);
    };
    return EventBusProxy;
}());
exports.EventBusProxy = EventBusProxy;
//# sourceMappingURL=event-bus-proxy.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/ideframework/eventbus/event-bus.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var event_bus_proxy_1 = __webpack_require__("./node_modules/@farris/ide-devkit/ideframework/eventbus/event-bus-proxy.js");
var event_pipe_1 = __webpack_require__("./node_modules/@farris/ide-devkit/ideframework/eventbus/event-pipe.js");
var EventBus = /** @class */ (function () {
    function EventBus() {
        this.proxyMap = new Map();
        this.eventMap = new Map();
    }
    EventBus.prototype.getProxy = function (ownerType, eventTokenValueProvider) {
        var ownerName = ownerType.constructor.name;
        if (!this.proxyMap.has(ownerName)) {
            this.proxyMap.set(ownerName, new event_bus_proxy_1.EventBusProxy(this, ownerType, eventTokenValueProvider));
        }
        return this.proxyMap.get(ownerName);
    };
    /**
     * 发送事件，通知订阅者接收消息。
     */
    /**
       * 发送事件，通知订阅者接收消息。
       */
    EventBus.prototype.post = /**
       * 发送事件，通知订阅者接收消息。
       */
    function (emitterType, tokenValue, eventName, eventArgs) {
        var eventPipeList = this.eventMap.get(eventName);
        if (!eventPipeList) {
            return;
        }
        if (!emitterType) {
            console.error('post方法的参数emitterType不能为空。');
            return;
        }
        var emitter;
        if (emitterType instanceof core_1.Type) {
            emitter = emitterType.name;
        }
        else {
            emitter = emitterType;
        }
        for (var _i = 0, eventPipeList_1 = eventPipeList; _i < eventPipeList_1.length; _i++) {
            var eventPipe = eventPipeList_1[_i];
            if (eventPipe.matchEmitterToken(emitter, tokenValue)) {
                eventPipe.post(eventArgs);
                eventPipe.unSubscribeForOnce();
            }
        }
    };
    /**
     * 订阅事件
     */
    /**
       * 订阅事件
       */
    EventBus.prototype.on = /**
       * 订阅事件
       */
    function (target, tokenValue, eventName, caller, handler) {
        return this.getEventPipe(eventName, target, tokenValue).subscribe(handler, caller);
    };
    /**
     * 订阅一次。接收到一次消息之后自动取消订阅
     */
    /**
       * 订阅一次。接收到一次消息之后自动取消订阅
       */
    EventBus.prototype.once = /**
       * 订阅一次。接收到一次消息之后自动取消订阅
       */
    function (target, tokenValue, eventName, caller, handler) {
        return this.getEventPipe(eventName, target, tokenValue).subscribeOnce(handler, caller);
    };
    /**
     * 发送一个请求事件，获取监听者的响应并处理
     */
    /**
       * 发送一个请求事件，获取监听者的响应并处理
       */
    EventBus.prototype.requestFor = /**
       * 发送一个请求事件，获取监听者的响应并处理
       */
    function (target, tokenValue, requestName, requestValue, success, fail) {
        var eventPipe = this.findExistEventPipe(requestName, 'RequestSubject', tokenValue);
        if (eventPipe) {
            this.once(target, tokenValue, requestName, this, function (response) {
                if (response.status === 'success') {
                    success(response.data);
                }
                else {
                    if (fail) {
                        fail('No target responser listening');
                    }
                }
            });
            eventPipe.post({ target: target, token: tokenValue, data: requestValue });
        }
        else {
            if (fail) {
                fail('No target responser listening.');
            }
        }
    };
    /**
     * 监听一个请求事件，给出响应
     */
    /**
       * 监听一个请求事件，给出响应
       */
    EventBus.prototype.responseOn = /**
       * 监听一个请求事件，给出响应
       */
    function (responseSubject, requestName, callback) {
        var _this = this;
        this.on('RequestSubject', null, requestName, this, function (requestObj) {
            var response = { status: 'fail', data: null };
            if (responseSubject === requestObj.target) {
                response.data = callback(requestObj.data);
                response.status = 'success';
            }
            _this.post(requestObj.target, requestObj.token, requestName, response);
        });
    };
    EventBus.prototype.getEventPipe = function (eventName, target, tokenValue) {
        var eventPipeList = this.eventMap.get(eventName);
        if (!eventPipeList) {
            eventPipeList = new Array();
            this.eventMap.set(eventName, eventPipeList);
        }
        var eventPipe = eventPipeList.find(function (item) { return item.examByTargetToken(target, tokenValue); });
        if (!eventPipe) {
            eventPipe = new event_pipe_1.EventPipe(eventName, tokenValue, target, eventPipeList);
        }
        return eventPipe;
    };
    EventBus.prototype.findExistEventPipe = function (eventName, target, tokenValue) {
        var eventPipeList = this.eventMap.get(eventName);
        if (!eventPipeList) {
            return null;
        }
        // return eventPipeList.find(item => item.examByTargetToken(target, tokenValue));
        for (var _i = 0, eventPipeList_2 = eventPipeList; _i < eventPipeList_2.length; _i++) {
            var eventPipe = eventPipeList_2[_i];
            if (eventPipe.matchEmitterToken(target, tokenValue)) {
                return eventPipe;
            }
        }
        return null;
    };
    EventBus.decorators = [
        { type: core_1.Injectable },
    ];
    /** @nocollapse */
    EventBus.ctorParameters = function () { return []; };
    return EventBus;
}());
exports.EventBus = EventBus;
var RequestSubject = /** @class */ (function () {
    function RequestSubject() {
    }
    return RequestSubject;
}());
var DataClass = /** @class */ (function () {
    function DataClass() {
    }
    return DataClass;
}());
//# sourceMappingURL=event-bus.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/ideframework/eventbus/event-pipe.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Subject_1 = __webpack_require__("./node_modules/rxjs/Subject.js");
var EventPipe = /** @class */ (function () {
    function EventPipe(name, tokenValue, emitter, parentEventPipeList) {
        this.name = name;
        this.tokenValue = tokenValue;
        this.emitter = emitter;
        this.parentEventPipeList = parentEventPipeList;
        this.eventSubject = new Subject_1.Subject();
        this.subscriptionMap = new Map();
        this.onceSubscriptionMap = new Map();
        if (this.parentEventPipeList) {
            this.parentEventPipeList.push(this);
        }
    }
    EventPipe.prototype.post = function (data) {
        this.eventSubject.next(data);
    };
    EventPipe.prototype.subscribe = function (eventHandler, caller) {
        var subscription = this.eventSubject.subscribe(function (value) { return eventHandler.call(caller, value); });
        this.subscriptionMap.set(caller, subscription);
        return this;
    };
    EventPipe.prototype.subscribeOnce = function (eventHandler, caller) {
        var subscription = this.eventSubject.subscribe(function (value) { return eventHandler.call(caller, value); });
        this.onceSubscriptionMap.set(caller, subscription);
        return this;
    };
    EventPipe.prototype.unSubscribe = function (subscriber) {
        var subscription = this.subscriptionMap.get(subscriber);
        if (subscription) {
            subscription.unsubscribe();
            subscription = null;
            this.subscriptionMap.delete(subscriber);
        }
        else {
            subscription = this.onceSubscriptionMap.get(subscriber);
            if (subscription) {
                subscription.unsubscribe();
                subscription = null;
                this.onceSubscriptionMap.delete(subscriber);
            }
        }
    };
    // 注销使用once方法注册的订阅。
    // 注销使用once方法注册的订阅。
    EventPipe.prototype.unSubscribeForOnce = 
    // 注销使用once方法注册的订阅。
    function () {
        for (var _i = 0, _a = Array.from(this.onceSubscriptionMap.keys()); _i < _a.length; _i++) {
            var subscriber = _a[_i];
            this.unSubscribe(subscriber);
        }
    };
    EventPipe.prototype.matchEmitterToken = function (emitter, tokenValue) {
        if (this.emitter && emitter && this.emitter !== emitter) {
            return false;
        }
        if (this.tokenValue && tokenValue && this.tokenValue !== tokenValue) {
            return false;
        }
        return true;
    };
    EventPipe.prototype.examByTargetToken = function (target, tokenValue) {
        if (this.emitter !== target) {
            return false;
        }
        if (this.tokenValue !== tokenValue) {
            return false;
        }
        return true;
    };
    EventPipe.prototype.dispose = function (subscriber) {
        var _this = this;
        this.unSubscribe(subscriber);
        if (this.subscriptionMap.size === 0 && this.parentEventPipeList) {
            var location_1 = this.parentEventPipeList.findIndex(function (item) { return item === _this; });
            if (location_1 !== -1) {
                this.parentEventPipeList.splice(location_1, 1);
            }
        }
    };
    return EventPipe;
}());
exports.EventPipe = EventPipe;
//# sourceMappingURL=event-pipe.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/ideframework/eventbus/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__("./node_modules/@farris/ide-devkit/ideframework/eventbus/event-bus.js"));
__export(__webpack_require__("./node_modules/@farris/ide-devkit/ideframework/eventbus/event-bus-proxy.js"));
__export(__webpack_require__("./node_modules/@farris/ide-devkit/ideframework/eventbus/event-pipe.js"));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/ideframework/gsp/dock.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var pane_container_1 = __webpack_require__("./node_modules/@farris/ide-devkit/ideframework/gsp/pane-container.js");
var event_kit_1 = __webpack_require__("./node_modules/@farris/ide-devkit/ideframework/gsp/event-kit/index.js");
var DockStyle;
(function (DockStyle) {
    DockStyle[DockStyle["none"] = 0] = "none";
    DockStyle[DockStyle["left"] = 1] = "left";
    DockStyle[DockStyle["right"] = 2] = "right";
    DockStyle[DockStyle["top"] = 3] = "top";
    DockStyle[DockStyle["bottom"] = 4] = "bottom";
})(DockStyle = exports.DockStyle || (exports.DockStyle = {}));
var Dock = /** @class */ (function () {
    function Dock(params) {
        this.handleResizeHandleDragStart = this.handleResizeHandleDragStart.bind(this);
        this.handleResizeToFit = this.handleResizeToFit.bind(this);
        this.handleMouseMove = this.handleMouseMove.bind(this);
        this.handleMouseUp = this.handleMouseUp.bind(this);
        this.location = params.location;
        this.widthOrHeight = getWidthOrHeight(this.location);
        this.viewRegistry = params.viewRegistry;
        this.didActivate = params.didActivate;
        this.emitter = new event_kit_1.Emitter();
        this.paneContainer = new pane_container_1.PaneContainer({
            location: this.location,
            viewRegistry: this.viewRegistry
        });
        this.state = {
            size: null,
            visible: false,
            shouldAnimate: false
        };
    }
    // This method is called explicitly by the object which adds the Dock to the document.
    // This method is called explicitly by the object which adds the Dock to the document.
    Dock.prototype.elementAttached = 
    // This method is called explicitly by the object which adds the Dock to the document.
    function () {
        // Re-render when the dock is attached to make sure we remeasure sizes defined in CSS.
        this.render(this.state);
    };
    Dock.prototype.getElement = function () {
    };
    Dock.prototype.getLocation = function () {
        return this.location;
    };
    Dock.prototype.destroy = function () {
        this.paneContainer.destroy();
        // window.removeEventListener('mousemove', this.handleMouseMove);
        // window.removeEventListener('mouseup', this.handleMouseUp);
        // window.removeEventListener('drag', this.handleDrag);
        // window.removeEventListener('dragend', this.handleDragEnd);
    };
    Dock.prototype.setHovered = function (hovered) {
        if (hovered === this.state.hovered) {
            return;
        }
        this.setState({ hovered: hovered });
    };
    Dock.prototype.setDraggingItem = function (draggingItem) {
        if (draggingItem === this.state.draggingItem) {
            return;
        }
        this.setState({ draggingItem: draggingItem });
    };
    // Extended: Show the dock and focus its active {Pane}.
    // Extended: Show the dock and focus its active {Pane}.
    Dock.prototype.activate = 
    // Extended: Show the dock and focus its active {Pane}.
    function () {
        this.getActivePane().activate();
    };
    // Extended: Show the dock without focusing it.
    // Extended: Show the dock without focusing it.
    Dock.prototype.show = 
    // Extended: Show the dock without focusing it.
    function () {
        this.setState({ visible: true });
    };
    // Extended: Hide the dock and activate the {WorkspaceCenter} if the dock was
    // was previously focused.
    // Extended: Hide the dock and activate the {WorkspaceCenter} if the dock was
    // was previously focused.
    Dock.prototype.hide = 
    // Extended: Hide the dock and activate the {WorkspaceCenter} if the dock was
    // was previously focused.
    function () {
        this.setState({ visible: false });
    };
    // Extended: Toggle the dock's visibility without changing the {Workspace}'s
    // active pane container.
    // Extended: Toggle the dock's visibility without changing the {Workspace}'s
    // active pane container.
    Dock.prototype.toggle = 
    // Extended: Toggle the dock's visibility without changing the {Workspace}'s
    // active pane container.
    function () {
        // const state = { visible: !this.state.visible };
        // if (!state.visible) { state.hovered = false; }
        // this.setState(state);
    };
    // Extended: Check if the dock is visible.
    //
    // Returns a {Boolean}.
    // Extended: Check if the dock is visible.
    //
    // Returns a {Boolean}.
    Dock.prototype.isVisible = 
    // Extended: Check if the dock is visible.
    //
    // Returns a {Boolean}.
    function () {
        return this.state.visible;
    };
    Dock.prototype.setState = function (newState) {
        var prevState = this.state;
        var nextState = Object.assign({}, prevState, newState);
        // Update the `shouldAnimate` state. This needs to be written to the DOM before updating the
        // class that changes the animated property. Normally we'd have to defer the class change a
        // frame to ensure the property is animated (or not) appropriately, however we luck out in this
        // case because the drag start always happens before the item is dragged into the toggle button.
        if (nextState.visible !== prevState.visible) {
            // Never animate toggling visibility...
            nextState.shouldAnimate = false;
        }
        else if (!nextState.visible && nextState.draggingItem && !prevState.draggingItem) {
            // ...but do animate if you start dragging while the panel is hidden.
            nextState.shouldAnimate = true;
        }
        this.state = nextState;
        this.render(this.state);
        var visible = this.state.visible;
        // if (visible !== prevState.visible) {
        //   this.emitter.emit('did-change-visible', visible);
        // }
    };
    Dock.prototype.render = function (state) {
    };
    Dock.prototype.handleDidAddPaneItem = function () {
        if (this.state.size == null) {
            this.setState({ size: this.getInitialSize() });
        }
    };
    Dock.prototype.handleDidRemovePaneItem = function () {
        // Hide the dock if you remove the last item.
        if (this.paneContainer.getPaneItems().length === 0) {
            this.setState({ visible: false, hovered: false, size: null });
        }
    };
    Dock.prototype.handleResizeHandleDragStart = function () {
        window.addEventListener('mousemove', this.handleMouseMove);
        window.addEventListener('mouseup', this.handleMouseUp);
        this.setState({ resizing: true });
    };
    Dock.prototype.handleResizeToFit = function () {
        var item = this.getActivePaneItem();
        if (item) {
            var size = getPreferredSize(item, this.getLocation());
            if (size != null) {
                this.setState({ size: size });
            }
        }
    };
    Dock.prototype.handleMouseMove = function (event) {
        if (event.buttons === 0) {
            // We missed the mouseup event. For some reason it happens on Windows
            this.handleMouseUp(event);
            return;
        }
        var size = 0;
        // switch (this.location) {
        //   case 'left':
        //     size = event.pageX - this.element.getBoundingClientRect().left;
        //     break;
        //   case 'bottom':
        //     size = this.element.getBoundingClientRect().bottom - event.pageY;
        //     break;
        //   case 'right':
        //     size = this.element.getBoundingClientRect().right - event.pageX;
        //     break;
        // }
        this.setState({ size: size });
    };
    Dock.prototype.handleMouseUp = function (event) {
        window.removeEventListener('mousemove', this.handleMouseMove);
        window.removeEventListener('mouseup', this.handleMouseUp);
        this.setState({ resizing: false });
    };
    // Determine whether the cursor is within the dock hover area. This isn't as simple as just using
    // mouseenter/leave because we want to be a little more forgiving. For example, if the cursor is
    // over the footer, we want to show the bottom dock's toggle button. Also note that our criteria
    // for detecting entry are different than detecting exit but, in order for us to avoid jitter, the
    // area considered when detecting exit MUST fully encompass the area considered when detecting
    // entry.
    // Determine whether the cursor is within the dock hover area. This isn't as simple as just using
    // mouseenter/leave because we want to be a little more forgiving. For example, if the cursor is
    // over the footer, we want to show the bottom dock's toggle button. Also note that our criteria
    // for detecting entry are different than detecting exit but, in order for us to avoid jitter, the
    // area considered when detecting exit MUST fully encompass the area considered when detecting
    // entry.
    Dock.prototype.pointWithinHoverArea = 
    // Determine whether the cursor is within the dock hover area. This isn't as simple as just using
    // mouseenter/leave because we want to be a little more forgiving. For example, if the cursor is
    // over the footer, we want to show the bottom dock's toggle button. Also note that our criteria
    // for detecting entry are different than detecting exit but, in order for us to avoid jitter, the
    // area considered when detecting exit MUST fully encompass the area considered when detecting
    // entry.
    function (point, detectingExit) {
    };
    Dock.prototype.getInitialSize = function () {
        // The item may not have been activated yet. If that's the case, just use the first item.
        var activePaneItem = this.paneContainer.getActivePaneItem() || this.paneContainer.getPaneItems()[0];
        // If there are items, we should have an explicit width; if not, we shouldn't.
        return activePaneItem
            ? getPreferredSize(activePaneItem, this.location)
            : null;
    };
    Dock.prototype.serialize = function () {
        return {
            deserializer: 'Dock',
            size: this.state.size,
            paneContainer: this.paneContainer.serialize({}),
            visible: this.state.visible
        };
    };
    Dock.prototype.deserialize = function (serialized, deserializerManager) {
        this.paneContainer.deserialize(serialized.paneContainer, deserializerManager);
        this.setState({
            size: serialized.size || this.getInitialSize(),
            // If no items could be deserialized, we don't want to show the dock (even if it was visible last time)
            visible: serialized.visible && (this.paneContainer.getPaneItems().length > 0)
        });
    };
    /*
    Section: Event Subscription
    */
    // Essential: Invoke the given callback when the visibility of the dock changes.
    //
    // * `callback` {Function} to be called when the visibility changes.
    //   * `visible` {Boolean} Is the dock now visible?
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /*
      Section: Event Subscription
      */
    // Essential: Invoke the given callback when the visibility of the dock changes.
    //
    // * `callback` {Function} to be called when the visibility changes.
    //   * `visible` {Boolean} Is the dock now visible?
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    Dock.prototype.onDidChangeVisible = /*
      Section: Event Subscription
      */
    // Essential: Invoke the given callback when the visibility of the dock changes.
    //
    // * `callback` {Function} to be called when the visibility changes.
    //   * `visible` {Boolean} Is the dock now visible?
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    function (callback) {
    };
    // Essential: Invoke the given callback with the current and all future visibilities of the dock.
    //
    // * `callback` {Function} to be called when the visibility changes.
    //   * `visible` {Boolean} Is the dock now visible?
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Essential: Invoke the given callback with the current and all future visibilities of the dock.
    //
    // * `callback` {Function} to be called when the visibility changes.
    //   * `visible` {Boolean} Is the dock now visible?
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    Dock.prototype.observeVisible = 
    // Essential: Invoke the given callback with the current and all future visibilities of the dock.
    //
    // * `callback` {Function} to be called when the visibility changes.
    //   * `visible` {Boolean} Is the dock now visible?
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    function (callback) {
        callback(this.isVisible());
        return this.onDidChangeVisible(callback);
    };
    // Essential: Invoke the given callback with all current and future panes items
    // in the dock.
    //
    // * `callback` {Function} to be called with current and future pane items.
    //   * `item` An item that is present in {::getPaneItems} at the time of
    //      subscription or that is added at some later time.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Essential: Invoke the given callback with all current and future panes items
    // in the dock.
    //
    // * `callback` {Function} to be called with current and future pane items.
    //   * `item` An item that is present in {::getPaneItems} at the time of
    //      subscription or that is added at some later time.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    Dock.prototype.observePaneItems = 
    // Essential: Invoke the given callback with all current and future panes items
    // in the dock.
    //
    // * `callback` {Function} to be called with current and future pane items.
    //   * `item` An item that is present in {::getPaneItems} at the time of
    //      subscription or that is added at some later time.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    function (callback) {
        return this.paneContainer.observePaneItems(callback);
    };
    // Essential: Invoke the given callback when the active pane item changes.
    //
    // Because observers are invoked synchronously, it's important not to perform
    // any expensive operations via this method. Consider
    // {::onDidStopChangingActivePaneItem} to delay operations until after changes
    // stop occurring.
    //
    // * `callback` {Function} to be called when the active pane item changes.
    //   * `item` The active pane item.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Essential: Invoke the given callback when the active pane item changes.
    //
    // Because observers are invoked synchronously, it's important not to perform
    // any expensive operations via this method. Consider
    // {::onDidStopChangingActivePaneItem} to delay operations until after changes
    // stop occurring.
    //
    // * `callback` {Function} to be called when the active pane item changes.
    //   * `item` The active pane item.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    Dock.prototype.onDidChangeActivePaneItem = 
    // Essential: Invoke the given callback when the active pane item changes.
    //
    // Because observers are invoked synchronously, it's important not to perform
    // any expensive operations via this method. Consider
    // {::onDidStopChangingActivePaneItem} to delay operations until after changes
    // stop occurring.
    //
    // * `callback` {Function} to be called when the active pane item changes.
    //   * `item` The active pane item.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    function (callback) {
        return this.paneContainer.onDidChangeActivePaneItem(callback);
    };
    // Essential: Invoke the given callback when the active pane item stops
    // changing.
    //
    // Observers are called asynchronously 100ms after the last active pane item
    // change. Handling changes here rather than in the synchronous
    // {::onDidChangeActivePaneItem} prevents unneeded work if the user is quickly
    // changing or closing tabs and ensures critical UI feedback, like changing the
    // highlighted tab, gets priority over work that can be done asynchronously.
    //
    // * `callback` {Function} to be called when the active pane item stopts
    //   changing.
    //   * `item` The active pane item.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Essential: Invoke the given callback when the active pane item stops
    // changing.
    //
    // Observers are called asynchronously 100ms after the last active pane item
    // change. Handling changes here rather than in the synchronous
    // {::onDidChangeActivePaneItem} prevents unneeded work if the user is quickly
    // changing or closing tabs and ensures critical UI feedback, like changing the
    // highlighted tab, gets priority over work that can be done asynchronously.
    //
    // * `callback` {Function} to be called when the active pane item stopts
    //   changing.
    //   * `item` The active pane item.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    Dock.prototype.onDidStopChangingActivePaneItem = 
    // Essential: Invoke the given callback when the active pane item stops
    // changing.
    //
    // Observers are called asynchronously 100ms after the last active pane item
    // change. Handling changes here rather than in the synchronous
    // {::onDidChangeActivePaneItem} prevents unneeded work if the user is quickly
    // changing or closing tabs and ensures critical UI feedback, like changing the
    // highlighted tab, gets priority over work that can be done asynchronously.
    //
    // * `callback` {Function} to be called when the active pane item stopts
    //   changing.
    //   * `item` The active pane item.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    function (callback) {
        return this.paneContainer.onDidStopChangingActivePaneItem(callback);
    };
    // Essential: Invoke the given callback with the current active pane item and
    // with all future active pane items in the dock.
    //
    // * `callback` {Function} to be called when the active pane item changes.
    //   * `item` The current active pane item.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Essential: Invoke the given callback with the current active pane item and
    // with all future active pane items in the dock.
    //
    // * `callback` {Function} to be called when the active pane item changes.
    //   * `item` The current active pane item.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    Dock.prototype.observeActivePaneItem = 
    // Essential: Invoke the given callback with the current active pane item and
    // with all future active pane items in the dock.
    //
    // * `callback` {Function} to be called when the active pane item changes.
    //   * `item` The current active pane item.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    function (callback) {
        return this.paneContainer.observeActivePaneItem(callback);
    };
    // Extended: Invoke the given callback when a pane is added to the dock.
    //
    // * `callback` {Function} to be called panes are added.
    //   * `event` {Object} with the following keys:
    //     * `pane` The added pane.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Extended: Invoke the given callback when a pane is added to the dock.
    //
    // * `callback` {Function} to be called panes are added.
    //   * `event` {Object} with the following keys:
    //     * `pane` The added pane.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    Dock.prototype.onDidAddPane = 
    // Extended: Invoke the given callback when a pane is added to the dock.
    //
    // * `callback` {Function} to be called panes are added.
    //   * `event` {Object} with the following keys:
    //     * `pane` The added pane.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    function (callback) {
        return this.paneContainer.onDidAddPane(callback);
    };
    // Extended: Invoke the given callback before a pane is destroyed in the
    // dock.
    //
    // * `callback` {Function} to be called before panes are destroyed.
    //   * `event` {Object} with the following keys:
    //     * `pane` The pane to be destroyed.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Extended: Invoke the given callback before a pane is destroyed in the
    // dock.
    //
    // * `callback` {Function} to be called before panes are destroyed.
    //   * `event` {Object} with the following keys:
    //     * `pane` The pane to be destroyed.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    Dock.prototype.onWillDestroyPane = 
    // Extended: Invoke the given callback before a pane is destroyed in the
    // dock.
    //
    // * `callback` {Function} to be called before panes are destroyed.
    //   * `event` {Object} with the following keys:
    //     * `pane` The pane to be destroyed.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    function (callback) {
        return this.paneContainer.onWillDestroyPane(callback);
    };
    // Extended: Invoke the given callback when a pane is destroyed in the dock.
    //
    // * `callback` {Function} to be called panes are destroyed.
    //   * `event` {Object} with the following keys:
    //     * `pane` The destroyed pane.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Extended: Invoke the given callback when a pane is destroyed in the dock.
    //
    // * `callback` {Function} to be called panes are destroyed.
    //   * `event` {Object} with the following keys:
    //     * `pane` The destroyed pane.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    Dock.prototype.onDidDestroyPane = 
    // Extended: Invoke the given callback when a pane is destroyed in the dock.
    //
    // * `callback` {Function} to be called panes are destroyed.
    //   * `event` {Object} with the following keys:
    //     * `pane` The destroyed pane.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    function (callback) {
        return this.paneContainer.onDidDestroyPane(callback);
    };
    // Extended: Invoke the given callback with all current and future panes in the
    // dock.
    //
    // * `callback` {Function} to be called with current and future panes.
    //   * `pane` A {Pane} that is present in {::getPanes} at the time of
    //      subscription or that is added at some later time.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Extended: Invoke the given callback with all current and future panes in the
    // dock.
    //
    // * `callback` {Function} to be called with current and future panes.
    //   * `pane` A {Pane} that is present in {::getPanes} at the time of
    //      subscription or that is added at some later time.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    Dock.prototype.observePanes = 
    // Extended: Invoke the given callback with all current and future panes in the
    // dock.
    //
    // * `callback` {Function} to be called with current and future panes.
    //   * `pane` A {Pane} that is present in {::getPanes} at the time of
    //      subscription or that is added at some later time.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    function (callback) {
        return this.paneContainer.observePanes(callback);
    };
    // Extended: Invoke the given callback when the active pane changes.
    //
    // * `callback` {Function} to be called when the active pane changes.
    //   * `pane` A {Pane} that is the current return value of {::getActivePane}.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Extended: Invoke the given callback when the active pane changes.
    //
    // * `callback` {Function} to be called when the active pane changes.
    //   * `pane` A {Pane} that is the current return value of {::getActivePane}.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    Dock.prototype.onDidChangeActivePane = 
    // Extended: Invoke the given callback when the active pane changes.
    //
    // * `callback` {Function} to be called when the active pane changes.
    //   * `pane` A {Pane} that is the current return value of {::getActivePane}.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    function (callback) {
        return this.paneContainer.onDidChangeActivePane(callback);
    };
    // Extended: Invoke the given callback with the current active pane and when
    // the active pane changes.
    //
    // * `callback` {Function} to be called with the current and future active#
    //   panes.
    //   * `pane` A {Pane} that is the current return value of {::getActivePane}.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Extended: Invoke the given callback with the current active pane and when
    // the active pane changes.
    //
    // * `callback` {Function} to be called with the current and future active#
    //   panes.
    //   * `pane` A {Pane} that is the current return value of {::getActivePane}.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    Dock.prototype.observeActivePane = 
    // Extended: Invoke the given callback with the current active pane and when
    // the active pane changes.
    //
    // * `callback` {Function} to be called with the current and future active#
    //   panes.
    //   * `pane` A {Pane} that is the current return value of {::getActivePane}.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    function (callback) {
        return this.paneContainer.observeActivePane(callback);
    };
    // Extended: Invoke the given callback when a pane item is added to the dock.
    //
    // * `callback` {Function} to be called when pane items are added.
    //   * `event` {Object} with the following keys:
    //     * `item` The added pane item.
    //     * `pane` {Pane} containing the added item.
    //     * `index` {Number} indicating the index of the added item in its pane.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Extended: Invoke the given callback when a pane item is added to the dock.
    //
    // * `callback` {Function} to be called when pane items are added.
    //   * `event` {Object} with the following keys:
    //     * `item` The added pane item.
    //     * `pane` {Pane} containing the added item.
    //     * `index` {Number} indicating the index of the added item in its pane.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    Dock.prototype.onDidAddPaneItem = 
    // Extended: Invoke the given callback when a pane item is added to the dock.
    //
    // * `callback` {Function} to be called when pane items are added.
    //   * `event` {Object} with the following keys:
    //     * `item` The added pane item.
    //     * `pane` {Pane} containing the added item.
    //     * `index` {Number} indicating the index of the added item in its pane.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    function (callback) {
        return this.paneContainer.onDidAddPaneItem(callback);
    };
    // Extended: Invoke the given callback when a pane item is about to be
    // destroyed, before the user is prompted to save it.
    //
    // * `callback` {Function} to be called before pane items are destroyed.
    //   * `event` {Object} with the following keys:
    //     * `item` The item to be destroyed.
    //     * `pane` {Pane} containing the item to be destroyed.
    //     * `index` {Number} indicating the index of the item to be destroyed in
    //       its pane.
    //
    // Returns a {Disposable} on which `.dispose` can be called to unsubscribe.
    // Extended: Invoke the given callback when a pane item is about to be
    // destroyed, before the user is prompted to save it.
    //
    // * `callback` {Function} to be called before pane items are destroyed.
    //   * `event` {Object} with the following keys:
    //     * `item` The item to be destroyed.
    //     * `pane` {Pane} containing the item to be destroyed.
    //     * `index` {Number} indicating the index of the item to be destroyed in
    //       its pane.
    //
    // Returns a {Disposable} on which `.dispose` can be called to unsubscribe.
    Dock.prototype.onWillDestroyPaneItem = 
    // Extended: Invoke the given callback when a pane item is about to be
    // destroyed, before the user is prompted to save it.
    //
    // * `callback` {Function} to be called before pane items are destroyed.
    //   * `event` {Object} with the following keys:
    //     * `item` The item to be destroyed.
    //     * `pane` {Pane} containing the item to be destroyed.
    //     * `index` {Number} indicating the index of the item to be destroyed in
    //       its pane.
    //
    // Returns a {Disposable} on which `.dispose` can be called to unsubscribe.
    function (callback) {
        return this.paneContainer.onWillDestroyPaneItem(callback);
    };
    // Extended: Invoke the given callback when a pane item is destroyed.
    //
    // * `callback` {Function} to be called when pane items are destroyed.
    //   * `event` {Object} with the following keys:
    //     * `item` The destroyed item.
    //     * `pane` {Pane} containing the destroyed item.
    //     * `index` {Number} indicating the index of the destroyed item in its
    //       pane.
    //
    // Returns a {Disposable} on which `.dispose` can be called to unsubscribe.
    // Extended: Invoke the given callback when a pane item is destroyed.
    //
    // * `callback` {Function} to be called when pane items are destroyed.
    //   * `event` {Object} with the following keys:
    //     * `item` The destroyed item.
    //     * `pane` {Pane} containing the destroyed item.
    //     * `index` {Number} indicating the index of the destroyed item in its
    //       pane.
    //
    // Returns a {Disposable} on which `.dispose` can be called to unsubscribe.
    Dock.prototype.onDidDestroyPaneItem = 
    // Extended: Invoke the given callback when a pane item is destroyed.
    //
    // * `callback` {Function} to be called when pane items are destroyed.
    //   * `event` {Object} with the following keys:
    //     * `item` The destroyed item.
    //     * `pane` {Pane} containing the destroyed item.
    //     * `index` {Number} indicating the index of the destroyed item in its
    //       pane.
    //
    // Returns a {Disposable} on which `.dispose` can be called to unsubscribe.
    function (callback) {
        return this.paneContainer.onDidDestroyPaneItem(callback);
    };
    // Extended: Invoke the given callback when the hovered state of the dock changes.
    //
    // * `callback` {Function} to be called when the hovered state changes.
    //   * `hovered` {Boolean} Is the dock now hovered?
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Extended: Invoke the given callback when the hovered state of the dock changes.
    //
    // * `callback` {Function} to be called when the hovered state changes.
    //   * `hovered` {Boolean} Is the dock now hovered?
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    Dock.prototype.onDidChangeHovered = 
    // Extended: Invoke the given callback when the hovered state of the dock changes.
    //
    // * `callback` {Function} to be called when the hovered state changes.
    //   * `hovered` {Boolean} Is the dock now hovered?
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    function (callback) {
        return this.emitter.on('did-change-hovered', callback);
    };
    /*
    Section: Pane Items
    */
    // Essential: Get all pane items in the dock.
    //
    // Returns an {Array} of items.
    /*
      Section: Pane Items
      */
    // Essential: Get all pane items in the dock.
    //
    // Returns an {Array} of items.
    Dock.prototype.getPaneItems = /*
      Section: Pane Items
      */
    // Essential: Get all pane items in the dock.
    //
    // Returns an {Array} of items.
    function () {
        return this.paneContainer.getPaneItems();
    };
    // Essential: Get the active {Pane}'s active item.
    //
    // Returns an pane item {Object}.
    // Essential: Get the active {Pane}'s active item.
    //
    // Returns an pane item {Object}.
    Dock.prototype.getActivePaneItem = 
    // Essential: Get the active {Pane}'s active item.
    //
    // Returns an pane item {Object}.
    function () {
        return this.paneContainer.getActivePaneItem();
    };
    // Save all pane items.
    // Save all pane items.
    Dock.prototype.saveAll = 
    // Save all pane items.
    function () {
        this.paneContainer.saveAll();
    };
    Dock.prototype.confirmClose = function (options) {
        return this.paneContainer.confirmClose(options);
    };
    /*
    Section: Panes
    */
    // Extended: Get all panes in the dock.
    //
    // Returns an {Array} of {Pane}s.
    /*
      Section: Panes
      */
    // Extended: Get all panes in the dock.
    //
    // Returns an {Array} of {Pane}s.
    Dock.prototype.getPanes = /*
      Section: Panes
      */
    // Extended: Get all panes in the dock.
    //
    // Returns an {Array} of {Pane}s.
    function () {
        return this.paneContainer.getPanes();
    };
    // Extended: Get the active {Pane}.
    //
    // Returns a {Pane}.
    // Extended: Get the active {Pane}.
    //
    // Returns a {Pane}.
    Dock.prototype.getActivePane = 
    // Extended: Get the active {Pane}.
    //
    // Returns a {Pane}.
    function () {
        return this.paneContainer.getActivePane();
    };
    // Extended: Make the next pane active.
    // Extended: Make the next pane active.
    Dock.prototype.activateNextPane = 
    // Extended: Make the next pane active.
    function () {
        return this.paneContainer.activateNextPane();
    };
    // Extended: Make the previous pane active.
    // Extended: Make the previous pane active.
    Dock.prototype.activatePreviousPane = 
    // Extended: Make the previous pane active.
    function () {
        return this.paneContainer.activatePreviousPane();
    };
    Dock.prototype.paneForURI = function (uri) {
        return this.paneContainer.paneForURI(uri);
    };
    Dock.prototype.paneForItem = function (item) {
        return this.paneContainer.paneForItem(item);
    };
    // Destroy (close) the active pane.
    // Destroy (close) the active pane.
    Dock.prototype.destroyActivePane = 
    // Destroy (close) the active pane.
    function () {
        var activePane = this.getActivePane();
        if (activePane != null) {
            activePane.destroy();
        }
    };
    return Dock;
}());
exports.Dock = Dock;
function getWidthOrHeight(location) {
    return location === 'left' || location === 'right' ? 'width' : 'height';
}
function getPreferredSize(item, location) {
    switch (location) {
        case 'left':
        case 'right':
            return typeof item.getPreferredWidth === 'function'
                ? item.getPreferredWidth()
                : null;
        default:
            return typeof item.getPreferredHeight === 'function'
                ? item.getPreferredHeight()
                : null;
    }
}
function getIconName(location, visible) {
    switch (location) {
        case 'right': return visible ? 'icon-chevron-right' : 'icon-chevron-left';
        case 'bottom': return visible ? 'icon-chevron-down' : 'icon-chevron-up';
        case 'left': return visible ? 'icon-chevron-left' : 'icon-chevron-right';
        default: throw new Error("Invalid location: " + location);
    }
}
function rectContainsPoint(rect, point) {
    return (point.x >= rect.left &&
        point.y >= rect.top &&
        point.x <= rect.right &&
        point.y <= rect.bottom);
}
// Is the item allowed in the given location?
function isItemAllowed(item, location) {
    if (typeof item.getAllowedLocations !== 'function') {
        return true;
    }
    return item.getAllowedLocations().includes(location);
}
//# sourceMappingURL=dock.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/ideframework/gsp/event-kit/composite-disposable.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var disposable_1 = __webpack_require__("./node_modules/@farris/ide-devkit/ideframework/gsp/event-kit/disposable.js");
// Essential: An object that aggregates multiple {Disposable} instances together
// into a single disposable, so they can all be disposed as a group.
//
// These are very useful when subscribing to multiple events.
//
// ## Examples
//
// ```coffee
// {CompositeDisposable} = require 'atom'
//
// class Something
//   constructor: ->
//     @disposables = new CompositeDisposable
//     editor = atom.workspace.getActiveTextEditor()
//     @disposables.add editor.onDidChange ->
//     @disposables.add editor.onDidChangePath ->
//
//   destroy: ->
//     @disposables.dispose()
// ```
var 
// Essential: An object that aggregates multiple {Disposable} instances together
// into a single disposable, so they can all be disposed as a group.
//
// These are very useful when subscribing to multiple events.
//
// ## Examples
//
// ```coffee
// {CompositeDisposable} = require 'atom'
//
// class Something
//   constructor: ->
//     @disposables = new CompositeDisposable
//     editor = atom.workspace.getActiveTextEditor()
//     @disposables.add editor.onDidChange ->
//     @disposables.add editor.onDidChangePath ->
//
//   destroy: ->
//     @disposables.dispose()
// ```
CompositeDisposable = /** @class */ (function () {
    //////
    /// Section: Construction and Destruction
    //////
    // Public: Construct an instance, optionally with one or more disposables
    function CompositeDisposable() {
        var disposables = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            disposables[_i] = arguments[_i];
        }
        this.disposed = false;
        this.disposables = new Set();
        this.add.apply(this, disposables);
    }
    // Public: Dispose all disposables added to this composite disposable.
    //
    // If this object has already been disposed, this method has no effect.
    // Public: Dispose all disposables added to this composite disposable.
    //
    // If this object has already been disposed, this method has no effect.
    CompositeDisposable.prototype.dispose = 
    // Public: Dispose all disposables added to this composite disposable.
    //
    // If this object has already been disposed, this method has no effect.
    function () {
        if (!this.disposed) {
            this.disposed = true;
            this.disposables.forEach(function (disposable) { return disposable.dispose(); });
            this.disposables = null;
        }
    };
    //////
    /// Section: Managing Disposables
    //////
    // Public: Add disposables to be disposed when the composite is disposed.
    //
    // If this object has already been disposed, this method has no effect.
    //
    // * `...disposables` {Disposable} instances or any objects with `.dispose()`
    //   methods.
    // Public: Add disposables to be disposed when the composite is disposed.
    //
    // If this object has already been disposed, this method has no effect.
    //
    // * `...disposables` {Disposable} instances or any objects with `.dispose()`
    //   methods.
    CompositeDisposable.prototype.add = 
    // Public: Add disposables to be disposed when the composite is disposed.
    //
    // If this object has already been disposed, this method has no effect.
    //
    // * `...disposables` {Disposable} instances or any objects with `.dispose()`
    //   methods.
    function () {
        var disposables = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            disposables[_i] = arguments[_i];
        }
        if (!this.disposed) {
            for (var _a = 0, disposables_1 = disposables; _a < disposables_1.length; _a++) {
                var disposable = disposables_1[_a];
                if (this.assertDisposable(disposable)) {
                    this.disposables.add(disposable);
                }
            }
        }
    };
    // Public: Remove a previously added disposable.
    //
    // * `disposable` {Disposable} instance or any object with a `.dispose()`
    //   method.
    // Public: Remove a previously added disposable.
    //
    // * `disposable` {Disposable} instance or any object with a `.dispose()`
    //   method.
    CompositeDisposable.prototype.remove = 
    // Public: Remove a previously added disposable.
    //
    // * `disposable` {Disposable} instance or any object with a `.dispose()`
    //   method.
    function (disposable) {
        if (!this.disposed) {
            this.disposables.delete(disposable);
        }
    };
    // Public: Alias to {CompositeDisposable::remove}
    // Public: Alias to {CompositeDisposable::remove}
    CompositeDisposable.prototype.delete = 
    // Public: Alias to {CompositeDisposable::remove}
    function (disposable) {
        this.remove(disposable);
    };
    // Public: Clear all disposables. They will not be disposed by the next call
    // to dispose.
    // Public: Clear all disposables. They will not be disposed by the next call
    // to dispose.
    CompositeDisposable.prototype.clear = 
    // Public: Clear all disposables. They will not be disposed by the next call
    // to dispose.
    function () {
        if (!this.disposed) {
            this.disposables.clear();
        }
    };
    CompositeDisposable.prototype.assertDisposable = function (disposable) {
        if (!disposable_1.Disposable.isDisposable(disposable)) {
            throw new TypeError('Arguments to CompositeDisposable.add must have a .dispose() method');
        }
        return true;
    };
    return CompositeDisposable;
}());
exports.CompositeDisposable = CompositeDisposable;
//# sourceMappingURL=composite-disposable.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/ideframework/gsp/event-kit/disposable.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Essential: A handle to a resource that can be disposed. For example,
// {Emitter::on} returns disposables representing subscriptions.
Object.defineProperty(exports, "__esModule", { value: true });
var Disposable = /** @class */ (function () {
    //////
    /// Section: Construction and Destruction
    //////
    // Public: Construct a Disposable
    //
    // * `disposalAction` A {Function} to call when {::dispose} is called for the
    //   first time.
    function Disposable(disposalAction) {
        this.disposalAction = disposalAction;
        this.disposed = false;
    }
    // Public: Ensure that `object` correctly implements the `Disposable`
    // contract.
    //
    // * `object` An {Object} you want to perform the check against.
    //
    // Returns a {Boolean} indicating whether `object` is a valid `Disposable`.
    // Public: Ensure that `object` correctly implements the `Disposable`
    // contract.
    //
    // * `object` An {Object} you want to perform the check against.
    //
    // Returns a {Boolean} indicating whether `object` is a valid `Disposable`.
    Disposable.isDisposable = 
    // Public: Ensure that `object` correctly implements the `Disposable`
    // contract.
    //
    // * `object` An {Object} you want to perform the check against.
    //
    // Returns a {Boolean} indicating whether `object` is a valid `Disposable`.
    function (object) {
        if (object && object.dispose && typeof (object.dispose) === 'function') {
            return true;
        }
        return false;
    };
    // Public: Perform the disposal action, indicating that the resource associated
    // with this disposable is no longer needed.
    //
    // You can call this method more than once, but the disposal action will only
    // be performed the first time.
    // Public: Perform the disposal action, indicating that the resource associated
    // with this disposable is no longer needed.
    //
    // You can call this method more than once, but the disposal action will only
    // be performed the first time.
    Disposable.prototype.dispose = 
    // Public: Perform the disposal action, indicating that the resource associated
    // with this disposable is no longer needed.
    //
    // You can call this method more than once, but the disposal action will only
    // be performed the first time.
    function () {
        if (!this.disposed) {
            this.disposed = true;
            if (this.disposalAction) {
                this.disposalAction();
            }
            this.disposalAction = null;
        }
    };
    return Disposable;
}());
exports.Disposable = Disposable;
//# sourceMappingURL=disposable.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/ideframework/gsp/event-kit/emitter.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var disposable_1 = __webpack_require__("./node_modules/@farris/ide-devkit/ideframework/gsp/event-kit/disposable.js");
var composite_disposable_1 = __webpack_require__("./node_modules/@farris/ide-devkit/ideframework/gsp/event-kit/composite-disposable.js");
// Essential: Utility class to be used when implementing event-based APIs that
// allows for handlers registered via `::on` to be invoked with calls to
// `::emit`. Instances of this class are intended to be used internally by
// classes that expose an event-based API.
//
// For example:
//
// ```coffee
// class User
//   constructor: ->
//     @emitter = new Emitter
//
//   onDidChangeName: (callback) ->
//     @emitter.on 'did-change-name', callback
//
//   setName: (name) ->
//     if name isnt @name
//       @name = name
//       @emitter.emit 'did-change-name', name
//     @name
// ```
var Emitter = /** @class */ (function () {
    //////
    /// Section: Construction and Destruction
    //////
    // Public: Construct an emitter.
    //
    // ```coffee
    // @emitter = new Emitter()
    // ```
    function Emitter() {
        this.disposed = false;
        this.clear();
    }
    Emitter.onEventHandlerException = function (exceptionHandler) {
        var _this = this;
        this.dispatch = this.simpleDispatch;
        if (this.exceptionHandlers.length === 0) {
            this.dispatch = this.exceptionHandlingDispatch;
        }
        this.exceptionHandlers.push(exceptionHandler);
        return new disposable_1.Disposable(function () {
            _this.exceptionHandlers.splice(_this.exceptionHandlers.indexOf(exceptionHandler), 1);
            if (_this.exceptionHandlers.length === 0) {
                return _this.dispatch = _this.simpleDispatch;
            }
        });
    };
    Emitter.simpleDispatch = function (handler, value) {
        return handler(value);
    };
    Emitter.exceptionHandlingDispatch = function (handler, value) {
        try {
            return handler(value);
        }
        catch (exception) {
            return this.exceptionHandlers.map(function (exceptionHandler) { return exceptionHandler(exception); });
        }
    };
    // Public: Clear out any existing subscribers.
    // Public: Clear out any existing subscribers.
    Emitter.prototype.clear = 
    // Public: Clear out any existing subscribers.
    function () {
        if (this.subscriptions) {
            this.subscriptions.dispose();
        }
        this.subscriptions = new composite_disposable_1.CompositeDisposable();
        return this.handlersByEventName = {};
    };
    // Public: Unsubscribe all handlers.
    // Public: Unsubscribe all handlers.
    Emitter.prototype.dispose = 
    // Public: Unsubscribe all handlers.
    function () {
        this.subscriptions.dispose();
        this.handlersByEventName = null;
        this.disposed = true;
    };
    //////
    /// Section: Event Subscription
    //////
    // Public: Register the given handler function to be invoked whenever events by
    // the given name are emitted via {::emit}.
    //
    // * `eventName` {String} naming the event that you want to invoke the handler
    //   when emitted.
    // * `handler` {Function} to invoke when {::emit} is called with the given
    //   event name.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Public: Register the given handler function to be invoked whenever events by
    // the given name are emitted via {::emit}.
    //
    // * `eventName` {String} naming the event that you want to invoke the handler
    //   when emitted.
    // * `handler` {Function} to invoke when {::emit} is called with the given
    //   event name.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    Emitter.prototype.on = 
    // Public: Register the given handler function to be invoked whenever events by
    // the given name are emitted via {::emit}.
    //
    // * `eventName` {String} naming the event that you want to invoke the handler
    //   when emitted.
    // * `handler` {Function} to invoke when {::emit} is called with the given
    //   event name.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    function (eventName, handler, unshift) {
        var _this = this;
        if (unshift === void 0) { unshift = false; }
        if (this.disposed) {
            throw new Error('Emitter has been disposed');
        }
        if (typeof handler !== 'function') {
            throw new Error('Handler must be a function');
        }
        var currentHandlers = this.handlersByEventName[eventName];
        if (currentHandlers) {
            if (unshift) {
                this.handlersByEventName[eventName] = [handler].concat(currentHandlers);
            }
            else {
                this.handlersByEventName[eventName] = currentHandlers.concat(handler);
            }
        }
        else {
            this.handlersByEventName[eventName] = [handler];
        }
        // When the emitter is disposed, we want to dispose of all subscriptions.
        // However, we also need to stop tracking disposables when they're disposed
        // from outside, otherwise this class will hold references to all the
        // disposables it created (instead of just the active ones).
        var cleanup = new disposable_1.Disposable(function () {
            _this.subscriptions.remove(cleanup);
            return _this.off(eventName, handler);
        });
        this.subscriptions.add(cleanup);
        return cleanup;
    };
    // Public: Register the given handler function to be invoked the next time an
    // events with the given name is emitted via {::emit}.
    //
    // * `eventName` {String} naming the event that you want to invoke the handler
    //   when emitted.
    // * `handler` {Function} to invoke when {::emit} is called with the given
    //   event name.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Public: Register the given handler function to be invoked the next time an
    // events with the given name is emitted via {::emit}.
    //
    // * `eventName` {String} naming the event that you want to invoke the handler
    //   when emitted.
    // * `handler` {Function} to invoke when {::emit} is called with the given
    //   event name.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    Emitter.prototype.once = 
    // Public: Register the given handler function to be invoked the next time an
    // events with the given name is emitted via {::emit}.
    //
    // * `eventName` {String} naming the event that you want to invoke the handler
    //   when emitted.
    // * `handler` {Function} to invoke when {::emit} is called with the given
    //   event name.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    function (eventName, handler, unshift) {
        if (unshift === void 0) { unshift = false; }
        var disposable;
        var wrapped = function (value) {
            disposable.dispose();
            handler(value);
        };
        disposable = this.on(eventName, wrapped, unshift);
        return disposable;
    };
    // Public: Register the given handler function to be invoked *before* all
    // other handlers existing at the time of subscription whenever events by the
    // given name are emitted via {::emit}.
    //
    // Use this method when you need to be the first to handle a given event. This
    // could be required when a data structure in a parent object needs to be
    // updated before third-party event handlers registered on a child object via a
    // public API are invoked. Your handler could itself be preempted via
    // subsequent calls to this method, but this can be controlled by keeping
    // methods based on `::preempt` private.
    //
    // * `eventName` {String} naming the event that you want to invoke the handler
    //   when emitted.
    // * `handler` {Function} to invoke when {::emit} is called with the given
    //   event name.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Public: Register the given handler function to be invoked *before* all
    // other handlers existing at the time of subscription whenever events by the
    // given name are emitted via {::emit}.
    //
    // Use this method when you need to be the first to handle a given event. This
    // could be required when a data structure in a parent object needs to be
    // updated before third-party event handlers registered on a child object via a
    // public API are invoked. Your handler could itself be preempted via
    // subsequent calls to this method, but this can be controlled by keeping
    // methods based on `::preempt` private.
    //
    // * `eventName` {String} naming the event that you want to invoke the handler
    //   when emitted.
    // * `handler` {Function} to invoke when {::emit} is called with the given
    //   event name.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    Emitter.prototype.preempt = 
    // Public: Register the given handler function to be invoked *before* all
    // other handlers existing at the time of subscription whenever events by the
    // given name are emitted via {::emit}.
    //
    // Use this method when you need to be the first to handle a given event. This
    // could be required when a data structure in a parent object needs to be
    // updated before third-party event handlers registered on a child object via a
    // public API are invoked. Your handler could itself be preempted via
    // subsequent calls to this method, but this can be controlled by keeping
    // methods based on `::preempt` private.
    //
    // * `eventName` {String} naming the event that you want to invoke the handler
    //   when emitted.
    // * `handler` {Function} to invoke when {::emit} is called with the given
    //   event name.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    function (eventName, handler) {
        this.on(eventName, handler, true);
    };
    // Private: Used by the disposable.
    // Private: Used by the disposable.
    Emitter.prototype.off = 
    // Private: Used by the disposable.
    function (eventName, handlerToRemove) {
        if (this.disposed) {
            return;
        }
        var oldHandlers = this.handlersByEventName[eventName];
        if (oldHandlers) {
            var newHandlers = [];
            for (var _i = 0, oldHandlers_1 = oldHandlers; _i < oldHandlers_1.length; _i++) {
                var handler = oldHandlers_1[_i];
                if (handler !== handlerToRemove) {
                    newHandlers.push(handler);
                }
            }
            if (newHandlers.length > 0) {
                this.handlersByEventName[eventName] = newHandlers;
            }
            else {
                delete this.handlersByEventName[eventName];
            }
        }
    };
    //////
    /// Section: Event Emission
    //////
    // Public: Invoke handlers registered via {::on} for the given event name.
    //
    // * `eventName` The name of the event to emit. Handlers registered with {::on}
    //   for the same name will be invoked.
    // * `value` Callbacks will be invoked with this value as an argument.
    // Public: Invoke handlers registered via {::on} for the given event name.
    //
    // * `eventName` The name of the event to emit. Handlers registered with {::on}
    //   for the same name will be invoked.
    // * `value` Callbacks will be invoked with this value as an argument.
    Emitter.prototype.emit = 
    // Public: Invoke handlers registered via {::on} for the given event name.
    //
    // * `eventName` The name of the event to emit. Handlers registered with {::on}
    //   for the same name will be invoked.
    // * `value` Callbacks will be invoked with this value as an argument.
    function (eventName, value) {
        if (this.handlersByEventName && this.handlersByEventName[eventName]) {
            var handlers = this.handlersByEventName[eventName];
            for (var _i = 0, handlers_1 = handlers; _i < handlers_1.length; _i++) {
                var handler = handlers_1[_i];
                Emitter.dispatch(handler, value);
            }
        }
    };
    Emitter.prototype.emitAsync = function (eventName, value) {
        if (this.handlersByEventName && this.handlersByEventName[eventName]) {
            var results = [];
            for (var _i = 0, _a = this.handlersByEventName[eventName]; _i < _a.length; _i++) {
                var handler = _a[_i];
                results.push(Emitter.dispatch(handler, value));
            }
            return Promise.all(results).then(function () { });
        }
        return Promise.resolve();
    };
    Emitter.prototype.getEventNames = function () {
        return Object.keys(this.handlersByEventName);
    };
    Emitter.prototype.listenerCountForEventName = function (eventName) {
        return this.handlersByEventName && this.handlersByEventName[eventName] ? this.handlersByEventName[eventName].length : 0;
    };
    Emitter.prototype.getTotalListenerCount = function () {
        var result = 0;
        for (var eventName in this.handlersByEventName) {
            if (this.handlersByEventName.hasOwnProperty(eventName)) {
                result += this.handlersByEventName[eventName].length;
            }
        }
        return result;
    };
    Emitter.exceptionHandlers = [];
    Emitter.dispatch = Emitter.simpleDispatch;
    return Emitter;
}());
exports.Emitter = Emitter;
//# sourceMappingURL=emitter.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/ideframework/gsp/event-kit/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var emitter_1 = __webpack_require__("./node_modules/@farris/ide-devkit/ideframework/gsp/event-kit/emitter.js");
exports.Emitter = emitter_1.Emitter;
var composite_disposable_1 = __webpack_require__("./node_modules/@farris/ide-devkit/ideframework/gsp/event-kit/composite-disposable.js");
exports.CompositeDisposable = composite_disposable_1.CompositeDisposable;
var disposable_1 = __webpack_require__("./node_modules/@farris/ide-devkit/ideframework/gsp/event-kit/disposable.js");
exports.Disposable = disposable_1.Disposable;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/ideframework/gsp/gsp.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var event_bus_1 = __webpack_require__("./node_modules/@farris/ide-devkit/ideframework/eventbus/event-bus.js");
var util_1 = __webpack_require__("./node_modules/@farris/ide-devkit/ideframework/util/util.js");
var view_registry_1 = __webpack_require__("./node_modules/@farris/ide-devkit/ideframework/gsp/view-registry.js");
var workspace_1 = __webpack_require__("./node_modules/@farris/ide-devkit/ideframework/gsp/workspace.js");
var GSP = /** @class */ (function () {
    function GSP() {
        this._config = {
            get: function (key) {
                return this[key];
            }
        };
        this._views = new view_registry_1.ViewRegistry(this);
        this._eventBus = new event_bus_1.EventBus();
        this._util = new util_1.Util();
        this._workspace = new workspace_1.Workspace({
            config: this._config,
            viewRegistry: this._views
        });
    }
    Object.defineProperty(GSP.prototype, "eventBus", {
        get: function () { return this._eventBus; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GSP.prototype, "util", {
        get: function () { return this._util; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GSP.prototype, "workspace", {
        get: function () { return this._workspace; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GSP.prototype, "views", {
        get: function () { return this._views; },
        enumerable: true,
        configurable: true
    });
    return GSP;
}());
exports.GSP = GSP;
//# sourceMappingURL=gsp.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/ideframework/gsp/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__("./node_modules/@farris/ide-devkit/ideframework/gsp/dock.js"));
__export(__webpack_require__("./node_modules/@farris/ide-devkit/ideframework/gsp/gsp.js"));
__export(__webpack_require__("./node_modules/@farris/ide-devkit/ideframework/gsp/item-registry.js"));
__export(__webpack_require__("./node_modules/@farris/ide-devkit/ideframework/gsp/model.js"));
__export(__webpack_require__("./node_modules/@farris/ide-devkit/ideframework/gsp/pane-axis.js"));
__export(__webpack_require__("./node_modules/@farris/ide-devkit/ideframework/gsp/pane-container.js"));
__export(__webpack_require__("./node_modules/@farris/ide-devkit/ideframework/gsp/panel.js"));
__export(__webpack_require__("./node_modules/@farris/ide-devkit/ideframework/gsp/view-registry.js"));
__export(__webpack_require__("./node_modules/@farris/ide-devkit/ideframework/gsp/workspace-center.js"));
__export(__webpack_require__("./node_modules/@farris/ide-devkit/ideframework/gsp/workspace.js"));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/ideframework/gsp/item-registry.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ItemRegistry = /** @class */ (function () {
    function ItemRegistry() {
        this.items = new WeakSet();
    }
    ItemRegistry.prototype.addItem = function (item) {
        if (this.hasItem(item)) {
            throw new Error("The workspace can only contain one instance of item " + item);
        }
        this.items.add(item);
    };
    ItemRegistry.prototype.removeItem = function (item) {
        this.items.delete(item);
    };
    ItemRegistry.prototype.hasItem = function (item) {
        return this.items.has(item);
    };
    return ItemRegistry;
}());
exports.ItemRegistry = ItemRegistry;
//# sourceMappingURL=item-registry.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/ideframework/gsp/model.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var nextInstanceId = 1;
var Model = /** @class */ (function () {
    function Model(params) {
        this.alive = true;
    }
    Object.defineProperty(Model.prototype, "isAlive", {
        get: function () { return this.alive; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Model.prototype, "isDestroyed", {
        get: function () { return !this.alive; },
        enumerable: true,
        configurable: true
    });
    Model.prototype.assignId = function (id) {
    };
    Model.prototype.destroy = function () {
    };
    Model.prototype.resetNextInstanceId = function () {
        nextInstanceId = 1;
    };
    return Model;
}());
exports.Model = Model;
//# sourceMappingURL=model.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/ideframework/gsp/pane-axis.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var model_1 = __webpack_require__("./node_modules/@farris/ide-devkit/ideframework/gsp/model.js");
var PaneAxis = /** @class */ (function (_super) {
    __extends(PaneAxis, _super);
    function PaneAxis(params, viewRegistry) {
        return _super.call(this, {}) || this;
    }
    PaneAxis.prototype.deserialize = function () {
    };
    PaneAxis.prototype.getElement = function () { };
    PaneAxis.prototype.addChild = function () { };
    PaneAxis.prototype.removeChidl = function () { };
    PaneAxis.prototype.insertChildBefore = function () { };
    PaneAxis.prototype.subscribeToChild = function () { };
    PaneAxis.prototype.unsubscribeFromChild = function () { };
    return PaneAxis;
}(model_1.Model));
exports.PaneAxis = PaneAxis;
//# sourceMappingURL=pane-axis.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/ideframework/gsp/pane-container.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var pane_1 = __webpack_require__("./node_modules/@farris/ide-devkit/ideframework/gsp/pane.js");
var item_registry_1 = __webpack_require__("./node_modules/@farris/ide-devkit/ideframework/gsp/item-registry.js");
var SERIALIZATION_VERSION = 1;
var PaneContainer = /** @class */ (function () {
    function PaneContainer(params) {
        var applicationDelegate, deserializerManager, notificationManager;
        (this.config = params.config, applicationDelegate = params.applicationDelegate, notificationManager = params.notificationManager, deserializerManager = params.deserializerManager, this.viewRegistry = params.viewRegistry, this.location = params.location);
        this.itemRegistry = new item_registry_1.ItemRegistry();
        this.alive = true;
        this.setRoot(new pane_1.Pane({
            container: this,
            config: this.config,
            applicationDelegate: applicationDelegate,
            notificationManager: notificationManager,
            deserializerManager: deserializerManager,
            viewRegistry: this.viewRegistry
        }));
        this.didActivatePane(this.getRoot());
    }
    PaneContainer.prototype.getLocation = function () { return this.location; };
    PaneContainer.prototype.getElement = function () {
    };
    PaneContainer.prototype.destroy = function () {
        this.alive = false;
        for (var _i = 0, _a = this.getRoot().getPanes(); _i < _a.length; _i++) {
            var pane = _a[_i];
            pane.destroy();
        }
    };
    PaneContainer.prototype.isAlive = function () { return this.alive; };
    PaneContainer.prototype.isDestroyed = function () { return !this.isAlive(); };
    PaneContainer.prototype.serialize = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return {
            deserializer: 'PaneContainer',
            version: SERIALIZATION_VERSION,
            root: this.root ? this.root.serialize() : null,
            activePaneId: this.activePane.id
        };
    };
    PaneContainer.prototype.deserialize = function (state, deserializerManager) {
        if (state.version !== SERIALIZATION_VERSION) {
            return;
        }
        this.setRoot(deserializerManager.deserialize(state.root));
        this.activePane = this.getRoot().getPanes().find(function (pane) { return pane.id === state.activePaneId; }) || this.getPanes()[0];
        if (this.config && this.config.get && this.config.get('core.destroyEmptyPanes')) {
            this.destroyEmptyPanes();
        }
    };
    PaneContainer.prototype.onDidChangeRoot = function (fn) {
    };
    PaneContainer.prototype.observeRoot = function (fn) {
        fn(this.getRoot());
        return this.onDidChangeRoot(fn);
    };
    PaneContainer.prototype.onDidAddPane = function (fn) {
    };
    PaneContainer.prototype.observePanes = function (fn) {
        for (var _i = 0, _a = this.getPanes(); _i < _a.length; _i++) {
            var pane = _a[_i];
            fn(pane);
        }
        return this.onDidAddPane(function (_a) {
            var pane = _a.pane;
            return fn(pane);
        });
    };
    PaneContainer.prototype.onDidDestroyPane = function (fn) {
    };
    PaneContainer.prototype.onWillDestroyPane = function (fn) {
    };
    PaneContainer.prototype.onDidChangeActivePane = function (fn) {
    };
    PaneContainer.prototype.onDidActivatePane = function (fn) {
    };
    PaneContainer.prototype.observeActivePane = function (fn) {
        fn(this.getActivePane());
        return this.onDidChangeActivePane(fn);
    };
    PaneContainer.prototype.onDidAddPaneItem = function (fn) {
    };
    PaneContainer.prototype.observePaneItems = function (fn) {
        for (var _i = 0, _a = this.getPaneItems(); _i < _a.length; _i++) {
            var item = _a[_i];
            fn(item);
        }
        return this.onDidAddPaneItem(function (_a) {
            var item = _a.item;
            return fn(item);
        });
    };
    PaneContainer.prototype.onDidChangeActivePaneItem = function (fn) {
    };
    PaneContainer.prototype.onDidStopChangingActivePaneItem = function (fn) {
    };
    PaneContainer.prototype.observeActivePaneItem = function (fn) {
        fn(this.getActivePaneItem());
        return this.onDidChangeActivePaneItem(fn);
    };
    PaneContainer.prototype.onWillDestroyPaneItem = function (fn) {
    };
    PaneContainer.prototype.onDidDestroyPaneItem = function (fn) {
    };
    PaneContainer.prototype.getRoot = function () { return this.root; };
    PaneContainer.prototype.setRoot = function (root) {
        this.root = root;
        this.root.setParent(this);
        this.root.setContainer(this);
        if ((this.getActivePane() == null) && this.root instanceof pane_1.Pane) {
            this.didActivatePane(this.root);
        }
    };
    PaneContainer.prototype.replaceChild = function (oldChild, newChild) {
        if (oldChild !== this.root) {
            throw new Error('Replacing non-existent child');
        }
        this.setRoot(newChild);
    };
    PaneContainer.prototype.getPanes = function () {
        if (this.alive) {
            return this.getRoot().getPanes();
        }
        else {
            return [];
        }
    };
    PaneContainer.prototype.getPaneItems = function () {
        return this.getRoot().getItems();
    };
    PaneContainer.prototype.getActivePane = function () {
        return this.activePane;
    };
    PaneContainer.prototype.getActivePaneItem = function () {
        return this.getActivePane().getActiveItem();
    };
    PaneContainer.prototype.paneForURI = function (uri) {
        return this.getPanes().find(function (pane) { return pane.itemForURI(uri) != null; });
    };
    PaneContainer.prototype.paneForItem = function (item) {
        return this.getPanes().find(function (pane) { return pane.getItems().find(function (it) { return it === item; }); });
    };
    PaneContainer.prototype.saveAll = function () {
        for (var _i = 0, _a = this.getPanes(); _i < _a.length; _i++) {
            var pane = _a[_i];
            pane.saveItems();
        }
    };
    PaneContainer.prototype.confirmClose = function (options) {
        var promises = [];
        for (var _i = 0, _a = this.getPanes(); _i < _a.length; _i++) {
            var pane = _a[_i];
            for (var _b = 0, _c = pane.getItems(); _b < _c.length; _b++) {
                var item = _c[_b];
                promises.push(pane.promptToSaveItem(item, options));
            }
        }
        return Promise.all(promises).then(function (results) { return !results.find(function (item) { return item === false; }); });
    };
    PaneContainer.prototype.activateNextPane = function () {
        var panes = this.getPanes();
        if (panes.length > 1) {
            var currentIndex = panes.indexOf(this.activePane);
            var nextIndex = (currentIndex + 1) % panes.length;
            panes[nextIndex].activate();
            return true;
        }
        else {
            return false;
        }
    };
    PaneContainer.prototype.activatePreviousPane = function () {
        var panes = this.getPanes();
        if (panes.length > 1) {
            var currentIndex = panes.indexOf(this.activePane);
            var previousIndex = currentIndex - 1;
            if (previousIndex < 0) {
                previousIndex = panes.length - 1;
            }
            panes[previousIndex].activate();
            return true;
        }
        else {
            return false;
        }
    };
    PaneContainer.prototype.moveActiveItemToPane = function (destPane) {
        var item = this.activePane.getActiveItem();
        if (!destPane.isItemAllowed(item)) {
            return;
        }
        this.activePane.moveItemToPane(item, destPane);
        destPane.setActiveItem(item);
    };
    PaneContainer.prototype.copyActiveItemToPane = function (destPane) {
        var item = this.activePane.copyActiveItem();
        if (item && destPane.isItemAllowed(item)) {
            destPane.activateItem(item);
        }
    };
    PaneContainer.prototype.destroyEmptyPanes = function () {
        for (var _i = 0, _a = this.getPanes(); _i < _a.length; _i++) {
            var pane = _a[_i];
            if (pane.items.length === 0) {
                pane.destroy();
            }
        }
    };
    PaneContainer.prototype.didAddPane = function (event) {
        var items = event.pane.getItems();
        for (var i = 0, length_1 = items.length; i < length_1; i++) {
            var item = items[i];
            this.didAddPaneItem(item, event.pane, i);
        }
    };
    PaneContainer.prototype.willDestroyPane = function (event) {
    };
    PaneContainer.prototype.didDestroyPane = function (event) {
    };
    PaneContainer.prototype.didActivatePane = function (activePane) {
        if (activePane !== this.activePane) {
            if (!this.getPanes().find(function (item) { return item === activePane; })) {
                throw new Error('Setting active pane that is not present in pane container');
            }
            this.activePane = activePane;
            this.didChangeActiveItemOnPane(this.activePane, this.activePane.getActiveItem());
        }
        return this.activePane;
    };
    PaneContainer.prototype.didAddPaneItem = function (item, pane, index) {
        this.itemRegistry.addItem(item);
    };
    PaneContainer.prototype.willDestroyPaneItem = function (event) {
    };
    PaneContainer.prototype.didDestroyPaneItem = function (event) {
        this.itemRegistry.removeItem(event.item);
        // this.emitter.emit('did-destroy-pane-item', event);
    };
    PaneContainer.prototype.didChangeActiveItemOnPane = function (pane, activeItem) {
        if (pane === this.getActivePane()) {
            this.cancelStoppedChangingActivePaneItemTimeout();
            // `setTimeout()` isn't available during the snapshotting phase, but that's okay.
        }
    };
    PaneContainer.prototype.cancelStoppedChangingActivePaneItemTimeout = function () {
    };
    return PaneContainer;
}());
exports.PaneContainer = PaneContainer;
//# sourceMappingURL=pane-container.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/ideframework/gsp/pane.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var pane_axis_1 = __webpack_require__("./node_modules/@farris/ide-devkit/ideframework/gsp/pane-axis.js");
var event_kit_1 = __webpack_require__("./node_modules/@farris/ide-devkit/ideframework/gsp/event-kit/index.js");
// const Grim = require('grim')
// const {CompositeDisposable, Emitter} = require('event-kit')
// const PaneAxis = require('./pane-axis')
// const TextEditor = require('./text-editor')
// const PaneElement = require('./pane-element')
var nextInstanceId = 1;
var SaveCancelledError = /** @class */ (function (_super) {
    __extends(SaveCancelledError, _super);
    function SaveCancelledError() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return SaveCancelledError;
}(Error));
// Extended: A container for presenting content in the center of the workspace.
// Panes can contain multiple items, one of which is *active* at a given time.
// The view corresponding to the active item is displayed in the interface. In
// the default configuration, tabs are also displayed for each item.
//
// Each pane may also contain one *pending* item. When a pending item is added
// to a pane, it will replace the currently pending item, if any, instead of
// simply being added. In the default configuration, the text in the tab for
// pending items is shown in italics.
var 
// Extended: A container for presenting content in the center of the workspace.
// Panes can contain multiple items, one of which is *active* at a given time.
// The view corresponding to the active item is displayed in the interface. In
// the default configuration, tabs are also displayed for each item.
//
// Each pane may also contain one *pending* item. When a pending item is added
// to a pane, it will replace the currently pending item, if any, instead of
// simply being added. In the default configuration, the text in the tab for
// pending items is shown in italics.
Pane = /** @class */ (function () {
    function Pane(params) {
        this.alive = true;
        this.subscriptionsPerItem = new WeakMap();
        this.items = [];
        this.itemStack = [];
        this.container = null;
        this.setPendingItem = this.setPendingItem.bind(this);
        this.getPendingItem = this.getPendingItem.bind(this);
        this.clearPendingItem = this.clearPendingItem.bind(this);
        this.onItemDidTerminatePendingState = this.onItemDidTerminatePendingState.bind(this);
        this.saveItem = this.saveItem.bind(this);
        this.saveItemAs = this.saveItemAs.bind(this);
        this.id = params.id;
        if (this.id != null) {
            nextInstanceId = Math.max(nextInstanceId, this.id + 1);
        }
        else {
            this.id = nextInstanceId++;
        }
        this.activeItem = params.activeItem;
        this.focused = params.focused != null ? params.focused : false;
        this.applicationDelegate = params.applicationDelegate;
        this.notificationManager = params.notificationManager;
        this.config = params.config;
        this.deserializerManager = params.deserializerManager;
        this.viewRegistry = params.viewRegistry;
        this.emitter = new event_kit_1.Emitter();
        this.alive = true;
        this.subscriptionsPerItem = new WeakMap();
        this.items = [];
        this.itemStack = [];
        this.container = null;
        this.addItems((params.items || []).filter(function (item) { return item; }));
        if (!this.getActiveItem()) {
            this.setActiveItem(this.items[0]);
        }
        this.addItemsToStack(params.itemStackIndices || []);
        this.setFlexScale(params.flexScale || 1);
    }
    Pane.deserialize = function (state, _a) {
        var deserializers = _a.deserializers, applicationDelegate = _a.applicationDelegate, config = _a.config, notifications = _a.notifications, views = _a.views;
        var activeItemIndex = state.activeItemIndex;
        var activeItemURI = state.activeItemURI || state.activeItemUri;
        var items = [];
        for (var _i = 0, _b = state.items; _i < _b.length; _i++) {
            var itemState = _b[_i];
            var item = deserializers.deserialize(itemState);
            if (item) {
                items.push(item);
            }
        }
        state.items = items;
        state.activeItem = items[activeItemIndex];
        if (!state.activeItem && activeItemURI) {
            state.activeItem = state.items.find(function (item) {
                return typeof item.getURI === 'function' && item.getURI() === activeItemURI;
            });
        }
        return new Pane(Object.assign(state, {
            deserializerManager: deserializers,
            notificationManager: notifications,
            viewRegistry: views,
            config: config,
            applicationDelegate: applicationDelegate
        }));
    };
    Pane.prototype.inspect = function () {
        return "Pane " + this.id;
    };
    Pane.prototype.getElement = function () {
    };
    Pane.prototype.serialize = function () {
        var itemsToBeSerialized = this.items.filter(function (item) { return item && typeof item.serialize === 'function'; });
        var itemStackIndices = [];
        for (var _i = 0, _a = this.itemStack; _i < _a.length; _i++) {
            var item = _a[_i];
            if (typeof item.serialize === 'function') {
                itemStackIndices.push(itemsToBeSerialized.indexOf(item));
            }
        }
        var activeItemIndex = itemsToBeSerialized.indexOf(this.activeItem);
        return {
            deserializer: 'Pane',
            id: this.id,
            items: itemsToBeSerialized.map(function (item) { return item.serialize(); }),
            itemStackIndices: itemStackIndices,
            activeItemIndex: activeItemIndex,
            focused: this.focused,
            flexScale: this.flexScale
        };
    };
    Pane.prototype.getParent = function () { return this.parent; };
    Pane.prototype.setParent = function (parent) {
        this.parent = parent;
    };
    Pane.prototype.getContainer = function () { return this.container; };
    Pane.prototype.setContainer = function (container) {
        if (container && container !== this.container) {
            this.container = container;
            container.didAddPane({ pane: this });
        }
    };
    // Private: Determine whether the given item is allowed to exist in this pane.
    //
    // * `item` the Item
    //
    // Returns a {Boolean}.
    // Private: Determine whether the given item is allowed to exist in this pane.
    //
    // * `item` the Item
    //
    // Returns a {Boolean}.
    Pane.prototype.isItemAllowed = 
    // Private: Determine whether the given item is allowed to exist in this pane.
    //
    // * `item` the Item
    //
    // Returns a {Boolean}.
    function (item) {
        if (typeof item.getAllowedLocations !== 'function') {
            return true;
        }
        else {
            return item.getAllowedLocations().includes(this.getContainer().getLocation());
        }
    };
    Pane.prototype.setFlexScale = function (flexScale) {
        this.flexScale = flexScale;
        return this.flexScale;
    };
    Pane.prototype.getFlexScale = function () { return this.flexScale; };
    Pane.prototype.increaseSize = function () { this.setFlexScale(this.getFlexScale() * 1.1); };
    Pane.prototype.decreaseSize = function () { this.setFlexScale(this.getFlexScale() / 1.1); };
    /*
    Section: Event Subscription
    */
    // Public: Invoke the given callback when the pane resizes
    //
    // The callback will be invoked when pane's flexScale property changes.
    // Use {::getFlexScale} to get the current value.
    //
    // * `callback` {Function} to be called when the pane is resized
    //   * `flexScale` {Number} representing the panes `flex-grow`; ability for a
    //     flex item to grow if necessary.
    //
    // Returns a {Disposable} on which '.dispose()' can be called to unsubscribe.
    /*
      Section: Event Subscription
      */
    // Public: Invoke the given callback when the pane resizes
    //
    // The callback will be invoked when pane's flexScale property changes.
    // Use {::getFlexScale} to get the current value.
    //
    // * `callback` {Function} to be called when the pane is resized
    //   * `flexScale` {Number} representing the panes `flex-grow`; ability for a
    //     flex item to grow if necessary.
    //
    // Returns a {Disposable} on which '.dispose()' can be called to unsubscribe.
    Pane.prototype.onDidChangeFlexScale = /*
      Section: Event Subscription
      */
    // Public: Invoke the given callback when the pane resizes
    //
    // The callback will be invoked when pane's flexScale property changes.
    // Use {::getFlexScale} to get the current value.
    //
    // * `callback` {Function} to be called when the pane is resized
    //   * `flexScale` {Number} representing the panes `flex-grow`; ability for a
    //     flex item to grow if necessary.
    //
    // Returns a {Disposable} on which '.dispose()' can be called to unsubscribe.
    function (callback) {
    };
    // Public: Invoke the given callback with the current and future values of
    // {::getFlexScale}.
    //
    // * `callback` {Function} to be called with the current and future values of
    //   the {::getFlexScale} property.
    //   * `flexScale` {Number} representing the panes `flex-grow`; ability for a
    //     flex item to grow if necessary.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Public: Invoke the given callback with the current and future values of
    // {::getFlexScale}.
    //
    // * `callback` {Function} to be called with the current and future values of
    //   the {::getFlexScale} property.
    //   * `flexScale` {Number} representing the panes `flex-grow`; ability for a
    //     flex item to grow if necessary.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    Pane.prototype.observeFlexScale = 
    // Public: Invoke the given callback with the current and future values of
    // {::getFlexScale}.
    //
    // * `callback` {Function} to be called with the current and future values of
    //   the {::getFlexScale} property.
    //   * `flexScale` {Number} representing the panes `flex-grow`; ability for a
    //     flex item to grow if necessary.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    function (callback) {
        callback(this.flexScale);
        return this.onDidChangeFlexScale(callback);
    };
    // Public: Invoke the given callback when the pane is activated.
    //
    // The given callback will be invoked whenever {::activate} is called on the
    // pane, even if it is already active at the time.
    //
    // * `callback` {Function} to be called when the pane is activated.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Public: Invoke the given callback when the pane is activated.
    //
    // The given callback will be invoked whenever {::activate} is called on the
    // pane, even if it is already active at the time.
    //
    // * `callback` {Function} to be called when the pane is activated.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    Pane.prototype.onDidActivate = 
    // Public: Invoke the given callback when the pane is activated.
    //
    // The given callback will be invoked whenever {::activate} is called on the
    // pane, even if it is already active at the time.
    //
    // * `callback` {Function} to be called when the pane is activated.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    function (callback) {
    };
    // Public: Invoke the given callback before the pane is destroyed.
    //
    // * `callback` {Function} to be called before the pane is destroyed.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Public: Invoke the given callback before the pane is destroyed.
    //
    // * `callback` {Function} to be called before the pane is destroyed.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    Pane.prototype.onWillDestroy = 
    // Public: Invoke the given callback before the pane is destroyed.
    //
    // * `callback` {Function} to be called before the pane is destroyed.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    function (callback) {
    };
    // Public: Invoke the given callback when the pane is destroyed.
    //
    // * `callback` {Function} to be called when the pane is destroyed.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Public: Invoke the given callback when the pane is destroyed.
    //
    // * `callback` {Function} to be called when the pane is destroyed.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    Pane.prototype.onDidDestroy = 
    // Public: Invoke the given callback when the pane is destroyed.
    //
    // * `callback` {Function} to be called when the pane is destroyed.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    function (callback) {
    };
    // Public: Invoke the given callback when the value of the {::isActive}
    // property changes.
    //
    // * `callback` {Function} to be called when the value of the {::isActive}
    //   property changes.
    //   * `active` {Boolean} indicating whether the pane is active.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Public: Invoke the given callback when the value of the {::isActive}
    // property changes.
    //
    // * `callback` {Function} to be called when the value of the {::isActive}
    //   property changes.
    //   * `active` {Boolean} indicating whether the pane is active.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    Pane.prototype.onDidChangeActive = 
    // Public: Invoke the given callback when the value of the {::isActive}
    // property changes.
    //
    // * `callback` {Function} to be called when the value of the {::isActive}
    //   property changes.
    //   * `active` {Boolean} indicating whether the pane is active.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    function (callback) {
        var _this = this;
        return this.container.onDidChangeActivePane(function (activePane) {
            var isActive = _this === activePane;
            callback(isActive);
        });
    };
    // Public: Invoke the given callback with the current and future values of the
    // {::isActive} property.
    //
    // * `callback` {Function} to be called with the current and future values of
    //   the {::isActive} property.
    //   * `active` {Boolean} indicating whether the pane is active.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Public: Invoke the given callback with the current and future values of the
    // {::isActive} property.
    //
    // * `callback` {Function} to be called with the current and future values of
    //   the {::isActive} property.
    //   * `active` {Boolean} indicating whether the pane is active.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    Pane.prototype.observeActive = 
    // Public: Invoke the given callback with the current and future values of the
    // {::isActive} property.
    //
    // * `callback` {Function} to be called with the current and future values of
    //   the {::isActive} property.
    //   * `active` {Boolean} indicating whether the pane is active.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    function (callback) {
        callback(this.isActive());
        return this.onDidChangeActive(callback);
    };
    // Public: Invoke the given callback when an item is added to the pane.
    //
    // * `callback` {Function} to be called with when items are added.
    //   * `event` {Object} with the following keys:
    //     * `item` The added pane item.
    //     * `index` {Number} indicating where the item is located.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Public: Invoke the given callback when an item is added to the pane.
    //
    // * `callback` {Function} to be called with when items are added.
    //   * `event` {Object} with the following keys:
    //     * `item` The added pane item.
    //     * `index` {Number} indicating where the item is located.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    Pane.prototype.onDidAddItem = 
    // Public: Invoke the given callback when an item is added to the pane.
    //
    // * `callback` {Function} to be called with when items are added.
    //   * `event` {Object} with the following keys:
    //     * `item` The added pane item.
    //     * `index` {Number} indicating where the item is located.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    function (callback) {
        return this.emitter.on('did-add-item', callback);
    };
    // Public: Invoke the given callback when an item is removed from the pane.
    //
    // * `callback` {Function} to be called with when items are removed.
    //   * `event` {Object} with the following keys:
    //     * `item` The removed pane item.
    //     * `index` {Number} indicating where the item was located.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Public: Invoke the given callback when an item is removed from the pane.
    //
    // * `callback` {Function} to be called with when items are removed.
    //   * `event` {Object} with the following keys:
    //     * `item` The removed pane item.
    //     * `index` {Number} indicating where the item was located.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    Pane.prototype.onDidRemoveItem = 
    // Public: Invoke the given callback when an item is removed from the pane.
    //
    // * `callback` {Function} to be called with when items are removed.
    //   * `event` {Object} with the following keys:
    //     * `item` The removed pane item.
    //     * `index` {Number} indicating where the item was located.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    function (callback) {
        return this.emitter.on('did-remove-item', callback);
    };
    // Public: Invoke the given callback before an item is removed from the pane.
    //
    // * `callback` {Function} to be called with when items are removed.
    //   * `event` {Object} with the following keys:
    //     * `item` The pane item to be removed.
    //     * `index` {Number} indicating where the item is located.
    // Public: Invoke the given callback before an item is removed from the pane.
    //
    // * `callback` {Function} to be called with when items are removed.
    //   * `event` {Object} with the following keys:
    //     * `item` The pane item to be removed.
    //     * `index` {Number} indicating where the item is located.
    Pane.prototype.onWillRemoveItem = 
    // Public: Invoke the given callback before an item is removed from the pane.
    //
    // * `callback` {Function} to be called with when items are removed.
    //   * `event` {Object} with the following keys:
    //     * `item` The pane item to be removed.
    //     * `index` {Number} indicating where the item is located.
    function (callback) {
    };
    // Public: Invoke the given callback when an item is moved within the pane.
    //
    // * `callback` {Function} to be called with when items are moved.
    //   * `event` {Object} with the following keys:
    //     * `item` The removed pane item.
    //     * `oldIndex` {Number} indicating where the item was located.
    //     * `newIndex` {Number} indicating where the item is now located.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Public: Invoke the given callback when an item is moved within the pane.
    //
    // * `callback` {Function} to be called with when items are moved.
    //   * `event` {Object} with the following keys:
    //     * `item` The removed pane item.
    //     * `oldIndex` {Number} indicating where the item was located.
    //     * `newIndex` {Number} indicating where the item is now located.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    Pane.prototype.onDidMoveItem = 
    // Public: Invoke the given callback when an item is moved within the pane.
    //
    // * `callback` {Function} to be called with when items are moved.
    //   * `event` {Object} with the following keys:
    //     * `item` The removed pane item.
    //     * `oldIndex` {Number} indicating where the item was located.
    //     * `newIndex` {Number} indicating where the item is now located.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    function (callback) {
    };
    // Public: Invoke the given callback with all current and future items.
    //
    // * `callback` {Function} to be called with current and future items.
    //   * `item` An item that is present in {::getItems} at the time of
    //     subscription or that is added at some later time.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Public: Invoke the given callback with all current and future items.
    //
    // * `callback` {Function} to be called with current and future items.
    //   * `item` An item that is present in {::getItems} at the time of
    //     subscription or that is added at some later time.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    Pane.prototype.observeItems = 
    // Public: Invoke the given callback with all current and future items.
    //
    // * `callback` {Function} to be called with current and future items.
    //   * `item` An item that is present in {::getItems} at the time of
    //     subscription or that is added at some later time.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    function (callback) {
        for (var _i = 0, _a = this.getItems(); _i < _a.length; _i++) {
            var item = _a[_i];
            callback(item);
        }
        return this.onDidAddItem(function (_a) {
            var item = _a.item;
            return callback(item);
        });
    };
    // 公有方法： 当{::getActiveItem}值变换前调用。
    // 公有方法： 当{::getActiveItem}值变换前调用。
    Pane.prototype.onDoingChangeActiveItem = 
    // 公有方法： 当{::getActiveItem}值变换前调用。
    function (callback) {
        return this.emitter.on('doing-change-active-item', callback);
    };
    // Public: Invoke the given callback when the value of {::getActiveItem}
    // changes.
    //
    // * `callback` {Function} to be called with when the active item changes.
    //   * `activeItem` The current active item.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Public: Invoke the given callback when the value of {::getActiveItem}
    // changes.
    //
    // * `callback` {Function} to be called with when the active item changes.
    //   * `activeItem` The current active item.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    Pane.prototype.onDidChangeActiveItem = 
    // Public: Invoke the given callback when the value of {::getActiveItem}
    // changes.
    //
    // * `callback` {Function} to be called with when the active item changes.
    //   * `activeItem` The current active item.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    function (callback) {
        return this.emitter.on('did-change-active-item', callback);
    };
    // Public: Invoke the given callback when {::activateNextRecentlyUsedItem}
    // has been called, either initiating or continuing a forward MRU traversal of
    // pane items.
    //
    // * `callback` {Function} to be called with when the active item changes.
    //   * `nextRecentlyUsedItem` The next MRU item, now being set active
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Public: Invoke the given callback when {::activateNextRecentlyUsedItem}
    // has been called, either initiating or continuing a forward MRU traversal of
    // pane items.
    //
    // * `callback` {Function} to be called with when the active item changes.
    //   * `nextRecentlyUsedItem` The next MRU item, now being set active
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    Pane.prototype.onChooseNextMRUItem = 
    // Public: Invoke the given callback when {::activateNextRecentlyUsedItem}
    // has been called, either initiating or continuing a forward MRU traversal of
    // pane items.
    //
    // * `callback` {Function} to be called with when the active item changes.
    //   * `nextRecentlyUsedItem` The next MRU item, now being set active
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    function (callback) {
    };
    // Public: Invoke the given callback when {::activatePreviousRecentlyUsedItem}
    // has been called, either initiating or continuing a reverse MRU traversal of
    // pane items.
    //
    // * `callback` {Function} to be called with when the active item changes.
    //   * `previousRecentlyUsedItem` The previous MRU item, now being set active
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Public: Invoke the given callback when {::activatePreviousRecentlyUsedItem}
    // has been called, either initiating or continuing a reverse MRU traversal of
    // pane items.
    //
    // * `callback` {Function} to be called with when the active item changes.
    //   * `previousRecentlyUsedItem` The previous MRU item, now being set active
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    Pane.prototype.onChooseLastMRUItem = 
    // Public: Invoke the given callback when {::activatePreviousRecentlyUsedItem}
    // has been called, either initiating or continuing a reverse MRU traversal of
    // pane items.
    //
    // * `callback` {Function} to be called with when the active item changes.
    //   * `previousRecentlyUsedItem` The previous MRU item, now being set active
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    function (callback) {
    };
    // Public: Invoke the given callback when {::moveActiveItemToTopOfStack}
    // has been called, terminating an MRU traversal of pane items and moving the
    // current active item to the top of the stack. Typically bound to a modifier
    // (e.g. CTRL) key up event.
    //
    // * `callback` {Function} to be called with when the MRU traversal is done.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Public: Invoke the given callback when {::moveActiveItemToTopOfStack}
    // has been called, terminating an MRU traversal of pane items and moving the
    // current active item to the top of the stack. Typically bound to a modifier
    // (e.g. CTRL) key up event.
    //
    // * `callback` {Function} to be called with when the MRU traversal is done.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    Pane.prototype.onDoneChoosingMRUItem = 
    // Public: Invoke the given callback when {::moveActiveItemToTopOfStack}
    // has been called, terminating an MRU traversal of pane items and moving the
    // current active item to the top of the stack. Typically bound to a modifier
    // (e.g. CTRL) key up event.
    //
    // * `callback` {Function} to be called with when the MRU traversal is done.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    function (callback) {
    };
    // Public: Invoke the given callback with the current and future values of
    // {::getActiveItem}.
    //
    // * `callback` {Function} to be called with the current and future active
    //   items.
    //   * `activeItem` The current active item.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Public: Invoke the given callback with the current and future values of
    // {::getActiveItem}.
    //
    // * `callback` {Function} to be called with the current and future active
    //   items.
    //   * `activeItem` The current active item.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    Pane.prototype.observeActiveItem = 
    // Public: Invoke the given callback with the current and future values of
    // {::getActiveItem}.
    //
    // * `callback` {Function} to be called with the current and future active
    //   items.
    //   * `activeItem` The current active item.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    function (callback) {
        callback(this.getActiveItem());
        return this.onDidChangeActiveItem(callback);
    };
    // Public: Invoke the given callback before items are destroyed.
    //
    // * `callback` {Function} to be called before items are destroyed.
    //   * `event` {Object} with the following keys:
    //     * `item` The item that will be destroyed.
    //     * `index` The location of the item.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to
    // unsubscribe.
    // Public: Invoke the given callback before items are destroyed.
    //
    // * `callback` {Function} to be called before items are destroyed.
    //   * `event` {Object} with the following keys:
    //     * `item` The item that will be destroyed.
    //     * `index` The location of the item.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to
    // unsubscribe.
    Pane.prototype.onWillDestroyItem = 
    // Public: Invoke the given callback before items are destroyed.
    //
    // * `callback` {Function} to be called before items are destroyed.
    //   * `event` {Object} with the following keys:
    //     * `item` The item that will be destroyed.
    //     * `index` The location of the item.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to
    // unsubscribe.
    function (callback) {
    };
    // Called by the view layer to indicate that the pane has gained focus.
    // Called by the view layer to indicate that the pane has gained focus.
    Pane.prototype.focus = 
    // Called by the view layer to indicate that the pane has gained focus.
    function () {
        this.focused = true;
        return this.activate();
    };
    // Called by the view layer to indicate that the pane has lost focus.
    // Called by the view layer to indicate that the pane has lost focus.
    Pane.prototype.blur = 
    // Called by the view layer to indicate that the pane has lost focus.
    function () {
        this.focused = false;
        return true; // if this is called from an event handler, don't cancel it
    };
    Pane.prototype.isFocused = function () { return this.focused; };
    Pane.prototype.getPanes = function () { return [this]; };
    Pane.prototype.unsubscribeFromItem = function (item) {
        var subscription = this.subscriptionsPerItem.get(item);
        if (subscription) {
            subscription.dispose();
            this.subscriptionsPerItem.delete(item);
        }
    };
    /*
    Section: Items
    */
    // Public: Get the items in this pane.
    //
    // Returns an {Array} of items.
    /*
      Section: Items
      */
    // Public: Get the items in this pane.
    //
    // Returns an {Array} of items.
    Pane.prototype.getItems = /*
      Section: Items
      */
    // Public: Get the items in this pane.
    //
    // Returns an {Array} of items.
    function () {
        return this.items.slice();
    };
    // Public: Get the active pane item in this pane.
    //
    // Returns a pane item.
    // Public: Get the active pane item in this pane.
    //
    // Returns a pane item.
    Pane.prototype.getActiveItem = 
    // Public: Get the active pane item in this pane.
    //
    // Returns a pane item.
    function () { return this.activeItem; };
    Pane.prototype.setActiveItem = function (activeItem, options) {
        var modifyStack = options && options.modifyStack;
        if (activeItem !== this.activeItem) {
            if (modifyStack !== false) {
                this.addItemToStack(activeItem);
            }
            this.emitter.emit('doing-change-active-item', this.activeItem);
            this.activeItem = activeItem;
            this.emitter.emit('did-change-active-item', this.activeItem);
            if (this.container) {
                this.container.didChangeActiveItemOnPane(this, this.activeItem);
            }
        }
        return this.activeItem;
    };
    // Build the itemStack after deserializing
    // Build the itemStack after deserializing
    Pane.prototype.addItemsToStack = 
    // Build the itemStack after deserializing
    function (itemStackIndices) {
        if (this.items.length > 0) {
            if (itemStackIndices.length !== this.items.length || itemStackIndices.includes(-1)) {
                itemStackIndices = this.items.map(function (item, i) { return i; });
            }
            for (var _i = 0, itemStackIndices_1 = itemStackIndices; _i < itemStackIndices_1.length; _i++) {
                var itemIndex = itemStackIndices_1[_i];
                this.addItemToStack(this.items[itemIndex]);
            }
        }
    };
    // Add item (or move item) to the end of the itemStack
    // Add item (or move item) to the end of the itemStack
    Pane.prototype.addItemToStack = 
    // Add item (or move item) to the end of the itemStack
    function (newItem) {
        if (newItem == null) {
            return;
        }
        var index = this.itemStack.indexOf(newItem);
        if (index !== -1) {
            this.itemStack.splice(index, 1);
        }
        return this.itemStack.push(newItem);
    };
    // Public: Return the item at the given index.
    //
    // * `index` {Number}
    //
    // Returns an item or `null` if no item exists at the given index.
    // Public: Return the item at the given index.
    //
    // * `index` {Number}
    //
    // Returns an item or `null` if no item exists at the given index.
    Pane.prototype.itemAtIndex = 
    // Public: Return the item at the given index.
    //
    // * `index` {Number}
    //
    // Returns an item or `null` if no item exists at the given index.
    function (index) {
        return this.items[index];
    };
    // Makes the next item in the itemStack active.
    // Makes the next item in the itemStack active.
    Pane.prototype.activateNextRecentlyUsedItem = 
    // Makes the next item in the itemStack active.
    function () {
        if (this.items.length > 1) {
            if (this.itemStackIndex == null) {
                this.itemStackIndex = this.itemStack.length - 1;
            }
            if (this.itemStackIndex === 0) {
                this.itemStackIndex = this.itemStack.length;
            }
            this.itemStackIndex--;
            var nextRecentlyUsedItem = this.itemStack[this.itemStackIndex];
            this.setActiveItem(nextRecentlyUsedItem, { modifyStack: false });
        }
    };
    // Makes the previous item in the itemStack active.
    // Makes the previous item in the itemStack active.
    Pane.prototype.activatePreviousRecentlyUsedItem = 
    // Makes the previous item in the itemStack active.
    function () {
        if (this.items.length > 1) {
            if (this.itemStackIndex + 1 === this.itemStack.length || this.itemStackIndex == null) {
                this.itemStackIndex = -1;
            }
            this.itemStackIndex++;
            var previousRecentlyUsedItem = this.itemStack[this.itemStackIndex];
            this.setActiveItem(previousRecentlyUsedItem, { modifyStack: false });
        }
    };
    // Moves the active item to the end of the itemStack once the ctrl key is lifted
    // Moves the active item to the end of the itemStack once the ctrl key is lifted
    Pane.prototype.moveActiveItemToTopOfStack = 
    // Moves the active item to the end of the itemStack once the ctrl key is lifted
    function () {
        delete this.itemStackIndex;
        this.addItemToStack(this.activeItem);
    };
    // Public: Makes the next item active.
    // Public: Makes the next item active.
    Pane.prototype.activateNextItem = 
    // Public: Makes the next item active.
    function () {
        var index = this.getActiveItemIndex();
        if (index < (this.items.length - 1)) {
            this.activateItemAtIndex(index + 1);
        }
        else {
            this.activateItemAtIndex(0);
        }
    };
    // Public: Makes the previous item active.
    // Public: Makes the previous item active.
    Pane.prototype.activatePreviousItem = 
    // Public: Makes the previous item active.
    function () {
        var index = this.getActiveItemIndex();
        if (index > 0) {
            this.activateItemAtIndex(index - 1);
        }
        else {
            this.activateItemAtIndex(this.items.length - 1);
        }
    };
    Pane.prototype.activateLastItem = function () {
        this.activateItemAtIndex(this.items.length - 1);
    };
    // Public: Move the active tab to the right.
    // Public: Move the active tab to the right.
    Pane.prototype.moveItemRight = 
    // Public: Move the active tab to the right.
    function () {
        var index = this.getActiveItemIndex();
        var rightItemIndex = index + 1;
        if (rightItemIndex <= this.items.length - 1) {
            this.moveItem(this.getActiveItem(), rightItemIndex);
        }
    };
    // Public: Move the active tab to the left
    // Public: Move the active tab to the left
    Pane.prototype.moveItemLeft = 
    // Public: Move the active tab to the left
    function () {
        var index = this.getActiveItemIndex();
        var leftItemIndex = index - 1;
        if (leftItemIndex >= 0) {
            return this.moveItem(this.getActiveItem(), leftItemIndex);
        }
    };
    // Public: Get the index of the active item.
    //
    // Returns a {Number}.
    // Public: Get the index of the active item.
    //
    // Returns a {Number}.
    Pane.prototype.getActiveItemIndex = 
    // Public: Get the index of the active item.
    //
    // Returns a {Number}.
    function () {
        return this.items.indexOf(this.activeItem);
    };
    // Public: Activate the item at the given index.
    //
    // * `index` {Number}
    // Public: Activate the item at the given index.
    //
    // * `index` {Number}
    Pane.prototype.activateItemAtIndex = 
    // Public: Activate the item at the given index.
    //
    // * `index` {Number}
    function (index) {
        var item = this.itemAtIndex(index) || this.getActiveItem();
        return this.setActiveItem(item);
    };
    // Public: Make the given item *active*, causing it to be displayed by
    // the pane's view.
    //
    // * `item` The item to activate
    // * `options` (optional) {Object}
    //   * `pending` (optional) {Boolean} indicating that the item should be added
    //     in a pending state if it does not yet exist in the pane. Existing pending
    //     items in a pane are replaced with new pending items when they are opened.
    // Public: Make the given item *active*, causing it to be displayed by
    // the pane's view.
    //
    // * `item` The item to activate
    // * `options` (optional) {Object}
    //   * `pending` (optional) {Boolean} indicating that the item should be added
    //     in a pending state if it does not yet exist in the pane. Existing pending
    //     items in a pane are replaced with new pending items when they are opened.
    Pane.prototype.activateItem = 
    // Public: Make the given item *active*, causing it to be displayed by
    // the pane's view.
    //
    // * `item` The item to activate
    // * `options` (optional) {Object}
    //   * `pending` (optional) {Boolean} indicating that the item should be added
    //     in a pending state if it does not yet exist in the pane. Existing pending
    //     items in a pane are replaced with new pending items when they are opened.
    function (item, options) {
        if (options === void 0) { options = {}; }
        if (item) {
            var index = (this.getPendingItem() === this.activeItem)
                ? this.getActiveItemIndex()
                : this.getActiveItemIndex() + 1;
            this.addItem(item, Object.assign({}, options, { index: index }));
            this.setActiveItem(item);
        }
    };
    // Public: Add the given item to the pane.
    //
    // * `item` The item to add. It can be a model with an associated view or a
    //   view.
    // * `options` (optional) {Object}
    //   * `index` (optional) {Number} indicating the index at which to add the item.
    //     If omitted, the item is added after the current active item.
    //   * `pending` (optional) {Boolean} indicating that the item should be
    //     added in a pending state. Existing pending items in a pane are replaced with
    //     new pending items when they are opened.
    //
    // Returns the added item.
    // Public: Add the given item to the pane.
    //
    // * `item` The item to add. It can be a model with an associated view or a
    //   view.
    // * `options` (optional) {Object}
    //   * `index` (optional) {Number} indicating the index at which to add the item.
    //     If omitted, the item is added after the current active item.
    //   * `pending` (optional) {Boolean} indicating that the item should be
    //     added in a pending state. Existing pending items in a pane are replaced with
    //     new pending items when they are opened.
    //
    // Returns the added item.
    Pane.prototype.addItem = 
    // Public: Add the given item to the pane.
    //
    // * `item` The item to add. It can be a model with an associated view or a
    //   view.
    // * `options` (optional) {Object}
    //   * `index` (optional) {Number} indicating the index at which to add the item.
    //     If omitted, the item is added after the current active item.
    //   * `pending` (optional) {Boolean} indicating that the item should be
    //     added in a pending state. Existing pending items in a pane are replaced with
    //     new pending items when they are opened.
    //
    // Returns the added item.
    function (item, options) {
        if (options === void 0) { options = {}; }
        // Backward compat with old API:
        //   addItem(item, index=@getActiveItemIndex() + 1)
        if (typeof options === 'number') {
            options = { index: options };
        }
        var index = options.index != null ? options.index : this.getActiveItemIndex() + 1;
        var moved = options.moved != null ? options.moved : false;
        var pending = options.pending != null ? options.pending : false;
        if (!item || typeof item !== 'object') {
            throw new Error("Pane items must be objects. Attempted to add item " + item + ".");
        }
        if (typeof item.isDestroyed === 'function' && item.isDestroyed()) {
            throw new Error("Adding a pane item with URI\n      '" + (typeof item.getURI === 'function' && item.getURI()) + "' that has already been destroyed");
        }
        if (this.items.find(function (it) { return it === item; })) {
            return;
        }
        if (typeof item.onDidDestroy === 'function') {
        }
        this.items.splice(index, 0, item);
        var lastPendingItem = this.getPendingItem();
        var replacingPendingItem = lastPendingItem != null && !moved;
        if (replacingPendingItem) {
            this.pendingItem = null;
        }
        if (pending) {
            this.setPendingItem(item);
        }
        this.emitter.emit('did-add-item', { item: item, index: index, moved: moved });
        if (!moved) {
            if (this.container) {
                this.container.didAddPaneItem(item, this, index);
            }
        }
        if (replacingPendingItem) {
            this.destroyItem(lastPendingItem);
        }
        if (!this.getActiveItem()) {
            this.setActiveItem(item);
        }
        return item;
    };
    Pane.prototype.setPendingItem = function (item) {
        if (this.pendingItem !== item) {
            var mostRecentPendingItem = this.pendingItem;
            this.pendingItem = item;
        }
    };
    Pane.prototype.getPendingItem = function () {
        return this.pendingItem || null;
    };
    Pane.prototype.clearPendingItem = function () {
        this.setPendingItem(null);
    };
    Pane.prototype.onItemDidTerminatePendingState = function (callback) {
    };
    // Public: Add the given items to the pane.
    //
    // * `items` An {Array} of items to add. Items can be views or models with
    //   associated views. Any objects that are already present in the pane's
    //   current items will not be added again.
    // * `index` (optional) {Number} index at which to add the items. If omitted,
    //   the item is #   added after the current active item.
    //
    // Returns an {Array} of added items.
    // Public: Add the given items to the pane.
    //
    // * `items` An {Array} of items to add. Items can be views or models with
    //   associated views. Any objects that are already present in the pane's
    //   current items will not be added again.
    // * `index` (optional) {Number} index at which to add the items. If omitted,
    //   the item is #   added after the current active item.
    //
    // Returns an {Array} of added items.
    Pane.prototype.addItems = 
    // Public: Add the given items to the pane.
    //
    // * `items` An {Array} of items to add. Items can be views or models with
    //   associated views. Any objects that are already present in the pane's
    //   current items will not be added again.
    // * `index` (optional) {Number} index at which to add the items. If omitted,
    //   the item is #   added after the current active item.
    //
    // Returns an {Array} of added items.
    function (items, index) {
        var _this = this;
        if (index === void 0) { index = this.getActiveItemIndex() + 1; }
        items = items.filter(function (item) { return !_this.items.find(function (it) { return it === item; }); });
        for (var i = 0; i < items.length; i++) {
            var item = items[i];
            this.addItem(item, { index: index + i });
        }
        return items;
    };
    Pane.prototype.removeItem = function (item, moved) {
        if (moved === void 0) { moved = false; }
        var index = this.items.indexOf(item);
        if (index === -1) {
            return;
        }
        if (this.getPendingItem() === item) {
            this.pendingItem = null;
        }
        this.removeItemFromStack(item);
        // this.emitter.emit('will-remove-item', {item, index, destroyed: !moved, moved});
        this.unsubscribeFromItem(item);
        if (item === this.activeItem) {
            if (this.items.length === 1) {
                this.setActiveItem(undefined);
            }
            else if (index === 0) {
                this.activateNextItem();
            }
            else {
                this.activatePreviousItem();
            }
        }
        this.items.splice(index, 1);
        this.emitter.emit('did-remove-item', { item: item, index: index, destroyed: !moved, moved: moved });
        if (!moved && this.container) {
            this.container.didDestroyPaneItem({ item: item, index: index, pane: this });
        }
        if (this.items.length === 0 && this.config && this.config.get && this.config.get('core.destroyEmptyPanes')) {
            this.destroy();
        }
    };
    // Remove the given item from the itemStack.
    //
    // * `item` The item to remove.
    // * `index` {Number} indicating the index to which to remove the item from the itemStack.
    // Remove the given item from the itemStack.
    //
    // * `item` The item to remove.
    // * `index` {Number} indicating the index to which to remove the item from the itemStack.
    Pane.prototype.removeItemFromStack = 
    // Remove the given item from the itemStack.
    //
    // * `item` The item to remove.
    // * `index` {Number} indicating the index to which to remove the item from the itemStack.
    function (item) {
        var index = this.itemStack.indexOf(item);
        if (index !== -1) {
            this.itemStack.splice(index, 1);
        }
    };
    // Public: Move the given item to the given index.
    //
    // * `item` The item to move.
    // * `index` {Number} indicating the index to which to move the item.
    // Public: Move the given item to the given index.
    //
    // * `item` The item to move.
    // * `index` {Number} indicating the index to which to move the item.
    Pane.prototype.moveItem = 
    // Public: Move the given item to the given index.
    //
    // * `item` The item to move.
    // * `index` {Number} indicating the index to which to move the item.
    function (item, newIndex) {
        var oldIndex = this.items.indexOf(item);
        this.items.splice(oldIndex, 1);
        this.items.splice(newIndex, 0, item);
    };
    // Public: Move the given item to the given index on another pane.
    //
    // * `item` The item to move.
    // * `pane` {Pane} to which to move the item.
    // * `index` {Number} indicating the index to which to move the item in the
    //   given pane.
    // Public: Move the given item to the given index on another pane.
    //
    // * `item` The item to move.
    // * `pane` {Pane} to which to move the item.
    // * `index` {Number} indicating the index to which to move the item in the
    //   given pane.
    Pane.prototype.moveItemToPane = 
    // Public: Move the given item to the given index on another pane.
    //
    // * `item` The item to move.
    // * `pane` {Pane} to which to move the item.
    // * `index` {Number} indicating the index to which to move the item in the
    //   given pane.
    function (item, pane, index) {
        this.removeItem(item, true);
        return pane.addItem(item, { index: index, moved: true });
    };
    // Public: Destroy the active item and activate the next item.
    //
    // Returns a {Promise} that resolves when the item is destroyed.
    // Public: Destroy the active item and activate the next item.
    //
    // Returns a {Promise} that resolves when the item is destroyed.
    Pane.prototype.destroyActiveItem = 
    // Public: Destroy the active item and activate the next item.
    //
    // Returns a {Promise} that resolves when the item is destroyed.
    function () {
        return this.destroyItem(this.activeItem);
    };
    // Public: Destroy the given item.
    //
    // If the item is active, the next item will be activated. If the item is the
    // last item, the pane will be destroyed if the `core.destroyEmptyPanes` config
    // setting is `true`.
    //
    // * `item` Item to destroy
    // * `force` (optional) {Boolean} Destroy the item without prompting to save
    //    it, even if the item's `isPermanentDockItem` method returns true.
    //
    // Returns a {Promise} that resolves with a {Boolean} indicating whether or not
    // the item was destroyed.
    // Public: Destroy the given item.
    //
    // If the item is active, the next item will be activated. If the item is the
    // last item, the pane will be destroyed if the `core.destroyEmptyPanes` config
    // setting is `true`.
    //
    // * `item` Item to destroy
    // * `force` (optional) {Boolean} Destroy the item without prompting to save
    //    it, even if the item's `isPermanentDockItem` method returns true.
    //
    // Returns a {Promise} that resolves with a {Boolean} indicating whether or not
    // the item was destroyed.
    Pane.prototype.destroyItem = 
    // Public: Destroy the given item.
    //
    // If the item is active, the next item will be activated. If the item is the
    // last item, the pane will be destroyed if the `core.destroyEmptyPanes` config
    // setting is `true`.
    //
    // * `item` Item to destroy
    // * `force` (optional) {Boolean} Destroy the item without prompting to save
    //    it, even if the item's `isPermanentDockItem` method returns true.
    //
    // Returns a {Promise} that resolves with a {Boolean} indicating whether or not
    // the item was destroyed.
    function (item, force) {
        return __awaiter(this, void 0, void 0, function () {
            var index;
            return __generator(this, function (_a) {
                index = this.items.indexOf(item);
                if (index === -1) {
                    return [2 /*return*/, false];
                }
                if (!force &&
                    typeof item.isPermanentDockItem === 'function' && item.isPermanentDockItem() &&
                    (!this.container || this.container.getLocation() !== 'center')) {
                    return [2 /*return*/, false];
                }
                // In the case where there are no `onWillDestroyPaneItem` listeners, preserve the old behavior
                // where `Pane.destroyItem` and callers such as `Pane.close` take effect synchronously.
                this.removeItem(item, false);
                if (typeof item.destroy === 'function') {
                    item.destroy();
                }
                return [2 /*return*/, true];
            });
        });
    };
    // Public: Destroy all items.
    // Public: Destroy all items.
    Pane.prototype.destroyItems = 
    // Public: Destroy all items.
    function () {
        var _this = this;
        return Promise.all(this.getItems().map(function (item) { return _this.destroyItem(item); }));
    };
    // Public: Destroy all items except for the active item.
    // Public: Destroy all items except for the active item.
    Pane.prototype.destroyInactiveItems = 
    // Public: Destroy all items except for the active item.
    function () {
        var _this = this;
        return Promise.all(this.getItems()
            .filter(function (item) { return item !== _this.activeItem; })
            .map(function (item) { return _this.destroyItem(item); }));
    };
    Pane.prototype.promptToSaveItem = function (item, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        if (typeof item.shouldPromptToSave !== 'function' || !item.shouldPromptToSave(options)) {
            return Promise.resolve(true);
        }
        var uri;
        if (typeof item.getURI === 'function') {
            uri = item.getURI();
        }
        else if (typeof item.getUri === 'function') {
            uri = item.getUri();
        }
        else {
            return Promise.resolve(true);
        }
        var title = (typeof item.getTitle === 'function' && item.getTitle()) || uri;
        var saveDialog = function (saveButtonText, saveFn, message) {
            var chosen = _this.applicationDelegate.confirm({
                message: message,
                detailedMessage: 'Your changes will be lost if you close this item without saving.',
                buttons: [saveButtonText, 'Cancel', '&Don\'t Save']
            });
            switch (chosen) {
                case 0:
                    return new Promise(function (resolve) {
                        return saveFn(item, function (error) {
                            if (error instanceof SaveCancelledError) {
                                resolve(false);
                            }
                            else if (error) {
                                saveDialog('Save as', _this.saveItemAs, "'" + title + "' could not be saved.\nError: " + _this.getMessageForErrorCode(error.code)).then(resolve);
                            }
                            else {
                                resolve(true);
                            }
                        });
                    });
                case 1:
                    return Promise.resolve(false);
                case 2:
                    return Promise.resolve(true);
            }
        };
        return saveDialog('Save', this.saveItem, "'" + title + "' has changes, do you want to save them?");
    };
    // Public: Save the active item.
    // Public: Save the active item.
    Pane.prototype.saveActiveItem = 
    // Public: Save the active item.
    function (nextAction) {
        return this.saveItem(this.getActiveItem(), nextAction);
    };
    // Public: Prompt the user for a location and save the active item with the
    // path they select.
    //
    // * `nextAction` (optional) {Function} which will be called after the item is
    //   successfully saved.
    //
    // Returns a {Promise} that resolves when the save is complete
    // Public: Prompt the user for a location and save the active item with the
    // path they select.
    //
    // * `nextAction` (optional) {Function} which will be called after the item is
    //   successfully saved.
    //
    // Returns a {Promise} that resolves when the save is complete
    Pane.prototype.saveActiveItemAs = 
    // Public: Prompt the user for a location and save the active item with the
    // path they select.
    //
    // * `nextAction` (optional) {Function} which will be called after the item is
    //   successfully saved.
    //
    // Returns a {Promise} that resolves when the save is complete
    function (nextAction) {
        return this.saveItemAs(this.getActiveItem(), nextAction);
    };
    // Public: Save the given item.
    //
    // * `item` The item to save.
    // * `nextAction` (optional) {Function} which will be called with no argument
    //   after the item is successfully saved, or with the error if it failed.
    //   The return value will be that of `nextAction` or `undefined` if it was not
    //   provided
    //
    // Returns a {Promise} that resolves when the save is complete
    // Public: Save the given item.
    //
    // * `item` The item to save.
    // * `nextAction` (optional) {Function} which will be called with no argument
    //   after the item is successfully saved, or with the error if it failed.
    //   The return value will be that of `nextAction` or `undefined` if it was not
    //   provided
    //
    // Returns a {Promise} that resolves when the save is complete
    Pane.prototype.saveItem = 
    // Public: Save the given item.
    //
    // * `item` The item to save.
    // * `nextAction` (optional) {Function} which will be called with no argument
    //   after the item is successfully saved, or with the error if it failed.
    //   The return value will be that of `nextAction` or `undefined` if it was not
    //   provided
    //
    // Returns a {Promise} that resolves when the save is complete
    function (item, nextAction) {
        var _this = this;
        if (!item) {
            return Promise.resolve();
        }
        var itemURI;
        if (typeof item.getURI === 'function') {
            itemURI = item.getURI();
        }
        else if (typeof item.getUri === 'function') {
            itemURI = item.getUri();
        }
        if (itemURI != null) {
            if (typeof item.save === 'function') {
                return promisify(function () { return item.save(); })
                    .then(function () {
                    if (nextAction) {
                        nextAction();
                    }
                })
                    .catch(function (error) {
                    if (nextAction) {
                        nextAction(error);
                    }
                    else {
                        _this.handleSaveError(error, item);
                    }
                });
            }
            else if (nextAction) {
                nextAction();
                return Promise.resolve();
            }
        }
        else {
            return this.saveItemAs(item, nextAction);
        }
    };
    // Public: Prompt the user for a location and save the active item with the
    // path they select.
    //
    // * `item` The item to save.
    // * `nextAction` (optional) {Function} which will be called with no argument
    //   after the item is successfully saved, or with the error if it failed.
    //   The return value will be that of `nextAction` or `undefined` if it was not
    //   provided
    // Public: Prompt the user for a location and save the active item with the
    // path they select.
    //
    // * `item` The item to save.
    // * `nextAction` (optional) {Function} which will be called with no argument
    //   after the item is successfully saved, or with the error if it failed.
    //   The return value will be that of `nextAction` or `undefined` if it was not
    //   provided
    Pane.prototype.saveItemAs = 
    // Public: Prompt the user for a location and save the active item with the
    // path they select.
    //
    // * `item` The item to save.
    // * `nextAction` (optional) {Function} which will be called with no argument
    //   after the item is successfully saved, or with the error if it failed.
    //   The return value will be that of `nextAction` or `undefined` if it was not
    //   provided
    function (item, nextAction) {
    };
    // Public: Save all items.
    // Public: Save all items.
    Pane.prototype.saveItems = 
    // Public: Save all items.
    function () {
    };
    // Public: Return the first item that matches the given URI or undefined if
    // none exists.
    //
    // * `uri` {String} containing a URI.
    // Public: Return the first item that matches the given URI or undefined if
    // none exists.
    //
    // * `uri` {String} containing a URI.
    Pane.prototype.itemForURI = 
    // Public: Return the first item that matches the given URI or undefined if
    // none exists.
    //
    // * `uri` {String} containing a URI.
    function (uri) {
        return this.items.find(function (item) {
            if (typeof item.getURI === 'function') {
                return item.getURI() === uri;
            }
            else if (typeof item.getUri === 'function') {
                return item.getUri() === uri;
            }
        });
    };
    // Public: Activate the first item that matches the given URI.
    //
    // * `uri` {String} containing a URI.
    //
    // Returns a {Boolean} indicating whether an item matching the URI was found.
    // Public: Activate the first item that matches the given URI.
    //
    // * `uri` {String} containing a URI.
    //
    // Returns a {Boolean} indicating whether an item matching the URI was found.
    Pane.prototype.activateItemForURI = 
    // Public: Activate the first item that matches the given URI.
    //
    // * `uri` {String} containing a URI.
    //
    // Returns a {Boolean} indicating whether an item matching the URI was found.
    function (uri) {
        var item = this.itemForURI(uri);
        if (item) {
            this.activateItem(item);
            return true;
        }
        else {
            return false;
        }
    };
    Pane.prototype.copyActiveItem = function () {
        if (this.activeItem && typeof this.activeItem.copy === 'function') {
            return this.activeItem.copy();
        }
    };
    /*
    Section: Lifecycle
    */
    // Public: Determine whether the pane is active.
    //
    // Returns a {Boolean}.
    /*
      Section: Lifecycle
      */
    // Public: Determine whether the pane is active.
    //
    // Returns a {Boolean}.
    Pane.prototype.isActive = /*
      Section: Lifecycle
      */
    // Public: Determine whether the pane is active.
    //
    // Returns a {Boolean}.
    function () {
        return this.container && this.container.getActivePane() === this;
    };
    // Public: Makes this pane the *active* pane, causing it to gain focus.
    // Public: Makes this pane the *active* pane, causing it to gain focus.
    Pane.prototype.activate = 
    // Public: Makes this pane the *active* pane, causing it to gain focus.
    function () {
    };
    // Public: Close the pane and destroy all its items.
    //
    // If this is the last pane, all the items will be destroyed but the pane
    // itself will not be destroyed.
    // Public: Close the pane and destroy all its items.
    //
    // If this is the last pane, all the items will be destroyed but the pane
    // itself will not be destroyed.
    Pane.prototype.destroy = 
    // Public: Close the pane and destroy all its items.
    //
    // If this is the last pane, all the items will be destroyed but the pane
    // itself will not be destroyed.
    function () {
    };
    Pane.prototype.isAlive = function () { return this.alive; };
    // Public: Determine whether this pane has been destroyed.
    //
    // Returns a {Boolean}.
    // Public: Determine whether this pane has been destroyed.
    //
    // Returns a {Boolean}.
    Pane.prototype.isDestroyed = 
    // Public: Determine whether this pane has been destroyed.
    //
    // Returns a {Boolean}.
    function () { return !this.isAlive(); };
    /*
    Section: Splitting
    */
    // Public: Create a new pane to the left of this pane.
    //
    // * `params` (optional) {Object} with the following keys:
    //   * `items` (optional) {Array} of items to add to the new pane.
    //   * `copyActiveItem` (optional) {Boolean} true will copy the active item into the new split pane
    //
    // Returns the new {Pane}.
    /*
      Section: Splitting
      */
    // Public: Create a new pane to the left of this pane.
    //
    // * `params` (optional) {Object} with the following keys:
    //   * `items` (optional) {Array} of items to add to the new pane.
    //   * `copyActiveItem` (optional) {Boolean} true will copy the active item into the new split pane
    //
    // Returns the new {Pane}.
    Pane.prototype.splitLeft = /*
      Section: Splitting
      */
    // Public: Create a new pane to the left of this pane.
    //
    // * `params` (optional) {Object} with the following keys:
    //   * `items` (optional) {Array} of items to add to the new pane.
    //   * `copyActiveItem` (optional) {Boolean} true will copy the active item into the new split pane
    //
    // Returns the new {Pane}.
    function (params) {
        return this.split('horizontal', 'before', params);
    };
    // Public: Create a new pane to the right of this pane.
    //
    // * `params` (optional) {Object} with the following keys:
    //   * `items` (optional) {Array} of items to add to the new pane.
    //   * `copyActiveItem` (optional) {Boolean} true will copy the active item into the new split pane
    //
    // Returns the new {Pane}.
    // Public: Create a new pane to the right of this pane.
    //
    // * `params` (optional) {Object} with the following keys:
    //   * `items` (optional) {Array} of items to add to the new pane.
    //   * `copyActiveItem` (optional) {Boolean} true will copy the active item into the new split pane
    //
    // Returns the new {Pane}.
    Pane.prototype.splitRight = 
    // Public: Create a new pane to the right of this pane.
    //
    // * `params` (optional) {Object} with the following keys:
    //   * `items` (optional) {Array} of items to add to the new pane.
    //   * `copyActiveItem` (optional) {Boolean} true will copy the active item into the new split pane
    //
    // Returns the new {Pane}.
    function (params) {
        return this.split('horizontal', 'after', params);
    };
    // Public: Creates a new pane above the receiver.
    //
    // * `params` (optional) {Object} with the following keys:
    //   * `items` (optional) {Array} of items to add to the new pane.
    //   * `copyActiveItem` (optional) {Boolean} true will copy the active item into the new split pane
    //
    // Returns the new {Pane}.
    // Public: Creates a new pane above the receiver.
    //
    // * `params` (optional) {Object} with the following keys:
    //   * `items` (optional) {Array} of items to add to the new pane.
    //   * `copyActiveItem` (optional) {Boolean} true will copy the active item into the new split pane
    //
    // Returns the new {Pane}.
    Pane.prototype.splitUp = 
    // Public: Creates a new pane above the receiver.
    //
    // * `params` (optional) {Object} with the following keys:
    //   * `items` (optional) {Array} of items to add to the new pane.
    //   * `copyActiveItem` (optional) {Boolean} true will copy the active item into the new split pane
    //
    // Returns the new {Pane}.
    function (params) {
        return this.split('vertical', 'before', params);
    };
    // Public: Creates a new pane below the receiver.
    //
    // * `params` (optional) {Object} with the following keys:
    //   * `items` (optional) {Array} of items to add to the new pane.
    //   * `copyActiveItem` (optional) {Boolean} true will copy the active item into the new split pane
    //
    // Returns the new {Pane}.
    // Public: Creates a new pane below the receiver.
    //
    // * `params` (optional) {Object} with the following keys:
    //   * `items` (optional) {Array} of items to add to the new pane.
    //   * `copyActiveItem` (optional) {Boolean} true will copy the active item into the new split pane
    //
    // Returns the new {Pane}.
    Pane.prototype.splitDown = 
    // Public: Creates a new pane below the receiver.
    //
    // * `params` (optional) {Object} with the following keys:
    //   * `items` (optional) {Array} of items to add to the new pane.
    //   * `copyActiveItem` (optional) {Boolean} true will copy the active item into the new split pane
    //
    // Returns the new {Pane}.
    function (params) {
        return this.split('vertical', 'after', params);
    };
    Pane.prototype.split = function (orientation, side, params) {
        if (params && params.copyActiveItem) {
            if (!params.items) {
                params.items = [];
            }
            params.items.push(this.copyActiveItem());
        }
        if (this.parent.orientation !== orientation) {
            this.parent.replaceChild(this, new pane_axis_1.PaneAxis({
                container: this.container,
                orientation: orientation,
                children: [this],
                flexScale: this.flexScale
            }, this.viewRegistry));
            this.setFlexScale(1);
        }
        var newPane = new Pane(Object.assign({
            applicationDelegate: this.applicationDelegate,
            notificationManager: this.notificationManager,
            deserializerManager: this.deserializerManager,
            config: this.config,
            viewRegistry: this.viewRegistry
        }, params));
        switch (side) {
            case 'before':
                this.parent.insertChildBefore(this, newPane);
                break;
            case 'after':
                this.parent.insertChildAfter(this, newPane);
                break;
        }
        if (params && params.moveActiveItem && this.activeItem) {
            this.moveItemToPane(this.activeItem, newPane);
        }
        newPane.activate();
        return newPane;
    };
    // If the parent is a horizontal axis, returns its first child if it is a pane;
    // otherwise returns this pane.
    // If the parent is a horizontal axis, returns its first child if it is a pane;
    // otherwise returns this pane.
    Pane.prototype.findLeftmostSibling = 
    // If the parent is a horizontal axis, returns its first child if it is a pane;
    // otherwise returns this pane.
    function () {
        if (this.parent.orientation === 'horizontal') {
            var leftmostSibling = this.parent.children[0];
            if (leftmostSibling instanceof pane_axis_1.PaneAxis) {
                return this;
            }
            else {
                return leftmostSibling;
            }
        }
        else {
            return this;
        }
    };
    Pane.prototype.findRightmostSibling = function () {
        if (this.parent.orientation === 'horizontal') {
            var rightmostSibling = this.parent.children[this.parent.children.length - 1];
            if (rightmostSibling instanceof pane_axis_1.PaneAxis) {
                return this;
            }
            else {
                return rightmostSibling;
            }
        }
        else {
            return this;
        }
    };
    // If the parent is a horizontal axis, returns its last child if it is a pane;
    // otherwise returns a new pane created by splitting this pane rightward.
    // If the parent is a horizontal axis, returns its last child if it is a pane;
    // otherwise returns a new pane created by splitting this pane rightward.
    Pane.prototype.findOrCreateRightmostSibling = 
    // If the parent is a horizontal axis, returns its last child if it is a pane;
    // otherwise returns a new pane created by splitting this pane rightward.
    function () {
        var rightmostSibling = this.findRightmostSibling();
        if (rightmostSibling === this) {
            return this.splitRight({});
        }
        else {
            return rightmostSibling;
        }
    };
    // If the parent is a vertical axis, returns its first child if it is a pane;
    // otherwise returns this pane.
    // If the parent is a vertical axis, returns its first child if it is a pane;
    // otherwise returns this pane.
    Pane.prototype.findTopmostSibling = 
    // If the parent is a vertical axis, returns its first child if it is a pane;
    // otherwise returns this pane.
    function () {
        if (this.parent.orientation === 'vertical') {
            var topmostSibling = this.parent.children[0];
            if (topmostSibling instanceof pane_axis_1.PaneAxis) {
                return this;
            }
            else {
                return topmostSibling;
            }
        }
        else {
            return this;
        }
    };
    Pane.prototype.findBottommostSibling = function () {
        if (this.parent.orientation === 'vertical') {
            var bottommostSibling = this.parent.children[this.parent.children.length - 1];
            if (bottommostSibling instanceof pane_axis_1.PaneAxis) {
                return this;
            }
            else {
                return bottommostSibling;
            }
        }
        else {
            return this;
        }
    };
    // If the parent is a vertical axis, returns its last child if it is a pane;
    // otherwise returns a new pane created by splitting this pane bottomward.
    // If the parent is a vertical axis, returns its last child if it is a pane;
    // otherwise returns a new pane created by splitting this pane bottomward.
    Pane.prototype.findOrCreateBottommostSibling = 
    // If the parent is a vertical axis, returns its last child if it is a pane;
    // otherwise returns a new pane created by splitting this pane bottomward.
    function () {
        var bottommostSibling = this.findBottommostSibling();
        if (bottommostSibling === this) {
            return this.splitDown({});
        }
        else {
            return bottommostSibling;
        }
    };
    // Private: Close the pane unless the user cancels the action via a dialog.
    //
    // Returns a {Promise} that resolves once the pane is either closed, or the
    // closing has been cancelled.
    // Private: Close the pane unless the user cancels the action via a dialog.
    //
    // Returns a {Promise} that resolves once the pane is either closed, or the
    // closing has been cancelled.
    Pane.prototype.close = 
    // Private: Close the pane unless the user cancels the action via a dialog.
    //
    // Returns a {Promise} that resolves once the pane is either closed, or the
    // closing has been cancelled.
    function () {
        var _this = this;
        return Promise.all(this.getItems().map(function (item) { return _this.promptToSaveItem(item); }))
            .then(function (results) {
            if (!results.find(function (item) { return item === false; })) {
                return _this.destroy();
            }
        });
    };
    Pane.prototype.handleSaveError = function (error, item) {
    };
    Pane.prototype.getMessageForErrorCode = function (errorCode) {
        switch (errorCode) {
            case 'EACCES': return 'Permission denied';
            case 'ECONNRESET': return 'Connection reset';
            case 'EINTR': return 'Interrupted system call';
            case 'EIO': return 'I/O error writing file';
            case 'ENOSPC': return 'No space left on device';
            case 'ENOTSUP': return 'Operation not supported on socket';
            case 'ENXIO': return 'No such device or address';
            case 'EROFS': return 'Read-only file system';
            case 'ESPIPE': return 'Invalid seek';
            case 'ETIMEDOUT': return 'Connection timed out';
        }
    };
    return Pane;
}());
exports.Pane = Pane;
function promisify(callback) {
    try {
        return Promise.resolve(callback());
    }
    catch (error) {
        return Promise.reject(error);
    }
}
//# sourceMappingURL=pane.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/ideframework/gsp/panel-container.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var event_kit_1 = __webpack_require__("./node_modules/@farris/ide-devkit/ideframework/gsp/event-kit/index.js");
var PanelContainer = /** @class */ (function () {
    function PanelContainer(viewRegistry, location, dock) {
        if (dock === void 0) { dock = null; }
        this.viewRegistry = viewRegistry;
        this.location = location;
        this.dock = dock;
        this.panels = [];
        this.emitter = new event_kit_1.Emitter();
        this.subscriptions = new event_kit_1.CompositeDisposable();
    }
    PanelContainer.prototype.destroy = function () {
        for (var _i = 0, _a = this.getPanels(); _i < _a.length; _i++) {
            var panel = _a[_i];
            panel.destroy();
        }
    };
    PanelContainer.prototype.getElement = function () {
    };
    /*
    Section: Event Subscription
    */
    /*
      Section: Event Subscription
      */
    PanelContainer.prototype.onDidAddPanel = /*
      Section: Event Subscription
      */
    function (callback) {
        return this.emitter.on('did-add-panel', callback);
    };
    PanelContainer.prototype.onDidRemovePanel = function (callback) {
        return this.emitter.on('did-remove-panel', callback);
    };
    PanelContainer.prototype.onDidDestroy = function (callback) {
        return this.emitter.once('did-destroy', callback);
    };
    PanelContainer.prototype.getLocation = function () {
        return this.location;
    };
    PanelContainer.prototype.isModal = function () { return this.location === 'modal'; };
    PanelContainer.prototype.getPanels = function () { return this.panels.slice(); };
    PanelContainer.prototype.addPanel = function (panel) {
        this.subscriptions.add(panel.onDidDestroy(this.panelDestroyed.bind(this)));
        var index = this.getPanelIndex(panel);
        if (index === this.panels.length) {
            this.panels.push(panel);
        }
        else {
            this.panels.splice(index, 0, panel);
        }
        this.emitter.emit('did-add-panel', { panel: panel, index: index });
        return panel;
    };
    PanelContainer.prototype.panelForItem = function (item) {
        for (var _i = 0, _a = this.panels; _i < _a.length; _i++) {
            var panel = _a[_i];
            if (panel.getItem() === item) {
                return panel;
            }
        }
        return null;
    };
    PanelContainer.prototype.panelDestroyed = function (panel) {
        var index = this.panels.indexOf(panel);
        if (index > -1) {
            this.panels.splice(index, 1);
            this.emitter.emit('did-remove-panel', { panel: panel, index: index });
        }
    };
    PanelContainer.prototype.getPanelIndex = function (panel) {
        var _this = this;
        var priority = panel.getPriority();
        if (['bottom', 'right'].find(function (item) { return item === _this.location; })) {
            for (var i = this.panels.length - 1; i >= 0; i--) {
                var p = this.panels[i];
                if (priority < p.getPriority()) {
                    return i + 1;
                }
            }
            return 0;
        }
        else {
            for (var i = 0; i < this.panels.length; i++) {
                var p = this.panels[i];
                if (priority < p.getPriority()) {
                    return i;
                }
            }
            return this.panels.length;
        }
    };
    return PanelContainer;
}());
exports.PanelContainer = PanelContainer;
//# sourceMappingURL=panel-container.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/ideframework/gsp/panel.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var event_kit_1 = __webpack_require__("./node_modules/@farris/ide-devkit/ideframework/gsp/event-kit/index.js");
var Panel = /** @class */ (function () {
    function Panel(options, viewRegistry) {
        this.destroyed = false;
        this.item = options.item;
        this.autoFocus = options.autoFocus == null ? false : options.autoFocus;
        this.visible = options.visible == null ? true : options.visible;
        this.priority = options.priority == null ? 100 : options.priority;
        this.className = options.className;
        this.viewRegistry = viewRegistry;
        this.emitter = new event_kit_1.Emitter();
    }
    // Public: Destroy and remove this panel from the UI.
    // Public: Destroy and remove this panel from the UI.
    Panel.prototype.destroy = 
    // Public: Destroy and remove this panel from the UI.
    function () {
        if (this.destroyed) {
            return;
        }
        this.destroyed = true;
        this.hide();
        this.emitter.emit('did-destroy', this);
        return this.emitter.dispose();
    };
    Panel.prototype.getElement = function () {
        return this.item.getElement(); // 直接返回item的视图，不再包装一层Panel
    };
    /*
    Section: Event Subscription
    */
    // Public: Invoke the given callback when the pane hidden or shown.
    //
    // * `callback` {Function} to be called when the pane is destroyed.
    //   * `visible` {Boolean} true when the panel has been shown
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /*
      Section: Event Subscription
      */
    // Public: Invoke the given callback when the pane hidden or shown.
    //
    // * `callback` {Function} to be called when the pane is destroyed.
    //   * `visible` {Boolean} true when the panel has been shown
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    Panel.prototype.onDidChangeVisible = /*
      Section: Event Subscription
      */
    // Public: Invoke the given callback when the pane hidden or shown.
    //
    // * `callback` {Function} to be called when the pane is destroyed.
    //   * `visible` {Boolean} true when the panel has been shown
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    function (callback) {
        return this.emitter.on('did-change-visible', callback);
    };
    // Public: Invoke the given callback when the pane is destroyed.
    //
    // * `callback` {Function} to be called when the pane is destroyed.
    //   * `panel` {Panel} this panel
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Public: Invoke the given callback when the pane is destroyed.
    //
    // * `callback` {Function} to be called when the pane is destroyed.
    //   * `panel` {Panel} this panel
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    Panel.prototype.onDidDestroy = 
    // Public: Invoke the given callback when the pane is destroyed.
    //
    // * `callback` {Function} to be called when the pane is destroyed.
    //   * `panel` {Panel} this panel
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    function (callback) {
        return this.emitter.once('did-destroy', callback);
    };
    /*
    Section: Panel Details
    */
    // Public: Returns the panel's item.
    /*
      Section: Panel Details
      */
    // Public: Returns the panel's item.
    Panel.prototype.getItem = /*
      Section: Panel Details
      */
    // Public: Returns the panel's item.
    function () {
        return this.item;
    };
    // Public: Returns a {Number} indicating this panel's priority.
    // Public: Returns a {Number} indicating this panel's priority.
    Panel.prototype.getPriority = 
    // Public: Returns a {Number} indicating this panel's priority.
    function () {
        return this.priority;
    };
    Panel.prototype.getClassName = function () {
        return this.className;
    };
    // Public: Returns a {Boolean} true when the panel is visible.
    // Public: Returns a {Boolean} true when the panel is visible.
    Panel.prototype.isVisible = 
    // Public: Returns a {Boolean} true when the panel is visible.
    function () {
        return this.visible;
    };
    // Public: Hide this panel
    // Public: Hide this panel
    Panel.prototype.hide = 
    // Public: Hide this panel
    function () {
        var wasVisible = this.visible;
        this.visible = false;
        if (wasVisible) {
            this.emitter.emit('did-change-visible', this.visible);
        }
    };
    // Public: Show this panel
    // Public: Show this panel
    Panel.prototype.show = 
    // Public: Show this panel
    function () {
        var wasVisible = this.visible;
        this.visible = true;
        if (!wasVisible) {
            this.emitter.emit('did-change-visible', this.visible);
        }
    };
    return Panel;
}());
exports.Panel = Panel;
//# sourceMappingURL=panel.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/ideframework/gsp/view-registry.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var event_kit_1 = __webpack_require__("./node_modules/@farris/ide-devkit/ideframework/gsp/event-kit/index.js");
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
// Essential: `ViewRegistry` handles the association between model and view
// types in Atom. We call this association a View Provider. As in, for a given
// model, this class can provide a view via {::getView}, as long as the
// model/view association was registered via {::addViewProvider}
//
// If you're adding your own kind of pane item, a good strategy for all but the
// simplest items is to separate the model and the view. The model handles
// application logic and is the primary point of API interaction. The view
// just handles presentation.
//
// Note: Models can be any object, but must implement a `getTitle()` function
// if they are to be displayed in a {Pane}
//
// View providers inform the workspace how your model objects should be
// presented in the DOM. A view provider must always return a DOM node, which
// makes [HTML 5 custom elements](http://www.html5rocks.com/en/tutorials/webcomponents/customelements/)
// an ideal tool for implementing views in Atom.
//
// You can access the `ViewRegistry` object via `atom.views`.
var 
// Essential: `ViewRegistry` handles the association between model and view
// types in Atom. We call this association a View Provider. As in, for a given
// model, this class can provide a view via {::getView}, as long as the
// model/view association was registered via {::addViewProvider}
//
// If you're adding your own kind of pane item, a good strategy for all but the
// simplest items is to separate the model and the view. The model handles
// application logic and is the primary point of API interaction. The view
// just handles presentation.
//
// Note: Models can be any object, but must implement a `getTitle()` function
// if they are to be displayed in a {Pane}
//
// View providers inform the workspace how your model objects should be
// presented in the DOM. A view provider must always return a DOM node, which
// makes [HTML 5 custom elements](http://www.html5rocks.com/en/tutorials/webcomponents/customelements/)
// an ideal tool for implementing views in Atom.
//
// You can access the `ViewRegistry` object via `atom.views`.
ViewRegistry = /** @class */ (function () {
    // private documentWriters: any;
    // private documentReaders: any;
    // private nextUpdatePromise: any;
    // private resolveNextUpdatePromise: (value?: {} | PromiseLike<{}>) => void;
    function ViewRegistry(gspEnvironment) {
        // this.animationFrameRequest = null
        // this.documentReadInProgress = false
        // this.performDocumentUpdate = this.performDocumentUpdate.bind(this);
        this.gspEnvironment = gspEnvironment;
        this.clear();
    }
    ViewRegistry.prototype.clear = function () {
        this.views = new WeakMap();
        this.providers = [];
        this.clearDocumentRequests();
    };
    // Essential: Add a provider that will be used to construct views in the
    // workspace's view layer based on model objects in its model layer.
    //
    // ## Examples
    //
    // Text editors are divided into a model and a view layer, so when you interact
    // with methods like `atom.workspace.getActiveTextEditor()` you're only going
    // to get the model object. We display text editors on screen by teaching the
    // workspace what view constructor it should use to represent them:
    //
    // ```coffee
    // atom.views.addViewProvider TextEditor, (textEditor) ->
    //   textEditorElement = new TextEditorElement
    //   textEditorElement.initialize(textEditor)
    //   textEditorElement
    // ```
    //
    // * `modelConstructor` (optional) Constructor {Function} for your model. If
    //   a constructor is given, the `createView` function will only be used
    //   for model objects inheriting from that constructor. Otherwise, it will
    //   will be called for any object.
    // * `createView` Factory {Function} that is passed an instance of your model
    //   and must return a subclass of `HTMLElement` or `undefined`. If it returns
    //   `undefined`, then the registry will continue to search for other view
    //   providers.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to remove the
    // added provider.
    // Essential: Add a provider that will be used to construct views in the
    // workspace's view layer based on model objects in its model layer.
    //
    // ## Examples
    //
    // Text editors are divided into a model and a view layer, so when you interact
    // with methods like `atom.workspace.getActiveTextEditor()` you're only going
    // to get the model object. We display text editors on screen by teaching the
    // workspace what view constructor it should use to represent them:
    //
    // ```coffee
    // atom.views.addViewProvider TextEditor, (textEditor) ->
    //   textEditorElement = new TextEditorElement
    //   textEditorElement.initialize(textEditor)
    //   textEditorElement
    // ```
    //
    // * `modelConstructor` (optional) Constructor {Function} for your model. If
    //   a constructor is given, the `createView` function will only be used
    //   for model objects inheriting from that constructor. Otherwise, it will
    //   will be called for any object.
    // * `createView` Factory {Function} that is passed an instance of your model
    //   and must return a subclass of `HTMLElement` or `undefined`. If it returns
    //   `undefined`, then the registry will continue to search for other view
    //   providers.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to remove the
    // added provider.
    ViewRegistry.prototype.addViewProvider = 
    // Essential: Add a provider that will be used to construct views in the
    // workspace's view layer based on model objects in its model layer.
    //
    // ## Examples
    //
    // Text editors are divided into a model and a view layer, so when you interact
    // with methods like `atom.workspace.getActiveTextEditor()` you're only going
    // to get the model object. We display text editors on screen by teaching the
    // workspace what view constructor it should use to represent them:
    //
    // ```coffee
    // atom.views.addViewProvider TextEditor, (textEditor) ->
    //   textEditorElement = new TextEditorElement
    //   textEditorElement.initialize(textEditor)
    //   textEditorElement
    // ```
    //
    // * `modelConstructor` (optional) Constructor {Function} for your model. If
    //   a constructor is given, the `createView` function will only be used
    //   for model objects inheriting from that constructor. Otherwise, it will
    //   will be called for any object.
    // * `createView` Factory {Function} that is passed an instance of your model
    //   and must return a subclass of `HTMLElement` or `undefined`. If it returns
    //   `undefined`, then the registry will continue to search for other view
    //   providers.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to remove the
    // added provider.
    function (modelConstructor, createView) {
        var _this = this;
        var provider;
        if (arguments.length === 1) {
            switch (typeof modelConstructor) {
                case 'function':
                    provider = { createView: modelConstructor, modelConstructor: null };
                    break;
                case 'object':
                    provider = modelConstructor;
                    break;
                default:
                    throw new TypeError('Arguments to addViewProvider must be functions');
            }
        }
        else {
            provider = { modelConstructor: modelConstructor, createView: createView };
        }
        this.providers.push(provider);
        return new event_kit_1.Disposable(function () {
            _this.providers = _this.providers.filter(function (p) { return p !== provider; });
        });
    };
    ViewRegistry.prototype.getViewProviderCount = function () {
        return this.providers.length;
    };
    // Essential: Get the view associated with an object in the workspace.
    //
    // If you're just *using* the workspace, you shouldn't need to access the view
    // layer, but view layer access may be necessary if you want to perform DOM
    // manipulation that isn't supported via the model API.
    //
    // ## View Resolution Algorithm
    //
    // The view associated with the object is resolved using the following
    // sequence
    //
    //  1. Is the object an instance of `HTMLElement`? If true, return the object.
    //  2. Does the object have a method named `getElement` that returns an
    //     instance of `HTMLElement`? If true, return that value.
    //  3. Does the object have a property named `element` with a value which is
    //     an instance of `HTMLElement`? If true, return the property value.
    //  4. Is the object a jQuery object, indicated by the presence of a `jquery`
    //     property? If true, return the root DOM element (i.e. `object[0]`).
    //  5. Has a view provider been registered for the object? If true, use the
    //     provider to create a view associated with the object, and return the
    //     view.
    //
    // If no associated view is returned by the sequence an error is thrown.
    //
    // Returns a DOM element.
    // Essential: Get the view associated with an object in the workspace.
    //
    // If you're just *using* the workspace, you shouldn't need to access the view
    // layer, but view layer access may be necessary if you want to perform DOM
    // manipulation that isn't supported via the model API.
    //
    // ## View Resolution Algorithm
    //
    // The view associated with the object is resolved using the following
    // sequence
    //
    //  1. Is the object an instance of `HTMLElement`? If true, return the object.
    //  2. Does the object have a method named `getElement` that returns an
    //     instance of `HTMLElement`? If true, return that value.
    //  3. Does the object have a property named `element` with a value which is
    //     an instance of `HTMLElement`? If true, return the property value.
    //  4. Is the object a jQuery object, indicated by the presence of a `jquery`
    //     property? If true, return the root DOM element (i.e. `object[0]`).
    //  5. Has a view provider been registered for the object? If true, use the
    //     provider to create a view associated with the object, and return the
    //     view.
    //
    // If no associated view is returned by the sequence an error is thrown.
    //
    // Returns a DOM element.
    ViewRegistry.prototype.getView = 
    // Essential: Get the view associated with an object in the workspace.
    //
    // If you're just *using* the workspace, you shouldn't need to access the view
    // layer, but view layer access may be necessary if you want to perform DOM
    // manipulation that isn't supported via the model API.
    //
    // ## View Resolution Algorithm
    //
    // The view associated with the object is resolved using the following
    // sequence
    //
    //  1. Is the object an instance of `HTMLElement`? If true, return the object.
    //  2. Does the object have a method named `getElement` that returns an
    //     instance of `HTMLElement`? If true, return that value.
    //  3. Does the object have a property named `element` with a value which is
    //     an instance of `HTMLElement`? If true, return the property value.
    //  4. Is the object a jQuery object, indicated by the presence of a `jquery`
    //     property? If true, return the root DOM element (i.e. `object[0]`).
    //  5. Has a view provider been registered for the object? If true, use the
    //     provider to create a view associated with the object, and return the
    //     view.
    //
    // If no associated view is returned by the sequence an error is thrown.
    //
    // Returns a DOM element.
    function (object) {
        if (object == null) {
            return;
        }
        var view = this.views.get(object);
        if (!view) {
            view = this.createView(object);
            this.views.set(object, view);
        }
        return view;
    };
    ViewRegistry.prototype.createView = function (object) {
        if (object instanceof core_1.ComponentRef) {
            return object;
        }
        var element;
        if (object && (typeof object.getElement === 'function')) {
            element = object.getElement();
            if (element instanceof core_1.ComponentRef) {
                return element;
            }
        }
        if (object && object.element instanceof core_1.ComponentRef) {
            return object.element;
        }
        // if (object && object.jquery) {
        //   return object[0];
        // }
        for (var _i = 0, _a = this.providers; _i < _a.length; _i++) {
            var provider = _a[_i];
            if (provider.modelConstructor === null) {
                element = provider.createView(object, this.gspEnvironment);
                if (element) {
                    return element;
                }
                continue;
            }
            if (object instanceof provider.modelConstructor) {
                element = provider.createView && provider.createView(object, this.gspEnvironment);
                if (element) {
                    return element;
                }
                var ViewConstructor = provider.viewConstructor;
                if (ViewConstructor) {
                    element = new ViewConstructor();
                    if (element.initialize) {
                        element.initialize(object);
                    }
                    else if (element.setModel) {
                        element.setModel(object);
                    }
                    return element;
                }
            }
        }
        if (object && object.getViewClass) {
            var ViewConstructor = object.getViewClass();
            if (ViewConstructor) {
                var view = new ViewConstructor(object);
                return view;
            }
        }
        throw new Error("Can't create a view for " + object.constructor.name + " instance. Please register a view provider.");
    };
    ViewRegistry.prototype.updateDocument = function (fn) {
        // this.documentWriters.push(fn)
        // if (!this.documentReadInProgress) { this.requestDocumentUpdate() }
        // return new Disposable(() => {
        //   this.documentWriters = this.documentWriters.filter(writer => writer !== fn)
        // })
    };
    ViewRegistry.prototype.readDocument = function (fn) {
        // this.documentReaders.push(fn)
        // this.requestDocumentUpdate()
        // return new Disposable(() => {
        //   this.documentReaders = this.documentReaders.filter(reader => reader !== fn)
        // })
    };
    ViewRegistry.prototype.getNextUpdatePromise = function () {
        // if (this.nextUpdatePromise == null) {
        //   this.nextUpdatePromise = new Promise(resolve => {
        //     this.resolveNextUpdatePromise = resolve
        //   })
        // }
        // return this.nextUpdatePromise
    };
    ViewRegistry.prototype.clearDocumentRequests = function () {
        // this.documentReaders = []
        // this.documentWriters = []
        // this.nextUpdatePromise = null
        // this.resolveNextUpdatePromise = null
        // if (this.animationFrameRequest != null) {
        //   cancelAnimationFrame(this.animationFrameRequest)
        //   this.animationFrameRequest = null
        // }
    };
    ViewRegistry.prototype.requestDocumentUpdate = function () {
        // if (this.animationFrameRequest == null) {
        //   this.animationFrameRequest = requestAnimationFrame(this.performDocumentUpdate)
        // }
    };
    ViewRegistry.prototype.performDocumentUpdate = function () {
        // const { resolveNextUpdatePromise } = this
        // this.animationFrameRequest = null
        // this.nextUpdatePromise = null
        // this.resolveNextUpdatePromise = null
        // var writer = this.documentWriters.shift()
        // while (writer) {
        //   writer()
        //   writer = this.documentWriters.shift()
        // }
        // var reader = this.documentReaders.shift()
        // this.documentReadInProgress = true
        // while (reader) {
        //   reader()
        //   reader = this.documentReaders.shift()
        // }
        // this.documentReadInProgress = false
        // // process updates requested as a result of reads
        // writer = this.documentWriters.shift()
        // while (writer) {
        //   writer()
        //   writer = this.documentWriters.shift()
        // }
        // if (resolveNextUpdatePromise) { resolveNextUpdatePromise() }
    };
    return ViewRegistry;
}());
exports.ViewRegistry = ViewRegistry;
//# sourceMappingURL=view-registry.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/ideframework/gsp/workspace-center.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var pane_container_1 = __webpack_require__("./node_modules/@farris/ide-devkit/ideframework/gsp/pane-container.js");
// Essential: Represents the workspace at the center of the entire window.
var 
// Essential: Represents the workspace at the center of the entire window.
WorkspaceCenter = /** @class */ (function () {
    function WorkspaceCenter(params) {
        var _this = this;
        params.location = 'center';
        this.paneContainer = new pane_container_1.PaneContainer(params);
        this.didActivate = params.didActivate;
        this.paneContainer.onDidActivatePane(function () { return _this.didActivate(_this); });
        this.paneContainer.onDidChangeActivePane(function (pane) {
            params.didChangeActivePane(_this, pane);
        });
        this.paneContainer.onDidChangeActivePaneItem(function (item) {
            params.didChangeActivePaneItem(_this, item);
        });
        this.paneContainer.onDidDestroyPaneItem(function (item) { return params.didDestroyPaneItem(item); });
    }
    WorkspaceCenter.prototype.destroy = function () {
        this.paneContainer.destroy();
    };
    WorkspaceCenter.prototype.serialize = function () {
        return this.paneContainer.serialize();
    };
    WorkspaceCenter.prototype.deserialize = function (state, deserializerManager) {
        this.paneContainer.deserialize(state, deserializerManager);
    };
    WorkspaceCenter.prototype.activate = function () {
        this.getActivePane().activate();
    };
    WorkspaceCenter.prototype.getLocation = function () {
        return 'center';
    };
    WorkspaceCenter.prototype.setDraggingItem = function () {
        // No-op
    };
    // Essential: Invoke the given callback with all current and future panes items
    // in the workspace center.
    //
    // * `callback` {Function} to be called with current and future pane items.
    //   * `item` An item that is present in {::getPaneItems} at the time of
    //      subscription or that is added at some later time.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Essential: Invoke the given callback with all current and future panes items
    // in the workspace center.
    //
    // * `callback` {Function} to be called with current and future pane items.
    //   * `item` An item that is present in {::getPaneItems} at the time of
    //      subscription or that is added at some later time.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    WorkspaceCenter.prototype.observePaneItems = 
    // Essential: Invoke the given callback with all current and future panes items
    // in the workspace center.
    //
    // * `callback` {Function} to be called with current and future pane items.
    //   * `item` An item that is present in {::getPaneItems} at the time of
    //      subscription or that is added at some later time.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    function (callback) { return this.paneContainer.observePaneItems(callback); };
    // Essential: Invoke the given callback when the active pane item changes.
    //
    // Because observers are invoked synchronously, it's important not to perform
    // any expensive operations via this method. Consider
    // {::onDidStopChangingActivePaneItem} to delay operations until after changes
    // stop occurring.
    //
    // * `callback` {Function} to be called when the active pane item changes.
    //   * `item` The active pane item.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Essential: Invoke the given callback when the active pane item changes.
    //
    // Because observers are invoked synchronously, it's important not to perform
    // any expensive operations via this method. Consider
    // {::onDidStopChangingActivePaneItem} to delay operations until after changes
    // stop occurring.
    //
    // * `callback` {Function} to be called when the active pane item changes.
    //   * `item` The active pane item.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    WorkspaceCenter.prototype.onDidChangeActivePaneItem = 
    // Essential: Invoke the given callback when the active pane item changes.
    //
    // Because observers are invoked synchronously, it's important not to perform
    // any expensive operations via this method. Consider
    // {::onDidStopChangingActivePaneItem} to delay operations until after changes
    // stop occurring.
    //
    // * `callback` {Function} to be called when the active pane item changes.
    //   * `item` The active pane item.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    function (callback) {
        return this.paneContainer.onDidChangeActivePaneItem(callback);
    };
    // Essential: Invoke the given callback when the active pane item stops
    // changing.
    //
    // Observers are called asynchronously 100ms after the last active pane item
    // change. Handling changes here rather than in the synchronous
    // {::onDidChangeActivePaneItem} prevents unneeded work if the user is quickly
    // changing or closing tabs and ensures critical UI feedback, like changing the
    // highlighted tab, gets priority over work that can be done asynchronously.
    //
    // * `callback` {Function} to be called when the active pane item stopts
    //   changing.
    //   * `item` The active pane item.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Essential: Invoke the given callback when the active pane item stops
    // changing.
    //
    // Observers are called asynchronously 100ms after the last active pane item
    // change. Handling changes here rather than in the synchronous
    // {::onDidChangeActivePaneItem} prevents unneeded work if the user is quickly
    // changing or closing tabs and ensures critical UI feedback, like changing the
    // highlighted tab, gets priority over work that can be done asynchronously.
    //
    // * `callback` {Function} to be called when the active pane item stopts
    //   changing.
    //   * `item` The active pane item.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    WorkspaceCenter.prototype.onDidStopChangingActivePaneItem = 
    // Essential: Invoke the given callback when the active pane item stops
    // changing.
    //
    // Observers are called asynchronously 100ms after the last active pane item
    // change. Handling changes here rather than in the synchronous
    // {::onDidChangeActivePaneItem} prevents unneeded work if the user is quickly
    // changing or closing tabs and ensures critical UI feedback, like changing the
    // highlighted tab, gets priority over work that can be done asynchronously.
    //
    // * `callback` {Function} to be called when the active pane item stopts
    //   changing.
    //   * `item` The active pane item.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    function (callback) {
        return this.paneContainer.onDidStopChangingActivePaneItem(callback);
    };
    // Essential: Invoke the given callback with the current active pane item and
    // with all future active pane items in the workspace center.
    //
    // * `callback` {Function} to be called when the active pane item changes.
    //   * `item` The current active pane item.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Essential: Invoke the given callback with the current active pane item and
    // with all future active pane items in the workspace center.
    //
    // * `callback` {Function} to be called when the active pane item changes.
    //   * `item` The current active pane item.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    WorkspaceCenter.prototype.observeActivePaneItem = 
    // Essential: Invoke the given callback with the current active pane item and
    // with all future active pane items in the workspace center.
    //
    // * `callback` {Function} to be called when the active pane item changes.
    //   * `item` The current active pane item.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    function (callback) {
        return this.paneContainer.observeActivePaneItem(callback);
    };
    // Extended: Invoke the given callback when a pane is added to the workspace
    // center.
    //
    // * `callback` {Function} to be called panes are added.
    //   * `event` {Object} with the following keys:
    //     * `pane` The added pane.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Extended: Invoke the given callback when a pane is added to the workspace
    // center.
    //
    // * `callback` {Function} to be called panes are added.
    //   * `event` {Object} with the following keys:
    //     * `pane` The added pane.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    WorkspaceCenter.prototype.onDidAddPane = 
    // Extended: Invoke the given callback when a pane is added to the workspace
    // center.
    //
    // * `callback` {Function} to be called panes are added.
    //   * `event` {Object} with the following keys:
    //     * `pane` The added pane.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    function (callback) {
        return this.paneContainer.onDidAddPane(callback);
    };
    // Extended: Invoke the given callback before a pane is destroyed in the
    // workspace center.
    //
    // * `callback` {Function} to be called before panes are destroyed.
    //   * `event` {Object} with the following keys:
    //     * `pane` The pane to be destroyed.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Extended: Invoke the given callback before a pane is destroyed in the
    // workspace center.
    //
    // * `callback` {Function} to be called before panes are destroyed.
    //   * `event` {Object} with the following keys:
    //     * `pane` The pane to be destroyed.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    WorkspaceCenter.prototype.onWillDestroyPane = 
    // Extended: Invoke the given callback before a pane is destroyed in the
    // workspace center.
    //
    // * `callback` {Function} to be called before panes are destroyed.
    //   * `event` {Object} with the following keys:
    //     * `pane` The pane to be destroyed.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    function (callback) {
        return this.paneContainer.onWillDestroyPane(callback);
    };
    // Extended: Invoke the given callback when a pane is destroyed in the
    // workspace center.
    //
    // * `callback` {Function} to be called panes are destroyed.
    //   * `event` {Object} with the following keys:
    //     * `pane` The destroyed pane.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Extended: Invoke the given callback when a pane is destroyed in the
    // workspace center.
    //
    // * `callback` {Function} to be called panes are destroyed.
    //   * `event` {Object} with the following keys:
    //     * `pane` The destroyed pane.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    WorkspaceCenter.prototype.onDidDestroyPane = 
    // Extended: Invoke the given callback when a pane is destroyed in the
    // workspace center.
    //
    // * `callback` {Function} to be called panes are destroyed.
    //   * `event` {Object} with the following keys:
    //     * `pane` The destroyed pane.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    function (callback) {
        return this.paneContainer.onDidDestroyPane(callback);
    };
    // Extended: Invoke the given callback with all current and future panes in the
    // workspace center.
    //
    // * `callback` {Function} to be called with current and future panes.
    //   * `pane` A {Pane} that is present in {::getPanes} at the time of
    //      subscription or that is added at some later time.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Extended: Invoke the given callback with all current and future panes in the
    // workspace center.
    //
    // * `callback` {Function} to be called with current and future panes.
    //   * `pane` A {Pane} that is present in {::getPanes} at the time of
    //      subscription or that is added at some later time.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    WorkspaceCenter.prototype.observePanes = 
    // Extended: Invoke the given callback with all current and future panes in the
    // workspace center.
    //
    // * `callback` {Function} to be called with current and future panes.
    //   * `pane` A {Pane} that is present in {::getPanes} at the time of
    //      subscription or that is added at some later time.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    function (callback) {
        return this.paneContainer.observePanes(callback);
    };
    // Extended: Invoke the given callback when the active pane changes.
    //
    // * `callback` {Function} to be called when the active pane changes.
    //   * `pane` A {Pane} that is the current return value of {::getActivePane}.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Extended: Invoke the given callback when the active pane changes.
    //
    // * `callback` {Function} to be called when the active pane changes.
    //   * `pane` A {Pane} that is the current return value of {::getActivePane}.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    WorkspaceCenter.prototype.onDidChangeActivePane = 
    // Extended: Invoke the given callback when the active pane changes.
    //
    // * `callback` {Function} to be called when the active pane changes.
    //   * `pane` A {Pane} that is the current return value of {::getActivePane}.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    function (callback) {
        return this.paneContainer.onDidChangeActivePane(callback);
    };
    // Extended: Invoke the given callback with the current active pane and when
    // the active pane changes.
    //
    // * `callback` {Function} to be called with the current and future active#
    //   panes.
    //   * `pane` A {Pane} that is the current return value of {::getActivePane}.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Extended: Invoke the given callback with the current active pane and when
    // the active pane changes.
    //
    // * `callback` {Function} to be called with the current and future active#
    //   panes.
    //   * `pane` A {Pane} that is the current return value of {::getActivePane}.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    WorkspaceCenter.prototype.observeActivePane = 
    // Extended: Invoke the given callback with the current active pane and when
    // the active pane changes.
    //
    // * `callback` {Function} to be called with the current and future active#
    //   panes.
    //   * `pane` A {Pane} that is the current return value of {::getActivePane}.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    function (callback) {
        return this.paneContainer.observeActivePane(callback);
    };
    // Extended: Invoke the given callback when a pane item is added to the
    // workspace center.
    //
    // * `callback` {Function} to be called when pane items are added.
    //   * `event` {Object} with the following keys:
    //     * `item` The added pane item.
    //     * `pane` {Pane} containing the added item.
    //     * `index` {Number} indicating the index of the added item in its pane.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Extended: Invoke the given callback when a pane item is added to the
    // workspace center.
    //
    // * `callback` {Function} to be called when pane items are added.
    //   * `event` {Object} with the following keys:
    //     * `item` The added pane item.
    //     * `pane` {Pane} containing the added item.
    //     * `index` {Number} indicating the index of the added item in its pane.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    WorkspaceCenter.prototype.onDidAddPaneItem = 
    // Extended: Invoke the given callback when a pane item is added to the
    // workspace center.
    //
    // * `callback` {Function} to be called when pane items are added.
    //   * `event` {Object} with the following keys:
    //     * `item` The added pane item.
    //     * `pane` {Pane} containing the added item.
    //     * `index` {Number} indicating the index of the added item in its pane.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    function (callback) {
        return this.paneContainer.onDidAddPaneItem(callback);
    };
    // Extended: Invoke the given callback when a pane item is about to be
    // destroyed, before the user is prompted to save it.
    //
    // * `callback` {Function} to be called before pane items are destroyed.
    //   * `event` {Object} with the following keys:
    //     * `item` The item to be destroyed.
    //     * `pane` {Pane} containing the item to be destroyed.
    //     * `index` {Number} indicating the index of the item to be destroyed in
    //       its pane.
    //
    // Returns a {Disposable} on which `.dispose` can be called to unsubscribe.
    // Extended: Invoke the given callback when a pane item is about to be
    // destroyed, before the user is prompted to save it.
    //
    // * `callback` {Function} to be called before pane items are destroyed.
    //   * `event` {Object} with the following keys:
    //     * `item` The item to be destroyed.
    //     * `pane` {Pane} containing the item to be destroyed.
    //     * `index` {Number} indicating the index of the item to be destroyed in
    //       its pane.
    //
    // Returns a {Disposable} on which `.dispose` can be called to unsubscribe.
    WorkspaceCenter.prototype.onWillDestroyPaneItem = 
    // Extended: Invoke the given callback when a pane item is about to be
    // destroyed, before the user is prompted to save it.
    //
    // * `callback` {Function} to be called before pane items are destroyed.
    //   * `event` {Object} with the following keys:
    //     * `item` The item to be destroyed.
    //     * `pane` {Pane} containing the item to be destroyed.
    //     * `index` {Number} indicating the index of the item to be destroyed in
    //       its pane.
    //
    // Returns a {Disposable} on which `.dispose` can be called to unsubscribe.
    function (callback) {
        return this.paneContainer.onWillDestroyPaneItem(callback);
    };
    // Extended: Invoke the given callback when a pane item is destroyed.
    //
    // * `callback` {Function} to be called when pane items are destroyed.
    //   * `event` {Object} with the following keys:
    //     * `item` The destroyed item.
    //     * `pane` {Pane} containing the destroyed item.
    //     * `index` {Number} indicating the index of the destroyed item in its
    //       pane.
    //
    // Returns a {Disposable} on which `.dispose` can be called to unsubscribe.
    // Extended: Invoke the given callback when a pane item is destroyed.
    //
    // * `callback` {Function} to be called when pane items are destroyed.
    //   * `event` {Object} with the following keys:
    //     * `item` The destroyed item.
    //     * `pane` {Pane} containing the destroyed item.
    //     * `index` {Number} indicating the index of the destroyed item in its
    //       pane.
    //
    // Returns a {Disposable} on which `.dispose` can be called to unsubscribe.
    WorkspaceCenter.prototype.onDidDestroyPaneItem = 
    // Extended: Invoke the given callback when a pane item is destroyed.
    //
    // * `callback` {Function} to be called when pane items are destroyed.
    //   * `event` {Object} with the following keys:
    //     * `item` The destroyed item.
    //     * `pane` {Pane} containing the destroyed item.
    //     * `index` {Number} indicating the index of the destroyed item in its
    //       pane.
    //
    // Returns a {Disposable} on which `.dispose` can be called to unsubscribe.
    function (callback) {
        return this.paneContainer.onDidDestroyPaneItem(callback);
    };
    /*
    Section: Pane Items
    */
    // Essential: Get all pane items in the workspace center.
    //
    // Returns an {Array} of items.
    /*
      Section: Pane Items
      */
    // Essential: Get all pane items in the workspace center.
    //
    // Returns an {Array} of items.
    WorkspaceCenter.prototype.getPaneItems = /*
      Section: Pane Items
      */
    // Essential: Get all pane items in the workspace center.
    //
    // Returns an {Array} of items.
    function () {
        return this.paneContainer.getPaneItems();
    };
    // Essential: Get the active {Pane}'s active item.
    //
    // Returns an pane item {Object}.
    // Essential: Get the active {Pane}'s active item.
    //
    // Returns an pane item {Object}.
    WorkspaceCenter.prototype.getActivePaneItem = 
    // Essential: Get the active {Pane}'s active item.
    //
    // Returns an pane item {Object}.
    function () {
        return this.paneContainer.getActivePaneItem();
    };
    // Save all pane items.
    // Save all pane items.
    WorkspaceCenter.prototype.saveAll = 
    // Save all pane items.
    function () {
        this.paneContainer.saveAll();
    };
    WorkspaceCenter.prototype.confirmClose = function (options) {
        return this.paneContainer.confirmClose(options);
    };
    /*
    Section: Panes
    */
    // Extended: Get all panes in the workspace center.
    //
    // Returns an {Array} of {Pane}s.
    /*
      Section: Panes
      */
    // Extended: Get all panes in the workspace center.
    //
    // Returns an {Array} of {Pane}s.
    WorkspaceCenter.prototype.getPanes = /*
      Section: Panes
      */
    // Extended: Get all panes in the workspace center.
    //
    // Returns an {Array} of {Pane}s.
    function () {
        return this.paneContainer.getPanes();
    };
    // Extended: Get the active {Pane}.
    //
    // Returns a {Pane}.
    // Extended: Get the active {Pane}.
    //
    // Returns a {Pane}.
    WorkspaceCenter.prototype.getActivePane = 
    // Extended: Get the active {Pane}.
    //
    // Returns a {Pane}.
    function () {
        return this.paneContainer.getActivePane();
    };
    // Extended: Make the next pane active.
    // Extended: Make the next pane active.
    WorkspaceCenter.prototype.activateNextPane = 
    // Extended: Make the next pane active.
    function () {
        return this.paneContainer.activateNextPane();
    };
    // Extended: Make the previous pane active.
    // Extended: Make the previous pane active.
    WorkspaceCenter.prototype.activatePreviousPane = 
    // Extended: Make the previous pane active.
    function () {
        return this.paneContainer.activatePreviousPane();
    };
    WorkspaceCenter.prototype.paneForURI = function (uri) {
        return this.paneContainer.paneForURI(uri);
    };
    WorkspaceCenter.prototype.paneForItem = function (item) {
        return this.paneContainer.paneForItem(item);
    };
    // Destroy (close) the active pane.
    // Destroy (close) the active pane.
    WorkspaceCenter.prototype.destroyActivePane = 
    // Destroy (close) the active pane.
    function () {
        var activePane = this.getActivePane();
        if (activePane != null) {
            activePane.destroy();
        }
    };
    return WorkspaceCenter;
}());
exports.WorkspaceCenter = WorkspaceCenter;
//# sourceMappingURL=workspace-center.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/ideframework/gsp/workspace.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var panel_container_1 = __webpack_require__("./node_modules/@farris/ide-devkit/ideframework/gsp/panel-container.js");
var panel_1 = __webpack_require__("./node_modules/@farris/ide-devkit/ideframework/gsp/panel.js");
var dock_1 = __webpack_require__("./node_modules/@farris/ide-devkit/ideframework/gsp/dock.js");
var workspace_center_1 = __webpack_require__("./node_modules/@farris/ide-devkit/ideframework/gsp/workspace-center.js");
var gsp = {};
var ALL_LOCATIONS = ['center', 'left', 'right', 'bottom'];
var Workspace = /** @class */ (function () {
    function Workspace(params) {
        this.initOptions(params);
        this.initWorkspace();
        this.openers = [];
        this.viewRegistry = params.viewRegistry;
        // this.subscribeToEvents();
    }
    Workspace.prototype.initOptions = function (params) {
        this.config = params.config || {};
    };
    Workspace.prototype.initWorkspace = function () {
        // 创建工作区停靠面板容器。
        this.paneContainers = {
            // 创建主区域。
            center: this.createCenter(),
            // 创建左侧面板。
            left: this.createDock('left'),
            // 创建右侧面板。
            right: this.createDock('right'),
            // 创建底部面板。
            bottom: this.createDock('bottom')
        };
        this.activePaneContainer = this.paneContainers.center;
        // 创建面板容器
        this.panelContainers = {
            top: new panel_container_1.PanelContainer(this.viewRegistry, 'top'),
            left: new panel_container_1.PanelContainer(this.viewRegistry, 'left', this.paneContainers.left),
            right: new panel_container_1.PanelContainer(this.viewRegistry, 'right', this.paneContainers.right),
            bottom: new panel_container_1.PanelContainer(this.viewRegistry, 'bottom', this.paneContainers.bottom),
            header: new panel_container_1.PanelContainer(this.viewRegistry, 'header'),
            footer: new panel_container_1.PanelContainer(this.viewRegistry, 'footer'),
            modal: new panel_container_1.PanelContainer(this.viewRegistry, 'modal')
        };
    };
    Object.defineProperty(Workspace.prototype, "paneContainer", {
        get: function () {
            return this.paneContainers.center.paneContainer;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 返回工作区元素
     */
    /**
       * 返回工作区元素
       */
    Workspace.prototype.getElement = /**
       * 返回工作区元素
       */
    function () {
    };
    /**
     * 创建主面板
     */
    /**
       * 创建主面板
       */
    Workspace.prototype.createCenter = /**
       * 创建主面板
       */
    function () {
        return new workspace_center_1.WorkspaceCenter({ viewRegistry: this.viewRegistry });
    };
    /**
     * 创建停靠面板
     * @param {*} location 停靠面板位置
     */
    /**
       * 创建停靠面板
       * @param {*} location 停靠面板位置
       */
    Workspace.prototype.createDock = /**
       * 创建停靠面板
       * @param {*} location 停靠面板位置
       */
    function (location) {
        return new dock_1.Dock({
            location: location,
            viewRegistry: this.viewRegistry
        });
    };
    /**
     * 重置工作区
     * @param {*} packageManager 包管理器
     */
    /**
       * 重置工作区
       * @param {*} packageManager 包管理器
       */
    Workspace.prototype.reset = /**
       * 重置工作区
       * @param {*} packageManager 包管理器
       */
    function (packageManager) {
        this.packageManager = packageManager;
        this.destroyed();
        this.initWorkspace();
    };
    // Called by the Serializable mixin during serialization.
    /**
     * 序列化工作区配置
     */
    // Called by the Serializable mixin during serialization.
    /**
       * 序列化工作区配置
       */
    Workspace.prototype.serialize = 
    // Called by the Serializable mixin during serialization.
    /**
       * 序列化工作区配置
       */
    function () {
    };
    /**
     * 反序列化工作区配置
     * @param {*} state
     * @param {*} deserializerManager
     */
    /**
       * 反序列化工作区配置
       * @param {*} state
       * @param {*} deserializerManager
       */
    Workspace.prototype.deserialize = /**
       * 反序列化工作区配置
       * @param {*} state
       * @param {*} deserializerManager
       */
    function (state, deserializerManager) {
    };
    // Updates the application's title and proxy icon based on whichever file is
    // open.
    // Updates the application's title and proxy icon based on whichever file is
    // open.
    Workspace.prototype.updateWindowTitle = 
    // Updates the application's title and proxy icon based on whichever file is
    // open.
    function () {
    };
    Workspace.prototype.open = function (itemOrURI, options) {
        if (options === void 0) { options = {}; }
        var uri, item;
        if (typeof itemOrURI === 'string') {
            uri = itemOrURI; // this.project.resolvePath(itemOrURI);
        }
        else if (itemOrURI) {
            item = itemOrURI;
            if (typeof item.getURI === 'function') {
                uri = item.getURI();
            }
        }
        if (!this.config.get('core.allowPendingPaneItems')) {
            options.pending = false;
        }
        // Avoid adding URLs as recent documents to work-around this Spotlight crash:
        // https://github.com/atom/atom/issues/10071
        // if (uri && (!url.parse(uri).protocol || process.platform === 'win32')) {
        //   this.applicationDelegate.addRecentDocument(uri);
        // }
        var pane, itemExistsInWorkspace;
        // Try to find an existing item in the workspace.
        if (item || uri) {
            if (options.pane) {
                pane = options.pane;
            }
            else if (options.searchAllPanes) {
                pane = item ? this.paneForItem(item) : this.paneForURI(uri);
            }
            else {
                // If an item with the given URI is already in the workspace, assume
                // that item's pane container is the preferred location for that URI.
                var container = void 0;
                if (uri) {
                    container = this.paneContainerForURI(uri);
                }
                if (!container) {
                    container = this.getActivePaneContainer();
                }
                // The `split` option affects where we search for the item.
                pane = container.getActivePane();
                switch (options.split) {
                    case 'left':
                        pane = pane.findLeftmostSibling();
                        break;
                    case 'right':
                        pane = pane.findRightmostSibling();
                        break;
                    case 'up':
                        pane = pane.findTopmostSibling();
                        break;
                    case 'down':
                        pane = pane.findBottommostSibling();
                        break;
                }
            }
            if (pane) {
                if (item) {
                    itemExistsInWorkspace = pane.getItems().includes(item);
                }
                else {
                    item = pane.itemForURI(uri);
                    itemExistsInWorkspace = item != null;
                }
            }
        }
        // If we already have an item at this stage, we won't need to do an async
        // lookup of the URI, so we yield the event loop to ensure this method
        // is consistently asynchronous.
        if (item) {
            Promise.resolve();
        }
        if (!itemExistsInWorkspace) {
            item = item || this.createItemForURI(uri, options);
            if (!item) {
                return;
            }
            if (options.pane) {
                pane = options.pane;
            }
            else {
                var location_1 = options.location;
                // if (!location && !options.split && uri && this.enablePersistence) {
                //   // location = await;
                //   this.itemLocationStore.load(uri);
                // }
                if (!location_1 && typeof item.getDefaultLocation === 'function') {
                    location_1 = item.getDefaultLocation();
                }
                var allowedLocations = typeof item.getAllowedLocations === 'function' ? item.getAllowedLocations() : ALL_LOCATIONS;
                location_1 = allowedLocations.includes(location_1) ? location_1 : allowedLocations[0];
                var container = this.paneContainers[location_1] || this.getCenter();
                pane = container.getActivePane();
                switch (options.split) {
                    case 'left':
                        pane = pane.findLeftmostSibling();
                        break;
                    case 'right':
                        pane = pane.findOrCreateRightmostSibling();
                        break;
                    case 'up':
                        pane = pane.findTopmostSibling();
                        break;
                    case 'down':
                        pane = pane.findOrCreateBottommostSibling();
                        break;
                }
            }
        }
        if (!options.pending && (pane.getPendingItem() === item)) {
            pane.clearPendingItem();
        }
        this.itemOpened(item);
        if (options.activateItem === false) {
            pane.addItem(item, { pending: options.pending });
        }
        else {
            pane.activateItem(item, { pending: options.pending });
        }
        if (options.activatePane !== false) {
            pane.activate();
        }
        var initialColumn = 0;
        var initialLine = 0;
        if (!Number.isNaN(options.initialLine)) {
            initialLine = options.initialLine;
        }
        if (!Number.isNaN(options.initialColumn)) {
            initialColumn = options.initialColumn;
        }
        if (initialLine >= 0 || initialColumn >= 0) {
            if (typeof item.setCursorBufferPosition === 'function') {
                item.setCursorBufferPosition([initialLine, initialColumn]);
            }
        }
        var index = pane.getActiveItemIndex();
        return item;
    };
    Workspace.prototype.hide = function (itemOrURI) {
        var foundItems = false;
        // If any visible item has the given URI, hide it
        for (var _i = 0, _a = this.getPaneContainers(); _i < _a.length; _i++) {
            var container = _a[_i];
            var isCenter = container === this.getCenter();
            if (isCenter || container.isVisible()) {
                for (var _b = 0, _c = container.getPanes(); _b < _c.length; _b++) {
                    var pane = _c[_b];
                    var activeItem = pane.getActiveItem();
                    var foundItem = (activeItem != null && (activeItem === itemOrURI ||
                        typeof activeItem.getURI === 'function' && activeItem.getURI() === itemOrURI));
                    if (foundItem) {
                        foundItems = true;
                        // We can't really hide the center so we just destroy the item.
                        if (isCenter) {
                            pane.destroyItem(activeItem);
                        }
                        else {
                            container.hide();
                        }
                    }
                }
            }
        }
        return foundItems;
    };
    Workspace.prototype.toggle = function (itemOrURI) {
        if (this.hide(itemOrURI)) {
            return Promise.resolve();
        }
        else {
            return this.open(itemOrURI, { searchAllPanes: true });
        }
    };
    Workspace.prototype.openSync = function (uri_, options) {
        if (uri_ === void 0) { uri_ = ''; }
        if (options === void 0) { options = { initialColumn: '', initialLine: '', activateItem: '', activatePane: '' }; }
        var initialLine = options.initialLine, initialColumn = options.initialColumn;
        var activatePane = options.activatePane != null ? options.activatePane : true;
        var activateItem = options.activateItem != null ? options.activateItem : true;
        var uri = uri_; // this.project.resolvePath(uri_);
        var item = this.getActivePane().itemForURI(uri);
        if (uri && (item == null)) {
            for (var _i = 0, _a = this.getOpeners(); _i < _a.length; _i++) {
                var opener_1 = _a[_i];
                item = opener_1(uri, options);
                if (item) {
                    break;
                }
            }
        }
        if (item == null) {
            item = this.project.openSync(uri, { initialLine: initialLine, initialColumn: initialColumn });
        }
        if (activateItem) {
            this.getActivePane().activateItem(item);
        }
        this.itemOpened(item);
        if (activatePane) {
            this.getActivePane().activate();
        }
        return item;
    };
    Workspace.prototype.openURIInPane = function (uri, pane) {
        return this.open(uri, { pane: pane });
    };
    Workspace.prototype.createItemForURI = function (uri, options) {
        if (uri != null) {
            for (var _i = 0, _a = this.getOpeners(); _i < _a.length; _i++) {
                var opener_2 = _a[_i];
                var item = opener_2(uri, options);
                if (item != null) {
                    if (!item.getURI || typeof item.getURI !== 'function' || !item.getUri || typeof item.getURI !== 'function') {
                        item.getUri = function () { return uri; };
                    }
                    return item;
                }
            }
        }
        try {
            // return this.openTextFile(uri, options);
        }
        catch (error) {
            // switch (error.code) {
            //   case 'CANCELLED':
            //     return Promise.resolve();
            //   case 'EACCES':
            //     this.notificationManager.addWarning(`Permission denied '${error.path}'`);
            //     return Promise.resolve();
            //   case 'EPERM':
            //   case 'EBUSY':
            //   case 'ENXIO':
            //   case 'EIO':
            //   case 'ENOTCONN':
            //   case 'UNKNOWN':
            //   case 'ECONNRESET':
            //   case 'EINVAL':
            //   case 'EMFILE':
            //   case 'ENOTDIR':
            //   case 'EAGAIN':
            //     this.notificationManager.addWarning(
            //       `Unable to open '${error.path != null ? error.path : uri}'`,
            //       { detail: error.message }
            //     );
            //     return Promise.resolve();
            //   default:
            //     throw error;
            // }
        }
    };
    Workspace.prototype.reopenItem = function () {
        var uri = this.destroyedItemURIs.pop();
        if (uri) {
            return this.open(uri);
        }
        else {
            return Promise.resolve();
        }
    };
    Workspace.prototype.addOpener = function (opener) {
        this.openers.push(opener);
        // return new Disposable(() => { _.remove(this.openers, opener); });
    };
    Workspace.prototype.getOpeners = function () {
        return this.openers;
    };
    Workspace.prototype.getPaneItems = function () {
        return new Array().concat(this.getPaneContainers().map(function (container) { return container.getPaneItems(); }));
    };
    Workspace.prototype.getActivePaneItem = function () {
        return this.getActivePaneContainer().getActivePaneItem();
    };
    Workspace.prototype.saveAll = function () {
        this.getPaneContainers().forEach(function (container) {
            container.saveAll();
        });
    };
    Workspace.prototype.confirmClose = function (options) {
        return Promise.all(this.getPaneContainers().map(function (container) {
            return container.confirmClose(options);
        })).then(function (results) { return !results.find(function (item) { return item === false; }); });
    };
    Workspace.prototype.saveActivePaneItem = function () {
        return this.getCenter().getActivePane().saveActiveItem();
    };
    Workspace.prototype.saveActivePaneItemAs = function () {
        this.getCenter().getActivePane().saveActiveItemAs();
    };
    Workspace.prototype.destroyActivePaneItem = function () {
        return this.getActivePane().destroyActiveItem();
    };
    Workspace.prototype.getActivePaneContainer = function () {
        return this.activePaneContainer;
    };
    Workspace.prototype.getPanes = function () {
        return new Array().concat(this.getPaneContainers().map(function (container) { return container.getPanes(); }));
    };
    Workspace.prototype.getVisiblePanes = function () {
        return new Array().concat(this.getVisiblePaneContainers().map(function (container) { return container.getPanes(); }));
    };
    Workspace.prototype.getActivePane = function () {
        return this.getActivePaneContainer().getActivePane();
    };
    Workspace.prototype.activateNextPane = function () {
        return this.getActivePaneContainer().activateNextPane();
    };
    Workspace.prototype.activatePreviousPane = function () {
        return this.getActivePaneContainer().activatePreviousPane();
    };
    Workspace.prototype.paneContainerForURI = function (uri) {
        return this.getPaneContainers().find(function (container) { return !!container.paneForURI(uri); });
    };
    Workspace.prototype.paneContainerForItem = function (uri) {
        return this.getPaneContainers().find(function (container) { return !!container.paneForItem(uri); });
    };
    Workspace.prototype.paneForURI = function (uri) {
        for (var _i = 0, _a = this.getPaneContainers(); _i < _a.length; _i++) {
            var location_2 = _a[_i];
            var pane = location_2.paneForURI(uri);
            if (pane != null) {
                return pane;
            }
        }
    };
    Workspace.prototype.paneForItem = function (item) {
        for (var _i = 0, _a = this.getPaneContainers(); _i < _a.length; _i++) {
            var location_3 = _a[_i];
            var pane = location_3.paneForItem(item);
            if (pane != null) {
                return pane;
            }
        }
    };
    Workspace.prototype.destroyActivePane = function () {
        var activePane = this.getActivePane();
        if (activePane != null) {
            activePane.destroy();
        }
    };
    Workspace.prototype.closeActivePaneItemOrEmptyPaneOrWindow = function () {
        if (this.getCenter().getActivePaneItem() != null) {
            this.getCenter().getActivePane().destroyActiveItem();
        }
        else if (this.getCenter().getPanes().length > 1) {
            this.getCenter().destroyActivePane();
        }
        else if (this.config.get('core.closeEmptyWindows')) {
            // 原为关闭atom应用窗口。ide中暂不关闭整个窗口。
            // atom.close();
        }
    };
    Workspace.prototype.itemOpened = function (item) {
    };
    Workspace.prototype.destroyed = function () {
        this.paneContainers.center.destroy();
        this.paneContainers.left.destroy();
        this.paneContainers.right.destroy();
        this.paneContainers.bottom.destroy();
        for (var panelLocation in this.panelContainers) {
            if (this.panelContainers.hasOwnProperty(panelLocation)) {
                var panelContainer = this.panelContainers[panelLocation];
                this.paneContainer.destroy();
            }
        }
    };
    Workspace.prototype.getCenter = function () {
        return this.paneContainers.center;
    };
    Workspace.prototype.getLeftDock = function () {
        return this.paneContainers.left;
    };
    Workspace.prototype.getRightDock = function () {
        return this.paneContainers.right;
    };
    Workspace.prototype.getBottomDock = function () {
        return this.paneContainers.bottom;
    };
    Workspace.prototype.getPaneContainers = function () {
        return [
            this.paneContainers.center,
            this.paneContainers.left,
            this.paneContainers.right,
            this.paneContainers.bottom
        ];
    };
    Workspace.prototype.getVisiblePaneContainers = function () {
        var center = this.getCenter();
        return this.getPaneContainers()
            .filter(function (container) { return container === center || container.isVisible(); });
    };
    Workspace.prototype.getBottomPanels = function () {
        return this.getPanels('bottom');
    };
    Workspace.prototype.addBottomPanel = function (options) {
        return this.addPanel('bottom', options);
    };
    Workspace.prototype.getLeftPanels = function () {
        return this.getPanels('left');
    };
    Workspace.prototype.addLeftPanel = function (options) {
        return this.addPanel('left', options);
    };
    Workspace.prototype.getRightPanels = function () {
        return this.getPanels('right');
    };
    Workspace.prototype.addRightPanel = function (options) {
        return this.addPanel('right', options);
    };
    Workspace.prototype.getTopPanels = function () {
        return this.getPanels('top');
    };
    Workspace.prototype.addTopPanel = function (options) {
        return this.addPanel('top', options);
    };
    Workspace.prototype.getHeaderPanels = function () {
        return this.getPanels('header');
    };
    Workspace.prototype.addHeaderPanel = function (options) {
        return this.addPanel('header', options);
    };
    Workspace.prototype.getFooterPanels = function () {
        return this.getPanels('footer');
    };
    Workspace.prototype.addFooterPanel = function (options) {
        return this.addPanel('footer', options);
    };
    Workspace.prototype.getModalPanels = function () {
        return this.getPanels('modal');
    };
    Workspace.prototype.addModalPanel = function (options) {
        return this.addPanel('modal', options);
    };
    Workspace.prototype.panelForItem = function (item) {
        for (var location_4 in this.panelContainers) {
            if (this.panelContainers.hasOwnProperty(location_4)) {
                var panel = this.panelContainers[location_4].panelForItem(item);
                if (panel != null) {
                    return panel;
                }
            }
        }
        return null;
    };
    Workspace.prototype.getPanelContainer = function (location) {
        return this.panelContainers[location];
    };
    Workspace.prototype.getPanels = function (location) {
        return this.panelContainers[location].getPanels();
    };
    Workspace.prototype.addPanel = function (location, options) {
        var panel = new panel_1.Panel(options, this.viewRegistry);
        return this.panelContainers[location].addPanel(panel);
    };
    return Workspace;
}());
exports.Workspace = Workspace;
//# sourceMappingURL=workspace.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/ideframework/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
var eventbus_1 = __webpack_require__("./node_modules/@farris/ide-devkit/ideframework/eventbus/index.js");
exports.EventBus = eventbus_1.EventBus;
exports.EventBusProxy = eventbus_1.EventBusProxy;
exports.EventPipe = eventbus_1.EventPipe;
__export(__webpack_require__("./node_modules/@farris/ide-devkit/ideframework/gsp/index.js"));
var package_1 = __webpack_require__("./node_modules/@farris/ide-devkit/ideframework/package/index.js");
exports.Package = package_1.Package;
exports.PackageModule = package_1.PackageModule;
exports.PackageView = package_1.PackageView;
var util_1 = __webpack_require__("./node_modules/@farris/ide-devkit/ideframework/util/index.js");
exports.Util = util_1.Util;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/ideframework/package/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__("./node_modules/@farris/ide-devkit/ideframework/package/package.js"));
__export(__webpack_require__("./node_modules/@farris/ide-devkit/ideframework/package/package-module.js"));
__export(__webpack_require__("./node_modules/@farris/ide-devkit/ideframework/package/package-view.js"));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/ideframework/package/package-module.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var package_1 = __webpack_require__("./node_modules/@farris/ide-devkit/ideframework/package/package.js");
var PackageModule = /** @class */ (function () {
    function PackageModule() {
    }
    PackageModule.prototype.getPackage = function (gsp) {
        if (!this.package) {
            this.initPackage(gsp);
        }
        return this.package;
    };
    PackageModule.prototype.initPackage = function (gsp) {
        this.package = new package_1.Package(gsp);
    };
    return PackageModule;
}());
exports.PackageModule = PackageModule;
//# sourceMappingURL=package-module.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/ideframework/package/package-view.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var PackageView = /** @class */ (function () {
    function PackageView(serializedState) {
    }
    PackageView.prototype.getElement = function () {
        return this.element;
    };
    /**
     * Returns an object that can be retrieved when package is activated.
     */
    /**
       * Returns an object that can be retrieved when package is activated.
       */
    PackageView.prototype.serialize = /**
       * Returns an object that can be retrieved when package is activated.
       */
    function () { };
    PackageView.prototype.destroy = function () {
    };
    return PackageView;
}());
exports.PackageView = PackageView;
//# sourceMappingURL=package-view.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/ideframework/package/package.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var package_view_1 = __webpack_require__("./node_modules/@farris/ide-devkit/ideframework/package/package-view.js");
var Package = /** @class */ (function () {
    function Package(gsp) {
        this.gsp = gsp;
        // leftPanel: any;
        // modelPanel: any;
        this.subscriptions = [];
        this.packageId = gsp.util.newGuid();
    }
    Object.defineProperty(Package.prototype, "id", {
        get: function () {
            return this.packageId;
        },
        set: function (value) {
            this.packageId = value;
        },
        enumerable: true,
        configurable: true
    });
    Package.prototype.activate = function (state) {
        this.packageView = new package_view_1.PackageView(state.sagipackageViewState);
        // /*this.leftPanel = */this.ws.addLeftPanel({
        //   title: 'test',
        //   item: this.packageView.getComponent(),
        //   visible: false
        // });
    };
    Package.prototype.deactivate = function () {
        this.packageView.destroy();
    };
    Package.prototype.serialize = function () {
        return {
            sagipackageViewState: this.packageView.serialize()
        };
    };
    Package.prototype.toggle = function () {
        // return (
        //   this.modelPanel.isVisible() ?
        //     this.modelPanel.hide() :
        //     this.modelPanel.show()
        // );
    };
    Package.prototype.getComponent = function () {
        return null;
    };
    return Package;
}());
exports.Package = Package;
//# sourceMappingURL=package.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/ideframework/util/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__("./node_modules/@farris/ide-devkit/ideframework/util/util.js"));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/ideframework/util/util.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var Util = /** @class */ (function () {
    function Util() {
    }
    Util.prototype.newGuid = function () {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            // noinspection TsLint
            var r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    };
    Util.decorators = [
        { type: core_1.Injectable },
    ];
    return Util;
}());
exports.Util = Util;
//# sourceMappingURL=util.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__("./node_modules/@farris/ide-devkit/components/index.js"));
__export(__webpack_require__("./node_modules/@farris/ide-devkit/ideframework/index.js"));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/services/cache/cache.module.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var cache_localstorage_service_1 = __webpack_require__("./node_modules/@farris/ide-devkit/services/cache/services/storage/localstorage/cache.localstorage.service.js");
var cache_memory_service_1 = __webpack_require__("./node_modules/@farris/ide-devkit/services/cache/services/storage/memory/cache.memory.service.js");
var cache_sessionstorage_service_1 = __webpack_require__("./node_modules/@farris/ide-devkit/services/cache/services/storage/sessionstorage/cache.sessionstorage.service.js");
var cache_service_1 = __webpack_require__("./node_modules/@farris/ide-devkit/services/cache/services/cache.service.js");
var CacheModule = /** @class */ (function () {
    function CacheModule() {
    }
    CacheModule.forRoot = function () {
        return {
            ngModule: CacheModule,
            providers: [
                cache_localstorage_service_1.CacheLocalStorage,
                cache_memory_service_1.CacheMemoryStorage,
                cache_sessionstorage_service_1.CacheSessionStorage,
                cache_service_1.CacheService
            ]
        };
    };
    CacheModule.decorators = [
        { type: core_1.NgModule, args: [{
                    declarations: []
                },] },
    ];
    return CacheModule;
}());
exports.CacheModule = CacheModule;
//# sourceMappingURL=cache.module.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/services/cache/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var cache_service_1 = __webpack_require__("./node_modules/@farris/ide-devkit/services/cache/services/cache.service.js");
exports.CacheService = cache_service_1.CacheService;
var cache_storage_abstract_service_1 = __webpack_require__("./node_modules/@farris/ide-devkit/services/cache/services/storage/cache.storage.abstract.service.js");
exports.CacheStorageAbstract = cache_storage_abstract_service_1.CacheStorageAbstract;
var cache_localstorage_service_1 = __webpack_require__("./node_modules/@farris/ide-devkit/services/cache/services/storage/localstorage/cache.localstorage.service.js");
exports.CacheLocalStorage = cache_localstorage_service_1.CacheLocalStorage;
var cache_memory_service_1 = __webpack_require__("./node_modules/@farris/ide-devkit/services/cache/services/storage/memory/cache.memory.service.js");
exports.CacheMemoryStorage = cache_memory_service_1.CacheMemoryStorage;
var cache_sessionstorage_service_1 = __webpack_require__("./node_modules/@farris/ide-devkit/services/cache/services/storage/sessionstorage/cache.sessionstorage.service.js");
exports.CacheSessionStorage = cache_sessionstorage_service_1.CacheSessionStorage;
var cache_module_1 = __webpack_require__("./node_modules/@farris/ide-devkit/services/cache/cache.module.js");
exports.CacheModule = cache_module_1.CacheModule;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/services/cache/services/cache.service.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var cache_storage_abstract_service_1 = __webpack_require__("./node_modules/@farris/ide-devkit/services/cache/services/storage/cache.storage.abstract.service.js");
var cache_sessionstorage_service_1 = __webpack_require__("./node_modules/@farris/ide-devkit/services/cache/services/storage/sessionstorage/cache.sessionstorage.service.js");
var cache_localstorage_service_1 = __webpack_require__("./node_modules/@farris/ide-devkit/services/cache/services/storage/localstorage/cache.localstorage.service.js");
var cache_memory_service_1 = __webpack_require__("./node_modules/@farris/ide-devkit/services/cache/services/storage/memory/cache.memory.service.js");
var CACHE_PREFIX = 'CacheService';
var DEFAULT_STORAGE = 2 /* MEMORY */;
var DEFAULT_ENABLED_STORAGE = 1 /* SESSION_STORAGE */;
var CacheService = /** @class */ (function () {
    function CacheService(_storage) {
        this._storage = _storage;
        /**
             * Default cache options
             * @type CacheOptionsInterface
             * @private
             */
        this._defaultOptions = {
            expires: Number.MAX_VALUE,
            maxAge: Number.MAX_VALUE
        };
        /**
             * Cache prefix
             */
        this._prefix = CACHE_PREFIX;
        this._validateStorage();
    }
    /**
     * Set data to cache
     * @param key
     * @param value
     * @param options
     */
    /**
         * Set data to cache
         * @param key
         * @param value
         * @param options
         */
    CacheService.prototype.set = /**
         * Set data to cache
         * @param key
         * @param value
         * @param options
         */
    function (key, value, options) {
        var storageKey = this._toStorageKey(key);
        options = options ? options : this._defaultOptions;
        if (this._storage.setItem(storageKey, this._toStorageValue(value, options))) {
            if (!this._isSystemKey(key) && options.tag) {
                this._saveTag(options.tag, storageKey);
            }
            return true;
        }
        return false;
    };
    /**
     * Get data from cache
     * @param key
     * @returns {any}
     */
    /**
         * Get data from cache
         * @param key
         * @returns {any}
         */
    CacheService.prototype.get = /**
         * Get data from cache
         * @param key
         * @returns {any}
         */
    function (key) {
        var storageValue = this._storage.getItem(this._toStorageKey(key));
        var value = null;
        if (storageValue) {
            if (this._validateStorageValue(storageValue)) {
                value = storageValue.value;
            }
            else {
                this.remove(key);
            }
        }
        return value;
    };
    /**
     * Check if value exists
     * @param key
     * @returns {boolean}
     */
    /**
         * Check if value exists
         * @param key
         * @returns {boolean}
         */
    CacheService.prototype.exists = /**
         * Check if value exists
         * @param key
         * @returns {boolean}
         */
    function (key) {
        return !!this.get(key);
    };
    /**
     * Remove item from cache
     * @param key
     */
    /**
         * Remove item from cache
         * @param key
         */
    CacheService.prototype.remove = /**
         * Remove item from cache
         * @param key
         */
    function (key) {
        this._storage.removeItem(this._toStorageKey(key));
        this._removeFromTag(this._toStorageKey(key));
    };
    /**
     * Remove all from cache
     */
    /**
         * Remove all from cache
         */
    CacheService.prototype.removeAll = /**
         * Remove all from cache
         */
    function () {
        this._storage.clear();
    };
    /**
     * Get all tag data
     * @param tag
     * @returns {Array}
     */
    /**
         * Get all tag data
         * @param tag
         * @returns {Array}
         */
    CacheService.prototype.getTagData = /**
         * Get all tag data
         * @param tag
         * @returns {Array}
         */
    function (tag) {
        var _this = this;
        var tags = this.get(this._tagsStorageKey()) || {};
        var result = {};
        if (tags[tag]) {
            tags[tag].forEach(function (key) {
                var data = _this.get(_this._fromStorageKey(key));
                if (data) {
                    result[_this._fromStorageKey(key)] = data;
                }
            });
        }
        return result;
    };
    /**
     * Create a new instance of cache with needed storage
     * @param type
     * @returns {CacheService}
     */
    /**
         * Create a new instance of cache with needed storage
         * @param type
         * @returns {CacheService}
         */
    CacheService.prototype.useStorage = /**
         * Create a new instance of cache with needed storage
         * @param type
         * @returns {CacheService}
         */
    function (type) {
        var service = new CacheService(this._initStorage(type));
        service.setGlobalPrefix(this._getCachePrefix());
        return service;
    };
    /**
     * Remove all by tag
     * @param tag
     */
    /**
         * Remove all by tag
         * @param tag
         */
    CacheService.prototype.removeTag = /**
         * Remove all by tag
         * @param tag
         */
    function (tag) {
        var _this = this;
        var tags = this.get(this._tagsStorageKey()) || {};
        if (tags[tag]) {
            tags[tag].forEach(function (key) {
                _this._storage.removeItem(key);
            });
            delete tags[tag];
            this.set(this._tagsStorageKey(), tags);
        }
    };
    /**
     * Set global cache key prefix
     * @param prefix
     */
    /**
         * Set global cache key prefix
         * @param prefix
         */
    CacheService.prototype.setGlobalPrefix = /**
         * Set global cache key prefix
         * @param prefix
         */
    function (prefix) {
        this._prefix = prefix;
    };
    /**
     * Validate cache storage
     * @private
     */
    /**
         * Validate cache storage
         * @private
         */
    CacheService.prototype._validateStorage = /**
         * Validate cache storage
         * @private
         */
    function () {
        if (!this._storage) {
            this._storage = this._initStorage(DEFAULT_STORAGE);
        }
        if (!this._storage.isEnabled()) {
            this._storage = this._initStorage(DEFAULT_ENABLED_STORAGE);
        }
    };
    /**
     * Remove key from tags keys list
     * @param key
     * @private
     */
    /**
         * Remove key from tags keys list
         * @param key
         * @private
         */
    CacheService.prototype._removeFromTag = /**
         * Remove key from tags keys list
         * @param key
         * @private
         */
    function (key) {
        // tslint:disable-next-line:prefer-const
        var tags = this.get(this._tagsStorageKey()) || {};
        var index;
        // tslint:disable-next-line:forin
        for (var tag in tags) {
            index = tags[tag].indexOf(key);
            if (index !== -1) {
                tags[tag].splice(index, 1);
                this.set(this._tagsStorageKey(), tags);
                break;
            }
        }
    };
    /**
     * Init storage by type
     * @param type
     * @returns {CacheStorageAbstract}
     */
    /**
         * Init storage by type
         * @param type
         * @returns {CacheStorageAbstract}
         */
    CacheService.prototype._initStorage = /**
         * Init storage by type
         * @param type
         * @returns {CacheStorageAbstract}
         */
    function (type) {
        var storage;
        switch (type) {
            case 1 /* SESSION_STORAGE */:
                storage = new cache_sessionstorage_service_1.CacheSessionStorage();
                break;
            case 0 /* LOCAL_STORAGE */:
                storage = new cache_localstorage_service_1.CacheLocalStorage();
                break;
            default: storage = new cache_memory_service_1.CacheMemoryStorage();
        }
        return storage;
    };
    CacheService.prototype._toStorageKey = function (key) {
        return this._getCachePrefix() + key;
    };
    CacheService.prototype._fromStorageKey = function (key) {
        return key.replace(this._getCachePrefix(), '');
    };
    /**
     * Prepare value to set to storage
     * @param value
     * @param options
     * @returns {{value: any, options: CacheOptionsInterface}}
     * @private
     */
    /**
         * Prepare value to set to storage
         * @param value
         * @param options
         * @returns {{value: any, options: CacheOptionsInterface}}
         * @private
         */
    CacheService.prototype._toStorageValue = /**
         * Prepare value to set to storage
         * @param value
         * @param options
         * @returns {{value: any, options: CacheOptionsInterface}}
         * @private
         */
    function (value, options) {
        return {
            value: value,
            options: this._toStorageOptions(options)
        };
    };
    /**
     * Prepare options to set to storage
     * @param options
     * @returns {CacheOptionsInterface}
     * @private
     */
    /**
         * Prepare options to set to storage
         * @param options
         * @returns {CacheOptionsInterface}
         * @private
         */
    CacheService.prototype._toStorageOptions = /**
         * Prepare options to set to storage
         * @param options
         * @returns {CacheOptionsInterface}
         * @private
         */
    function (options) {
        var storageOptions = {};
        storageOptions.expires = options.expires ? options.expires :
            (options.maxAge ? Date.now() + (options.maxAge * 1000) : this._defaultOptions.expires);
        storageOptions.maxAge = options.maxAge ? options.maxAge : this._defaultOptions.maxAge;
        return storageOptions;
    };
    /**
     * Validate storage value
     * @param value
     * @returns {boolean}
     * @private
     */
    /**
         * Validate storage value
         * @param value
         * @returns {boolean}
         * @private
         */
    CacheService.prototype._validateStorageValue = /**
         * Validate storage value
         * @param value
         * @returns {boolean}
         * @private
         */
    function (value) {
        return !!value.options.expires && value.options.expires > Date.now();
    };
    /**
     * check if its system cache key
     * @param key
     * @returns {boolean}
     * @private
     */
    /**
         * check if its system cache key
         * @param key
         * @returns {boolean}
         * @private
         */
    CacheService.prototype._isSystemKey = /**
         * check if its system cache key
         * @param key
         * @returns {boolean}
         * @private
         */
    function (key) {
        return [this._tagsStorageKey()].indexOf(key) !== -1;
    };
    /**
     * Save tag to list of tags
     * @param tag
     * @param key
     * @private
     */
    /**
         * Save tag to list of tags
         * @param tag
         * @param key
         * @private
         */
    CacheService.prototype._saveTag = /**
         * Save tag to list of tags
         * @param tag
         * @param key
         * @private
         */
    function (tag, key) {
        var tags = this.get(this._tagsStorageKey()) || {};
        if (!tags[tag]) {
            tags[tag] = [key];
        }
        else {
            tags[tag].push(key);
        }
        this.set(this._tagsStorageKey(), tags);
    };
    /**
     * Get global cache prefix
     * @returns {string}
     * @private
     */
    /**
         * Get global cache prefix
         * @returns {string}
         * @private
         */
    CacheService.prototype._getCachePrefix = /**
         * Get global cache prefix
         * @returns {string}
         * @private
         */
    function () {
        return this._prefix;
    };
    CacheService.prototype._tagsStorageKey = function () {
        return 'CacheService_tags';
    };
    CacheService.decorators = [
        { type: core_1.Injectable },
    ];
    /** @nocollapse */
    CacheService.ctorParameters = function () { return [
        { type: cache_storage_abstract_service_1.CacheStorageAbstract, decorators: [{ type: core_1.Optional },] },
    ]; };
    return CacheService;
}());
exports.CacheService = CacheService;
//# sourceMappingURL=cache.service.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/services/cache/services/storage/cache.storage.abstract.service.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Abstract cache storage
 */
var /**
 * Abstract cache storage
 */
CacheStorageAbstract = /** @class */ (function () {
    function CacheStorageAbstract() {
    }
    return CacheStorageAbstract;
}());
exports.CacheStorageAbstract = CacheStorageAbstract;
//# sourceMappingURL=cache.storage.abstract.service.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/services/cache/services/storage/localstorage/cache.localstorage.service.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var cache_storage_abstract_service_1 = __webpack_require__("./node_modules/@farris/ide-devkit/services/cache/services/storage/cache.storage.abstract.service.js");
/**
 * Service for storing data in local storage
 */
var CacheLocalStorage = /** @class */ (function (_super) {
    __extends(CacheLocalStorage, _super);
    function CacheLocalStorage() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CacheLocalStorage.prototype.getItem = function (key) {
        var value = localStorage.getItem(key);
        return value ? JSON.parse(value) : null;
    };
    CacheLocalStorage.prototype.setItem = function (key, value) {
        try {
            localStorage.setItem(key, JSON.stringify(value));
            return true;
        }
        catch (e) {
            return false;
        }
    };
    CacheLocalStorage.prototype.removeItem = function (key) {
        localStorage.removeItem(key);
    };
    CacheLocalStorage.prototype.clear = function () {
        localStorage.clear();
    };
    CacheLocalStorage.prototype.type = function () {
        return 0 /* LOCAL_STORAGE */;
    };
    CacheLocalStorage.prototype.isEnabled = function () {
        try {
            localStorage.setItem('test', 'test');
            localStorage.removeItem('test');
            return true;
        }
        catch (e) {
            return false;
        }
    };
    CacheLocalStorage.decorators = [
        { type: core_1.Injectable },
    ];
    return CacheLocalStorage;
}(cache_storage_abstract_service_1.CacheStorageAbstract));
exports.CacheLocalStorage = CacheLocalStorage;
//# sourceMappingURL=cache.localstorage.service.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/services/cache/services/storage/memory/cache.memory.service.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var cache_storage_abstract_service_1 = __webpack_require__("./node_modules/@farris/ide-devkit/services/cache/services/storage/cache.storage.abstract.service.js");
/**
 * Service for storing data in local storage
 */
var CacheMemoryStorage = /** @class */ (function (_super) {
    __extends(CacheMemoryStorage, _super);
    function CacheMemoryStorage() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._data = {};
        return _this;
    }
    CacheMemoryStorage.prototype.getItem = function (key) {
        return this._data[key] ? this._data[key] : null;
    };
    CacheMemoryStorage.prototype.setItem = function (key, value) {
        this._data[key] = value;
        return true;
    };
    CacheMemoryStorage.prototype.removeItem = function (key) {
        delete this._data[key];
    };
    CacheMemoryStorage.prototype.clear = function () {
        this._data = [];
    };
    CacheMemoryStorage.prototype.type = function () {
        return 2 /* MEMORY */;
    };
    CacheMemoryStorage.prototype.isEnabled = function () {
        return true;
    };
    CacheMemoryStorage.decorators = [
        { type: core_1.Injectable },
    ];
    return CacheMemoryStorage;
}(cache_storage_abstract_service_1.CacheStorageAbstract));
exports.CacheMemoryStorage = CacheMemoryStorage;
//# sourceMappingURL=cache.memory.service.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/services/cache/services/storage/sessionstorage/cache.sessionstorage.service.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var cache_storage_abstract_service_1 = __webpack_require__("./node_modules/@farris/ide-devkit/services/cache/services/storage/cache.storage.abstract.service.js");
/**
 * Service for storing data in session storage
 */
var CacheSessionStorage = /** @class */ (function (_super) {
    __extends(CacheSessionStorage, _super);
    function CacheSessionStorage() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CacheSessionStorage.prototype.getItem = function (key) {
        var value = sessionStorage.getItem(key);
        return value ? JSON.parse(value) : null;
    };
    CacheSessionStorage.prototype.setItem = function (key, value) {
        try {
            sessionStorage.setItem(key, JSON.stringify(value));
            return true;
        }
        catch (e) {
            return false;
        }
    };
    CacheSessionStorage.prototype.removeItem = function (key) {
        sessionStorage.removeItem(key);
    };
    CacheSessionStorage.prototype.clear = function () {
        sessionStorage.clear();
    };
    CacheSessionStorage.prototype.type = function () {
        return 1 /* SESSION_STORAGE */;
    };
    CacheSessionStorage.prototype.isEnabled = function () {
        try {
            sessionStorage.setItem('test', 'test');
            sessionStorage.removeItem('test');
            return true;
        }
        catch (e) {
            return false;
        }
    };
    CacheSessionStorage.decorators = [
        { type: core_1.Injectable },
    ];
    return CacheSessionStorage;
}(cache_storage_abstract_service_1.CacheStorageAbstract));
exports.CacheSessionStorage = CacheSessionStorage;
//# sourceMappingURL=cache.sessionstorage.service.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/services/http/http.module.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var http_1 = __webpack_require__("./node_modules/@angular/common/esm5/http.js");
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var http_service_1 = __webpack_require__("./node_modules/@farris/ide-devkit/services/http/http.service.js");
var GSPHttpModule = /** @class */ (function () {
    function GSPHttpModule() {
    }
    GSPHttpModule.decorators = [
        { type: core_1.NgModule, args: [{
                    imports: [
                        http_1.HttpClientModule
                    ],
                    providers: [http_service_1.HttpService]
                },] },
    ];
    return GSPHttpModule;
}());
exports.GSPHttpModule = GSPHttpModule;
//# sourceMappingURL=http.module.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/services/http/http.service.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var http_1 = __webpack_require__("./node_modules/@angular/common/esm5/http.js");
var cache_1 = __webpack_require__("./node_modules/@farris/ide-devkit/services/cache/index.js");
var operators_1 = __webpack_require__("./node_modules/rxjs/operators.js");
var HttpService = /** @class */ (function () {
    function HttpService(http, cache) {
        this.http = http;
        this.cache = cache;
    }
    HttpService.prototype.get = function (url) {
        return this.request('Get', url, this.setHeader({}));
    };
    HttpService.prototype.post = function (url, body) {
        return this.request('Post', url, this.setHeader({ body: body }));
    };
    HttpService.prototype.put = function (url, body) {
        return this.request('Put', url, this.setHeader({ body: body }));
    };
    HttpService.prototype.delete = function (url, body) {
        return this.request('Delete', url, this.setHeader({ body: body }));
    };
    HttpService.prototype.patch = function (url, body) {
        return this.request('Patch', url, this.setHeader({ body: body }));
    };
    HttpService.prototype.setHeader = function (options) {
        options.headers = {
            'Content-Type': 'application/json',
            'Access-Control-Allow-Origin': '*'
        };
        if (this.cache.exists('sessionId') && this.cache.get('sessionId')) {
            options.headers['SessionId'] = this.cache.get('sessionId');
        }
        return options;
    };
    HttpService.prototype.request = function (method, url, options) {
        if (options.body) {
            if (typeof options.body !== 'string') {
                options.body = JSON.stringify(options.body);
            }
        }
        return this.http.request(method, url, options)
            .pipe(operators_1.map(function (data) {
            console.log(data);
            return data;
        }));
    };
    HttpService.decorators = [
        { type: core_1.Injectable },
    ];
    /** @nocollapse */
    HttpService.ctorParameters = function () { return [
        { type: http_1.HttpClient, },
        { type: cache_1.CacheService, },
    ]; };
    return HttpService;
}());
exports.HttpService = HttpService;
//# sourceMappingURL=http.service.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/services/http/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var http_module_1 = __webpack_require__("./node_modules/@farris/ide-devkit/services/http/http.module.js");
exports.GSPHttpModule = http_module_1.GSPHttpModule;
var http_service_1 = __webpack_require__("./node_modules/@farris/ide-devkit/services/http/http.service.js");
exports.HttpService = http_service_1.HttpService;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@farris/ide-devkit/services/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__("./node_modules/@farris/ide-devkit/services/cache/index.js"));
__export(__webpack_require__("./node_modules/@farris/ide-devkit/services/http/index.js"));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/common/farris-common.module.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var safe_pipe_1 = __webpack_require__("./node_modules/@farris/ui/common/safe.pipe.js");
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var id_service_1 = __webpack_require__("./node_modules/@farris/ui/common/id.service.js");
var farris_template_directive_1 = __webpack_require__("./node_modules/@farris/ui/common/farris-template.directive.js");
var FarrisCommonModule = /** @class */ (function () {
    function FarrisCommonModule() {
    }
    FarrisCommonModule.decorators = [
        { type: core_1.NgModule, args: [{
                    declarations: [
                        safe_pipe_1.SafeHtmlPipe,
                        farris_template_directive_1.FarrisTemplateDirective
                    ],
                    providers: [
                        id_service_1.IdService
                    ],
                    exports: [
                        safe_pipe_1.SafeHtmlPipe,
                        farris_template_directive_1.FarrisTemplateDirective
                    ]
                },] },
    ];
    return FarrisCommonModule;
}());
exports.FarrisCommonModule = FarrisCommonModule;
//# sourceMappingURL=farris-common.module.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/common/farris-template.directive.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var FarrisTemplateDirective = /** @class */ (function () {
    function FarrisTemplateDirective(template) {
        this.template = template;
    }
    FarrisTemplateDirective.prototype.getType = function () {
        return this.name;
    };
    FarrisTemplateDirective.decorators = [
        { type: core_1.Directive, args: [{
                    selector: '[farrisTemplate]'
                },] },
    ];
    /** @nocollapse */
    FarrisTemplateDirective.ctorParameters = function () { return [
        { type: core_1.TemplateRef, },
    ]; };
    FarrisTemplateDirective.propDecorators = {
        "type": [{ type: core_1.Input },],
        "name": [{ type: core_1.Input, args: ['farrisTemplate',] },],
    };
    return FarrisTemplateDirective;
}());
exports.FarrisTemplateDirective = FarrisTemplateDirective;
//# sourceMappingURL=farris-template.directive.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/common/id.service.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var IdService = /** @class */ (function () {
    function IdService() {
    }
    /**
     * uuid(8, 2)  //  "01001010"
     * uuid(8, 10) // "47473046"
     * uuid(8, 16) // "098F4D35"
     * @param len 生成长度
     * @param radix 基数
     */
    /**
         * uuid(8, 2)  //  "01001010"
         * uuid(8, 10) // "47473046"
         * uuid(8, 16) // "098F4D35"
         * @param len 生成长度
         * @param radix 基数
         */
    IdService.prototype.uuid = /**
         * uuid(8, 2)  //  "01001010"
         * uuid(8, 10) // "47473046"
         * uuid(8, 16) // "098F4D35"
         * @param len 生成长度
         * @param radix 基数
         */
    function (len, radix) {
        var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');
        var uuid = [], i;
        radix = radix || chars.length;
        if (len) {
            // Compact form
            for (i = 0; i < len; i++) {
                uuid[i] = chars[0 | Math.random() * radix];
            }
        }
        else {
            // rfc4122, version 4 form
            var r = void 0;
            // rfc4122 requires these characters
            uuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';
            uuid[14] = '4';
            // Fill in random data.  At i==19 set the high bits of clock sequence as
            // per rfc4122, sec. 4.1.5
            for (i = 0; i < 36; i++) {
                if (!uuid[i]) {
                    // tslint:disable-next-line:no-bitwise
                    r = 0 | Math.random() * 16;
                    uuid[i] = chars[(i === 19) ? (r & 0x3) | 0x8 : r];
                }
            }
        }
        return uuid.join('');
    };
    /**
     * 生成的格式为“xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx”
     */
    /**
         * 生成的格式为“xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx”
         */
    IdService.prototype.guid = /**
         * 生成的格式为“xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx”
         */
    function () {
        function S4() {
            // tslint:disable-next-line:no-bitwise
            return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
        }
        return (S4() + S4() + '-' + S4() + '-' + S4() + '-' + S4() + '-' + S4() + S4() + S4());
    };
    IdService.decorators = [
        { type: core_1.Injectable },
    ];
    return IdService;
}());
exports.IdService = IdService;
//# sourceMappingURL=id.service.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/common/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__("./node_modules/@farris/ui/common/id.service.js"));
__export(__webpack_require__("./node_modules/@farris/ui/common/safe.pipe.js"));
__export(__webpack_require__("./node_modules/@farris/ui/common/farris-common.module.js"));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/common/safe.pipe.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var platform_browser_1 = __webpack_require__("./node_modules/@angular/platform-browser/esm5/platform-browser.js");
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var SafeHtmlPipe = /** @class */ (function () {
    function SafeHtmlPipe(domSanitized) {
        this.domSanitized = domSanitized;
    }
    SafeHtmlPipe.prototype.transform = function (value) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        return this.domSanitized.bypassSecurityTrustHtml(value);
    };
    SafeHtmlPipe.decorators = [
        { type: core_1.Pipe, args: [{ name: 'safeHtml' },] },
    ];
    /** @nocollapse */
    SafeHtmlPipe.ctorParameters = function () { return [
        { type: platform_browser_1.DomSanitizer, },
    ]; };
    return SafeHtmlPipe;
}());
exports.SafeHtmlPipe = SafeHtmlPipe;
//# sourceMappingURL=safe.pipe.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/container/modal/component-loader/component-loader.class.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var triggers_1 = __webpack_require__("./node_modules/@farris/ui/container/modal/utils/triggers.js");
var content_ref_class_1 = __webpack_require__("./node_modules/@farris/ui/container/modal/component-loader/content-ref.class.js");
var ComponentLoader = /** @class */ (function () {
    /**
     * Do not use this directly, it should be instanced via
     * `ComponentLoadFactory.attach`
     * @internal
     */
    // tslint:disable-next-line
    function ComponentLoader(_viewContainerRef, _renderer, _elementRef, _injector, _componentFactoryResolver, _ngZone, _applicationRef, _posService) {
        this._viewContainerRef = _viewContainerRef;
        this._renderer = _renderer;
        this._elementRef = _elementRef;
        this._injector = _injector;
        this._componentFactoryResolver = _componentFactoryResolver;
        this._ngZone = _ngZone;
        this._applicationRef = _applicationRef;
        this._posService = _posService;
        this.onBeforeShow = new core_1.EventEmitter();
        this.onShown = new core_1.EventEmitter();
        this.onBeforeHide = new core_1.EventEmitter();
        this.onHidden = new core_1.EventEmitter();
        this._providers = [];
        this._isHiding = false;
        this._listenOpts = {};
        this._globalListener = Function.prototype;
    }
    Object.defineProperty(ComponentLoader.prototype, "isShown", {
        get: function () {
            if (this._isHiding) {
                return false;
            }
            return !!this._componentRef;
        },
        enumerable: true,
        configurable: true
    });
    ComponentLoader.prototype.attach = function (compType) {
        this._componentFactory = this._componentFactoryResolver
            .resolveComponentFactory(compType);
        return this;
    };
    // todo: add behaviour: to target element, `body`, custom element
    // todo: add behaviour: to target element, `body`, custom element
    ComponentLoader.prototype.to = 
    // todo: add behaviour: to target element, `body`, custom element
    function (container) {
        this.container = container || this.container;
        return this;
    };
    ComponentLoader.prototype.position = function (opts) {
        this.attachment = opts.attachment || this.attachment;
        this._elementRef = opts.target || this._elementRef;
        return this;
    };
    ComponentLoader.prototype.provide = function (provider) {
        this._providers.push(provider);
        return this;
    };
    // todo: appendChild to element or document.querySelector(this.container)
    // todo: appendChild to element or document.querySelector(this.container)
    ComponentLoader.prototype.show = 
    // todo: appendChild to element or document.querySelector(this.container)
    function (opts) {
        if (opts === void 0) { opts = {}; }
        this._subscribePositioning();
        this._innerComponent = null;
        if (!this._componentRef) {
            this.onBeforeShow.emit();
            this._contentRef = this._getContentRef(opts.content, opts.context, opts.initialState);
            var injector = core_1.ReflectiveInjector.resolveAndCreate(this._providers, this._injector);
            this._componentRef = this._componentFactory.create(injector, this._contentRef.nodes);
            this._applicationRef.attachView(this._componentRef.hostView);
            // this._componentRef = this._viewContainerRef
            //   .createComponent(this._componentFactory, 0, injector, this._contentRef.nodes);
            this.instance = this._componentRef.instance;
            Object.assign(this._componentRef.instance, opts);
            if (this.container instanceof core_1.ElementRef) {
                this.container.nativeElement.appendChild(this._componentRef.location.nativeElement);
            }
            if (this.container === 'body' && typeof document !== 'undefined') {
                document
                    .querySelector(this.container)
                    .appendChild(this._componentRef.location.nativeElement);
            }
            if (!this.container &&
                this._elementRef &&
                this._elementRef.nativeElement.parentElement) {
                this._elementRef.nativeElement.parentElement.appendChild(this._componentRef.location.nativeElement);
            }
            // we need to manually invoke change detection since events registered
            // via
            // Renderer::listen() are not picked up by change detection with the
            // OnPush strategy
            if (this._contentRef.componentRef) {
                this._innerComponent = this._contentRef.componentRef.instance;
                this._contentRef.componentRef.changeDetectorRef.markForCheck();
                this._contentRef.componentRef.changeDetectorRef.detectChanges();
            }
            this._componentRef.changeDetectorRef.markForCheck();
            this._componentRef.changeDetectorRef.detectChanges();
            this.onShown.emit(this._componentRef.instance);
        }
        this._registerOutsideClick();
        return this._componentRef;
    };
    ComponentLoader.prototype.hide = function () {
        if (!this._componentRef) {
            return this;
        }
        this.onBeforeHide.emit(this._componentRef.instance);
        var componentEl = this._componentRef.location.nativeElement;
        componentEl.parentNode.removeChild(componentEl);
        if (this._contentRef.componentRef) {
            this._contentRef.componentRef.destroy();
        }
        this._componentRef.destroy();
        if (this._viewContainerRef && this._contentRef.viewRef) {
            this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._contentRef.viewRef));
        }
        if (this._contentRef.viewRef) {
            this._contentRef.viewRef.destroy();
        }
        // this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._componentRef.hostView));
        //
        // if (this._contentRef.viewRef && this._viewContainerRef.indexOf(this._contentRef.viewRef) !== -1) {
        //   this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._contentRef.viewRef));
        // }
        this._contentRef = null;
        this._componentRef = null;
        this._removeGlobalListener();
        this.onHidden.emit();
        return this;
    };
    ComponentLoader.prototype.toggle = function () {
        if (this.isShown) {
            this.hide();
            return;
        }
        this.show();
    };
    ComponentLoader.prototype.dispose = function () {
        if (this.isShown) {
            this.hide();
        }
        this._unsubscribePositioning();
        if (this._unregisterListenersFn) {
            this._unregisterListenersFn();
        }
    };
    ComponentLoader.prototype.listen = function (listenOpts) {
        var _this = this;
        this.triggers = listenOpts.triggers || this.triggers;
        this._listenOpts.outsideClick = listenOpts.outsideClick;
        listenOpts.target = listenOpts.target || this._elementRef.nativeElement;
        var hide = (this._listenOpts.hide = function () {
            return listenOpts.hide ? listenOpts.hide() : void _this.hide();
        });
        var show = (this._listenOpts.show = function (registerHide) {
            listenOpts.show ? listenOpts.show(registerHide) : _this.show(registerHide);
            registerHide();
        });
        var toggle = function (registerHide) {
            _this.isShown ? hide() : show(registerHide);
        };
        this._unregisterListenersFn = triggers_1.listenToTriggersV2(this._renderer, {
            target: listenOpts.target,
            triggers: listenOpts.triggers,
            show: show,
            hide: hide,
            toggle: toggle
        });
        return this;
    };
    ComponentLoader.prototype._removeGlobalListener = function () {
        if (this._globalListener) {
            this._globalListener();
            this._globalListener = null;
        }
    };
    ComponentLoader.prototype.attachInline = function (vRef, template) {
        this._inlineViewRef = vRef.createEmbeddedView(template);
        return this;
    };
    ComponentLoader.prototype._registerOutsideClick = function () {
        var _this = this;
        if (!this._componentRef || !this._componentRef.location) {
            return;
        }
        // why: should run after first event bubble
        if (this._listenOpts.outsideClick) {
            var target_1 = this._componentRef.location.nativeElement;
            setTimeout(function () {
                _this._globalListener = triggers_1.registerOutsideClick(_this._renderer, {
                    targets: [target_1, _this._elementRef.nativeElement],
                    outsideClick: _this._listenOpts.outsideClick,
                    hide: function () { return _this._listenOpts.hide(); }
                });
            });
        }
    };
    ComponentLoader.prototype.getInnerComponent = function () {
        return this._innerComponent;
    };
    ComponentLoader.prototype._subscribePositioning = function () {
        var _this = this;
        if (this._zoneSubscription || !this.attachment) {
            return;
        }
        this._zoneSubscription = this._ngZone.onStable.subscribe(function () {
            if (!_this._componentRef) {
                return;
            }
            _this._posService.position({
                element: _this._componentRef.location,
                target: _this._elementRef,
                attachment: _this.attachment,
                appendToBody: _this.container === 'body'
            });
        });
    };
    ComponentLoader.prototype._unsubscribePositioning = function () {
        if (!this._zoneSubscription) {
            return;
        }
        this._zoneSubscription.unsubscribe();
        this._zoneSubscription = null;
    };
    ComponentLoader.prototype._getContentRef = function (content, context, initialState) {
        if (!content) {
            return new content_ref_class_1.ContentRef([]);
        }
        if (content instanceof core_1.TemplateRef) {
            if (this._viewContainerRef) {
                var _viewRef = this._viewContainerRef
                    .createEmbeddedView(content, context);
                _viewRef.markForCheck();
                return new content_ref_class_1.ContentRef([_viewRef.rootNodes], _viewRef);
            }
            var viewRef = content.createEmbeddedView({});
            this._applicationRef.attachView(viewRef);
            return new content_ref_class_1.ContentRef([viewRef.rootNodes], viewRef);
        }
        if (content instanceof core_1.ComponentRef) {
            Object.assign(content.instance, initialState);
            this._applicationRef.attachView(content.hostView);
            return new content_ref_class_1.ContentRef([[content.location.nativeElement]], content.hostView, content);
        }
        if (typeof content === 'function') {
            var contentCmptFactory = this._componentFactoryResolver.resolveComponentFactory(content);
            var modalContentInjector = core_1.ReflectiveInjector.resolveAndCreate(this._providers.slice(), this._injector);
            var componentRef = contentCmptFactory.create(modalContentInjector);
            Object.assign(componentRef.instance, initialState);
            this._applicationRef.attachView(componentRef.hostView);
            return new content_ref_class_1.ContentRef([[componentRef.location.nativeElement]], componentRef.hostView, componentRef);
        }
        return new content_ref_class_1.ContentRef([[this._renderer.createText("" + content)]]);
    };
    return ComponentLoader;
}());
exports.ComponentLoader = ComponentLoader;
//# sourceMappingURL=component-loader.class.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/container/modal/component-loader/component-loader.factory.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var component_loader_class_1 = __webpack_require__("./node_modules/@farris/ui/container/modal/component-loader/component-loader.class.js");
var positioning_1 = __webpack_require__("./node_modules/@farris/ui/container/modal/positioning/index.js");
var ComponentLoaderFactory = /** @class */ (function () {
    function ComponentLoaderFactory(_componentFactoryResolver, _ngZone, _injector, _posService, _applicationRef) {
        this._componentFactoryResolver = _componentFactoryResolver;
        this._ngZone = _ngZone;
        this._injector = _injector;
        this._posService = _posService;
        this._applicationRef = _applicationRef;
    }
    /**
     *
     * @param _elementRef
     * @param _viewContainerRef
     * @param _renderer
     * @returns {ComponentLoader}
     */
    /**
       *
       * @param _elementRef
       * @param _viewContainerRef
       * @param _renderer
       * @returns {ComponentLoader}
       */
    ComponentLoaderFactory.prototype.createLoader = /**
       *
       * @param _elementRef
       * @param _viewContainerRef
       * @param _renderer
       * @returns {ComponentLoader}
       */
    function (_elementRef, _viewContainerRef, _renderer) {
        return new component_loader_class_1.ComponentLoader(_viewContainerRef, _renderer, _elementRef, this._injector, this._componentFactoryResolver, this._ngZone, this._applicationRef, this._posService);
    };
    ComponentLoaderFactory.decorators = [
        { type: core_1.Injectable },
    ];
    /** @nocollapse */
    ComponentLoaderFactory.ctorParameters = function () { return [
        { type: core_1.ComponentFactoryResolver, },
        { type: core_1.NgZone, },
        { type: core_1.Injector, },
        { type: positioning_1.PositioningService, },
        { type: core_1.ApplicationRef, },
    ]; };
    return ComponentLoaderFactory;
}());
exports.ComponentLoaderFactory = ComponentLoaderFactory;
//# sourceMappingURL=component-loader.factory.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/container/modal/component-loader/content-ref.class.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @copyright Valor Software
 * @copyright Angular ng-bootstrap team
 */
Object.defineProperty(exports, "__esModule", { value: true });
var ContentRef = /** @class */ (function () {
    function ContentRef(nodes, viewRef, componentRef) {
        this.nodes = nodes;
        this.viewRef = viewRef;
        this.componentRef = componentRef;
    }
    return ContentRef;
}());
exports.ContentRef = ContentRef;
//# sourceMappingURL=content-ref.class.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/container/modal/component-loader/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var component_loader_class_1 = __webpack_require__("./node_modules/@farris/ui/container/modal/component-loader/component-loader.class.js");
exports.ComponentLoader = component_loader_class_1.ComponentLoader;
var component_loader_factory_1 = __webpack_require__("./node_modules/@farris/ui/container/modal/component-loader/component-loader.factory.js");
exports.ComponentLoaderFactory = component_loader_factory_1.ComponentLoaderFactory;
var content_ref_class_1 = __webpack_require__("./node_modules/@farris/ui/container/modal/component-loader/content-ref.class.js");
exports.ContentRef = content_ref_class_1.ContentRef;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/container/modal/dialog/dialog.component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var utils_class_1 = __webpack_require__("./node_modules/@farris/ui/container/modal/utils/utils.class.js");
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var modal_1 = __webpack_require__("./node_modules/@farris/ui/container/modal/modal/index.js");
var draggable_1 = __webpack_require__("./node_modules/@farris/ui/draggable/index.js");
var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var DialogComponent = /** @class */ (function () {
    function DialogComponent(render2, el) {
        this.render2 = render2;
        this.el = el;
        /** 窗口标题 */
        this.title = '我是标题';
        /** 宽度 */
        this.width = 300;
        /** 高度 */
        this.height = 200;
        /** 显示底部按钮区域，默认显示 */
        this.showButtons = true;
        /** 显示右上角关闭按钮，默认显示 */
        this.showCloseButton = true;
        /** 显示最大化按钮，默认显示 */
        this.showMaxButton = true;
        /** 显示最小化按钮，默认不显示, 显示出来也没有用 */
        this.showMinButton = false;
        /** 启用拖拽改变尺寸大小 */
        this.resizable = true;
        /** 启用拖动窗口 */
        this.draggable = true;
        /** 按钮对齐方式 */
        this.buttonAlign = 'left';
        this.scorllConfig = {};
        this.opened = new core_1.EventEmitter();
        this.closed = new core_1.EventEmitter();
        this.resized = new core_1.EventEmitter();
        this.resizing = new core_1.EventEmitter();
        this.maxed = new core_1.EventEmitter();
        this.enableScroll = true;
        this.isMax = false;
    }
    DialogComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (!this.beforeOpen) {
            this.beforeOpen = function () { return true; };
        }
        if (!this.beforeClose) {
            this.beforeClose = function () { return true; };
        }
        this.modal.onShown.subscribe(function () {
            _this.opened.emit();
        });
        this.modal.onHidden.subscribe(function () { return _this.closed.emit(); });
        this.checkDialogSize();
        document.body.appendChild(this.el.nativeElement);
    };
    DialogComponent.prototype.ngOnChanges = function (changes) {
    };
    DialogComponent.prototype.ngAfterViewInit = function () {
        this.resetPosition();
    };
    Object.defineProperty(DialogComponent.prototype, "size", {
        get: function () {
            var contentHeight = this.height - 35;
            if (this.showButtons) {
                contentHeight = contentHeight - 58;
            }
            return {
                width: this.width,
                height: this.height,
                contentHeight: contentHeight,
                contentWidth: this.width
            };
        },
        enumerable: true,
        configurable: true
    });
    DialogComponent.prototype.checkDialogSize = function () {
        var newSize = utils_class_1.Utils.checkDialogSize(this.width, this.height);
        if (this.width !== newSize.width) {
            this.width = newSize.width - 20;
        }
        if (this.height !== newSize.height) {
            this.height = newSize.height - 20;
        }
    };
    DialogComponent.prototype.resetPosition = function () {
        var marginLeft = Number.parseInt('' + -this.width / 2) + 'px';
        var marginTop = Number.parseInt('' + -this.height / 2) + 'px';
        var dialogEl = this.el.nativeElement.querySelector('.modal-dialog');
        var contentEl = this.el.nativeElement.querySelector('.modal-body');
        var footerEl = this.el.nativeElement.querySelector('.modal-footer');
        this.render2.setStyle(dialogEl, 'margin-left', marginLeft);
        this.render2.setStyle(dialogEl, 'margin-top', marginTop);
        var contentHeight = this.size.contentHeight;
        this.render2.setStyle(contentEl, 'height', contentHeight + 'px');
        this.render2.setStyle(contentEl, 'overflow', 'hidden');
        this.render2.setStyle(dialogEl, 'transform', 'translate(0px, 0px)');
    };
    DialogComponent.prototype.openDialog = function (flag) {
        if (flag) {
            this.resetPosition();
            this.draggbar.resetPosition();
            this.modal.show();
        }
    };
    DialogComponent.prototype.closeDialog = function (canClose) {
        if (canClose) {
            this.modal.hide();
        }
    };
    DialogComponent.prototype.show = function () {
        var _this = this;
        var result = this.beforeOpen();
        if (typeof result === 'boolean') {
            this.openDialog(result);
        }
        else {
            if (result instanceof Observable_1.Observable) {
                result.subscribe(function (flag) {
                    _this.openDialog(flag);
                });
            }
            else {
                if (result instanceof Promise) {
                    result.then(function (flag) {
                        _this.openDialog(flag);
                    });
                }
            }
        }
    };
    DialogComponent.prototype.close = function () {
        var _this = this;
        var result = this.beforeClose();
        if (typeof result === 'boolean') {
            this.closeDialog(result);
        }
        else {
            if (result instanceof Observable_1.Observable) {
                result.subscribe(function (flag) {
                    _this.closeDialog(flag);
                });
            }
            else {
                if (result instanceof Promise) {
                    result.then(function (flag) {
                        _this.closeDialog(flag);
                    });
                }
            }
        }
    };
    DialogComponent.prototype.onResizing = function (opts) {
        this.width = opts.size.width;
        this.height = opts.size.height;
        this.resizing.emit(opts);
    };
    DialogComponent.prototype.resizeStop = function (opts) {
        this.width = opts.size.width;
        this.height = opts.size.height;
        this.resized.emit(opts);
    };
    DialogComponent.prototype.dropdown = function (el) {
        // const rect = el.getBoundingClientRect();
        // this.render2.removeStyle(el, 'margin-top');
        // this.render2.removeStyle(el, 'margin-left');
        // this.render2.setStyle(el, 'top', `${rect.top}px`);
        // this.render2.setStyle(el, 'left', `${rect.left}px`);
        // this.render2.removeStyle(el, 'transform');
        // this.render2.removeStyle(el, '-webkit-transform');
        // this.render2.removeStyle(el, '-ms-transform');
        // this.render2.removeStyle(el, '-moz-transform');
        // this.render2.removeStyle(el, '-o-transform');
    };
    DialogComponent.prototype.maxDialog = function () {
        // console.log(`${document.scrollingElement.clientWidth}`)
        this.originalWidth = this.width;
        this.originalHeight = this.height;
        this.width = document.scrollingElement.clientWidth - 20;
        this.height = document.scrollingElement.clientHeight - 20;
        this.draggable = false;
        this.resizable = false;
        this.isMax = true;
        this.resetPosition();
        this.resized.emit({ size: { width: this.width, height: this.height } });
        this.maxed.emit({ size: { width: this.width, height: this.height } });
    };
    DialogComponent.prototype.revertDialog = function () {
        this.isMax = false;
        this.width = this.originalWidth;
        this.height = this.originalHeight;
        this.draggable = true;
        this.resizable = true;
        this.resetPosition();
        this.draggbar.resetPosition();
        this.resized.emit({ size: { width: this.width, height: this.height } });
        this.maxed.emit({ size: { width: this.width, height: this.height } });
    };
    DialogComponent.prototype.changeDialogSize = function () {
        if (this.isMax) {
            this.revertDialog();
        }
        else {
            this.maxDialog();
        }
    };
    DialogComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'farris-dialog',
                    template: "<div #backdropEl class=\"modal fade farris-modal\" bsModal #staticModal=\"bs-modal\" [config]=\"{backdrop: 'static'}\"  tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"dialog-static-name\"> <div [ngDraggable]=\"draggable\" [ngResizable]=\"resizable\"  rzHandles=\"all\" [handle]=\"header\"  (rzStop)=\"resizeStop($event)\" (rzResizing)=\"onResizing($event)\" (stopped)=\"dropdown($event)\" [inBounds]=\"true\" [bounds]=\"backdropEl\" class=\"modal-dialog\"  [style.width]=\"width + 'px'\" [style.height]=\"height + 'px'\"> <div #modalContent class=\"modal-content\"> <div #header class=\"modal-header\"> <div class=\"modal-title\"> {{ title }} </div> <div class=\"actions\"> <ul> <li *ngIf=\"showMinButton\" class=\"f-btn-icon f-bare\"><span class=\"f-icon modal_minimize\"></span></li> <li *ngIf=\"showMaxButton\" (click)=\"changeDialogSize()\" class=\"f-btn-icon f-bare\"><span class=\"f-icon modal_maximize\" [class.modalrevert]=\"isMax\" ></span></li> <li *ngIf=\"showCloseButton\" (click)=\"close()\" class=\"f-btn-icon f-bare\"><span class=\"f-icon modal_close\"></span></li> </ul> </div> </div> <div class=\"modal-body\"> <perfect-scrollbar [disabled]=\"!enableScroll\" [config]=\"scorllConfig\"> <ng-content></ng-content> </perfect-scrollbar> </div> <div class=\"modal-footer\" *ngIf=\"showButtons\" [style.textAlign]=\"buttonAlign\"> <ng-container [ngTemplateOutlet]=\"buttons\"></ng-container> </div> </div> </div> </div> ",
                    styles: [""]
                },] },
    ];
    /** @nocollapse */
    DialogComponent.ctorParameters = function () { return [
        { type: core_1.Renderer2, },
        { type: core_1.ElementRef, },
    ]; };
    DialogComponent.propDecorators = {
        "title": [{ type: core_1.Input },],
        "width": [{ type: core_1.Input },],
        "height": [{ type: core_1.Input },],
        "showButtons": [{ type: core_1.Input },],
        "showCloseButton": [{ type: core_1.Input },],
        "showMaxButton": [{ type: core_1.Input },],
        "showMinButton": [{ type: core_1.Input },],
        "resizable": [{ type: core_1.Input },],
        "draggable": [{ type: core_1.Input },],
        "buttonAlign": [{ type: core_1.Input },],
        "scorllConfig": [{ type: core_1.Input },],
        "beforeOpen": [{ type: core_1.Input },],
        "beforeClose": [{ type: core_1.Input },],
        "modal": [{ type: core_1.ViewChild, args: [modal_1.ModalDirective,] },],
        "draggbar": [{ type: core_1.ViewChild, args: [draggable_1.AngularDraggableDirective,] },],
        "opened": [{ type: core_1.Output },],
        "closed": [{ type: core_1.Output },],
        "resized": [{ type: core_1.Output },],
        "resizing": [{ type: core_1.Output },],
        "maxed": [{ type: core_1.Output },],
        "enableScroll": [{ type: core_1.Input },],
        "buttons": [{ type: core_1.Input },],
        "modalContent": [{ type: core_1.ViewChild, args: ['modalContent',] },],
    };
    return DialogComponent;
}());
exports.DialogComponent = DialogComponent;
//# sourceMappingURL=dialog.component.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/container/modal/farris-dialog.module.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var modal_1 = __webpack_require__("./node_modules/@farris/ui/container/modal/modal/index.js");
var dialog_component_1 = __webpack_require__("./node_modules/@farris/ui/container/modal/dialog/dialog.component.js");
var draggable_1 = __webpack_require__("./node_modules/@farris/ui/draggable/index.js");
var perfect_scorll_1 = __webpack_require__("./node_modules/@farris/ui/perfect-scorll/index.js");
var messager_module_1 = __webpack_require__("./node_modules/@farris/ui/container/modal/messager/messager.module.js");
var FarrisDialogModule = /** @class */ (function () {
    function FarrisDialogModule() {
    }
    FarrisDialogModule.decorators = [
        { type: core_1.NgModule, args: [{
                    imports: [
                        modal_1.ModalModule.forRoot(),
                        messager_module_1.MessagerModule.forRoot(),
                        draggable_1.AngularDraggableModule,
                        perfect_scorll_1.PerfectScrollbarModule
                    ],
                    declarations: [dialog_component_1.DialogComponent],
                    exports: [dialog_component_1.DialogComponent, modal_1.ModalModule, messager_module_1.MessagerModule]
                },] },
    ];
    return FarrisDialogModule;
}());
exports.FarrisDialogModule = FarrisDialogModule;
//# sourceMappingURL=farris-dialog.module.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/container/modal/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__("./node_modules/@farris/ui/container/modal/modal/bs-modal.service.js"));
__export(__webpack_require__("./node_modules/@farris/ui/container/modal/farris-dialog.module.js"));
__export(__webpack_require__("./node_modules/@farris/ui/container/modal/dialog/dialog.component.js"));
__export(__webpack_require__("./node_modules/@farris/ui/container/modal/modal/bs-modal-ref.service.js"));
__export(__webpack_require__("./node_modules/@farris/ui/container/modal/messager/messager.module.js"));
__export(__webpack_require__("./node_modules/@farris/ui/container/modal/messager/messager.service.js"));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/container/modal/messager/messager.component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var MessagerComponent = /** @class */ (function () {
    function MessagerComponent(injector) {
        this.injector = injector;
        this.okText = '';
        this.cancelText = '';
    }
    MessagerComponent.prototype.ngOnInit = function () { };
    Object.defineProperty(MessagerComponent.prototype, "icon", {
        get: function () {
            return 'f-icon-' + this.type;
        },
        enumerable: true,
        configurable: true
    });
    MessagerComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'farris-messager',
                    template: "\n        <div class=\"message-container\">\n                <section class=\"modal-tips mb-auto\">\n                <div class=\"float-left modal-tips-iconwrap\">\n                        <span class=\"f-icon\" [ngClass]=\"icon\"></span>\n                </div>\n                <div class=\"modal-tips-content\">\n                    <p>{{ message }}</p>\n                </div>\n            </section>\n            <div class=\"modal-footer py-0\">\n                <button *ngIf=\"okText\" type=\"button\" class=\"btn btn-primary\" (click)=\"okHandle()\">{{ okText }}</button>\n                <button *ngIf=\"cancelText\" type=\"button\" class=\"btn btn-secondary\" (click)=\"cancelHandle()\">{{ cancelText }}</button>\n            </div>\n        </div>\n    "
                },] },
    ];
    /** @nocollapse */
    MessagerComponent.ctorParameters = function () { return [
        { type: core_1.Injector, },
    ]; };
    MessagerComponent.propDecorators = {
        "type": [{ type: core_1.Input },],
        "message": [{ type: core_1.Input },],
        "okText": [{ type: core_1.Input },],
        "cancelText": [{ type: core_1.Input },],
        "okHandle": [{ type: core_1.Input },],
        "cancelHandle": [{ type: core_1.Input },],
    };
    return MessagerComponent;
}());
exports.MessagerComponent = MessagerComponent;
//# sourceMappingURL=messager.component.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/container/modal/messager/messager.module.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var messager_component_1 = __webpack_require__("./node_modules/@farris/ui/container/modal/messager/messager.component.js");
var modal_1 = __webpack_require__("./node_modules/@farris/ui/container/modal/modal/index.js");
var messager_service_1 = __webpack_require__("./node_modules/@farris/ui/container/modal/messager/messager.service.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/esm5/common.js");
function MessagerServiceFactory(bsModalService) {
    return new messager_service_1.MessagerService(bsModalService);
}
exports.MessagerServiceFactory = MessagerServiceFactory;
var MessagerModule = /** @class */ (function () {
    function MessagerModule() {
    }
    MessagerModule.forRoot = function () {
        return {
            ngModule: MessagerModule,
            providers: [
                { provide: messager_service_1.MessagerService, useFactory: MessagerServiceFactory, deps: [modal_1.BsModalService] }
            ]
        };
    };
    MessagerModule.decorators = [
        { type: core_1.NgModule, args: [{
                    imports: [
                        common_1.CommonModule,
                        modal_1.ModalModule.forRoot()
                    ],
                    declarations: [
                        messager_component_1.MessagerComponent
                    ],
                    entryComponents: [
                        messager_component_1.MessagerComponent
                    ]
                },] },
    ];
    return MessagerModule;
}());
exports.MessagerModule = MessagerModule;
//# sourceMappingURL=messager.module.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/container/modal/messager/messager.service.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * @Author: Lucas.Huang（疯狂秀才）
 * @Date: 2018-10-13 15:36:48
 * @Last Modified by:   Lucas.Huang（疯狂秀才）
 * @Last Modified time: 2018-10-13 15:36:48
 */
Object.defineProperty(exports, "__esModule", { value: true });
var modal_1 = __webpack_require__("./node_modules/@farris/ui/container/modal/modal/index.js");
var messager_component_1 = __webpack_require__("./node_modules/@farris/ui/container/modal/messager/messager.component.js");
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var MessagerService = /** @class */ (function () {
    function MessagerService(bsModalService) {
        this.bsModalService = bsModalService;
        this.currentId = -1;
        this.modal = [];
    }
    MessagerService.prototype.showMessage = function (msgtype, message, opts) {
        var defaultOpts = {
            title: '系统提示',
            width: 400,
            height: 200,
            showButtons: false,
            showMaxButton: false,
            resizable: false,
            initialState: {}
        };
        if (opts) {
            Object.assign(defaultOpts, opts);
            Object.assign(defaultOpts.initialState, {
                type: msgtype,
                message: message
            });
        }
        var modal = this.bsModalService.show(messager_component_1.MessagerComponent, defaultOpts);
        if (this.modal.length > 0) {
            var modalContainerComponent = this.getModalCmp();
            modalContainerComponent.moveTo(15 * this.modal.length, 15 * this.modal.length);
        }
        return modal;
    };
    MessagerService.prototype.msgMgr = function (ref) {
        var _this = this;
        var id = this.bsModalService.getModalsCount();
        this.modal.push({ id: id, ref: ref });
        var cmp = this.getModalCmp();
        cmp.closed.subscribe(function (level) {
            _this.removeMessager(level);
        });
        this.currentId = id;
    };
    MessagerService.prototype.info = function (message, callback) {
        var _this = this;
        if (!callback) {
            callback = function () {
                _this.close();
            };
        }
        this.msgMgr(this.showMessage('info', message, {
            initialState: {
                okText: '确定',
                okHandle: callback
            }
        }));
    };
    MessagerService.prototype.question = function (message, okCallback, cancelCallback) {
        var _this = this;
        this.msgMgr(this.showMessage('question', message, {
            initialState: {
                okText: '是',
                okHandle: function () {
                    _this.close();
                    if (okCallback) {
                        okCallback();
                    }
                },
                cancelText: '否',
                cancelHandle: function () {
                    _this.close();
                    if (cancelCallback) {
                        cancelCallback();
                    }
                }
            }
        }));
    };
    MessagerService.prototype.error = function (message) {
        var _this = this;
        this.msgMgr(this.showMessage('error', message, {
            initialState: {
                okText: '确定',
                okHandle: function () {
                    _this.close();
                }
            }
        }));
    };
    MessagerService.prototype.warning = function (message) {
        var _this = this;
        this.msgMgr(this.showMessage('warning', message, {
            initialState: {
                okText: '确定',
                okHandle: function () {
                    _this.close();
                }
            }
        }));
    };
    MessagerService.prototype.close = function () {
        if (this.modal.length) {
            var msgbox = this.getModalById(this.currentId);
            if (msgbox) {
                msgbox.ref.close();
                this.removeMessager(this.currentId);
            }
        }
    };
    MessagerService.prototype.getModalById = function (id) {
        return this.modal.find(function (item) { return item.id === id; });
    };
    MessagerService.prototype.getModalCmp = function () {
        return this.bsModalService.getCurrentModalContainer().instance;
    };
    MessagerService.prototype.removeMessager = function (id) {
        this.modal.splice(id - 1, 1);
        if (!this.modal.length) {
            this.currentId = -1;
        }
        else {
            this.currentId = this.modal[this.modal.length - 1].id;
        }
    };
    MessagerService.decorators = [
        { type: core_1.Injectable },
    ];
    /** @nocollapse */
    MessagerService.ctorParameters = function () { return [
        { type: modal_1.BsModalService, },
    ]; };
    return MessagerService;
}());
exports.MessagerService = MessagerService;
//# sourceMappingURL=messager.service.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/container/modal/modal/bs-modal-ref.service.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var BsModalRef = /** @class */ (function () {
    function BsModalRef() {
        /**
           * Hides the modal
           */
        this.close = Function;
    }
    BsModalRef.decorators = [
        { type: core_1.Injectable },
    ];
    return BsModalRef;
}());
exports.BsModalRef = BsModalRef;
//# sourceMappingURL=bs-modal-ref.service.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/container/modal/modal/bs-modal.service.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var component_loader_factory_1 = __webpack_require__("./node_modules/@farris/ui/container/modal/component-loader/component-loader.factory.js");
var modal_backdrop_component_1 = __webpack_require__("./node_modules/@farris/ui/container/modal/modal/modal-backdrop.component.js");
var modal_container_component_1 = __webpack_require__("./node_modules/@farris/ui/container/modal/modal/modal-container.component.js");
var modal_options_class_1 = __webpack_require__("./node_modules/@farris/ui/container/modal/modal/modal-options.class.js");
var bs_modal_ref_service_1 = __webpack_require__("./node_modules/@farris/ui/container/modal/modal/bs-modal-ref.service.js");
var utils_class_1 = __webpack_require__("./node_modules/@farris/ui/container/modal/utils/utils.class.js");
var BsModalService = /** @class */ (function () {
    function BsModalService(rendererFactory, clf) {
        this.clf = clf;
        // constructor props
        this.config = modal_options_class_1.modalConfigDefaults;
        this.onShow = new core_1.EventEmitter();
        this.onShown = new core_1.EventEmitter();
        this.onHide = new core_1.EventEmitter();
        this.onHidden = new core_1.EventEmitter();
        this.isBodyOverflowing = false;
        this.originalBodyPadding = 0;
        this.scrollbarWidth = 0;
        this.modalsCount = 0;
        this.lastDismissReason = '';
        this.loaders = [];
        this._renderer = rendererFactory.createRenderer(null, null);
        this._backdropLoader = this.clf.createLoader(null, null, this._renderer);
    }
    /** Shows a modal */
    /** Shows a modal */
    BsModalService.prototype.show = /** Shows a modal */
    function (content, config) {
        this.modalsCount++;
        this._createLoaders();
        this.config = Object.assign({}, modal_options_class_1.modalConfigDefaults, config);
        this.checkDialogSize();
        this._showBackdrop();
        this.lastDismissReason = null;
        return this._showModal(content);
    };
    BsModalService.prototype.hide = function (level) {
        var _this = this;
        if (this.modalsCount === 1) {
            this._hideBackdrop();
            this.resetScrollbar();
        }
        this.modalsCount = this.modalsCount >= 1 ? this.modalsCount - 1 : 0;
        setTimeout(function () {
            _this._hideModal(level);
            _this.removeLoaders(level);
        }, this.config.animated ? modal_options_class_1.TRANSITION_DURATIONS.BACKDROP : 0);
    };
    BsModalService.prototype._showBackdrop = function () {
        var isBackdropEnabled = this.config.backdrop || this.config.backdrop === 'static';
        var isBackdropInDOM = !this.backdropRef || !this.backdropRef.instance.isShown;
        if (this.modalsCount === 1) {
            this.removeBackdrop();
            if (isBackdropEnabled && isBackdropInDOM) {
                this._backdropLoader
                    .attach(modal_backdrop_component_1.ModalBackdropComponent)
                    .to('body')
                    .show({ isAnimated: this.config.animated });
                this.backdropRef = this._backdropLoader._componentRef;
            }
        }
    };
    BsModalService.prototype._hideBackdrop = function () {
        var _this = this;
        if (!this.backdropRef) {
            return;
        }
        this.backdropRef.instance.isShown = false;
        var duration = this.config.animated ? modal_options_class_1.TRANSITION_DURATIONS.BACKDROP : 0;
        setTimeout(function () { return _this.removeBackdrop(); }, duration);
    };
    BsModalService.prototype._showModal = function (content) {
        var modalLoader = this.loaders[this.loaders.length - 1];
        var bsModalRef = new bs_modal_ref_service_1.BsModalRef();
        var modalContainerRef = modalLoader
            .provide({ provide: modal_options_class_1.ModalOptions, useValue: this.config })
            .provide({ provide: bs_modal_ref_service_1.BsModalRef, useValue: bsModalRef })
            .attach(modal_container_component_1.ModalContainerComponent)
            .to('body')
            .show({ content: content, isAnimated: this.config.animated, initialState: this.config.initialState, bsModalService: this });
        modalContainerRef.instance.level = this.getModalsCount();
        bsModalRef.close = function () {
            modalContainerRef.instance.close();
        };
        modalContainerRef.instance.toCenter();
        bsModalRef.content = modalLoader.getInnerComponent() || null;
        return bsModalRef;
    };
    BsModalService.prototype._hideModal = function (level) {
        var modalLoader = this.loaders[level - 1];
        if (modalLoader) {
            modalLoader.hide();
        }
    };
    BsModalService.prototype.getModalsCount = function () {
        return this.modalsCount;
    };
    BsModalService.prototype.getCurrentModalContainer = function () {
        return this.loaders[this.getModalsCount() - 1];
    };
    BsModalService.prototype.setDismissReason = function (reason) {
        this.lastDismissReason = reason;
    };
    BsModalService.prototype.removeBackdrop = function () {
        this._backdropLoader.hide();
        this.backdropRef = null;
    };
    /** AFTER PR MERGE MODAL.COMPONENT WILL BE USING THIS CODE */
    /** Scroll bar tricks */
    /** @internal */
    /** AFTER PR MERGE MODAL.COMPONENT WILL BE USING THIS CODE */
    /** Scroll bar tricks */
    /** @internal */
    BsModalService.prototype.checkScrollbar = /** AFTER PR MERGE MODAL.COMPONENT WILL BE USING THIS CODE */
    /** Scroll bar tricks */
    /** @internal */
    function () {
        this.isBodyOverflowing = document.body.clientWidth < window.innerWidth;
        this.scrollbarWidth = this.getScrollbarWidth();
    };
    BsModalService.prototype.setScrollbar = function () {
        if (!document) {
            return;
        }
        this.originalBodyPadding = parseInt(window
            .getComputedStyle(document.body)
            .getPropertyValue('padding-right') || '0', 10);
        if (this.isBodyOverflowing) {
            document.body.style.paddingRight = this.originalBodyPadding +
                this.scrollbarWidth + "px";
        }
    };
    BsModalService.prototype.resetScrollbar = function () {
        document.body.style.paddingRight = this.originalBodyPadding + "px";
    };
    // thx d.walsh
    // thx d.walsh
    BsModalService.prototype.getScrollbarWidth = 
    // thx d.walsh
    function () {
        var scrollDiv = this._renderer.createElement('div');
        this._renderer.addClass(scrollDiv, modal_options_class_1.CLASS_NAME.SCROLLBAR_MEASURER);
        this._renderer.appendChild(document.body, scrollDiv);
        var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
        this._renderer.removeChild(document.body, scrollDiv);
        return scrollbarWidth;
    };
    BsModalService.prototype._createLoaders = function () {
        var loader = this.clf.createLoader(null, null, this._renderer);
        this.copyEvent(loader.onBeforeShow, this.onShow);
        this.copyEvent(loader.onShown, this.onShown);
        this.copyEvent(loader.onBeforeHide, this.onHide);
        this.copyEvent(loader.onHidden, this.onHidden);
        this.loaders.push(loader);
    };
    BsModalService.prototype.removeLoaders = function (level) {
        this.loaders.splice(level - 1, 1);
        this.loaders.forEach(function (loader, i) {
            loader.instance.level = i + 1;
        });
    };
    BsModalService.prototype.copyEvent = function (from, to) {
        var _this = this;
        from.subscribe(function () {
            to.emit(_this.lastDismissReason);
        });
    };
    BsModalService.prototype.checkDialogSize = function () {
        var newSize = utils_class_1.Utils.checkDialogSize(this.config.width, this.config.height);
        if (this.config.width !== newSize.width) {
            this.config.width = newSize.width - 20;
        }
        if (this.config.height !== newSize.height) {
            this.config.height = newSize.height - 20;
        }
    };
    BsModalService.decorators = [
        { type: core_1.Injectable },
    ];
    /** @nocollapse */
    BsModalService.ctorParameters = function () { return [
        { type: core_1.RendererFactory2, },
        { type: component_loader_factory_1.ComponentLoaderFactory, },
    ]; };
    return BsModalService;
}());
exports.BsModalService = BsModalService;
//# sourceMappingURL=bs-modal.service.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/container/modal/modal/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var bs_modal_ref_service_1 = __webpack_require__("./node_modules/@farris/ui/container/modal/modal/bs-modal-ref.service.js");
exports.BsModalRef = bs_modal_ref_service_1.BsModalRef;
var modal_backdrop_options_1 = __webpack_require__("./node_modules/@farris/ui/container/modal/modal/modal-backdrop.options.js");
exports.ModalBackdropOptions = modal_backdrop_options_1.ModalBackdropOptions;
var modal_container_component_1 = __webpack_require__("./node_modules/@farris/ui/container/modal/modal/modal-container.component.js");
exports.ModalContainerComponent = modal_container_component_1.ModalContainerComponent;
var modal_backdrop_component_1 = __webpack_require__("./node_modules/@farris/ui/container/modal/modal/modal-backdrop.component.js");
exports.ModalBackdropComponent = modal_backdrop_component_1.ModalBackdropComponent;
var modal_options_class_1 = __webpack_require__("./node_modules/@farris/ui/container/modal/modal/modal-options.class.js");
exports.ModalOptions = modal_options_class_1.ModalOptions;
var modal_directive_1 = __webpack_require__("./node_modules/@farris/ui/container/modal/modal/modal.directive.js");
exports.ModalDirective = modal_directive_1.ModalDirective;
var modal_module_1 = __webpack_require__("./node_modules/@farris/ui/container/modal/modal/modal.module.js");
exports.ModalModule = modal_module_1.ModalModule;
var bs_modal_service_1 = __webpack_require__("./node_modules/@farris/ui/container/modal/modal/bs-modal.service.js");
exports.BsModalService = bs_modal_service_1.BsModalService;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/container/modal/modal/modal-backdrop.component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var modal_options_class_1 = __webpack_require__("./node_modules/@farris/ui/container/modal/modal/modal-options.class.js");
var theme_provider_1 = __webpack_require__("./node_modules/@farris/ui/container/modal/utils/theme-provider.js");
var utils_class_1 = __webpack_require__("./node_modules/@farris/ui/container/modal/utils/utils.class.js");
/** This component will be added as background layout for modals if enabled */
var ModalBackdropComponent = /** @class */ (function () {
    function ModalBackdropComponent(element, renderer) {
        this._isShown = false;
        this.element = element;
        this.renderer = renderer;
    }
    Object.defineProperty(ModalBackdropComponent.prototype, "isAnimated", {
        get: function () {
            return this._isAnimated;
        },
        set: function (value) {
            this._isAnimated = value;
            // this.renderer.setElementClass(this.element.nativeElement, `${ClassName.FADE}`, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ModalBackdropComponent.prototype, "isShown", {
        get: function () {
            return this._isShown;
        },
        set: function (value) {
            this._isShown = value;
            if (value) {
                this.renderer.addClass(this.element.nativeElement, "" + modal_options_class_1.CLASS_NAME.IN);
            }
            else {
                this.renderer.removeClass(this.element.nativeElement, "" + modal_options_class_1.CLASS_NAME.IN);
            }
            if (!theme_provider_1.isBs3()) {
                if (value) {
                    this.renderer.addClass(this.element.nativeElement, "" + modal_options_class_1.CLASS_NAME.SHOW);
                }
                else {
                    this.renderer.removeClass(this.element.nativeElement, "" + modal_options_class_1.CLASS_NAME.SHOW);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    ModalBackdropComponent.prototype.ngOnInit = function () {
        if (this.isAnimated) {
            this.renderer.addClass(this.element.nativeElement, "" + modal_options_class_1.CLASS_NAME.FADE);
            utils_class_1.Utils.reflow(this.element.nativeElement);
        }
        this.isShown = true;
    };
    ModalBackdropComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'bs-modal-backdrop',
                    template: ' ',
                    host: { class: modal_options_class_1.CLASS_NAME.BACKDROP }
                },] },
    ];
    /** @nocollapse */
    ModalBackdropComponent.ctorParameters = function () { return [
        { type: core_1.ElementRef, },
        { type: core_1.Renderer2, },
    ]; };
    return ModalBackdropComponent;
}());
exports.ModalBackdropComponent = ModalBackdropComponent;
//# sourceMappingURL=modal-backdrop.component.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/container/modal/modal/modal-backdrop.options.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ModalBackdropOptions = /** @class */ (function () {
    function ModalBackdropOptions(options) {
        this.animate = true;
        Object.assign(this, options);
    }
    return ModalBackdropOptions;
}());
exports.ModalBackdropOptions = ModalBackdropOptions;
//# sourceMappingURL=modal-backdrop.options.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/container/modal/modal/modal-container.component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var modal_options_class_1 = __webpack_require__("./node_modules/@farris/ui/container/modal/modal/modal-options.class.js");
var theme_provider_1 = __webpack_require__("./node_modules/@farris/ui/container/modal/utils/theme-provider.js");
var draggable_1 = __webpack_require__("./node_modules/@farris/ui/draggable/index.js");
var ModalContainerComponent = /** @class */ (function () {
    function ModalContainerComponent(options, el, _renderer) {
        this.el = el;
        this._renderer = _renderer;
        this.isShown = false;
        this.isModalHiding = false;
        this.isMax = false;
        this.closed = new core_1.EventEmitter();
        this.config = Object.assign({}, options);
    }
    ModalContainerComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.boundsElement = this.el.nativeElement;
        if (this.isAnimated) {
            this._renderer.addClass(this.el.nativeElement, modal_options_class_1.CLASS_NAME.FADE);
        }
        this._renderer.setStyle(this.el.nativeElement, 'display', 'block');
        setTimeout(function () {
            _this.isShown = true;
            _this._renderer.addClass(_this.el.nativeElement, theme_provider_1.isBs3() ? modal_options_class_1.CLASS_NAME.IN : modal_options_class_1.CLASS_NAME.SHOW);
        }, this.isAnimated ? modal_options_class_1.TRANSITION_DURATIONS.BACKDROP : 0);
        if (document && document.body) {
            if (this.bsModalService.getModalsCount() === 1) {
                this.bsModalService.checkScrollbar();
                this.bsModalService.setScrollbar();
            }
            this._renderer.addClass(document.body, modal_options_class_1.CLASS_NAME.OPEN);
        }
        if (this.el.nativeElement) {
            this.el.nativeElement.focus();
        }
    };
    ModalContainerComponent.prototype.onClick = function (event) {
        if (this.config.ignoreBackdropClick ||
            this.config.backdrop === 'static' ||
            event.target !== this.el.nativeElement) {
            return;
        }
        this.bsModalService.setDismissReason(modal_options_class_1.DISMISS_REASONS.BACKRDOP);
        this.close();
    };
    ModalContainerComponent.prototype.onEsc = function (event) {
        if (!this.isShown) {
            return;
        }
        if (event.keyCode === 27) {
            event.preventDefault();
        }
        if (this.config.keyboard &&
            this.level === this.bsModalService.getModalsCount()) {
            this.bsModalService.setDismissReason(modal_options_class_1.DISMISS_REASONS.ESC);
            this.close();
        }
    };
    ModalContainerComponent.prototype.ngOnDestroy = function () {
        if (this.isShown) {
            this.close();
        }
    };
    ModalContainerComponent.prototype.close = function () {
        var _this = this;
        if (this.isModalHiding || !this.isShown) {
            return;
        }
        this.isModalHiding = true;
        this._renderer.removeClass(this.el.nativeElement, theme_provider_1.isBs3() ? modal_options_class_1.CLASS_NAME.IN : modal_options_class_1.CLASS_NAME.SHOW);
        setTimeout(function () {
            _this.isShown = false;
            if (document &&
                document.body &&
                _this.bsModalService.getModalsCount() === 1) {
                _this._renderer.removeClass(document.body, modal_options_class_1.CLASS_NAME.OPEN);
            }
            _this.bsModalService.hide(_this.level);
            _this.isModalHiding = false;
            _this.closed.emit(_this.level);
        }, this.isAnimated ? modal_options_class_1.TRANSITION_DURATIONS.MODAL : 0);
    };
    ModalContainerComponent.prototype.toCenter = function () {
        var marginLeft = Number.parseInt('' + -this.config.width / 2) + 'px';
        var marginTop = Number.parseInt('' + -this.config.height / 2) + 'px';
        var dialogEl = this.el.nativeElement.querySelector('.modal-dialog');
        var contentEl = this.el.nativeElement.querySelector('.modal-body');
        this._renderer.setStyle(dialogEl, 'margin-left', marginLeft);
        this._renderer.setStyle(dialogEl, 'margin-top', marginTop);
        this._renderer.setStyle(contentEl, 'height', this.config.height - 35 + 'px');
        this._renderer.setStyle(contentEl, 'overflow', 'hidden');
        this._renderer.setStyle(dialogEl, 'transform', "translate(0px, 0px)");
    };
    ModalContainerComponent.prototype.moveTo = function (x, y) {
        var dialogEl = this.el.nativeElement.querySelector('.modal-dialog');
        this._renderer.setStyle(dialogEl, 'transform', "translate(" + x + "px, " + y + "px)");
        this.draggbar.position = { x: x, y: y };
        this.draggbar.resetPosition();
    };
    ModalContainerComponent.prototype.maxDialog = function () {
        this.originalWidth = this.config.width;
        this.originalHeight = this.config.height;
        this.config.width = document.scrollingElement.clientWidth - 20;
        this.config.height = document.scrollingElement.clientHeight - 20;
        this.config.draggable = false;
        this.config.resizable = false;
        this.isMax = true;
        this.toCenter();
    };
    ModalContainerComponent.prototype.dropdown = function (el) {
        // const rect = el.getBoundingClientRect();
        // this._renderer.removeStyle(el, 'margin-top');
        // this._renderer.removeStyle(el, 'margin-left');
        // this._renderer.setStyle(el, 'top', `${rect.top}px`);
        // this._renderer.setStyle(el, 'left', `${rect.left}px`);
        // this._renderer.removeStyle(el, 'transform');
        // this._renderer.removeStyle(el, '-webkit-transform');
        // this._renderer.removeStyle(el, '-ms-transform');
        // this._renderer.removeStyle(el, '-moz-transform');
        // this._renderer.removeStyle(el, '-o-transform');
    };
    ModalContainerComponent.prototype.revertDialog = function () {
        this.isMax = false;
        this.config.width = this.originalWidth;
        this.config.height = this.originalHeight;
        this.config.draggable = true;
        this.config.resizable = true;
        this.toCenter();
        this.draggbar.resetPosition();
    };
    ModalContainerComponent.prototype.changeDialogSize = function () {
        if (this.isMax) {
            this.revertDialog();
        }
        else {
            this.maxDialog();
        }
    };
    ModalContainerComponent.prototype.resizeStop = function (opts) {
        this.config.width = opts.size.width;
        this.config.height = opts.size.height;
    };
    ModalContainerComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'modal-container',
                    template: "\n    <div [ngDraggable]=\"config.draggable\"\n        [ngResizable]=\"config.resizable\"  rzHandles=\"all\" [handle]=\"header\"\n        (stopped)=\"dropdown($event)\"\n        (rzStop)=\"resizeStop($event)\"\n        [inBounds]=\"true\" [bounds]=\"boundsElement\"\n        [class]=\"'modal-dialog' + (config.class ? ' ' + config.class : '')\" role=\"document\"\n        [style.width]=\"config.width + 'px'\" [style.height]=\"config.height + 'px'\" style=\"position: absolute;top: 50%;left: 50%;\">\n        <div class=\"modal-content\">\n            <div #header class=\"modal-header\">\n                <div class=\"modal-title\"> {{ config.title }} </div>\n                <div class=\"actions\">\n                    <ul>\n                        <li *ngIf=\"config.showMinButton\" class=\"f-btn-icon f-bare\"><span class=\"f-icon modal_minimize\"></span></li>\n                        <li *ngIf=\"config.showMaxButton\" (click)=\"changeDialogSize()\" class=\"f-btn-icon f-bare\">\n                            <span class=\"f-icon modal_maximize\" [class.modalrevert]=\"isMax\"></span></li>\n                        <li *ngIf=\"config.showCloseButton\" (click)=\"close()\" class=\"f-btn-icon f-bare\">\n                             <span class=\"f-icon modal_close\"></span>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n            <div class=\"modal-body\">\n                <perfect-scrollbar [config]=\"{}\" [disabled]=\"!config.enableScroll\">\n                    <ng-content></ng-content>\n                </perfect-scrollbar>\n            </div>\n\n            <div class=\"modal-footer\" *ngIf=\"config.showButtons\">\n                <ng-container [ngTemplateOutlet]=\"config.buttons\"></ng-container>\n            </div>\n        </div>\n    </div>\n  ",
                    host: {
                        class: 'modal farris-modal',
                        role: 'dialog',
                        tabindex: '-1',
                        '[attr.aria-modal]': 'true'
                    }
                },] },
    ];
    /** @nocollapse */
    ModalContainerComponent.ctorParameters = function () { return [
        { type: modal_options_class_1.ModalOptions, },
        { type: core_1.ElementRef, },
        { type: core_1.Renderer2, },
    ]; };
    ModalContainerComponent.propDecorators = {
        "draggbar": [{ type: core_1.ViewChild, args: [draggable_1.AngularDraggableDirective,] },],
        "closed": [{ type: core_1.Output },],
        "onClick": [{ type: core_1.HostListener, args: ['click', ['$event'],] },],
        "onEsc": [{ type: core_1.HostListener, args: ['window:keydown.esc', ['$event'],] },],
    };
    return ModalContainerComponent;
}());
exports.ModalContainerComponent = ModalContainerComponent;
//# sourceMappingURL=modal-container.component.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/container/modal/modal/modal-options.class.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var ModalOptions = /** @class */ (function () {
    function ModalOptions() {
    }
    ModalOptions.decorators = [
        { type: core_1.Injectable },
    ];
    return ModalOptions;
}());
exports.ModalOptions = ModalOptions;
exports.modalConfigDefaults = {
    backdrop: 'static',
    keyboard: true,
    focus: true,
    show: false,
    ignoreBackdropClick: true,
    class: '',
    animated: true,
    initialState: {},
    width: 400,
    height: 350,
    title: 'Title is here.',
    showCloseButton: true,
    showMaxButton: true,
    showButtons: true,
    draggable: true,
    resizable: true,
    enableScroll: true
};
exports.CLASS_NAME = {
    SCROLLBAR_MEASURER: 'modal-scrollbar-measure',
    BACKDROP: 'modal-backdrop',
    OPEN: 'modal-open',
    FADE: 'fade',
    IN: 'in',
    // bs3
    SHOW: 'show' // bs4
};
exports.SELECTOR = {
    DIALOG: '.modal-dialog',
    DATA_TOGGLE: '[data-toggle="modal"]',
    DATA_DISMISS: '[data-dismiss="modal"]',
    FIXED_CONTENT: '.navbar-fixed-top, .navbar-fixed-bottom, .is-fixed'
};
exports.TRANSITION_DURATIONS = {
    MODAL: 300,
    BACKDROP: 150
};
exports.DISMISS_REASONS = {
    BACKRDOP: 'backdrop-click',
    ESC: 'esc'
};
//# sourceMappingURL=modal-options.class.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/container/modal/modal/modal.directive.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* tslint:disable:max-file-line-count */
// todo: should we support enforce focus in?
// todo: in original bs there are was a way to prevent modal from showing
// todo: original modal had resize events
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var browser_1 = __webpack_require__("./node_modules/@farris/ui/container/modal/utils/facade/browser.js");
var theme_provider_1 = __webpack_require__("./node_modules/@farris/ui/container/modal/utils/theme-provider.js");
var utils_class_1 = __webpack_require__("./node_modules/@farris/ui/container/modal/utils/utils.class.js");
var modal_backdrop_component_1 = __webpack_require__("./node_modules/@farris/ui/container/modal/modal/modal-backdrop.component.js");
var modal_options_class_1 = __webpack_require__("./node_modules/@farris/ui/container/modal/modal/modal-options.class.js");
var component_loader_factory_1 = __webpack_require__("./node_modules/@farris/ui/container/modal/component-loader/component-loader.factory.js");
var TRANSITION_DURATION = 300;
var BACKDROP_TRANSITION_DURATION = 150;
/** Mark any code with directive to show it's content in modal */
var ModalDirective = /** @class */ (function () {
    function ModalDirective(_element, _viewContainerRef, _renderer, clf) {
        this._element = _element;
        this._renderer = _renderer;
        /** This event fires immediately when the `show` instance method is called. */
        this.onShow = new core_1.EventEmitter();
        /** This event is fired when the modal has been made visible to the user
             * (will wait for CSS transitions to complete)
             */
        this.onShown = new core_1.EventEmitter();
        /** This event is fired immediately when
             * the hide instance method has been called.
             */
        this.onHide = new core_1.EventEmitter();
        /** This event is fired when the modal has finished being
             * hidden from the user (will wait for CSS transitions to complete).
             */
        this.onHidden = new core_1.EventEmitter();
        this._isShown = false;
        this.isBodyOverflowing = false;
        this.originalBodyPadding = 0;
        this.scrollbarWidth = 0;
        this.timerHideModal = 0;
        this.timerRmBackDrop = 0;
        this.isNested = false;
        this._backdrop = clf.createLoader(_element, _viewContainerRef, _renderer);
    }
    Object.defineProperty(ModalDirective.prototype, "config", {
        get: function () {
            return this._config;
        },
        set: /** allows to set modal configuration via element property */
        function (conf) {
            this._config = this.getConfig(conf);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ModalDirective.prototype, "isShown", {
        get: function () {
            return this._isShown;
        },
        enumerable: true,
        configurable: true
    });
    ModalDirective.prototype.onClick = function (event) {
        if (this.config.ignoreBackdropClick ||
            this.config.backdrop === 'static' ||
            event.target !== this._element.nativeElement) {
            return;
        }
        this.dismissReason = modal_options_class_1.DISMISS_REASONS.BACKRDOP;
        this.hide(event);
    };
    // todo: consider preventing default and stopping propagation
    ModalDirective.prototype.onEsc = 
    // todo: consider preventing default and stopping propagation
    function (event) {
        if (!this._isShown) {
            return;
        }
        if (event.keyCode === 27) {
            event.preventDefault();
        }
        if (this.config.keyboard) {
            this.dismissReason = modal_options_class_1.DISMISS_REASONS.ESC;
            this.hide();
        }
    };
    ModalDirective.prototype.ngOnDestroy = function () {
        this.config = void 0;
        if (this._isShown) {
            this._isShown = false;
            this.hideModal();
            this._backdrop.dispose();
        }
    };
    ModalDirective.prototype.ngOnInit = function () {
        var _this = this;
        this._config = this._config || this.getConfig();
        setTimeout(function () {
            if (_this._config.show) {
                _this.show();
            }
        }, 0);
    };
    /* Public methods */
    /** Allows to manually toggle modal visibility */
    /* Public methods */
    /** Allows to manually toggle modal visibility */
    ModalDirective.prototype.toggle = /* Public methods */
    /** Allows to manually toggle modal visibility */
    function () {
        return this._isShown ? this.hide() : this.show();
    };
    /** Allows to manually open modal */
    /** Allows to manually open modal */
    ModalDirective.prototype.show = /** Allows to manually open modal */
    function () {
        var _this = this;
        this.dismissReason = null;
        this.onShow.emit(this);
        if (this._isShown) {
            return;
        }
        clearTimeout(this.timerHideModal);
        clearTimeout(this.timerRmBackDrop);
        this._isShown = true;
        this.checkScrollbar();
        this.setScrollbar();
        if (browser_1.document && browser_1.document.body) {
            if (browser_1.document.body.classList.contains(modal_options_class_1.CLASS_NAME.OPEN)) {
                this.isNested = true;
            }
            else {
                this._renderer.addClass(browser_1.document.body, modal_options_class_1.CLASS_NAME.OPEN);
            }
        }
        this.showBackdrop(function () {
            _this.showElement();
        });
    };
    /** Allows to manually close modal */
    /** Allows to manually close modal */
    ModalDirective.prototype.hide = /** Allows to manually close modal */
    function (event) {
        var _this = this;
        if (event) {
            event.preventDefault();
        }
        this.onHide.emit(this);
        // todo: add an option to prevent hiding
        if (!this._isShown) {
            return;
        }
        clearTimeout(this.timerHideModal);
        clearTimeout(this.timerRmBackDrop);
        this._isShown = false;
        this._renderer.removeClass(this._element.nativeElement, modal_options_class_1.CLASS_NAME.IN);
        if (!theme_provider_1.isBs3()) {
            this._renderer.removeClass(this._element.nativeElement, modal_options_class_1.CLASS_NAME.SHOW);
        }
        // this._addClassIn = false;
        if (this._config.animated) {
            this.timerHideModal = setTimeout(function () { return _this.hideModal(); }, TRANSITION_DURATION);
        }
        else {
            this.hideModal();
        }
    };
    /** Private methods @internal */
    /** Private methods @internal */
    ModalDirective.prototype.getConfig = /** Private methods @internal */
    function (config) {
        return Object.assign({}, modal_options_class_1.modalConfigDefaults, config);
    };
    /**
     *  Show dialog
     *  @internal
     */
    /**
         *  Show dialog
         *  @internal
         */
    ModalDirective.prototype.showElement = /**
         *  Show dialog
         *  @internal
         */
    function () {
        var _this = this;
        // todo: replace this with component loader usage
        if (!this._element.nativeElement.parentNode ||
            this._element.nativeElement.parentNode.nodeType !== Node.ELEMENT_NODE) {
            // don't move modals dom position
            if (browser_1.document && browser_1.document.body) {
                browser_1.document.body.appendChild(this._element.nativeElement);
            }
        }
        this._renderer.setAttribute(this._element.nativeElement, 'aria-hidden', 'false');
        this._renderer.setAttribute(this._element.nativeElement, 'aria-modal', 'true');
        this._renderer.setStyle(this._element.nativeElement, 'display', 'block');
        this._renderer.setProperty(this._element.nativeElement, 'scrollTop', 0);
        if (this._config.animated) {
            utils_class_1.Utils.reflow(this._element.nativeElement);
        }
        // this._addClassIn = true;
        this._renderer.addClass(this._element.nativeElement, modal_options_class_1.CLASS_NAME.IN);
        if (!theme_provider_1.isBs3()) {
            this._renderer.addClass(this._element.nativeElement, modal_options_class_1.CLASS_NAME.SHOW);
        }
        var transitionComplete = function () {
            if (_this._config.focus) {
                _this._element.nativeElement.focus();
            }
            _this.onShown.emit(_this);
        };
        if (this._config.animated) {
            setTimeout(transitionComplete, TRANSITION_DURATION);
        }
        else {
            transitionComplete();
        }
    };
    /** @internal */
    /** @internal */
    ModalDirective.prototype.hideModal = /** @internal */
    function () {
        var _this = this;
        this._renderer.setAttribute(this._element.nativeElement, 'aria-hidden', 'true');
        this._renderer.setStyle(this._element.nativeElement, 'display', 'none');
        this.showBackdrop(function () {
            if (!_this.isNested) {
                if (browser_1.document && browser_1.document.body) {
                    _this._renderer.removeClass(browser_1.document.body, modal_options_class_1.CLASS_NAME.OPEN);
                }
                _this.resetScrollbar();
            }
            _this.resetAdjustments();
            _this.focusOtherModal();
            _this.onHidden.emit(_this);
        });
    };
    // todo: original show was calling a callback when done, but we can use
    // promise
    /** @internal */
    // todo: original show was calling a callback when done, but we can use
    // promise
    /** @internal */
    ModalDirective.prototype.showBackdrop = 
    // todo: original show was calling a callback when done, but we can use
    // promise
    /** @internal */
    function (callback) {
        var _this = this;
        if (this._isShown &&
            this.config.backdrop &&
            (!this.backdrop || !this.backdrop.instance.isShown)) {
            this.removeBackdrop();
            this._backdrop
                .attach(modal_backdrop_component_1.ModalBackdropComponent)
                .to('body')
                .show({ isAnimated: this._config.animated });
            this.backdrop = this._backdrop._componentRef;
            if (!callback) {
                return;
            }
            if (!this._config.animated) {
                callback();
                return;
            }
            setTimeout(callback, BACKDROP_TRANSITION_DURATION);
        }
        else if (!this._isShown && this.backdrop) {
            this.backdrop.instance.isShown = false;
            var callbackRemove = function () {
                _this.removeBackdrop();
                if (callback) {
                    callback();
                }
            };
            if (this.backdrop.instance.isAnimated) {
                this.timerRmBackDrop = setTimeout(callbackRemove, BACKDROP_TRANSITION_DURATION);
            }
            else {
                callbackRemove();
            }
        }
        else if (callback) {
            callback();
        }
    };
    /** @internal */
    /** @internal */
    ModalDirective.prototype.removeBackdrop = /** @internal */
    function () {
        this._backdrop.hide();
    };
    /** Events tricks */
    // no need for it
    // protected setEscapeEvent():void {
    //   if (this._isShown && this._config.keyboard) {
    //     $(this._element).on(Event.KEYDOWN_DISMISS, (event) => {
    //       if (event.which === 27) {
    //         this.hide()
    //       }
    //     })
    //
    //   } else if (!this._isShown) {
    //     $(this._element).off(Event.KEYDOWN_DISMISS)
    //   }
    // }
    // protected setResizeEvent():void {
    // console.log(this.renderer.listenGlobal('', Event.RESIZE));
    // if (this._isShown) {
    //   $(window).on(Event.RESIZE, $.proxy(this._handleUpdate, this))
    // } else {
    //   $(window).off(Event.RESIZE)
    // }
    // }
    /** Events tricks */
    // no need for it
    // protected setEscapeEvent():void {
    //   if (this._isShown && this._config.keyboard) {
    //     $(this._element).on(Event.KEYDOWN_DISMISS, (event) => {
    //       if (event.which === 27) {
    //         this.hide()
    //       }
    //     })
    //
    //   } else if (!this._isShown) {
    //     $(this._element).off(Event.KEYDOWN_DISMISS)
    //   }
    // }
    // protected setResizeEvent():void {
    // console.log(this.renderer.listenGlobal('', Event.RESIZE));
    // if (this._isShown) {
    //   $(window).on(Event.RESIZE, $.proxy(this._handleUpdate, this))
    // } else {
    //   $(window).off(Event.RESIZE)
    // }
    // }
    ModalDirective.prototype.focusOtherModal = /** Events tricks */
    // no need for it
    // protected setEscapeEvent():void {
    //   if (this._isShown && this._config.keyboard) {
    //     $(this._element).on(Event.KEYDOWN_DISMISS, (event) => {
    //       if (event.which === 27) {
    //         this.hide()
    //       }
    //     })
    //
    //   } else if (!this._isShown) {
    //     $(this._element).off(Event.KEYDOWN_DISMISS)
    //   }
    // }
    // protected setResizeEvent():void {
    // console.log(this.renderer.listenGlobal('', Event.RESIZE));
    // if (this._isShown) {
    //   $(window).on(Event.RESIZE, $.proxy(this._handleUpdate, this))
    // } else {
    //   $(window).off(Event.RESIZE)
    // }
    // }
    function () {
        if (this._element.nativeElement.parentElement == null)
            return;
        var otherOpenedModals = this._element.nativeElement.parentElement.querySelectorAll('.in[bsModal]');
        if (!otherOpenedModals.length) {
            return;
        }
        otherOpenedModals[otherOpenedModals.length - 1].focus();
    };
    /** @internal */
    /** @internal */
    ModalDirective.prototype.resetAdjustments = /** @internal */
    function () {
        this._renderer.setStyle(this._element.nativeElement, 'paddingLeft', '');
        this._renderer.setStyle(this._element.nativeElement, 'paddingRight', '');
    };
    /** Scroll bar tricks */
    /** @internal */
    /** Scroll bar tricks */
    /** @internal */
    ModalDirective.prototype.checkScrollbar = /** Scroll bar tricks */
    /** @internal */
    function () {
        this.isBodyOverflowing = browser_1.document.body.clientWidth < browser_1.window.innerWidth;
        this.scrollbarWidth = this.getScrollbarWidth();
    };
    ModalDirective.prototype.setScrollbar = function () {
        if (!browser_1.document) {
            return;
        }
        this.originalBodyPadding = parseInt(browser_1.window
            .getComputedStyle(browser_1.document.body)
            .getPropertyValue('padding-right') || 0, 10);
        if (this.isBodyOverflowing) {
            browser_1.document.body.style.paddingRight = this.originalBodyPadding +
                this.scrollbarWidth + "px";
        }
    };
    ModalDirective.prototype.resetScrollbar = function () {
        browser_1.document.body.style.paddingRight = this.originalBodyPadding + 'px';
    };
    // thx d.walsh
    // thx d.walsh
    ModalDirective.prototype.getScrollbarWidth = 
    // thx d.walsh
    function () {
        var scrollDiv = this._renderer.createElement('div');
        this._renderer.addClass(scrollDiv, modal_options_class_1.CLASS_NAME.SCROLLBAR_MEASURER);
        this._renderer.appendChild(browser_1.document.body, scrollDiv);
        var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
        this._renderer.removeChild(browser_1.document.body, scrollDiv);
        return scrollbarWidth;
    };
    ModalDirective.decorators = [
        { type: core_1.Directive, args: [{
                    selector: '[bsModal]',
                    exportAs: 'bs-modal'
                },] },
    ];
    /** @nocollapse */
    ModalDirective.ctorParameters = function () { return [
        { type: core_1.ElementRef, },
        { type: core_1.ViewContainerRef, },
        { type: core_1.Renderer2, },
        { type: component_loader_factory_1.ComponentLoaderFactory, },
    ]; };
    ModalDirective.propDecorators = {
        "config": [{ type: core_1.Input },],
        "onShow": [{ type: core_1.Output },],
        "onShown": [{ type: core_1.Output },],
        "onHide": [{ type: core_1.Output },],
        "onHidden": [{ type: core_1.Output },],
        "onClick": [{ type: core_1.HostListener, args: ['click', ['$event'],] },],
        "onEsc": [{ type: core_1.HostListener, args: ['keydown.esc', ['$event'],] },],
    };
    return ModalDirective;
}());
exports.ModalDirective = ModalDirective;
//# sourceMappingURL=modal.directive.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/container/modal/modal/modal.module.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var modal_backdrop_component_1 = __webpack_require__("./node_modules/@farris/ui/container/modal/modal/modal-backdrop.component.js");
var modal_directive_1 = __webpack_require__("./node_modules/@farris/ui/container/modal/modal/modal.directive.js");
var positioning_1 = __webpack_require__("./node_modules/@farris/ui/container/modal/positioning/index.js");
var component_loader_1 = __webpack_require__("./node_modules/@farris/ui/container/modal/component-loader/index.js");
var modal_container_component_1 = __webpack_require__("./node_modules/@farris/ui/container/modal/modal/modal-container.component.js");
var bs_modal_service_1 = __webpack_require__("./node_modules/@farris/ui/container/modal/modal/bs-modal.service.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/esm5/common.js");
var perfect_scorll_1 = __webpack_require__("./node_modules/@farris/ui/perfect-scorll/index.js");
var AngularDraggableModule_1 = __webpack_require__("./node_modules/@farris/ui/draggable/AngularDraggableModule.js");
var ModalModule = /** @class */ (function () {
    function ModalModule() {
    }
    ModalModule.forRoot = function () {
        return {
            ngModule: ModalModule,
            providers: [bs_modal_service_1.BsModalService, component_loader_1.ComponentLoaderFactory, positioning_1.PositioningService]
        };
    };
    ModalModule.decorators = [
        { type: core_1.NgModule, args: [{
                    imports: [
                        common_1.CommonModule,
                        perfect_scorll_1.PerfectScrollbarModule,
                        AngularDraggableModule_1.AngularDraggableModule
                    ],
                    declarations: [
                        modal_backdrop_component_1.ModalBackdropComponent,
                        modal_directive_1.ModalDirective,
                        modal_container_component_1.ModalContainerComponent
                    ],
                    exports: [modal_backdrop_component_1.ModalBackdropComponent, modal_directive_1.ModalDirective],
                    entryComponents: [modal_backdrop_component_1.ModalBackdropComponent, modal_container_component_1.ModalContainerComponent]
                },] },
    ];
    return ModalModule;
}());
exports.ModalModule = ModalModule;
//# sourceMappingURL=modal.module.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/container/modal/positioning/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ng_positioning_1 = __webpack_require__("./node_modules/@farris/ui/container/modal/positioning/ng-positioning.js");
exports.positionElements = ng_positioning_1.positionElements;
exports.Positioning = ng_positioning_1.Positioning;
var positioning_service_1 = __webpack_require__("./node_modules/@farris/ui/container/modal/positioning/positioning.service.js");
exports.PositioningService = positioning_service_1.PositioningService;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/container/modal/positioning/ng-positioning.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @copyright Valor Software
 * @copyright Angular ng-bootstrap team
 */
Object.defineProperty(exports, "__esModule", { value: true });
// previous version:
// https://github.com/angular-ui/bootstrap/blob/07c31d0731f7cb068a1932b8e01d2312b796b4ec/src/position/position.js
// tslint:disable
var 
// previous version:
// https://github.com/angular-ui/bootstrap/blob/07c31d0731f7cb068a1932b8e01d2312b796b4ec/src/position/position.js
// tslint:disable
Positioning = /** @class */ (function () {
    function Positioning() {
    }
    Positioning.prototype.position = function (element, round) {
        if (round === void 0) { round = true; }
        var elPosition;
        var parentOffset = {
            width: 0,
            height: 0,
            top: 0,
            bottom: 0,
            left: 0,
            right: 0
        };
        if (this.getStyle(element, 'position') === 'fixed') {
            var bcRect = element.getBoundingClientRect();
            elPosition = {
                width: bcRect.width,
                height: bcRect.height,
                top: bcRect.top,
                bottom: bcRect.bottom,
                left: bcRect.left,
                right: bcRect.right
            };
        }
        else {
            var offsetParentEl = this.offsetParent(element);
            elPosition = this.offset(element, false);
            if (offsetParentEl !== document.documentElement) {
                parentOffset = this.offset(offsetParentEl, false);
            }
            parentOffset.top += offsetParentEl.clientTop;
            parentOffset.left += offsetParentEl.clientLeft;
        }
        elPosition.top -= parentOffset.top;
        elPosition.bottom -= parentOffset.top;
        elPosition.left -= parentOffset.left;
        elPosition.right -= parentOffset.left;
        if (round) {
            elPosition.top = Math.round(elPosition.top);
            elPosition.bottom = Math.round(elPosition.bottom);
            elPosition.left = Math.round(elPosition.left);
            elPosition.right = Math.round(elPosition.right);
        }
        return elPosition;
    };
    Positioning.prototype.offset = function (element, round) {
        if (round === void 0) { round = true; }
        var elBcr = element.getBoundingClientRect();
        var viewportOffset = {
            top: window.pageYOffset - document.documentElement.clientTop,
            left: window.pageXOffset - document.documentElement.clientLeft
        };
        var elOffset = {
            height: elBcr.height || element.offsetHeight,
            width: elBcr.width || element.offsetWidth,
            top: elBcr.top + viewportOffset.top,
            bottom: elBcr.bottom + viewportOffset.top,
            left: elBcr.left + viewportOffset.left,
            right: elBcr.right + viewportOffset.left
        };
        if (round) {
            elOffset.height = Math.round(elOffset.height);
            elOffset.width = Math.round(elOffset.width);
            elOffset.top = Math.round(elOffset.top);
            elOffset.bottom = Math.round(elOffset.bottom);
            elOffset.left = Math.round(elOffset.left);
            elOffset.right = Math.round(elOffset.right);
        }
        return elOffset;
    };
    Positioning.prototype.positionElements = function (hostElement, targetElement, placement, appendToBody) {
        var hostElPosition = appendToBody
            ? this.offset(hostElement, false)
            : this.position(hostElement, false);
        var targetElStyles = this.getAllStyles(targetElement);
        var targetElBCR = targetElement.getBoundingClientRect();
        var placementPrimary = placement.split(' ')[0] || 'top';
        var placementSecondary = placement.split(' ')[1] || 'center';
        var targetElPosition = {
            height: targetElBCR.height || targetElement.offsetHeight,
            width: targetElBCR.width || targetElement.offsetWidth,
            top: 0,
            bottom: targetElBCR.height || targetElement.offsetHeight,
            left: 0,
            right: targetElBCR.width || targetElement.offsetWidth
        };
        var shiftHeight = {
            top: hostElPosition.top,
            center: hostElPosition.top +
                hostElPosition.height / 2 -
                targetElPosition.height / 2,
            bottom: hostElPosition.top + hostElPosition.height
        };
        var shiftWidth = {
            left: hostElPosition.left,
            center: hostElPosition.left +
                hostElPosition.width / 2 -
                targetElPosition.width / 2,
            right: hostElPosition.left + hostElPosition.width
        };
        if (placementPrimary === 'auto') {
            var newPlacementPrimary = this.autoPosition(targetElPosition, hostElPosition, targetElement, placementSecondary);
            if (!newPlacementPrimary)
                newPlacementPrimary = this.autoPosition(targetElPosition, hostElPosition, targetElement);
            if (newPlacementPrimary)
                placementPrimary = newPlacementPrimary;
            targetElement.classList.add(placementPrimary);
        }
        switch (placementPrimary) {
            case 'top':
                targetElPosition.top =
                    hostElPosition.top -
                        (targetElPosition.height +
                            parseFloat(targetElStyles.marginBottom));
                targetElPosition.bottom +=
                    hostElPosition.top - targetElPosition.height;
                targetElPosition.left = shiftWidth[placementSecondary];
                targetElPosition.right += shiftWidth[placementSecondary];
                break;
            case 'bottom':
                targetElPosition.top = shiftHeight[placementPrimary];
                targetElPosition.bottom += shiftHeight[placementPrimary];
                targetElPosition.left = shiftWidth[placementSecondary];
                targetElPosition.right += shiftWidth[placementSecondary];
                break;
            case 'left':
                targetElPosition.top = shiftHeight[placementSecondary];
                targetElPosition.bottom += shiftHeight[placementSecondary];
                targetElPosition.left =
                    hostElPosition.left -
                        (targetElPosition.width + parseFloat(targetElStyles.marginRight));
                targetElPosition.right +=
                    hostElPosition.left - targetElPosition.width;
                break;
            case 'right':
                targetElPosition.top = shiftHeight[placementSecondary];
                targetElPosition.bottom += shiftHeight[placementSecondary];
                targetElPosition.left = shiftWidth[placementPrimary];
                targetElPosition.right += shiftWidth[placementPrimary];
                break;
        }
        targetElPosition.top = Math.round(targetElPosition.top);
        targetElPosition.bottom = Math.round(targetElPosition.bottom);
        targetElPosition.left = Math.round(targetElPosition.left);
        targetElPosition.right = Math.round(targetElPosition.right);
        return targetElPosition;
    };
    Positioning.prototype.autoPosition = function (targetElPosition, hostElPosition, targetElement, preferredPosition) {
        if ((!preferredPosition || preferredPosition === 'right') &&
            targetElPosition.left + hostElPosition.left - targetElPosition.width <
                0) {
            return 'right';
        }
        else if ((!preferredPosition || preferredPosition === 'top') &&
            targetElPosition.bottom +
                hostElPosition.bottom +
                targetElPosition.height >
                window.innerHeight) {
            return 'top';
        }
        else if ((!preferredPosition || preferredPosition === 'bottom') &&
            targetElPosition.top + hostElPosition.top - targetElPosition.height < 0) {
            return 'bottom';
        }
        else if ((!preferredPosition || preferredPosition === 'left') &&
            targetElPosition.right +
                hostElPosition.right +
                targetElPosition.width >
                window.innerWidth) {
            return 'left';
        }
        return null;
    };
    Positioning.prototype.getAllStyles = function (element) {
        return window.getComputedStyle(element);
    };
    Positioning.prototype.getStyle = function (element, prop) {
        return this.getAllStyles(element)[prop];
    };
    Positioning.prototype.isStaticPositioned = function (element) {
        return (this.getStyle(element, 'position') || 'static') === 'static';
    };
    Positioning.prototype.offsetParent = function (element) {
        var offsetParentEl = element.offsetParent || document.documentElement;
        while (offsetParentEl &&
            offsetParentEl !== document.documentElement &&
            this.isStaticPositioned(offsetParentEl)) {
            offsetParentEl = offsetParentEl.offsetParent;
        }
        return offsetParentEl || document.documentElement;
    };
    return Positioning;
}());
exports.Positioning = Positioning;
var positionService = new Positioning();
function positionElements(hostElement, targetElement, placement, appendToBody) {
    var pos = positionService.positionElements(hostElement, targetElement, placement, appendToBody);
    targetElement.style.top = pos.top + "px";
    targetElement.style.left = pos.left + "px";
}
exports.positionElements = positionElements;
//# sourceMappingURL=ng-positioning.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/container/modal/positioning/positioning.service.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var ng_positioning_1 = __webpack_require__("./node_modules/@farris/ui/container/modal/positioning/ng-positioning.js");
var PositioningService = /** @class */ (function () {
    function PositioningService() {
    }
    PositioningService.prototype.position = function (options) {
        var element = options.element, target = options.target, attachment = options.attachment, appendToBody = options.appendToBody;
        ng_positioning_1.positionElements(_getHtmlElement(target), _getHtmlElement(element), attachment, appendToBody);
    };
    PositioningService.decorators = [
        { type: core_1.Injectable },
    ];
    return PositioningService;
}());
exports.PositioningService = PositioningService;
function _getHtmlElement(element) {
    // it means that we got a selector
    if (typeof element === 'string') {
        return document.querySelector(element);
    }
    if (element instanceof core_1.ElementRef) {
        return element.nativeElement;
    }
    return element;
}
//# sourceMappingURL=positioning.service.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/container/modal/utils/facade/browser.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*tslint:disable */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * JS version of browser APIs. This library can only run in the browser.
 */
var win = (typeof window !== 'undefined' && window) || {};
exports.window = win;
exports.document = win.document;
exports.location = win.location;
exports.gc = win['gc'] ? function () { return win['gc'](); } : function () { return null; };
exports.performance = win['performance'] ? win['performance'] : null;
exports.Event = win['Event'];
exports.MouseEvent = win['MouseEvent'];
exports.KeyboardEvent = win['KeyboardEvent'];
exports.EventTarget = win['EventTarget'];
exports.History = win['History'];
exports.Location = win['Location'];
exports.EventListener = win['EventListener'];
//# sourceMappingURL=browser.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/container/modal/utils/theme-provider.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var browser_1 = __webpack_require__("./node_modules/@farris/ui/container/modal/utils/facade/browser.js");
var guessedVersion;
function _guessBsVersion() {
    if (typeof document === 'undefined') {
        return null;
    }
    var spanEl = document.createElement('span');
    spanEl.innerText = 'test bs version';
    document.body.appendChild(spanEl);
    spanEl.classList.add('d-none');
    var rect = spanEl.getBoundingClientRect();
    document.body.removeChild(spanEl);
    if (!rect) {
        return 'bs3';
    }
    return rect.top === 0 ? 'bs4' : 'bs3';
}
function setTheme(theme) {
    guessedVersion = theme;
}
exports.setTheme = setTheme;
// todo: in ngx-bootstrap, bs4 will became a default one
function isBs3() {
    if (typeof browser_1.window === 'undefined') {
        return true;
    }
    if (typeof browser_1.window.__theme === 'undefined') {
        if (guessedVersion) {
            return guessedVersion === 'bs3';
        }
        guessedVersion = _guessBsVersion();
        return guessedVersion === 'bs3';
    }
    return browser_1.window.__theme !== 'bs4';
}
exports.isBs3 = isBs3;
//# sourceMappingURL=theme-provider.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/container/modal/utils/trigger.class.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @copyright Valor Software
 * @copyright Angular ng-bootstrap team
 */
Object.defineProperty(exports, "__esModule", { value: true });
var Trigger = /** @class */ (function () {
    function Trigger(open, close) {
        this.open = open;
        this.close = close || open;
    }
    Trigger.prototype.isManual = function () {
        return this.open === 'manual' || this.close === 'manual';
    };
    return Trigger;
}());
exports.Trigger = Trigger;
//# sourceMappingURL=trigger.class.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/container/modal/utils/triggers.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var trigger_class_1 = __webpack_require__("./node_modules/@farris/ui/container/modal/utils/trigger.class.js");
var DEFAULT_ALIASES = {
    hover: ['mouseover', 'mouseout'],
    focus: ['focusin', 'focusout']
};
function parseTriggers(triggers, aliases) {
    if (aliases === void 0) { aliases = DEFAULT_ALIASES; }
    var trimmedTriggers = (triggers || '').trim();
    if (trimmedTriggers.length === 0) {
        return [];
    }
    var parsedTriggers = trimmedTriggers
        .split(/\s+/)
        .map(function (trigger) { return trigger.split(':'); })
        .map(function (triggerPair) {
        var alias = aliases[triggerPair[0]] || triggerPair;
        return new trigger_class_1.Trigger(alias[0], alias[1]);
    });
    var manualTriggers = parsedTriggers.filter(function (triggerPair) {
        return triggerPair.isManual();
    });
    if (manualTriggers.length > 1) {
        throw new Error('Triggers parse error: only one manual trigger is allowed');
    }
    if (manualTriggers.length === 1 && parsedTriggers.length > 1) {
        throw new Error('Triggers parse error: manual trigger can\'t be mixed with other triggers');
    }
    return parsedTriggers;
}
exports.parseTriggers = parseTriggers;
function listenToTriggers(renderer, target, triggers, showFn, hideFn, toggleFn) {
    var parsedTriggers = parseTriggers(triggers);
    var listeners = [];
    if (parsedTriggers.length === 1 && parsedTriggers[0].isManual()) {
        return Function.prototype;
    }
    parsedTriggers.forEach(function (trigger) {
        if (trigger.open === trigger.close) {
            listeners.push(renderer.listen(target, trigger.open, toggleFn));
            return;
        }
        listeners.push(renderer.listen(target, trigger.open, showFn), renderer.listen(target, trigger.close, hideFn));
    });
    return function () {
        listeners.forEach(function (unsubscribeFn) { return unsubscribeFn(); });
    };
}
exports.listenToTriggers = listenToTriggers;
function listenToTriggersV2(renderer, options) {
    var parsedTriggers = parseTriggers(options.triggers);
    var target = options.target;
    // do nothing
    if (parsedTriggers.length === 1 && parsedTriggers[0].isManual()) {
        return Function.prototype;
    }
    // all listeners
    var listeners = [];
    // lazy listeners registration
    var _registerHide = [];
    var registerHide = function () {
        // add hide listeners to unregister array
        _registerHide.forEach(function (fn) { return listeners.push(fn()); });
        // register hide events only once
        _registerHide.length = 0;
    };
    // register open\close\toggle listeners
    parsedTriggers.forEach(function (trigger) {
        var useToggle = trigger.open === trigger.close;
        var showFn = useToggle ? options.toggle : options.show;
        if (!useToggle) {
            _registerHide.push(function () {
                return renderer.listen(target, trigger.close, options.hide);
            });
        }
        listeners.push(renderer.listen(target, trigger.open, function () { return showFn(registerHide); }));
    });
    return function () {
        listeners.forEach(function (unsubscribeFn) { return unsubscribeFn(); });
    };
}
exports.listenToTriggersV2 = listenToTriggersV2;
function registerOutsideClick(renderer, options) {
    if (!options.outsideClick) {
        return Function.prototype;
    }
    return renderer.listen('document', 'click', function (event) {
        if (options.target && options.target.contains(event.target)) {
            return;
        }
        if (options.targets &&
            options.targets.some(function (target) { return target.contains(event.target); })) {
            return;
        }
        options.hide();
    });
}
exports.registerOutsideClick = registerOutsideClick;
//# sourceMappingURL=triggers.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/container/modal/utils/utils.class.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var browser_1 = __webpack_require__("./node_modules/@farris/ui/container/modal/utils/facade/browser.js");
var Utils = /** @class */ (function () {
    function Utils() {
    }
    Utils.reflow = function (element) {
        (function (bs) { return bs; })(element.offsetHeight);
    };
    // source: https://github.com/jquery/jquery/blob/master/src/css/var/getStyles.js
    // source: https://github.com/jquery/jquery/blob/master/src/css/var/getStyles.js
    Utils.getStyles = 
    // source: https://github.com/jquery/jquery/blob/master/src/css/var/getStyles.js
    function (elem) {
        // Support: IE <=11 only, Firefox <=30 (#15098, #14150)
        // IE throws on elements created in popups
        // FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
        var view = elem.ownerDocument.defaultView;
        if (!view || !view.opener) {
            view = browser_1.window;
        }
        return view.getComputedStyle(elem);
    };
    Utils.checkDialogSize = function (width, height) {
        // 可视区域尺寸
        var winSize = {
            width: document.body.offsetWidth,
            height: browser_1.window.innerHeight
        };
        if (winSize.width < width) {
            width = winSize.width;
        }
        if (winSize.height < height) {
            height = winSize.height;
        }
        return {
            width: width,
            height: height
        };
    };
    return Utils;
}());
exports.Utils = Utils;
//# sourceMappingURL=utils.class.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/data/datatable-extension/datatable.module.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/esm5/common.js");
var kendo_angular_grid_1 = __webpack_require__("./node_modules/@progress/kendo-angular-grid/dist/es/index.js");
var kendo_angular_inputs_1 = __webpack_require__("./node_modules/@progress/kendo-angular-inputs/dist/es/index.js");
var no_data_text_directive_1 = __webpack_require__("./node_modules/@farris/ui/data/datatable-extension/empty-data-text/no-data-text.directive.js");
var datatable_enter_directive_1 = __webpack_require__("./node_modules/@farris/ui/data/datatable-extension/grid-edit-enter/datatable-enter.directive.js");
var datatable_lazy_directive_1 = __webpack_require__("./node_modules/@farris/ui/data/datatable-extension/pager/datatable-lazy.directive.js");
var FarrisDatatableExModule = /** @class */ (function () {
    function FarrisDatatableExModule() {
    }
    FarrisDatatableExModule.decorators = [
        { type: core_1.NgModule, args: [{
                    imports: [
                        common_1.CommonModule,
                        kendo_angular_grid_1.GridModule,
                        kendo_angular_inputs_1.SliderModule
                    ],
                    declarations: [no_data_text_directive_1.NoDataTextDirective, datatable_enter_directive_1.EditEnterDirective, datatable_lazy_directive_1.LazyScrollDirective],
                    exports: [no_data_text_directive_1.NoDataTextDirective, datatable_enter_directive_1.EditEnterDirective, datatable_lazy_directive_1.LazyScrollDirective]
                },] },
    ];
    return FarrisDatatableExModule;
}());
exports.FarrisDatatableExModule = FarrisDatatableExModule;
//# sourceMappingURL=datatable.module.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/data/datatable-extension/empty-data-text/no-data-text.directive.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var NoDataTextDirective = /** @class */ (function () {
    function NoDataTextDirective(el, render) {
        this.el = el;
        this.render = render;
    }
    NoDataTextDirective.prototype.ngOnInit = function () {
    };
    /**
     * 判断数据是否为空  为空才可以改变空数据提示
     */
    /**
         * 判断数据是否为空  为空才可以改变空数据提示
         */
    NoDataTextDirective.prototype.ngAfterViewInit = /**
         * 判断数据是否为空  为空才可以改变空数据提示
         */
    function () {
        if (!this.grid.data || !this.grid.data.length) {
            var td = this.el.nativeElement.querySelectorAll('td')[0];
            // 删除之前的text
            for (var i = 0; i < td.childNodes.length; i++) {
                if (td.childNodes[i].nodeName === '#text' && td.childNodes[i].data) {
                    this.render.removeChild(td, td.childNodes[i]);
                }
            }
            if (!this.noDataText) {
                // 默认
                this.noDataText = '暂无数据';
            }
            this.render.appendChild(td, this.render.createText(this.noDataText));
        }
    };
    NoDataTextDirective.decorators = [
        { type: core_1.Directive, args: [{
                    selector: '[farris-no-data-text]'
                },] },
    ];
    /** @nocollapse */
    NoDataTextDirective.ctorParameters = function () { return [
        { type: core_1.ElementRef, },
        { type: core_1.Renderer2, },
    ]; };
    NoDataTextDirective.propDecorators = {
        "grid": [{ type: core_1.Input },],
        "noDataText": [{ type: core_1.Input, args: ['farris-no-data-text',] },],
    };
    return NoDataTextDirective;
}());
exports.NoDataTextDirective = NoDataTextDirective;
//# sourceMappingURL=no-data-text.directive.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/data/datatable-extension/grid-edit-enter/datatable-enter.directive.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/esm5/forms.js");
var EditEnterDirective = /** @class */ (function () {
    function EditEnterDirective(el, render, formBuilder) {
        this.el = el;
        this.render = render;
        this.formBuilder = formBuilder;
        // 若有分页 设置每一页的数量  否则默认为无穷大
        // tslint:disable-next-line:no-input-rename
        this.pageSize = Infinity;
    }
    Object.defineProperty(EditEnterDirective.prototype, "_realRowsIndex", {
        get: function () {
            return this._currentRowIndex % this.pageSize;
        },
        enumerable: true,
        configurable: true
    });
    EditEnterDirective.prototype.ngOnInit = function () {
    };
    EditEnterDirective.prototype.ngAfterViewInit = function () {
        this._rows = this.el.nativeElement.querySelector('tbody').children;
    };
    // 点击单元格事件 如果处于非编辑状态  则进入编辑状态
    EditEnterDirective.prototype.cellClickEvent = 
    // 点击单元格事件 如果处于非编辑状态  则进入编辑状态
    function (e) {
        if (e.type === 'click') {
            e.sender.editCell(e.rowIndex, e.columnIndex, this.createFormGroup(e.dataItem));
            this._currentRowIndex = e.rowIndex;
            // this._realRowsIndex = this._currentRowIndex % this.pageSize;
            // 只有当点击事件触发才会进行keyup事件
            this._currentColumnIndex = e.columnIndex;
            this._sender = e.sender;
        }
    };
    // 保存新一行事件  无交互  直接添加到相应位置
    EditEnterDirective.prototype.saveNewRow = 
    // 保存新一行事件  无交互  直接添加到相应位置
    function (_a) {
        var sender = _a.sender, formGroup = _a.formGroup, rowIndex = _a.rowIndex;
        if (formGroup.valid) {
            this.service.create(this._currentRowIndex, formGroup.value);
            sender.closeRow(rowIndex);
        }
    };
    // 回车键抬起事件
    EditEnterDirective.prototype.enterCell = 
    // 回车键抬起事件
    function (e) {
        var _this = this;
        // 若有分页
        // let realRowsIndex = this._currentRowIndex % this.pageSize;
        // 回车键
        if (e.keyCode === 13) {
            // 不超出行数  进入下一个单元格或者换行
            var currentRowCols = this._rows[this._realRowsIndex].children;
            // 如果不超出当前行的列数  进入下一个单元格  否则换行
            if (this._currentColumnIndex + 1 === currentRowCols.length) {
                this._currentColumnIndex = 0;
                this._currentRowIndex++;
                if (!this._realRowsIndex) {
                    this._sender.addRow(this.createFormGroup(this.newDataItem));
                    // kendo ui addRow应该是一个异步方法，因此使用了setTimeout
                    setTimeout(function () {
                        _this.appendNewRow();
                    }, 0);
                }
                else {
                    this._sender.editCell(this._currentRowIndex, 0, this.createFormGroup(this.grid.data.data[this._realRowsIndex]));
                }
            }
            else {
                // 正常进入下一个单元格
                this._currentColumnIndex++;
                this._sender.editCell(this._currentRowIndex, this._currentColumnIndex, this.createFormGroup(this.grid.data.data[this._realRowsIndex]));
            }
            console.log(this._realRowsIndex);
        }
    };
    /**
     * 新加一行到末尾
     */
    /**
         * 新加一行到末尾
         */
    EditEnterDirective.prototype.appendNewRow = /**
         * 新加一行到末尾
         */
    function () {
        this._tbody = this.el.nativeElement.querySelectorAll('tbody');
        var childNodes = this._tbody[0].childNodes;
        for (var i = 0; i < childNodes.length; i++) {
            // 找到的第一个TR就是已经增加的新行
            if (childNodes[i].nodeName === 'TR') {
                this.render.removeChild(this._tbody[0], this._tbody[0].childNodes[i]);
                this.render.appendChild(this._tbody[0], this._tbody[0].childNodes[i]);
                this.isAddNewRow = true;
                return;
            }
        }
    };
    EditEnterDirective.decorators = [
        { type: core_1.Directive, args: [{
                    selector: '[farris-edit-enter]'
                },] },
    ];
    /** @nocollapse */
    EditEnterDirective.ctorParameters = function () { return [
        { type: core_1.ElementRef, },
        { type: core_1.Renderer2, },
        { type: forms_1.FormBuilder, },
    ]; };
    EditEnterDirective.propDecorators = {
        "grid": [{ type: core_1.Input },],
        "createFormGroup": [{ type: core_1.Input },],
        "newDataItem": [{ type: core_1.Input, args: ['new-data-item',] },],
        "pageSize": [{ type: core_1.Input, args: ['page-size',] },],
        "service": [{ type: core_1.Input },],
        "cellClickEvent": [{ type: core_1.HostListener, args: ['cellClick', ['$event'],] },],
        "saveNewRow": [{ type: core_1.HostListener, args: ['save', ['$event'],] },],
        "enterCell": [{ type: core_1.HostListener, args: ['keyup', ['$event'],] },],
    };
    return EditEnterDirective;
}());
exports.EditEnterDirective = EditEnterDirective;
//# sourceMappingURL=datatable-enter.directive.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/data/datatable-extension/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__("./node_modules/@farris/ui/data/datatable-extension/datatable.module.js"));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/data/datatable-extension/pager/datatable-lazy.directive.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var LazyScrollDirective = /** @class */ (function () {
    function LazyScrollDirective(el, ngZone, render) {
        this.el = el;
        this.ngZone = ngZone;
        this.render = render;
        // tslint:disable-next-line:no-input-rename
        this.trHeight = 33;
    }
    LazyScrollDirective.prototype.ngOnInit = function () {
    };
    LazyScrollDirective.prototype.ngAfterViewInit = function () {
        var _this = this;
        // 滚动条div高度必须固定  否则没有滚动条
        this.maxHeight = parseInt(this.el.nativeElement.style.maxHeight, 10);
        // this.maxHeight = this.el.nativeElement.style.maxHeight;
        // 滚动条div
        this.scrollElement = this.el.nativeElement.querySelector('.k-grid-content');
        // 表格
        this.table = this.el.nativeElement.querySelector('.k-grid-table');
        // 设置table父元素相对定位
        this.scrollElement.style.position = 'relative';
        // 设置表格绝对定位
        this.table.style.position = 'absolute';
        this.tbody = this.el.nativeElement.querySelector('tbody');
        // 设置默认的表格行高
        this.trHeight = this.tbody.children[0].offsetHeight;
        this.tableParent = this.el.nativeElement.querySelector('.k-grid-table-wrap');
        // 设置初始化可视数据
        setTimeout(function () {
            _this.grid.data = _this.originData.slice(0, Math.ceil(_this.maxHeight / _this.trHeight));
        }, 0);
        // 设置table父元素的高度  出现滚动条
        this.render.setStyle(this.tableParent, 'height', this.trHeight * this.originData.length + 'px');
        // 绑定滚动事件到滚动条div
        this.ngZone.run(function () {
            _this.scrollEvent = _this.scrollData.bind(_this);
            _this.scrollElement.addEventListener('scroll', _this.scrollEvent);
        });
    };
    /**
     * 滚动条滚动方法
     * @param {event} e-滚动事件
    */
    /**
         * 滚动条滚动方法
         * @param {event} e-滚动事件
        */
    LazyScrollDirective.prototype.scrollData = /**
         * 滚动条滚动方法
         * @param {event} e-滚动事件
        */
    function (e) {
        this.scrollHeight = e.srcElement.scrollHeight;
        var trNumbers = Math.ceil(e.srcElement.scrollTop / this.trHeight);
        this.grid.data = this.originData.slice(trNumbers, Math.ceil((e.srcElement.scrollTop + this.maxHeight) / this.trHeight));
        this.table.style.top = e.srcElement.scrollTop + 'px';
    };
    LazyScrollDirective.decorators = [
        { type: core_1.Directive, args: [{
                    selector: '[farris-table-lazy]'
                },] },
    ];
    /** @nocollapse */
    LazyScrollDirective.ctorParameters = function () { return [
        { type: core_1.ElementRef, },
        { type: core_1.NgZone, },
        { type: core_1.Renderer2, },
    ]; };
    LazyScrollDirective.propDecorators = {
        "grid": [{ type: core_1.Input },],
        "originData": [{ type: core_1.Input, args: ['origin-data',] },],
        "trHeight": [{ type: core_1.Input, args: ['row-height',] },],
    };
    return LazyScrollDirective;
}());
exports.LazyScrollDirective = LazyScrollDirective;
//# sourceMappingURL=datatable-lazy.directive.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/data/datatable/datatable-checkbox.component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var DTCheckboxComponent = /** @class */ (function () {
    function DTCheckboxComponent() {
        this.checkedChange = new core_1.EventEmitter();
    }
    DTCheckboxComponent.prototype.ngOnInit = function () { };
    DTCheckboxComponent.prototype.handleClick = function (event) {
        if (!this.disabled) {
            this.checkedChange.emit({ originalEvent: event, checked: !this.checked });
        }
    };
    DTCheckboxComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'dt-checkbox',
                    template: "\n        <div class=\"custom-control custom-checkbox  custom-control-inline dt-checkbox\">\n            <input type=\"checkbox\" class=\"custom-control-input\"  [checked]=\"checked\">\n            <label class=\"custom-control-label\" (click)=\"handleClick($event)\"></label>\n        </div>\n    "
                },] },
    ];
    /** @nocollapse */
    DTCheckboxComponent.ctorParameters = function () { return []; };
    DTCheckboxComponent.propDecorators = {
        "checked": [{ type: core_1.Input },],
        "id": [{ type: core_1.Input },],
        "disabled": [{ type: core_1.Input },],
        "checkedChange": [{ type: core_1.Output },],
    };
    return DTCheckboxComponent;
}());
exports.DTCheckboxComponent = DTCheckboxComponent;
//# sourceMappingURL=datatable-checkbox.component.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/data/datatable/datatable-column.component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var datatable_slot_directive_1 = __webpack_require__("./node_modules/@farris/ui/data/datatable/datatable-slot.directive.js");
var ColumnDirective = /** @class */ (function () {
    function ColumnDirective(el) {
        this.el = el;
        this.align = 'left';
        this.fixedClass = this.fixed === 'left';
    }
    ColumnDirective.prototype.ngOnInit = function () { };
    ColumnDirective.decorators = [
        { type: core_1.Directive, args: [{
                    selector: 'data-column, [data-column]',
                },] },
    ];
    /** @nocollapse */
    ColumnDirective.ctorParameters = function () { return [
        { type: core_1.ElementRef, },
    ]; };
    ColumnDirective.propDecorators = {
        "title": [{ type: core_1.Input },],
        "field": [{ type: core_1.Input },],
        "width": [{ type: core_1.Input },],
        "align": [{ type: core_1.Input },],
        "fixed": [{ type: core_1.Input },],
        "className": [{ type: core_1.Input },],
        "media": [{ type: core_1.Input },],
        "sortable": [{ type: core_1.Input },],
        "fixedClass": [{ type: core_1.HostBinding, args: ['class.fixed',] },],
        "cellTempl": [{ type: core_1.Input }, { type: core_1.ContentChild, args: [datatable_slot_directive_1.SlotDirective, { read: core_1.TemplateRef },] },],
    };
    return ColumnDirective;
}());
exports.ColumnDirective = ColumnDirective;
//# sourceMappingURL=datatable-column.component.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/data/datatable/datatable-column.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 转换列的顺序
 * @param {DataTableColumn[]} columns-所有列数据
 * @param {string} direction-left|right 左固定或者右固定
 */
exports.convertColumns = function (columns, direction) {
    var tempFixedColumns = [];
    var tempNotFixedColumns = [];
    columns.forEach(function (ele) {
        if (ele.fixed && (ele.fixed === direction || ele.fixed.type === direction)) {
            tempFixedColumns.push(ele);
        }
        else {
            tempNotFixedColumns.push(ele);
        }
    });
    return tempFixedColumns.concat(tempNotFixedColumns);
};
function typeOf(obj) {
    var toString = Object.prototype.toString;
    var map = {
        '[object Boolean]': 'boolean',
        '[object Number]': 'number',
        '[object String]': 'string',
        '[object Function]': 'function',
        '[object Array]': 'array',
        '[object Date]': 'date',
        '[object RegExp]': 'regExp',
        '[object Undefined]': 'undefined',
        '[object Null]': 'null',
        '[object Object]': 'object'
    };
    return map[toString.call(obj)];
}
/**
 *  对象或者数组深拷贝
 * @param {T} 源数据
 */
exports.deepCopy = function (data) {
    var t = typeOf(data);
    var o;
    if (t === 'array') {
        o = [];
    }
    else if (t === 'object') {
        o = {};
    }
    else {
        return data;
    }
    if (t === 'array') {
        for (var i = 0; i < data.length; i++) {
            o.push(exports.deepCopy(data[i]));
        }
    }
    else if (t === 'object') {
        for (var _i = 0, _a = Object.keys(data); _i < _a.length; _i++) {
            var i = _a[_i];
            o[i] = exports.deepCopy(data[i]);
        }
    }
    return o;
};
//# sourceMappingURL=datatable-column.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/data/datatable/datatable-row.component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var datatable_slot_directive_1 = __webpack_require__("./node_modules/@farris/ui/data/datatable/datatable-slot.directive.js");
var RowDirective = /** @class */ (function () {
    function RowDirective() {
    }
    RowDirective.prototype.ngOnInit = function () {
    };
    RowDirective.decorators = [
        { type: core_1.Directive, args: [{
                    selector: 'data-row'
                },] },
    ];
    /** @nocollapse */
    RowDirective.ctorParameters = function () { return []; };
    RowDirective.propDecorators = {
        "rowTempl": [{ type: core_1.Input }, { type: core_1.ContentChild, args: [datatable_slot_directive_1.SlotDirective, { read: core_1.TemplateRef },] },],
    };
    return RowDirective;
}());
exports.RowDirective = RowDirective;
//# sourceMappingURL=datatable-row.component.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/data/datatable/datatable-slot.directive.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var SlotDirective = /** @class */ (function () {
    function SlotDirective(templateRef) {
        this.templateRef = templateRef;
    }
    SlotDirective.decorators = [
        { type: core_1.Directive, args: [{
                    selector: '[slot]'
                },] },
    ];
    /** @nocollapse */
    SlotDirective.ctorParameters = function () { return [
        { type: core_1.TemplateRef, },
    ]; };
    return SlotDirective;
}());
exports.SlotDirective = SlotDirective;
//# sourceMappingURL=datatable-slot.directive.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/data/datatable/datatable.component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var datatable_row_component_1 = __webpack_require__("./node_modules/@farris/ui/data/datatable/datatable-row.component.js");
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var perfect_scorll_1 = __webpack_require__("./node_modules/@farris/ui/perfect-scorll/index.js");
var datatable_column_component_1 = __webpack_require__("./node_modules/@farris/ui/data/datatable/datatable-column.component.js");
var datatable_service_1 = __webpack_require__("./node_modules/@farris/ui/data/datatable/datatable.service.js");
var common_1 = __webpack_require__("./node_modules/@farris/ui/common/index.js");
var datatable_header_component_1 = __webpack_require__("./node_modules/@farris/ui/data/datatable/table/datatable-header.component.js");
var datatable_body_component_1 = __webpack_require__("./node_modules/@farris/ui/data/datatable/table/datatable-body.component.js");
var datatable_column_1 = __webpack_require__("./node_modules/@farris/ui/data/datatable/datatable-column.js");
var fromEvent_1 = __webpack_require__("./node_modules/rxjs/observable/fromEvent.js");
var throttleTime_1 = __webpack_require__("./node_modules/rxjs/operators/throttleTime.js");
var datatable_responsive_size_1 = __webpack_require__("./node_modules/@farris/ui/data/datatable/utils/datatable-responsive-size.js");
var DataTableComponent = /** @class */ (function () {
    function DataTableComponent(dataService, idService, el) {
        var _this = this;
        this.dataService = dataService;
        this.idService = idService;
        this.el = el;
        // table 尺寸
        this.width = 600;
        this.height = 500;
        // 是否填充
        this.fill = false;
        // 默认分页
        this.pagination = true;
        this.pageSize = 10;
        this.pageIndex = 1;
        this.pageList = [10, 20, 30, 50, 100];
        this.total = 0;
        // 可筛选
        this.showFilterBar = false;
        // table  数据
        this._data = [];
        //
        this.remote = 'client';
        // 多选  单选
        this.singleSelect = true;
        this.idField = 'id';
        // 分页事件
        this.pageChanged = new core_1.EventEmitter();
        this.pageSizeChanged = new core_1.EventEmitter();
        this.search = new core_1.EventEmitter();
        this.sortChange = new core_1.EventEmitter();
        // 是否可拖拽  默认可以
        this.dragable = true;
        // 设置拖拽停止器
        this.moveable = false;
        this.searchData = { field: '*', value: '' };
        // 事件订阅存储  便于销毁
        this.subscription = [];
        this.filter = '';
        this.maxSize = 7;
        this.directionLinks = true;
        this.autoHide = false;
        this.responsive = true;
        this.paginationOptions = {
            id: 'Farris-DataTable-Pagination',
            itemsPerPage: this.pageSize,
            currentPage: this.pageIndex,
            pageList: this.pageList,
            totalItems: this.total
        };
        this.labels = {
            previousLabel: ' ',
            nextLabel: ' ',
            screenReaderPaginationLabel: 'Pagination',
            screenReaderPageLabel: 'page',
            screenReaderCurrentLabel: "You're on page"
        };
        this._currentRowIndex = -1;
        this._currentRow = undefined;
        this.dataService.selectedRow.subscribe(function (e) {
            if (_this.singleSelect) {
                _this._currentRowIndex = e.rowIndex;
                _this._currentRow = e.rowData;
            }
            else {
                if (_this.selections) {
                    _this.dtHeader.isCheckAll = Object.keys(_this.selections).length === _this.data.length;
                }
            }
        });
        this.dataService.unSelectedRow.subscribe(function (e) {
            if (_this.singleSelect) {
                _this._currentRow = undefined;
                _this._currentRowIndex = -1;
            }
            else {
                _this.dtHeader.isCheckAll = false;
            }
        });
    }
    Object.defineProperty(DataTableComponent.prototype, "data", {
        get: function () {
            return this._data;
        },
        set: function (data) {
            this._data = data;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataTableComponent.prototype, "currentRowIndex", {
        get: function () {
            return this._currentRowIndex;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataTableComponent.prototype, "currentRow", {
        get: function () {
            return this._currentRow;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataTableComponent.prototype, "selections", {
        get: function () {
            return this.dtBody.selections;
        },
        enumerable: true,
        configurable: true
    });
    DataTableComponent.prototype.ngOnInit = function () {
        var _this = this;
        setTimeout(function () {
            _this.setBodyHeight();
            _this.ps = _this.perfectScrollbar.directiveRef.ps();
        });
        if (!this.id) {
            this.id = this.idService.uuid(8, 16);
        }
        this.paginationOptions.id = this.paginationOptions.id + this.id;
        if (this.remote === 'server') {
            this.paginationOptions['totalItems'] = 1;
        }
        this.copyData = datatable_column_1.deepCopy(this.data);
    };
    DataTableComponent.prototype.setBodyHeight = function () {
        if (this.showFilterBar) {
            this.height = this.height - 58;
        }
        this.scorllableBodyHeight = this.height - this.tableHeader.nativeElement.clientHeight;
        if (this.pagination) {
            this.scorllableBodyHeight = this.scorllableBodyHeight - 50;
        }
    };
    DataTableComponent.prototype.ngOnChanges = function (changes) {
        var _this = this;
        if (changes.height && !changes.height.isFirstChange()) {
            this.setBodyHeight();
        }
        if (changes.total && !changes.total.isFirstChange()) {
            this.paginationOptions.totalItems = changes.total.currentValue;
        }
        if (changes.pageSize) {
            this.paginationOptions.itemsPerPage = changes.pageSize.currentValue;
        }
        if (changes.data && !changes.data.isFirstChange()) {
            var rows = changes.data.currentValue;
            if (rows) {
                if (this.selections) {
                    var keys = Object.keys(this.selections);
                    if (keys.length) {
                        var count_1 = 0;
                        var ids_1 = rows.map(function (row) {
                            return row[_this.idField].toString();
                        });
                        keys.forEach(function (id) {
                            if (ids_1.indexOf(id) > -1) {
                                count_1++;
                            }
                        });
                        this.dtHeader.isCheckAll = ids_1.length === count_1;
                    }
                    else {
                        this.dtHeader.isCheckAll = false;
                    }
                }
                else {
                    this.dtHeader.isCheckAll = false;
                }
            }
            this.dataService.loadSuccess.next(changes.data.currentValue);
        }
    };
    DataTableComponent.prototype.ngAfterContentInit = function () {
        // 支持行模板
        if (this.rowsRef && this.rowsRef.length) {
            this.data = this.rowsRef.map(function (row) {
                return {
                    rowTempl: row.rowTempl
                };
            });
            return;
        }
        // 支持列组件写入
        if (!this.columns) {
            if (this.columnsRef && this.columnsRef.length) {
                this.columns = this.columnsRef.map(function (col) {
                    return {
                        width: col.width,
                        title: col.title,
                        field: col.field,
                        align: col.align,
                        fixed: col.fixed,
                        className: col.className,
                        media: col.media,
                        sortable: col.sortable,
                        // 单元格模板
                        cellTempl: col.cellTempl
                    };
                });
            }
        }
        this.fixColByResolution();
    };
    DataTableComponent.prototype.ngOnDestroy = function () {
        this.subscription.forEach(function (sub) {
            sub.unsubscribe();
        });
        this.subscription = [];
    };
    DataTableComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        // 获取表格容器  即表格
        this.datatableContainer = this.el.nativeElement.querySelector('.farris-datatable');
        // this.headerTr = this.tableHeader.nativeElement.querySelectorAll('tr');
        setTimeout(function () {
            _this.setFixed(window.innerWidth);
        }, 0);
    };
    /**
     *tr hover事件
     */
    /**
         *tr hover事件
         */
    DataTableComponent.prototype.hoverTr = /**
         *tr hover事件
         */
    function (tr) {
        var headerTrs = this.dtBody.el.nativeElement.querySelectorAll('tr');
        var leftBodyTrs = this.dtLeftFixed.nativeElement.querySelectorAll('tr');
        var rightBodyTrs = this.dtRightFixed.nativeElement.querySelectorAll('tr');
        for (var i = 0; i < headerTrs.length; i++) {
            if (tr === headerTrs[i] || tr === leftBodyTrs[i] || tr === rightBodyTrs[i]) {
                headerTrs[i].style.backgroundColor = '#f3f8f9';
                leftBodyTrs[i].style.backgroundColor = '#f3f8f9';
                rightBodyTrs[i].style.backgroundColor = '#f3f8f9';
            }
        }
    };
    DataTableComponent.prototype.blurTr = function (tr) {
        var headerTrs = this.dtBody.el.nativeElement.querySelectorAll('tr');
        var leftBodyTrs = this.dtLeftFixed.nativeElement.querySelectorAll('tr');
        var rightBodyTrs = this.dtRightFixed.nativeElement.querySelectorAll('tr');
        for (var i = 0; i < headerTrs.length; i++) {
            if (tr === headerTrs[i] || tr === leftBodyTrs[i] || tr === rightBodyTrs[i]) {
                headerTrs[i].style.backgroundColor = '#fff';
                leftBodyTrs[i].style.backgroundColor = '#fff';
                rightBodyTrs[i].style.backgroundColor = '#fff';
            }
        }
    };
    /**
    *tr hover事件
    */
    /**
        *tr hover事件
        */
    DataTableComponent.prototype.clickTr = /**
        *tr hover事件
        */
    function (tr) {
        var leftBodyTrs, rightBodyTrs;
        if (this.dtLeftFixed) {
            leftBodyTrs = this.dtLeftFixed.nativeElement.querySelectorAll('tr');
        }
        if (this.dtRightFixed) {
            rightBodyTrs = this.dtRightFixed.nativeElement.querySelectorAll('tr');
        }
        var bodyTrs = this.dtBody.el.nativeElement.querySelectorAll('tr');
        for (var i = 0; i < bodyTrs.length; i++) {
            if (tr === bodyTrs[i] || (leftBodyTrs && tr === leftBodyTrs[i]) || (rightBodyTrs && tr === rightBodyTrs[i])) {
                this.dtBody.selectedRow(i, this.dtBody.rows[i]);
                if (this.dtLeftBody) {
                    this.dtLeftBody.selectedRow(i, this.dtLeftBody.rows[i]);
                }
                if (this.dtRightBody) {
                    this.dtRightBody.selectedRow(i, this.dtRightBody.rows[i]);
                }
            }
        }
    };
    /**
     * 排序弹出事件
     */
    /**
         * 排序弹出事件
         */
    DataTableComponent.prototype.headerSortChange = /**
         * 排序弹出事件
         */
    function (event) {
        this.sortChange.emit(event);
    };
    /**
     * 获取表格容器的位置  距离左边视口和上边视口的距离  如果页面有滚动条  需要加上滚动条滚动的数值
     */
    /**
         * 获取表格容器的位置  距离左边视口和上边视口的距离  如果页面有滚动条  需要加上滚动条滚动的数值
         */
    DataTableComponent.prototype.getContainerOffset = /**
         * 获取表格容器的位置  距离左边视口和上边视口的距离  如果页面有滚动条  需要加上滚动条滚动的数值
         */
    function () {
        var rect = this.datatableContainer.getBoundingClientRect();
        return {
            left: rect.left + document.body.scrollLeft,
            top: rect.top + document.body.scrollTop,
            right: rect.right,
            bottom: rect.bottom,
        };
    };
    /**
     *  鼠标按下  开始记录拖拽线的位置  拖拽线到达当前鼠标位置
     * @param {MouseEvent} 鼠标对象
     */
    /**
         *  鼠标按下  开始记录拖拽线的位置  拖拽线到达当前鼠标位置
         * @param {MouseEvent} 鼠标对象
         */
    DataTableComponent.prototype.beginDrag = /**
         *  鼠标按下  开始记录拖拽线的位置  拖拽线到达当前鼠标位置
         * @param {MouseEvent} 鼠标对象
         */
    function (e) {
        this.dragLineX = e.pageX;
        event.preventDefault();
    };
    /**
     * 鼠标移动 移动拖拽线位置变动
     * @param {MouseEvent} 鼠标对象
     */
    /**
         * 鼠标移动 移动拖拽线位置变动
         * @param {MouseEvent} 鼠标对象
         */
    DataTableComponent.prototype.moveDrag = /**
         * 鼠标移动 移动拖拽线位置变动
         * @param {MouseEvent} 鼠标对象
         */
    function (e) {
        // 获取表格的左边距离
        var containerLeft = this.getContainerOffset().left;
        // 设置拖拽线的高度  即获取表头+表内容+表尾的高度  此表格结构包含了分页  因此要去掉分页的高度
        this.dragLine.nativeElement.style.height = this.datatableContainer.offsetHeight - this.tablePager.nativeElement.offsetHeight + 'px';
        // 设置拖拽线的高度 拖拽线相对于表格relative定位是absolute，因此是0
        this.dragLine.nativeElement.style.top = 0 + 'px';
        // 鼠标移动时，拖拽线相对于表格的位置
        this.dragLine.nativeElement.style.left = (e.pageX - containerLeft) + 'px';
        // 鼠标移动  设置拖拽线总是可见
        this.dragLine.nativeElement.style.display = 'block';
    };
    // 重新计算表格宽度
    /**
     * 鼠标抬起 重新计算单元格宽度
     * @param {MouseEvent} 鼠标对象
     * @param {Element} 要重新计算宽度的DOM对象
     */
    // 重新计算表格宽度
    /**
         * 鼠标抬起 重新计算单元格宽度
         * @param {MouseEvent} 鼠标对象
         * @param {Element} 要重新计算宽度的DOM对象
         */
    DataTableComponent.prototype.stopDrag = 
    // 重新计算表格宽度
    /**
         * 鼠标抬起 重新计算单元格宽度
         * @param {MouseEvent} 鼠标对象
         * @param {Element} 要重新计算宽度的DOM对象
         */
    function (e, column) {
        this.resizeColumn(e, column);
    };
    DataTableComponent.prototype.resizeColumn = function (e, column) {
        // 偏移量
        var delta = e.pageX - this.dragLineX;
        // 拖拽前列宽
        var columnWidth = column.offsetWidth;
        // 拖拽后列宽
        var newColumnWidth = columnWidth + delta;
        // 最小宽度
        var minWidth = column.style.minWidth || 15;
        // 新宽度大于最小宽度时  重新设置宽度
        if (newColumnWidth > parseInt(minWidth, 10)) {
            var colIndex = -1;
            var cols = this.tableHeader.nativeElement.querySelectorAll('th');
            for (var i = 0; i < cols.length; i++) {
                if (cols[i] === column) {
                    colIndex = i;
                }
            }
            // 设置后一个单元格宽度
            var nextColumn = column.nextElementSibling;
            if (nextColumn) {
                // 下一个单元格的最新宽度
                var nextColumnWidth = nextColumn.offsetWidth - delta;
                var nextColumnMinWidth = nextColumn.style.minWidth || 15;
                if (newColumnWidth > 15 && nextColumnWidth > parseInt(nextColumnMinWidth, 10)) {
                    this.resizeColGroup(this.dtHeader.el.nativeElement, colIndex, newColumnWidth, nextColumnWidth);
                    this.resizeColGroup(this.dtBody.el.nativeElement, colIndex, newColumnWidth, nextColumnWidth);
                }
            }
        }
        // 计算宽度完毕  设置拖拽线隐藏
        this.dragLine.nativeElement.style.display = 'none';
    };
    DataTableComponent.prototype.resizeColGroup = function (table, resizeColumnIndex, newColumnWidth, nextColumnWidth) {
        if (table) {
            // 此处要视不同的表格结构来确定 本组件中  header和body结构相同
            var colGroup = table.childNodes[1].children[0].nodeName === 'COLGROUP' ?
                table.childNodes[1].children[0] : null;
            if (colGroup) {
                var col = colGroup.children[resizeColumnIndex];
                var nextCol = col.nextElementSibling;
                col.style.width = newColumnWidth + 'px';
                if (nextCol && nextColumnWidth) {
                    nextCol.style.width = nextColumnWidth + 'px';
                }
            }
            else {
                throw new Error('Scrollable tables require a colgroup to support resizable columns');
            }
        }
    };
    DataTableComponent.prototype.onScrollX = function (e) {
        // 横向滚动 非固定表头滚动
        var x = e.srcElement.scrollLeft;
        this.tableHeader.nativeElement.scrollTo(x, 0);
    };
    /**
     * 滚动条纵向滚动
     */
    /**
         * 滚动条纵向滚动
         */
    DataTableComponent.prototype.onScrollY = /**
         * 滚动条纵向滚动
         */
    function (e) {
        if (!this.hasFixed) {
            return;
        }
        var y = e.srcElement.scrollTop;
        this.dtLeftFixed.nativeElement.style.top = -y + 'px';
        this.dtRightFixed.nativeElement.style.top = -y + 'px';
    };
    DataTableComponent.prototype.onPageChange = function (page) {
        this.pageIndex = page.pageIndex;
        this.paginationOptions.currentPage = page.pageIndex;
        this.pageChanged.emit({ pageInfo: page, search: this.searchData });
    };
    DataTableComponent.prototype.onPageSizeChange = function (pageSize) {
        this.pageSize = pageSize;
        this.paginationOptions.itemsPerPage = pageSize;
        this.pageSizeChanged.emit({ pageInfo: { pageIndex: this.pageIndex, pageSize: pageSize }, search: this.searchData });
    };
    DataTableComponent.prototype.onSearch = function () {
        this.search.emit(this.searchData);
    };
    DataTableComponent.prototype.onCheckAll = function (state) {
        this.dataService.selectedAll.next(state);
    };
    DataTableComponent.prototype.selectRow = function (row) { };
    // tslint:disable-next-line:no-shadowed-variable
    // tslint:disable-next-line:no-shadowed-variable
    DataTableComponent.prototype.resize = 
    // tslint:disable-next-line:no-shadowed-variable
    function (size) {
        this.width = size.width;
        this.height = size.height;
        this.setBodyHeight();
    };
    DataTableComponent.prototype.loadData = function (data) {
        this.data = data.data;
        if (this.pagination) {
            this.paginationOptions.totalItems = data.total;
            this.paginationOptions.itemsPerPage = data.pageSize;
            this.total = data.total;
            this.pageSize = data.pageSize;
            this.pageIndex = data.pageIndex;
        }
    };
    // 根据分辨率  设置固定列
    // 根据分辨率  设置固定列
    DataTableComponent.prototype.fixColByResolution = 
    // 根据分辨率  设置固定列
    function () {
        var _this = this;
        this.subscription.push(fromEvent_1.fromEvent(window, 'resize')
            .pipe(throttleTime_1.throttleTime(80))
            .subscribe(function (e) {
            _this.setFixed(e.srcElement.innerWidth);
        }));
    };
    // 如果columns存在数据  进行固定列的设置
    // 如果columns存在数据  进行固定列的设置
    DataTableComponent.prototype.setFixed = 
    // 如果columns存在数据  进行固定列的设置
    function (currentWidth) {
        var _this = this;
        if (!this.columns) {
            return;
        }
        this.hasFixed = this.columns.some(function (ele) {
            return ele.hasOwnProperty('fixed');
        });
        if (this.hasFixed) {
            var fixedArr = this.columns.filter(function (ele) {
                return ele.hasOwnProperty('fixed');
            });
            var dtHeaderTh_1 = this.dtHeader.el.nativeElement.querySelectorAll('th');
            // let resWidth = 0;
            // 初始化就已经固定列
            var leftWidth_1 = 0;
            leftWidth_1 += fixedArr.filter(function (element) {
                return element.fixed === 'left';
            }).reduce(function (pre, current) {
                return pre + current.width;
            }, 0);
            // 暂存此时固定列宽度
            if (leftWidth_1) {
                if (!this.singleSelect) {
                    // 若为多选  则首先固定住
                    // 若为多选  则首先固定住
                    leftWidth_1 += dtHeaderTh_1[0].clientWidth;
                }
            }
            var tempLeftWidth = leftWidth_1;
            // 响应式固定列  每增加一个固定列  固定列宽度就会增加
            var responsiveLeftFixed = fixedArr.filter(function (ele) {
                return ele.fixed.type === 'left';
            });
            var count_2 = 0;
            responsiveLeftFixed.forEach(function (element) {
                if (element.fixed.type === 'left') {
                    if (currentWidth <= datatable_responsive_size_1.size[element.fixed.media][1]) {
                        if (!_this.singleSelect) {
                            // 若为多选  则首先固定住
                            // 若为多选  则首先固定住
                            leftWidth_1 += dtHeaderTh_1[0].clientWidth;
                        }
                        leftWidth_1 += element.width;
                        count_2++;
                    }
                }
            });
            if (!tempLeftWidth) {
                if (leftWidth_1 > tempLeftWidth) {
                    leftWidth_1 -= dtHeaderTh_1[0].clientWidth * (count_2 - 1);
                }
                else {
                    leftWidth_1 -= dtHeaderTh_1[0].clientWidth * count_2;
                }
            }
            else {
                if (leftWidth_1 > tempLeftWidth) {
                    leftWidth_1 -= dtHeaderTh_1[0].clientWidth * count_2;
                }
            }
            this.fixedLeftWidth = leftWidth_1 + 'px';
            // 右固定列设置
            var rightWidth_1 = fixedArr.filter(function (element) {
                return element.fixed === 'right';
            }).reduce(function (pre, current) {
                return pre + current.width;
            }, 0);
            // 响应式固定列  每增加一个固定列  固定列宽度就会增加
            var responsiveRightFixed = fixedArr.filter(function (ele) {
                return ele.fixed.type === 'right';
            });
            responsiveRightFixed.forEach(function (element) {
                if (element.fixed.type === 'right') {
                    if (currentWidth <= datatable_responsive_size_1.size[element.fixed.media][1]) {
                        rightWidth_1 += element.width;
                    }
                }
            });
            this.fixedRightWidth = rightWidth_1 + 'px';
        }
    };
    DataTableComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'farris-datatable',
                    template: "<div class=\"filter-row\" [style.width]=\"width + 'px'\" *ngIf=\"showFilterBar\"> <form class=\"form-row w-100\"> <div class=\"search-fields\"> <select class=\"custom-select\" [(ngModel)]=\"searchData.field\" name=\"field\"> <option value=\"*\">所有列</option> <option *ngFor=\"let col of columns\" value=\"{{col.field}}\">{{ col.title }}</option> </select> </div> <div class=\"search-text flex-fill\"> <div class=\"input-group\"> <input type=\"text\" class=\"form-control\" [(ngModel)]=\"searchData.value\" name=\"value\" /> <div class=\"input-group-append\"> <button class=\"btn btn-outline-secondary\" type=\"button\" (click)=\"onSearch()\">查询</button> </div> </div> </div> </form> </div> <div [ngStyle]=\"{'height': height +'px', 'width': width +'px' }\" class=\"farris-datatable-container\"> <div class=\"farris-datatable\"> <div #tableHeader class=\"farris-table-header\"> <datatable-header #dtHeader [columns]=\"columns\" [singleSelect]=\"singleSelect\" [data]=\"copyData\" [(rows)]=\"data\" (checkedAll)=\"onCheckAll($event)\" (sortChange)=\"headerSortChange($event)\"> <ng-content select=\"data-columns\"></ng-content> </datatable-header> <div class=\"farris-table-fixed-header\" [style.width]=\"fixedLeftWidth\" *ngIf=\"hasFixed\"> <datatable-header #dtLeftFixedHeader [columns]=\"columns\" [data]=\"copyData\" [(rows)]=\"data\" [singleSelect]=\"singleSelect\" [fixed]=\"'left'\" (checkedAll)=\"onCheckAll($event)\"> <ng-content select=\"data-columns\"></ng-content> </datatable-header> </div> <div class=\"farris-table-fixed-right-header\" [style.width]=\"fixedRightWidth\" *ngIf=\"hasFixed\"> <datatable-header #dtRightFixedHeader [columns]=\"columns\" [singleSelect]=\"singleSelect\" [fixed]=\"'right'\" [data]=\"copyData\" [(rows)]=\"data\" (checkedAll)=\"onCheckAll($event)\"> <ng-content select=\"data-columns\"></ng-content> </datatable-header> </div> </div> <div #scorllableBody class=\"farris-table-scorllable-body\" [style.height]=\"scorllableBodyHeight + 'px'\"> <perfect-scrollbar #perfectScrollbar [config]=\"{}\" (psScrollX)=\"onScrollX($event)\" (psScrollY)=\"onScrollY($event)\"> <ng-container [style.display]=\"data && data.length ? 'block': 'none'\"> <datatable-body #dtBody [rows]=\"data | paginate: paginationOptions\" [columns]=\"columns\" [striped]=\"striped\" [bordered]=\"bordered\" [rowClassName]=\"rowClassName\" [cellClassName]=\"cellClassName\"> </datatable-body> <div #dtLeftFixed class=\"farris-table-fixed-body\" *ngIf=\"hasFixed\" [style.width]=\"fixedLeftWidth\"> <datatable-body #dtLeftBody [rows]=\"data | paginate: paginationOptions\" [columns]=\"columns\" [fixed]=\"'left'\" [striped]=\"striped\" [bordered]=\"bordered\" [rowClassName]=\"rowClassName\" [cellClassName]=\"cellClassName\"> </datatable-body> </div> <div #dtRightFixed class=\"farris-table-fixed-right-body\" *ngIf=\"hasFixed\" [style.width]=\"fixedRightWidth\"> <datatable-body #dtRightBody [rows]=\"data | paginate: paginationOptions\" [columns]=\"columns\" [fixed]=\"'right'\" [striped]=\"striped\" [bordered]=\"bordered\" [rowClassName]=\"rowClassName\" [cellClassName]=\"cellClassName\"> </datatable-body> </div> </ng-container> <ng-container *ngIf=\"!(data && data.length)\"> <h1 style=\"text-align:center;color:#ccc; margin-top: 50px;\">！！空空如也！！</h1> </ng-container> </perfect-scrollbar> </div> <div class=\"farris-table-header\" *ngIf=\"footer\"> <ng-template [ngTemplateOutlet]=\"footer\"> </ng-template> </div> <div *ngIf=\"pagination\" #tablePager class=\"farris-table-pager\"> <pagination-controls [id]=\"paginationOptions.id\" [maxSize]=\"maxSize\" [directionLinks]=\"directionLinks\" [autoHide]=\"autoHide\" [responsive]=\"responsive\" [previousLabel]=\"labels.previousLabel\" [nextLabel]=\"labels.nextLabel\" [screenReaderPaginationLabel]=\"labels.screenReaderPaginationLabel\" [screenReaderPageLabel]=\"labels.screenReaderPageLabel\" [screenReaderCurrentLabel]=\"labels.screenReaderCurrentLabel\" (pageChange)=\"onPageChange($event)\" (pageSizeChange)=\"onPageSizeChange($event)\"> </pagination-controls> </div> <div #dragLine *ngIf=\"dragable\" class=\"column-resizer-helper\"></div> </div> </div>",
                    styles: [".farris-ui-datatable { display: flex; flex-direction: column; height: 100%; font-size: 13px; } .farris-ui-datatable table { border-collapse: collapse; width: 100%; table-layout: fixed; } .farris-ui-datatable .farris-table-header, .farris-ui-datatable .farris-table-footer { position: relative; overflow: hidden; min-height: 34px; } .farris-ui-datatable .farris-table-header thead > tr > th, .farris-ui-datatable .farris-table-footer thead > tr > th { padding: 0.571em 0.857em; border: 1px solid #c8c8c8; font-weight: 700; color: #333333; background-color: #ffffff; border-top: 0; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; } .farris-ui-datatable .farris-table-header thead > tr > th .tt-checkbox, .farris-ui-datatable .farris-table-footer thead > tr > th .tt-checkbox { margin-right: 0; vertical-align: top; min-height: 1rem; } .farris-ui-datatable .farris-table-header thead > tr > th:first-child, .farris-ui-datatable .farris-table-footer thead > tr > th:first-child { border-left: 0; } .farris-ui-datatable .farris-table-header thead > tr > th:last-child, .farris-ui-datatable .farris-table-footer thead > tr > th:last-child { border-right: 0; } .farris-ui-datatable .farris-table-header .checkbox-cell, .farris-ui-datatable .farris-table-footer .checkbox-cell { width: 40px; } .farris-ui-datatable .farris-table-scorllable-body { overflow: hidden; } .farris-ui-datatable .farris-table-scorllable-body .ui-table-tbody tr > td { background: inherit; border: 1px solid #c8c8c8; padding: 6px 10px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; } .farris-ui-datatable .farris-table-scorllable-body .ui-table-tbody .tt-checkbox { margin-right: 0; vertical-align: top; } .farris-ui-datatable .farris-table-scorllable-body .ui-table-tbody .checkbox-cell { width: 40px; } .farris-ui-datatable .farris-table-scorllable-body .row-hight-light { background-color: #b7d7ff; color: #000; } .farris-ui-datatable .farris-table-scorllable-body .ui-table-tbody tr:not(.row-hight-light):hover { cursor: pointer; background-color: #e7f2ff; } .farris-ui-datatable .farris-table-scorllable-body .ui-table-tbody > tr:first-child > td { border-top: 0; } .farris-ui-datatable .farris-table-scorllable-body table > .ui-table-tbody > tr > td:last-child { border-right: 0; } .farris-ui-datatable .farris-table-scorllable-body table > .ui-table-tbody > tr > td:first-child { border-left: 0; } .farris-ui-datatable .farris-table-pager { background-color: #f3f3f3; height: 50px; min-height: 50px; width: 100%; border-top: 1px solid #c8c8c8; } .filter-row { display: flex; margin: 10px 0; } .filter-row .search-fields { min-width: 140px; padding-left: 5px; } .filter-row .search-text { flex: 1; margin-left: 10px; padding-right: 8px; } .filter-row .search-text .btn-outline-secondary { border-color: #CED4DA; } .filter-row .search-text .btn-outline-secondary:focus { box-shadow: none; } .filter-row .search-text .btn-outline-secondary:active { box-shadow: none; } .filter-row .form-control:focus { border-color: #CED4DA; box-shadow: none; } .filter-row .custom-select:focus { box-shadow: none; } .farris-datatable { position: relative; } .resizable-column { background-clip: padding-box; position: relative; } .column-resizer { display: block; position: absolute !important; top: 0; right: 0; margin: 0; width: .5em; height: 100%; padding: 0; cursor: col-resize; border: 1px solid transparent; } .column-resizer-helper { width: 1px; position: absolute; z-index: 10; display: none; background-color: #6c757d; opacity: .6; } .farris-table-fixed-header, .farris-table-fixed-body { position: absolute; top: 0; left: 0; overflow: hidden; box-shadow: 2px 0 6px -2px rgba(0, 0, 0, 0.2); } .farris-table-fixed-right-header, .farris-table-fixed-right-body { position: absolute; top: 0; right: 0; overflow: hidden; box-shadow: -2px 0 6px -2px rgba(0, 0, 0, 0.2); } .td-hidden { visibility: hidden; } @media (min-width: 576px) { .td-sm-hidden { visibility: hidden !important; } .td-sm-visible { visibility: visible !important; } } @media (min-width: 768px) { .td-md-hidden { visibility: hidden !important; } .td-md-visible { visibility: visible !important; } } @media (min-width: 992px) { .td-lg-hidden { visibility: hidden !important; } .td-lg-visible { visibility: visible !important; } } @media (min-width: 1200px) { .td-xl-hidden { visibility: hidden !important; } .td-xl-visible { visibility: visible !important; } } "],
                    encapsulation: core_1.ViewEncapsulation.None
                },] },
    ];
    /** @nocollapse */
    DataTableComponent.ctorParameters = function () { return [
        { type: datatable_service_1.DataTableService, },
        { type: common_1.IdService, },
        { type: core_1.ElementRef, },
    ]; };
    DataTableComponent.propDecorators = {
        "id": [{ type: core_1.Input },],
        "width": [{ type: core_1.Input },],
        "height": [{ type: core_1.Input },],
        "fill": [{ type: core_1.Input },],
        "pagination": [{ type: core_1.Input },],
        "pageSize": [{ type: core_1.Input },],
        "pageIndex": [{ type: core_1.Input },],
        "pageList": [{ type: core_1.Input },],
        "total": [{ type: core_1.Input },],
        "columns": [{ type: core_1.Input },],
        "showFilterBar": [{ type: core_1.Input },],
        "data": [{ type: core_1.Input },],
        "remote": [{ type: core_1.Input },],
        "singleSelect": [{ type: core_1.Input },],
        "idField": [{ type: core_1.Input },],
        "hover": [{ type: core_1.Input },],
        "striped": [{ type: core_1.Input },],
        "bordered": [{ type: core_1.Input },],
        "rowClassName": [{ type: core_1.Input },],
        "cellClassName": [{ type: core_1.Input },],
        "scorllableBody": [{ type: core_1.ViewChild, args: ['scorllableBody',] },],
        "tableHeader": [{ type: core_1.ViewChild, args: ['tableHeader',] },],
        "tablePager": [{ type: core_1.ViewChild, args: ['tablePager',] },],
        "dtHeader": [{ type: core_1.ViewChild, args: ['dtHeader',] },],
        "dtLeftFixedHeader": [{ type: core_1.ViewChild, args: ['dtHeader',] },],
        "dtRightFixedHeader": [{ type: core_1.ViewChild, args: ['dtHeader',] },],
        "dtBody": [{ type: core_1.ViewChild, args: ['dtBody',] },],
        "dtLeftBody": [{ type: core_1.ViewChild, args: ['dtLeftBody',] },],
        "dtRightBody": [{ type: core_1.ViewChild, args: ['dtRightBody',] },],
        "dtLeftFixed": [{ type: core_1.ViewChild, args: ['dtLeftFixed',] },],
        "dtRightFixed": [{ type: core_1.ViewChild, args: ['dtRightFixed',] },],
        "pageChanged": [{ type: core_1.Output },],
        "pageSizeChanged": [{ type: core_1.Output },],
        "search": [{ type: core_1.Output },],
        "sortChange": [{ type: core_1.Output },],
        "rowsRef": [{ type: core_1.ContentChildren, args: [datatable_row_component_1.RowDirective,] },],
        "columnsRef": [{ type: core_1.ContentChildren, args: [datatable_column_component_1.ColumnDirective,] },],
        "footer": [{ type: core_1.ContentChild, args: ['footer',] },],
        "dragLine": [{ type: core_1.ViewChild, args: ['dragLine',] },],
        "dragable": [{ type: core_1.Input },],
        "perfectScrollbar": [{ type: core_1.ViewChild, args: ['perfectScrollbar',] },],
    };
    return DataTableComponent;
}());
exports.DataTableComponent = DataTableComponent;
//# sourceMappingURL=datatable.component.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/data/datatable/datatable.module.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/esm5/common.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/esm5/forms.js");
var datatable_component_1 = __webpack_require__("./node_modules/@farris/ui/data/datatable/datatable.component.js");
var perfect_scorll_1 = __webpack_require__("./node_modules/@farris/ui/perfect-scorll/index.js");
var datatable_header_component_1 = __webpack_require__("./node_modules/@farris/ui/data/datatable/table/datatable-header.component.js");
var datatable_column_component_1 = __webpack_require__("./node_modules/@farris/ui/data/datatable/datatable-column.component.js");
var datatable_body_component_1 = __webpack_require__("./node_modules/@farris/ui/data/datatable/table/datatable-body.component.js");
var datatable_service_1 = __webpack_require__("./node_modules/@farris/ui/data/datatable/datatable.service.js");
var pagination_module_1 = __webpack_require__("./node_modules/@farris/ui/data/pagination/pagination.module.js");
var common_2 = __webpack_require__("./node_modules/@farris/ui/common/index.js");
var datatable_checkbox_component_1 = __webpack_require__("./node_modules/@farris/ui/data/datatable/datatable-checkbox.component.js");
var datatable_footer_component_1 = __webpack_require__("./node_modules/@farris/ui/data/datatable/table/datatable-footer.component.js");
var datatable_slot_directive_1 = __webpack_require__("./node_modules/@farris/ui/data/datatable/datatable-slot.directive.js");
var datatable_row_component_1 = __webpack_require__("./node_modules/@farris/ui/data/datatable/datatable-row.component.js");
var drag_directive_1 = __webpack_require__("./node_modules/@farris/ui/data/datatable/utils/drag.directive.js");
var datatable_responsive_directive_1 = __webpack_require__("./node_modules/@farris/ui/data/datatable/utils/datatable-responsive.directive.js");
var datatable_hover_directive_1 = __webpack_require__("./node_modules/@farris/ui/data/datatable/utils/datatable-hover.directive.js");
var DataTableModule = /** @class */ (function () {
    function DataTableModule() {
    }
    DataTableModule.decorators = [
        { type: core_1.NgModule, args: [{
                    imports: [
                        common_1.CommonModule,
                        forms_1.FormsModule,
                        perfect_scorll_1.PerfectScrollbarModule,
                        pagination_module_1.PaginationModule,
                        common_2.FarrisCommonModule
                    ],
                    exports: [datatable_component_1.DataTableComponent, datatable_header_component_1.DataTableHeaderComponent, datatable_column_component_1.ColumnDirective, datatable_body_component_1.DataTableBodyComponent,
                        common_2.FarrisCommonModule, datatable_footer_component_1.DatatableFooterComponent, datatable_slot_directive_1.SlotDirective,
                        datatable_row_component_1.RowDirective, drag_directive_1.DragColumnDirective, datatable_responsive_directive_1.FarrisColumnResDirective, datatable_hover_directive_1.FarrisHoverDirective],
                    declarations: [datatable_component_1.DataTableComponent, datatable_header_component_1.DataTableHeaderComponent, datatable_column_component_1.ColumnDirective, drag_directive_1.DragColumnDirective,
                        datatable_body_component_1.DataTableBodyComponent, datatable_checkbox_component_1.DTCheckboxComponent, datatable_footer_component_1.DatatableFooterComponent,
                        datatable_slot_directive_1.SlotDirective, datatable_row_component_1.RowDirective, datatable_responsive_directive_1.FarrisColumnResDirective, datatable_hover_directive_1.FarrisHoverDirective],
                    providers: [datatable_service_1.DataTableService]
                },] },
    ];
    return DataTableModule;
}());
exports.DataTableModule = DataTableModule;
//# sourceMappingURL=datatable.module.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/data/datatable/datatable.service.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var Subject_1 = __webpack_require__("./node_modules/rxjs/Subject.js");
var DataTableService = /** @class */ (function () {
    function DataTableService() {
        this.loadSuccess = new Subject_1.Subject();
        /**
             * 选中行事件
             */
        this.selectedRow = new Subject_1.Subject();
        this.unSelectedRow = new Subject_1.Subject();
        this.selectedAll = new Subject_1.Subject();
        this.dblClickRow = new Subject_1.Subject();
    }
    DataTableService.decorators = [
        { type: core_1.Injectable },
    ];
    /** @nocollapse */
    DataTableService.ctorParameters = function () { return []; };
    return DataTableService;
}());
exports.DataTableService = DataTableService;
//# sourceMappingURL=datatable.service.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/data/datatable/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__("./node_modules/@farris/ui/data/datatable/table/datatable-body.component.js"));
__export(__webpack_require__("./node_modules/@farris/ui/data/datatable/datatable-checkbox.component.js"));
__export(__webpack_require__("./node_modules/@farris/ui/data/datatable/datatable-column.component.js"));
__export(__webpack_require__("./node_modules/@farris/ui/data/datatable/table/datatable-header.component.js"));
__export(__webpack_require__("./node_modules/@farris/ui/data/datatable/datatable-column.js"));
__export(__webpack_require__("./node_modules/@farris/ui/data/datatable/table/datatable-header.component.js"));
__export(__webpack_require__("./node_modules/@farris/ui/data/datatable/datatable.component.js"));
__export(__webpack_require__("./node_modules/@farris/ui/data/datatable/datatable.module.js"));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/data/datatable/table/datatable-body.component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var datatable_column_1 = __webpack_require__("./node_modules/@farris/ui/data/datatable/datatable-column.js");
var datatable_service_1 = __webpack_require__("./node_modules/@farris/ui/data/datatable/datatable.service.js");
var datatable_component_1 = __webpack_require__("./node_modules/@farris/ui/data/datatable/datatable.component.js");
var DataTableBodyComponent = /** @class */ (function () {
    function DataTableBodyComponent(el, dataService, dt) {
        this.el = el;
        this.dataService = dataService;
        this.dt = dt;
        // tslint:disable-next-line:no-input-rename
        // tslint:disable-next-line:no-input-rename
        this.rows = [];
        this.className = {};
        this.isRowTempl = false;
        this.selectedRowIndex = -1;
        this._selections = {};
    }
    Object.defineProperty(DataTableBodyComponent.prototype, "selections", {
        get: function () {
            var _this = this;
            var keys = Object.keys(this._selections);
            if (keys.length) {
                if (this.dt.singleSelect) {
                    return this._selections;
                }
                else {
                    return keys.map(function (k) { return _this._selections[k]; });
                }
            }
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    DataTableBodyComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.dataService.selectedAll.subscribe(function (allChecked) {
            var idfield = _this.idField();
            _this.rows.forEach(function (row) {
                if (allChecked) {
                    _this._selections[row[idfield]] = row;
                }
                else {
                    delete _this._selections[row[idfield]];
                }
            });
        });
        if (this.rows) {
            this.isRowTempl = this.rows.some(function (row) {
                return row.hasOwnProperty('rowTempl');
            });
        }
        if (this.fixed === 'left') {
            this.columns = datatable_column_1.convertColumns(this.columns, 'left');
        }
        if (this.fixed === 'right') {
            this.columns = datatable_column_1.convertColumns(this.columns, 'right');
        }
    };
    DataTableBodyComponent.prototype.selectedRow = function (index, data) {
        if (this.dt.singleSelect) {
            if (this.selectedRowIndex !== index) {
                this.selectedRowIndex = index;
                this._selections = data;
                this.dataService.selectedRow.next({ rowIndex: index, rowData: data });
            }
            else {
                this.selectedRowIndex = -1;
                this._selections = undefined;
                this.dataService.unSelectedRow.next({ rowIndex: index, rowData: data });
            }
        }
        else {
            var idfield = this.idField();
            if (this.isSelected(data)) {
                delete this._selections[data[idfield]];
                this.dataService.unSelectedRow.next({ rowIndex: index, rowData: data });
            }
            else {
                this._selections[data[this.idField()]] = data;
                this.dataService.selectedRow.next({ rowIndex: index, rowData: data });
            }
        }
        // event.stopPropagation();
    };
    DataTableBodyComponent.prototype.onChecked = function (event, index, row) {
        var state = event.checked;
        var idfield = this.dt.idField;
        if (state) {
            this._selections[row[idfield]] = row;
            this.dataService.selectedRow.next({ rowIndex: index, rowData: row });
        }
        else {
            delete this._selections[row[idfield]];
            this.dataService.unSelectedRow.next({ rowIndex: index, rowData: row });
        }
        event.originalEvent.stopPropagation();
    };
    DataTableBodyComponent.prototype.idField = function () {
        return this.dt.idField;
    };
    DataTableBodyComponent.prototype.isSelected = function (row) {
        var idfield = this.idField();
        if (this._selections) {
            if (this.dt.singleSelect) {
                return this._selections === row;
            }
            else {
                return this._selections[row[idfield]] !== undefined;
            }
        }
        return false;
    };
    DataTableBodyComponent.prototype.formatData = function (value, opts) {
        switch (opts.type) {
            case 'image':
                return '<image src="' + value + '" width="' + opts.options.width + '" height = "' + opts.options.height + '">';
        }
    };
    // 添加自定义设置列 单元格类样式
    // 添加自定义设置列 单元格类样式
    DataTableBodyComponent.prototype.getTdClassName = 
    // 添加自定义设置列 单元格类样式
    function (value, col) {
        var tempClassName = {};
        // 列类的样式
        if (col.className && Object.prototype.toString.call(col.className) === '[object String]') {
            tempClassName[col.className] = true;
        }
        // 行类的样式
        if (this.cellClassName && this.cellClassName(value, col)) {
            tempClassName[this.cellClassName(value, col)] = true;
        }
        // 定义是否有固定列
        // if (col.hasOwbProperty('fixed')) {
        //     if (col.fixed === 'left' || col.fixed === 'right') {
        //         tempClassName[`td-hidden`] = true;
        //     } else if (col.fixed.type && col.fixed.media) {
        //         tempClassName[`td-${col.fixed.media}-hidden`] = true;
        //     } else {
        //         tempClassName[`td-hidden`] = false;
        //     }
        // }
        return tempClassName;
    };
    DataTableBodyComponent.prototype.createRowClassName = function (row, index) {
        return this.rowClassName ? this.rowClassName(row, index) : '';
    };
    DataTableBodyComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'datatable-body',
                    template: "\n    <table class=\"table\"\n    [class.table-hover]=\"hover\"\n    [class.table-striped]=\"striped\"\n    [class.table-bordered]=\"bordered\">\n        <colgroup>\n            <col class=\"dt-checkbox-cell\" *ngIf=\"!dt.singleSelect&&fixed!=='right'\"/>\n            <col *ngFor=\"let col of columns\" [style.width]=\"col.width + 'px'\" />\n        </colgroup>\n        <tbody class=\"ui-table-tbody\">\n            <ng-container *ngIf=\"!isRowTempl\">\n                <tr farris-hover [ngClass]=\"createRowClassName(row,i)\"\n                *ngFor=\"let row of rows ; let i = index\"\n                 [class.selected]=\"isSelected(row)\">\n                    <td class=\"dt-checkbox-cell\" *ngIf=\"!dt.singleSelect&&fixed!=='right'\">\n                        <dt-checkbox [checked]=\"isSelected(row)\" (checkedChange)=\"onChecked($event, i, row)\"></dt-checkbox>\n                    </td>\n                    <td\n                    farris-column-res\n                    [media]=\"col.media\"\n                    [ngClass]=\"getTdClassName(row[col.field],col)\"\n                    *ngFor=\"let col of columns\">\n                        <ng-container *ngIf=\"!col.cellTempl; else cellTemp\">\n                            <span *ngIf=\"col.formatter\" [innerHtml]=\" formatData( row[col.field], col.formatter)\">\n                            </span>\n                            <span *ngIf=\"!col.formatter\">{{ row[col.field] }}</span>\n                        </ng-container>\n                        <ng-template #cellTemp [ngTemplateOutlet]=\"col.cellTempl\"></ng-template>\n                    </td>\n                </tr>\n            </ng-container>\n            <ng-container *ngIf=\"isRowTempl\">\n                <tr *ngFor=\"let row of rows ; let i=index\">\n                    <td style=\"width:100%\">\n                        <ng-template [ngTemplateOutlet]=\"row.rowTempl\"></ng-template>\n                    </td>\n                </tr>\n            </ng-container>\n        </tbody>\n    </table>\n    "
                },] },
    ];
    /** @nocollapse */
    DataTableBodyComponent.ctorParameters = function () { return [
        { type: core_1.ElementRef, },
        { type: datatable_service_1.DataTableService, },
        { type: datatable_component_1.DataTableComponent, decorators: [{ type: core_1.Optional },] },
    ]; };
    DataTableBodyComponent.propDecorators = {
        "hover": [{ type: core_1.Input },],
        "bordered": [{ type: core_1.Input },],
        "striped": [{ type: core_1.Input },],
        "columns": [{ type: core_1.Input },],
        "fixed": [{ type: core_1.Input },],
        "rows": [{ type: core_1.Input },],
        "rowClassName": [{ type: core_1.Input },],
        "cellClassName": [{ type: core_1.Input },],
    };
    return DataTableBodyComponent;
}());
exports.DataTableBodyComponent = DataTableBodyComponent;
//# sourceMappingURL=datatable-body.component.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/data/datatable/table/datatable-footer.component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var datatable_slot_directive_1 = __webpack_require__("./node_modules/@farris/ui/data/datatable/datatable-slot.directive.js");
var DatatableFooterComponent = /** @class */ (function () {
    function DatatableFooterComponent() {
    }
    DatatableFooterComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'datatable-footer',
                    template: "\n    <div class=\"table\"\n    [class.table-hover]=\"hover\">\n        <ng-container *ngIf=\"!tableFooter\">\n                <table class=\"table table-hover\">\n                        <colgroup>\n                            <col class=\"dt-checkbox-cell\" *ngIf=\"!singleSelect\"/>\n                            <col *ngFor=\"let col of columns\" [style.width]=\"col.width + 'px'\" />\n                        </colgroup>\n                        <thead>\n                            <tr>\n                                <th class=\"dt-checkbox-cell\" *ngIf=\"!singleSelect\">\n                                    <dt-checkbox [checked]=\"isCheckAll\" (checkedChange)=\"onCheckedChange($event)\"></dt-checkbox>\n                                </th>\n                                <th  *ngFor=\"let col of columns\" [attr.align]=\"col.align\" >{{ col.title }}</th>\n                            </tr>\n                        </thead>\n                    </table>\n        </ng-container>\n        <ng-template *ngIf=\"tableFooter\" [ngTemplateOutlet]=\"tableFooter\"></ng-template>\n</div>\n    "
                },] },
    ];
    /** @nocollapse */
    DatatableFooterComponent.ctorParameters = function () { return []; };
    DatatableFooterComponent.propDecorators = {
        "hover": [{ type: core_1.Input },],
        "column": [{ type: core_1.Input },],
        "tableFooter": [{ type: core_1.Input }, { type: core_1.ContentChild, args: [datatable_slot_directive_1.SlotDirective, { read: core_1.TemplateRef },] },],
    };
    return DatatableFooterComponent;
}());
exports.DatatableFooterComponent = DatatableFooterComponent;
//# sourceMappingURL=datatable-footer.component.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/data/datatable/table/datatable-header.component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var datatable_column_1 = __webpack_require__("./node_modules/@farris/ui/data/datatable/datatable-column.js");
var DataTableHeaderComponent = /** @class */ (function () {
    function DataTableHeaderComponent(el) {
        this.el = el;
        this.columns = [];
        this.singleSelect = true;
        this.checkedAll = new core_1.EventEmitter();
        this.sortChange = new core_1.EventEmitter();
        this.rowsChange = new core_1.EventEmitter();
        this.clickedUp = false;
        this.clickedDown = false;
        this.isCheckAll = false;
        this.allClass = ' ';
        this.width = '100%';
        this.allClass += this.el.nativeElement.classList.value;
    }
    DataTableHeaderComponent.prototype.ngOnInit = function () {
        if (this.columns) {
            var hasSort = this.columns.some(function (ele) {
                return ele.hasOwnProperty('sortable');
            });
            if (hasSort) {
                this.copyColumns = this.deepCopyData().copyColumns;
                this.copyRows = this.deepCopyData().copyRows;
            }
        }
        this.originRows = datatable_column_1.deepCopy(this.rows);
        if (this.fixed === 'left') {
            this.columns = datatable_column_1.convertColumns(this.columns, 'left');
        }
        if (this.fixed === 'right') {
            this.columns = datatable_column_1.convertColumns(this.columns, 'right');
        }
    };
    DataTableHeaderComponent.prototype.ngAfterViewInit = function () {
    };
    DataTableHeaderComponent.prototype.onCheckedChange = function ($event) {
        this.isCheckAll = $event.checked;
        this.checkedAll.emit($event.checked);
    };
    DataTableHeaderComponent.prototype.createRowClassName = function (row, index) {
        return this.rowClassName ? this.rowClassName(row, index) : '';
    };
    /**
     * 升序 降序
     * @param {DataTableColumn} col-列数据
     * @param {number} index-列索引
     * @param {string} srotType-排序类型
     */
    /**
         * 升序 降序
         * @param {DataTableColumn} col-列数据
         * @param {number} index-列索引
         * @param {string} srotType-排序类型
         */
    DataTableHeaderComponent.prototype.sortData = /**
         * 升序 降序
         * @param {DataTableColumn} col-列数据
         * @param {number} index-列索引
         * @param {string} srotType-排序类型
         */
    function (col, index, sortType) {
        if (!this.columns) {
            return;
        }
        // this.copyColumns = this.deepCopyData().copyColumns;
        // this.copyRows = this.deepCopyData().copyRows;
        var copyColumn = this.copyColumns[index];
        if (copyColumn && copyColumn.sortType !== 'normal') {
            if (copyColumn.sortType === sortType) {
                // 还原数据
                this.originRows = datatable_column_1.deepCopy(this.data);
                this.rowsChange.emit(this.originRows);
                copyColumn.sortType = 'normal';
            }
            else {
                var field_1 = copyColumn.field;
                this.copyColumns[index].sortType = sortType;
                if (sortType === 'asc') {
                    this.rows = this.rows.sort(function (pre, next) {
                        return pre[field_1] - next[field_1];
                    });
                }
                else if (sortType === 'desc') {
                    this.rows = this.rows.sort(function (pre, next) {
                        return next[field_1] - pre[field_1];
                    });
                }
                else {
                    return;
                }
            }
        }
        else {
            // 排序
            var field_2 = copyColumn.field;
            this.copyColumns[index].sortType = sortType;
            if (sortType === 'asc') {
                this.rows = this.rows.sort(function (pre, next) {
                    return pre[field_2] - next[field_2];
                });
            }
            else if (sortType === 'desc') {
                this.rows = this.rows.sort(function (pre, next) {
                    return next[field_2] - pre[field_2];
                });
            }
            else {
                return;
            }
        }
        this.sortChange.emit({
            key: copyColumn.field,
            type: copyColumn.sortType,
            data: col,
        });
    };
    DataTableHeaderComponent.prototype.deepCopyData = function () {
        var copyColumns = datatable_column_1.deepCopy(this.columns);
        var copyRows = datatable_column_1.deepCopy(this.rows);
        copyColumns.forEach(function (element) {
            element.sortType = 'normal';
        });
        return {
            copyColumns: copyColumns,
            copyRows: copyRows
        };
    };
    DataTableHeaderComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'datatable-header',
                    template: "\n    <table class=\"table\"\n    [class.table-hover]=\"hover\">\n        <colgroup>\n            <col class=\"dt-checkbox-cell\" *ngIf=\"!singleSelect&&fixed!=='right'\"/>\n            <col *ngFor=\"let col of columns\" [style.width]=\"col.width + 'px'\"/>\n        </colgroup>\n        <thead>\n            <tr>\n                <th drag-column class=\"dt-checkbox-cell\" *ngIf=\"!singleSelect&&fixed!=='right'\">\n                    <dt-checkbox [checked]=\"isCheckAll\" (checkedChange)=\"onCheckedChange($event)\"></dt-checkbox>\n                </th>\n                <th\n                farris-column-res\n                [media]=\"col.media\"\n                [class.td-hidden]=\"col.fixed==='left'||col.fixed==='right'\"\n                drag-column *ngFor=\"let col of columns;let i=index\" [attr.align]=\"col.align\">\n                        <span>{{ col.title }}</span>\n                </th>\n            </tr>\n        </thead>\n    </table>\n    ",
                    styles: ["th > div { display: inline-block; float: right; width: .5rem; } th > div > span.sort-container { position: relative; display: inline-block; width: 1em; height: 1.2em; } th span.k-icon { position: absolute; left: 0; opacity: .5; cursor: pointer; } th span.k-i-arrow-60-up { top: 0; } th span.k-i-arrow-60-down { top: .5em; } th span.clicked { opacity: 1; } "]
                },] },
    ];
    /** @nocollapse */
    DataTableHeaderComponent.ctorParameters = function () { return [
        { type: core_1.ElementRef, },
    ]; };
    DataTableHeaderComponent.propDecorators = {
        "hover": [{ type: core_1.Input },],
        "columns": [{ type: core_1.Input },],
        "singleSelect": [{ type: core_1.Input },],
        "fixed": [{ type: core_1.Input },],
        "rows": [{ type: core_1.Input },],
        "data": [{ type: core_1.Input },],
        "rowClassName": [{ type: core_1.Input },],
        "checkedAll": [{ type: core_1.Output },],
        "sortChange": [{ type: core_1.Output },],
        "rowsChange": [{ type: core_1.Output },],
    };
    return DataTableHeaderComponent;
}());
exports.DataTableHeaderComponent = DataTableHeaderComponent;
//# sourceMappingURL=datatable-header.component.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/data/datatable/utils/datatable-hover.directive.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var datatable_component_1 = __webpack_require__("./node_modules/@farris/ui/data/datatable/datatable.component.js");
var FarrisHoverDirective = /** @class */ (function () {
    function FarrisHoverDirective(dt, el, ngZone) {
        this.dt = dt;
        this.el = el;
        this.ngZone = ngZone;
    }
    // 获取组件本身存在的类
    // 获取组件本身存在的类
    FarrisHoverDirective.prototype.ngOnInit = 
    // 获取组件本身存在的类
    function () {
    };
    FarrisHoverDirective.prototype.onMouseEnter = function () {
        if (this.enableHover()) {
            this.dt.hoverTr(this.el.nativeElement);
        }
    };
    FarrisHoverDirective.prototype.onMouseLeave = function () {
        if (this.enableHover()) {
            this.dt.blurTr(this.el.nativeElement);
        }
    };
    FarrisHoverDirective.prototype.onClick = function () {
        this.dt.clickTr(this.el.nativeElement);
    };
    FarrisHoverDirective.prototype.enableHover = function () {
        return this.dt.hover;
    };
    FarrisHoverDirective.prototype.ngAfterViewInit = function () {
    };
    FarrisHoverDirective.prototype.hoverTr = function (e) {
    };
    FarrisHoverDirective.decorators = [
        { type: core_1.Directive, args: [{
                    selector: '[farris-hover]'
                },] },
    ];
    /** @nocollapse */
    FarrisHoverDirective.ctorParameters = function () { return [
        { type: datatable_component_1.DataTableComponent, },
        { type: core_1.ElementRef, },
        { type: core_1.NgZone, },
    ]; };
    FarrisHoverDirective.propDecorators = {
        "onMouseEnter": [{ type: core_1.HostListener, args: ['mouseenter',] },],
        "onMouseLeave": [{ type: core_1.HostListener, args: ['mouseleave',] },],
        "onClick": [{ type: core_1.HostListener, args: ['click',] },],
    };
    return FarrisHoverDirective;
}());
exports.FarrisHoverDirective = FarrisHoverDirective;
//# sourceMappingURL=datatable-hover.directive.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/data/datatable/utils/datatable-responsive-size.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.size = {
    xs: [0, 576],
    sm: [576, 767],
    md: [768, 991],
    lg: [992, 1199],
    xl: [1200, 10000]
};
//# sourceMappingURL=datatable-responsive-size.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/data/datatable/utils/datatable-responsive.directive.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var FarrisColumnResDirective = /** @class */ (function () {
    function FarrisColumnResDirective(el) {
        this.el = el;
        this.className = ' ';
    }
    Object.defineProperty(FarrisColumnResDirective.prototype, "columnResClassName", {
        get: function () {
            return this.getCellClassName() + " " + this.getResCellClassName();
        },
        enumerable: true,
        configurable: true
    });
    // 获取组件本身存在的类
    // 获取组件本身存在的类
    FarrisColumnResDirective.prototype.ngOnInit = 
    // 获取组件本身存在的类
    function () {
        if (this.el.nativeElement.classList.value) {
            this.className += this.el.nativeElement.classList.value;
        }
    };
    FarrisColumnResDirective.prototype.getCellClassName = function () {
        return "" + this.className + (this.show === 'cell' ? ' d-table-cell' : this.show === 'none' ? 'd-none' : '');
    };
    FarrisColumnResDirective.prototype.getResCellClassName = function () {
        var _this = this;
        if (!this.media) {
            return '';
        }
        return Object.keys(this.media).reduce(function (pre, current) {
            return pre + " " + (_this.media[current] === 'cell' ? 'd-' + current + '-table-cell' :
                _this.media[current] === 'none' ? 'd-' + current + '-none' : '');
        }, '');
    };
    FarrisColumnResDirective.decorators = [
        { type: core_1.Directive, args: [{
                    selector: '[farris-column-res]'
                },] },
    ];
    /** @nocollapse */
    FarrisColumnResDirective.ctorParameters = function () { return [
        { type: core_1.ElementRef, },
    ]; };
    FarrisColumnResDirective.propDecorators = {
        "show": [{ type: core_1.Input },],
        "media": [{ type: core_1.Input },],
        "columnResClassName": [{ type: core_1.HostBinding, args: ['class',] },],
    };
    return FarrisColumnResDirective;
}());
exports.FarrisColumnResDirective = FarrisColumnResDirective;
//# sourceMappingURL=datatable-responsive.directive.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/data/datatable/utils/drag.directive.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var datatable_component_1 = __webpack_require__("./node_modules/@farris/ui/data/datatable/datatable.component.js");
var DragColumnDirective = /** @class */ (function () {
    function DragColumnDirective(dt, ngzone, el, render) {
        this.dt = dt;
        this.ngzone = ngzone;
        this.el = el;
        this.render = render;
    }
    DragColumnDirective.prototype.ngAfterViewInit = function () {
        var _this = this;
        if (this.isEnable()) {
            this.render.addClass(this.el.nativeElement, 'resizable-column');
            this.resizer = document.createElement('span');
            this.resizer.className = 'column-resizer';
            this.el.nativeElement.appendChild(this.resizer);
            this.ngzone.runOutsideAngular(function () {
                _this.resizerMouseDownListener = _this.onMouseDown.bind(_this);
                _this.resizer.addEventListener('mousedown', _this.resizerMouseDownListener);
            });
        }
    };
    DragColumnDirective.prototype.isEnable = function () {
        return this.dt.dragable && !this.dt.hasFixed;
    };
    DragColumnDirective.prototype.bindDocumentEvents = function () {
        var _this = this;
        this.ngzone.runOutsideAngular(function () {
            _this.documentMouseMoveListener = _this.onMouseMove.bind(_this);
            document.addEventListener('mousemove', _this.documentMouseMoveListener);
            _this.documentMouseUpListener = _this.onMouseUp.bind(_this);
            document.addEventListener('mouseup', _this.documentMouseUpListener);
        });
    };
    DragColumnDirective.prototype.unbindDocumentEvents = function () {
        if (this.documentMouseMoveListener) {
            document.removeEventListener('mousemove', this.documentMouseMoveListener);
            this.documentMouseMoveListener = null;
        }
        if (this.documentMouseUpListener) {
            document.removeEventListener('mouseup', this.documentMouseUpListener);
            this.documentMouseUpListener = null;
        }
    };
    DragColumnDirective.prototype.onMouseDown = function (event) {
        this.dt.beginDrag(event);
        this.bindDocumentEvents();
    };
    DragColumnDirective.prototype.onMouseMove = function (event) {
        this.dt.moveDrag(event);
    };
    DragColumnDirective.prototype.onMouseUp = function (event) {
        this.dt.stopDrag(event, this.el.nativeElement);
        this.unbindDocumentEvents();
    };
    DragColumnDirective.prototype.ngOnDestroy = function () {
        if (this.resizerMouseDownListener) {
            this.resizer.removeEventListener('mousedown', this.resizerMouseDownListener);
        }
        this.unbindDocumentEvents();
    };
    DragColumnDirective.decorators = [
        { type: core_1.Directive, args: [{
                    selector: '[drag-column]'
                },] },
    ];
    /** @nocollapse */
    DragColumnDirective.ctorParameters = function () { return [
        { type: datatable_component_1.DataTableComponent, },
        { type: core_1.NgZone, },
        { type: core_1.ElementRef, },
        { type: core_1.Renderer2, },
    ]; };
    return DragColumnDirective;
}());
exports.DragColumnDirective = DragColumnDirective;
//# sourceMappingURL=drag.directive.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/data/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__("./node_modules/@farris/ui/data/datatable/index.js"));
__export(__webpack_require__("./node_modules/@farris/ui/data/treetable/index.js"));
__export(__webpack_require__("./node_modules/@farris/ui/data/pagination/index.js"));
__export(__webpack_require__("./node_modules/@farris/ui/data/datatable-extension/index.js"));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/data/pagination/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__("./node_modules/@farris/ui/data/pagination/paginate.pipe.js"));
__export(__webpack_require__("./node_modules/@farris/ui/data/pagination/pagination-service.js"));
__export(__webpack_require__("./node_modules/@farris/ui/data/pagination/pagination-template.directive.js"));
__export(__webpack_require__("./node_modules/@farris/ui/data/pagination/pagination.component.js"));
__export(__webpack_require__("./node_modules/@farris/ui/data/pagination/pagination.module.js"));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/data/pagination/paginate.pipe.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var pagination_service_1 = __webpack_require__("./node_modules/@farris/ui/data/pagination/pagination-service.js");
var LARGE_NUMBER = Number.MAX_SAFE_INTEGER;
var PaginatePipe = /** @class */ (function () {
    function PaginatePipe(service) {
        this.service = service;
        // store the values from the last time the pipe was invoked
        this.state = {};
    }
    PaginatePipe.prototype.transform = function (collection, args) {
        // When an observable is passed through the AsyncPipe, it will output
        // `null` until the subscription resolves. In this case, we want to
        // use the cached data from the `state` object to prevent the NgFor
        // from flashing empty until the real values arrive.
        if (args instanceof Array) {
            // compatible with angular2 before beta16
            args = args[0];
        }
        if (!(collection instanceof Array)) {
            var _id = args.id || this.service.defaultId;
            if (this.state[_id]) {
                return this.state[_id].slice;
            }
            else {
                return collection;
            }
        }
        var serverSideMode = args.totalItems && args.totalItems !== collection.length;
        // const serverSideMode = args.remote === 'server'
        var instance = this.createInstance(collection, args);
        var id = instance.id;
        var start, end;
        var perPage = instance.itemsPerPage;
        this.service.register(instance);
        if (!serverSideMode && collection instanceof Array) {
            perPage = +perPage || LARGE_NUMBER;
            start = (instance.currentPage - 1) * perPage;
            end = start + perPage;
            var isIdentical = this.stateIsIdentical(id, collection, start, end);
            if (isIdentical) {
                return this.state[id].slice;
            }
            else {
                var slice = collection.slice(start, end);
                this.saveState(id, collection, slice, start, end);
                this.service.change.emit(id);
                return slice;
            }
        }
        // save the state for server-side collection to avoid null
        // flash as new data loads.
        this.saveState(id, collection, collection, start, end);
        return collection;
    };
    /**
     * Create an PaginationInstance object, using defaults for any optional properties not supplied.
     */
    /**
         * Create an PaginationInstance object, using defaults for any optional properties not supplied.
         */
    PaginatePipe.prototype.createInstance = /**
         * Create an PaginationInstance object, using defaults for any optional properties not supplied.
         */
    function (collection, args) {
        var config = args;
        this.checkConfig(config);
        return {
            id: config.id || this.service.defaultId(),
            itemsPerPage: +config.itemsPerPage || 0,
            currentPage: +config.currentPage || 1,
            totalItems: +config.totalItems || collection.length,
            pageList: config.pageList || [10, 20, 30, 50, 100]
        };
    };
    /**
     * Ensure the argument passed to the filter contains the required properties.
     */
    /**
         * Ensure the argument passed to the filter contains the required properties.
         */
    PaginatePipe.prototype.checkConfig = /**
         * Ensure the argument passed to the filter contains the required properties.
         */
    function (config) {
        var required = ['itemsPerPage', 'currentPage'];
        var missing = required.filter(function (prop) { return !(prop in config); });
        if (0 < missing.length) {
            throw new Error("PaginatePipe: Argument is missing the following required properties: " + missing.join(', '));
        }
    };
    /**
     * To avoid returning a brand new array each time the pipe is run, we store the state of the sliced
     * array for a given id. This means that the next time the pipe is run on this collection & id, we just
     * need to check that the collection, start and end points are all identical, and if so, return the
     * last sliced array.
     */
    /**
         * To avoid returning a brand new array each time the pipe is run, we store the state of the sliced
         * array for a given id. This means that the next time the pipe is run on this collection & id, we just
         * need to check that the collection, start and end points are all identical, and if so, return the
         * last sliced array.
         */
    PaginatePipe.prototype.saveState = /**
         * To avoid returning a brand new array each time the pipe is run, we store the state of the sliced
         * array for a given id. This means that the next time the pipe is run on this collection & id, we just
         * need to check that the collection, start and end points are all identical, and if so, return the
         * last sliced array.
         */
    function (id, collection, slice, start, end) {
        this.state[id] = {
            collection: collection,
            size: collection.length,
            slice: slice,
            start: start,
            end: end
        };
    };
    /**
     * For a given id, returns true if the collection, size, start and end values are identical.
     */
    /**
         * For a given id, returns true if the collection, size, start and end values are identical.
         */
    PaginatePipe.prototype.stateIsIdentical = /**
         * For a given id, returns true if the collection, size, start and end values are identical.
         */
    function (id, collection, start, end) {
        var state = this.state[id];
        if (!state) {
            return false;
        }
        var isMetaDataIdentical = state.size === collection.length &&
            state.start === start &&
            state.end === end;
        if (!isMetaDataIdentical) {
            return false;
        }
        return state.slice.every(function (element, index) { return element === collection[start + index]; });
    };
    PaginatePipe.decorators = [
        { type: core_1.Pipe, args: [{
                    name: 'paginate',
                    pure: false
                },] },
    ];
    /** @nocollapse */
    PaginatePipe.ctorParameters = function () { return [
        { type: pagination_service_1.PaginationService, },
    ]; };
    return PaginatePipe;
}());
exports.PaginatePipe = PaginatePipe;
//# sourceMappingURL=paginate.pipe.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/data/pagination/pagination-service.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var PaginationService = /** @class */ (function () {
    function PaginationService() {
        this.change = new core_1.EventEmitter();
        this.instances = {};
        this.DEFAULT_ID = 'DEFAULT_PAGINATION_ID';
    }
    PaginationService.prototype.defaultId = function () {
        return this.DEFAULT_ID;
    };
    PaginationService.prototype.register = function (instance) {
        if (!instance.id) {
            instance.id = this.DEFAULT_ID;
        }
        if (!this.instances[instance.id]) {
            this.instances[instance.id] = instance;
            this.change.emit({ id: instance.id });
        }
        else {
            var changed = this.updateInstance(instance);
            if (changed.flag) {
                this.change.emit({ id: instance.id, changeData: changed });
            }
        }
    };
    PaginationService.prototype.updateInstance = function (instance) {
        var changed = { flag: false };
        for (var prop in this.instances[instance.id]) {
            if (prop !== 'pagelist') {
                if (instance[prop] !== this.instances[instance.id][prop]) {
                    changed[prop] = this.instances[instance.id][prop];
                    this.instances[instance.id][prop] = instance[prop];
                    changed.flag = true;
                }
            }
        }
        return changed;
    };
    /**
     * 获取当前页码
     * @param id 分页组件ID
     */
    /**
         * 获取当前页码
         * @param id 分页组件ID
         */
    PaginationService.prototype.getCurrentPage = /**
         * 获取当前页码
         * @param id 分页组件ID
         */
    function (id) {
        if (this.instances[id]) {
            return this.instances[id].currentPage;
        }
    };
    /**
     * 设置新的当前页码
     * @param id 分页组件ID
     * @param page 新页码
     */
    /**
         * 设置新的当前页码
         * @param id 分页组件ID
         * @param page 新页码
         */
    PaginationService.prototype.setCurrentPage = /**
         * 设置新的当前页码
         * @param id 分页组件ID
         * @param page 新页码
         */
    function (id, page) {
        if (this.instances[id]) {
            var instance = this.instances[id];
            var maxPage = Math.ceil(instance.totalItems / instance.itemsPerPage);
            if (page <= maxPage && 1 <= page) {
                instance.currentPage = page;
                this.change.emit({ id: id });
            }
        }
    };
    /**
     * 设置总记录数
     */
    /**
         * 设置总记录数
         */
    PaginationService.prototype.setTotalItems = /**
         * 设置总记录数
         */
    function (id, totalItems) {
        if (this.instances[id] && 0 <= totalItems) {
            this.instances[id].totalItems = totalItems;
            this.change.emit({ id: id });
        }
    };
    /**
     * 设置每页记录数
     */
    /**
         * 设置每页记录数
         */
    PaginationService.prototype.setItemsPerPage = /**
         * 设置每页记录数
         */
    function (id, itemsPerPage) {
        if (this.instances[id]) {
            this.instances[id].itemsPerPage = itemsPerPage;
            this.change.emit({ id: id });
        }
    };
    PaginationService.prototype.getInstance = function (id) {
        if (id === void 0) { id = this.DEFAULT_ID; }
        if (this.instances[id]) {
            return this.clone(this.instances[id]);
        }
        return {};
    };
    PaginationService.prototype.clone = function (obj) {
        var target = {};
        for (var i in obj) {
            if (obj.hasOwnProperty(i)) {
                target[i] = obj[i];
            }
        }
        return target;
    };
    return PaginationService;
}());
exports.PaginationService = PaginationService;
//# sourceMappingURL=pagination-service.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/data/pagination/pagination-template.directive.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var pagination_service_1 = __webpack_require__("./node_modules/@farris/ui/data/pagination/pagination-service.js");
var PaginationTemplateDirective = /** @class */ (function () {
    function PaginationTemplateDirective(service, changeDetectorRef) {
        var _this = this;
        this.service = service;
        this.changeDetectorRef = changeDetectorRef;
        this.maxSize = 7;
        this.pageChange = new core_1.EventEmitter();
        this.pageSizeChange = new core_1.EventEmitter();
        this.pages = [];
        this.changeSub = this.service.change.subscribe(function (r) {
            if (_this.id === r.id) {
                _this.updatePageLinks(r.changeData);
                _this.changeDetectorRef.markForCheck();
                _this.changeDetectorRef.detectChanges();
            }
        });
    }
    PaginationTemplateDirective.prototype.ngOnInit = function () {
        if (this.id === undefined) {
            this.id = this.service.defaultId();
        }
        this.updatePageLinks();
    };
    PaginationTemplateDirective.prototype.ngOnChanges = function (changes) {
        this.updatePageLinks();
    };
    PaginationTemplateDirective.prototype.ngOnDestroy = function () {
        this.changeSub.unsubscribe();
    };
    /**
     * Go to the previous page
     */
    /**
         * Go to the previous page
         */
    PaginationTemplateDirective.prototype.previous = /**
         * Go to the previous page
         */
    function () {
        this.checkValidId();
        this.setCurrent(this.getCurrent() - 1);
    };
    /**
     * Go to the next page
     */
    /**
         * Go to the next page
         */
    PaginationTemplateDirective.prototype.next = /**
         * Go to the next page
         */
    function () {
        this.checkValidId();
        this.setCurrent(this.getCurrent() + 1);
    };
    PaginationTemplateDirective.prototype.first = function () {
        this.checkValidId();
        this.setCurrent(1);
    };
    PaginationTemplateDirective.prototype.last = function () {
        this.checkValidId();
        this.setCurrent(this.getLastPage());
    };
    /**
     * Returns true if current page is first page
     */
    /**
         * Returns true if current page is first page
         */
    PaginationTemplateDirective.prototype.isFirstPage = /**
         * Returns true if current page is first page
         */
    function () {
        return this.getCurrent() === 1;
    };
    /**
     * Returns true if current page is last page
     */
    /**
         * Returns true if current page is last page
         */
    PaginationTemplateDirective.prototype.isLastPage = /**
         * Returns true if current page is last page
         */
    function () {
        return this.getLastPage() === this.getCurrent();
    };
    PaginationTemplateDirective.prototype.setCurrent = function (page, pageSize) {
        if (!pageSize) {
            pageSize = this.service.getInstance(this.id).itemsPerPage;
        }
        this.pageChange.emit({ pageIndex: page, pageSize: pageSize });
    };
    PaginationTemplateDirective.prototype.getCurrent = function () {
        return this.service.getCurrentPage(this.id);
    };
    PaginationTemplateDirective.prototype.getLastPage = function () {
        var inst = this.service.getInstance(this.id);
        if (inst.totalItems < 1) {
            return 1;
        }
        return Math.ceil(inst.totalItems / inst.itemsPerPage);
    };
    PaginationTemplateDirective.prototype.getTotalItems = function () {
        return this.service.getInstance(this.id).totalItems;
    };
    PaginationTemplateDirective.prototype.getPageList = function () {
        return this.service.getInstance(this.id).pageList;
    };
    PaginationTemplateDirective.prototype.getPageSize = function () {
        return this.service.getInstance(this.id).itemsPerPage;
    };
    // setPageSize(pSize: number) {
    //     this.service.getInstance(this.id).itemsPerPage = pSize;
    // }
    // setPageSize(pSize: number) {
    //     this.service.getInstance(this.id).itemsPerPage = pSize;
    // }
    PaginationTemplateDirective.prototype.checkValidId = 
    // setPageSize(pSize: number) {
    //     this.service.getInstance(this.id).itemsPerPage = pSize;
    // }
    function () {
        if (!this.service.getInstance(this.id).id) {
            console.warn("PaginationControlsDirective: the specified id \"" + this.id + "\" does not match any registered PaginationInstance");
        }
    };
    PaginationTemplateDirective.prototype.updatePageLinks = function (changeData) {
        var _this = this;
        var inst = this.service.getInstance(this.id);
        var correctedCurrentPage = this.outOfBoundCorrection(inst);
        if (correctedCurrentPage) {
            if (correctedCurrentPage !== inst.currentPage) {
                setTimeout(function () {
                    _this.setCurrent(correctedCurrentPage, inst.itemsPerPage);
                    _this.pages = _this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, _this.maxSize);
                });
            }
            else {
                if (changeData && changeData.itemsPerPage !== undefined) {
                    if (changeData.itemsPerPage !== inst.itemsPerPage) {
                        this.setCurrent(correctedCurrentPage, inst.itemsPerPage);
                    }
                }
                this.pages = this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, this.maxSize);
            }
        }
    };
    PaginationTemplateDirective.prototype.outOfBoundCorrection = function (instance) {
        var totalPages = Math.ceil(instance.totalItems / instance.itemsPerPage);
        if (totalPages < instance.currentPage && 0 < totalPages) {
            return totalPages;
        }
        else if (instance.currentPage < 1) {
            return 1;
        }
        return instance.currentPage;
    };
    PaginationTemplateDirective.prototype.createPageArray = function (currentPage, itemsPerPage, totalItems, paginationRange) {
        paginationRange = +paginationRange;
        var pages = [];
        var totalPages = Math.ceil(totalItems / itemsPerPage);
        var halfWay = Math.ceil(paginationRange / 2);
        var isStart = currentPage <= halfWay;
        var isEnd = totalPages - halfWay < currentPage;
        var isMiddle = !isStart && !isEnd;
        var ellipsesNeeded = paginationRange < totalPages;
        var i = 1;
        while (i <= totalPages && i <= paginationRange) {
            var label = void 0;
            var pageNumber = this.calculatePageNumber(i, currentPage, paginationRange, totalPages);
            var openingEllipsesNeeded = (i === 2 && (isMiddle || isEnd));
            var closingEllipsesNeeded = (i === paginationRange - 1 && (isMiddle || isStart));
            if (ellipsesNeeded && (openingEllipsesNeeded || closingEllipsesNeeded)) {
                label = '...';
            }
            else {
                label = pageNumber;
            }
            pages.push({
                label: label,
                value: pageNumber
            });
            i++;
        }
        return pages;
    };
    PaginationTemplateDirective.prototype.calculatePageNumber = function (i, currentPage, paginationRange, totalPages) {
        var halfWay = Math.ceil(paginationRange / 2);
        if (i === paginationRange) {
            return totalPages;
        }
        else if (i === 1) {
            return i;
        }
        else if (paginationRange < totalPages) {
            if (totalPages - halfWay < currentPage) {
                return totalPages - paginationRange + i;
            }
            else if (halfWay < currentPage) {
                return currentPage - halfWay + i;
            }
            else {
                return i;
            }
        }
        else {
            return i;
        }
    };
    PaginationTemplateDirective.decorators = [
        { type: core_1.Directive, args: [{
                    selector: 'pagination-template, [pagination-template]',
                    exportAs: 'paginationApi'
                },] },
    ];
    /** @nocollapse */
    PaginationTemplateDirective.ctorParameters = function () { return [
        { type: pagination_service_1.PaginationService, },
        { type: core_1.ChangeDetectorRef, },
    ]; };
    PaginationTemplateDirective.propDecorators = {
        "id": [{ type: core_1.Input },],
        "maxSize": [{ type: core_1.Input },],
        "pageChange": [{ type: core_1.Output },],
        "pageSizeChange": [{ type: core_1.Output },],
    };
    return PaginationTemplateDirective;
}());
exports.PaginationTemplateDirective = PaginationTemplateDirective;
//# sourceMappingURL=pagination-template.directive.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/data/pagination/pagination.component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var template_1 = __webpack_require__("./node_modules/@farris/ui/data/pagination/template.js");
function coerceToBoolean(input) {
    return !!input && input !== 'false';
}
/**
 * The default pagination controls component. Actually just a default implementation of a custom template.
 */
var PaginationControlsComponent = /** @class */ (function () {
    function PaginationControlsComponent() {
        this.maxSize = 7;
        this.previousLabel = 'Previous';
        this.nextLabel = 'Next';
        this.screenReaderPaginationLabel = 'Pagination';
        this.screenReaderPageLabel = 'page';
        this.screenReaderCurrentLabel = "You're on page";
        this.pageChange = new core_1.EventEmitter();
        this.pageSizeChange = new core_1.EventEmitter();
        this._directionLinks = true;
        this._autoHide = false;
        this._responsive = false;
    }
    Object.defineProperty(PaginationControlsComponent.prototype, "directionLinks", {
        get: function () {
            return this._directionLinks;
        },
        set: function (value) {
            this._directionLinks = coerceToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PaginationControlsComponent.prototype, "autoHide", {
        get: function () {
            return this._autoHide;
        },
        set: function (value) {
            this._autoHide = coerceToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PaginationControlsComponent.prototype, "responsive", {
        get: function () {
            return this._responsive;
        },
        set: function (value) {
            this._responsive = coerceToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    PaginationControlsComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'pagination-controls',
                    template: template_1.DEFAULT_TEMPLATE,
                    changeDetection: core_1.ChangeDetectionStrategy.OnPush,
                    encapsulation: core_1.ViewEncapsulation.None
                },] },
    ];
    /** @nocollapse */
    PaginationControlsComponent.propDecorators = {
        "id": [{ type: core_1.Input },],
        "maxSize": [{ type: core_1.Input },],
        "directionLinks": [{ type: core_1.Input },],
        "autoHide": [{ type: core_1.Input },],
        "responsive": [{ type: core_1.Input },],
        "previousLabel": [{ type: core_1.Input },],
        "nextLabel": [{ type: core_1.Input },],
        "screenReaderPaginationLabel": [{ type: core_1.Input },],
        "screenReaderPageLabel": [{ type: core_1.Input },],
        "screenReaderCurrentLabel": [{ type: core_1.Input },],
        "pageChange": [{ type: core_1.Output },],
        "pageSizeChange": [{ type: core_1.Output },],
    };
    return PaginationControlsComponent;
}());
exports.PaginationControlsComponent = PaginationControlsComponent;
//# sourceMappingURL=pagination.component.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/data/pagination/pagination.module.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var forms_1 = __webpack_require__("./node_modules/@angular/forms/esm5/forms.js");
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/esm5/common.js");
var paginate_pipe_1 = __webpack_require__("./node_modules/@farris/ui/data/pagination/paginate.pipe.js");
var pagination_service_1 = __webpack_require__("./node_modules/@farris/ui/data/pagination/pagination-service.js");
var pagination_component_1 = __webpack_require__("./node_modules/@farris/ui/data/pagination/pagination.component.js");
var pagination_template_directive_1 = __webpack_require__("./node_modules/@farris/ui/data/pagination/pagination-template.directive.js");
var pagination_service_2 = __webpack_require__("./node_modules/@farris/ui/data/pagination/pagination-service.js");
exports.PaginationService = pagination_service_2.PaginationService;
var pagination_component_2 = __webpack_require__("./node_modules/@farris/ui/data/pagination/pagination.component.js");
exports.PaginationControlsComponent = pagination_component_2.PaginationControlsComponent;
var pagination_template_directive_2 = __webpack_require__("./node_modules/@farris/ui/data/pagination/pagination-template.directive.js");
exports.PaginationTemplateDirective = pagination_template_directive_2.PaginationTemplateDirective;
var paginate_pipe_2 = __webpack_require__("./node_modules/@farris/ui/data/pagination/paginate.pipe.js");
exports.PaginatePipe = paginate_pipe_2.PaginatePipe;
var PaginationModule = /** @class */ (function () {
    function PaginationModule() {
    }
    PaginationModule.decorators = [
        { type: core_1.NgModule, args: [{
                    imports: [common_1.CommonModule, forms_1.FormsModule],
                    declarations: [
                        paginate_pipe_1.PaginatePipe,
                        pagination_component_1.PaginationControlsComponent,
                        pagination_template_directive_1.PaginationTemplateDirective
                    ],
                    providers: [pagination_service_1.PaginationService],
                    exports: [paginate_pipe_1.PaginatePipe, pagination_component_1.PaginationControlsComponent, pagination_template_directive_1.PaginationTemplateDirective]
                },] },
    ];
    return PaginationModule;
}());
exports.PaginationModule = PaginationModule;
//# sourceMappingURL=pagination.module.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/data/pagination/template.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_TEMPLATE = "\n<pagination-template  #p=\"paginationApi\"\n    [id]=\"id\"\n    [maxSize]=\"maxSize\"\n    (pageChange)=\"pageChange.emit($event)\"\n>\n    <div class=\"pagination-container\">\n        <ul class=\"ngx-pagination pagination\"\n            role=\"navigation\"\n            [attr.aria-label]=\"screenReaderPaginationLabel\"\n            [class.responsive]=\"responsive\"\n            *ngIf=\"!(autoHide && p.pages.length <= 1)\">\n            <li class=\"pagination-message mr-auto\">\n                <div class=\"text-nowrap\">\n                    \u6BCF\u9875 {{ p.getPageSize() }} \u6761\u8BB0\u5F55\uFF0C\u5171 {{ p.getTotalItems() }} \u6761\u8BB0\u5F55\u3002\n                </div>\n            </li>\n\n        <li class=\"page-item\" [class.disabled]=\"p.isFirstPage()\" *ngIf=\"directionLinks\">\n                <a tabindex=\"0\" *ngIf=\"1 < p.getCurrent()\" (keyup.enter)=\"p.first()\" (click)=\"p.first()\"\n                                                        [attr.aria-label]=\"previousLabel + ' ' + screenReaderPageLabel\"  class=\"page-link\">\n                    <span class=\"f-icon f-page-first\"></span>\n                </a>\n                <span *ngIf=\"p.isFirstPage()\" class=\"page-link\">\n                    <span class=\"f-icon f-page-first\"></span>\n                </span>\n            </li>\n\n            <li class=\"page-item\" [class.disabled]=\"p.isFirstPage()\" *ngIf=\"directionLinks\">\n                <a tabindex=\"0\" *ngIf=\"1 < p.getCurrent()\" (keyup.enter)=\"p.previous()\" (click)=\"p.previous()\"\n                                                        [attr.aria-label]=\"previousLabel + ' ' + screenReaderPageLabel\" class=\"page-link\">\n                    <span class=\"f-icon f-page-pre\"></span>\n                </a>\n                <span *ngIf=\"p.isFirstPage()\" class=\"page-link\">\n                         <span class=\"f-icon f-page-pre\"></span>\n                </span>\n            </li>\n            <!--<li style=\"line-height: 30px;min-width: 93px;\">\n                \u7B2C {{ p.getCurrent() }} \u9875 / \u5171 {{ p.getLastPage() }} \u9875\n            </li>-->\n            <li class=\"page-item\" [class.active]=\"p.getCurrent() === page.value\"\n                [class.ellipsis]=\"page.label === '...'\"\n                *ngFor=\"let page of p.pages\">\n                    <a  class=\"page-link\" tabindex=\"0\" (keyup.enter)=\"p.setCurrent(page.value)\"\n                        (click)=\"p.setCurrent(page.value)\"\n                        *ngIf=\"p.getCurrent() !== page.value\">\n                        <span>{{ page.label }}</span>\n                    </a>\n                <ng-container *ngIf=\"p.getCurrent() === page.value\">\n                    <span  class=\"page-link\" >{{ page.label }}</span>\n                </ng-container>\n            </li>\n            <li class=\"page-item\" [class.disabled]=\"p.isLastPage()\" *ngIf=\"directionLinks\">\n                <a class=\"page-link\" tabindex=\"0\" *ngIf=\"!p.isLastPage()\" (keyup.enter)=\"p.next()\"\n                    (click)=\"p.next()\" [attr.aria-label]=\"nextLabel + ' ' + screenReaderPageLabel\">\n                    {{ nextLabel }} <span class=\"f-icon f-page-next\">{{ screenReaderPageLabel }}</span>\n                </a>\n                <span *ngIf=\"p.isLastPage()\" class=\"page-link\">\n                    {{ nextLabel }} <span class=\"f-icon f-page-next\">{{ screenReaderPageLabel }}</span>\n                </span>\n            </li>\n\n            <li class=\"page-item\" [class.disabled]=\"p.isLastPage()\" *ngIf=\"directionLinks\">\n                <a class=\"page-link\" tabindex=\"0\" *ngIf=\"!p.isLastPage()\" (keyup.enter)=\"p.last()\"\n                    (click)=\"p.last()\" [attr.aria-label]=\"nextLabel + ' ' + screenReaderPageLabel\">\n                    {{ nextLabel }} <span class=\"f-icon f-page-last\">{{ screenReaderPageLabel }}</span>\n                </a>\n                <span *ngIf=\"p.isLastPage()\" class=\"page-link\">\n                    {{ nextLabel }} <span class=\"f-icon f-page-last\">{{ screenReaderPageLabel }}</span>\n                </span>\n            </li>\n            <li class=\"pagination-pagelist\">\n                <select (change)=\"pageSizeChange.emit($event.target.value)\" [ngModel]=\"p.getPageSize()\"\n                class=\"form-control form-control-sm\">\n                <option *ngFor=\"let pagesize of p.getPageList()\" value=\"{{ pagesize }}\"\n                        [selected]=\"pagesize === p.getPageSize()\"> {{ pagesize }} </option>\n                </select>\n           </li>\n        </ul>\n\n    </div>\n</pagination-template>\n";
//# sourceMappingURL=template.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/data/treetable/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
var treetable_component_1 = __webpack_require__("./node_modules/@farris/ui/data/treetable/treetable.component.js");
exports.TreeTableComponent = treetable_component_1.TreeTableComponent;
exports.TreeTableSelectRowDirective = treetable_component_1.TreeTableSelectRowDirective;
__export(__webpack_require__("./node_modules/@farris/ui/data/treetable/treetable.module.js"));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/data/treetable/treetable.component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var treetable_service_1 = __webpack_require__("./node_modules/@farris/ui/data/treetable/treetable.service.js");
var farris_template_directive_1 = __webpack_require__("./node_modules/@farris/ui/common/farris-template.directive.js");
var TreeTableComponent = /** @class */ (function () {
    function TreeTableComponent(ttService, el) {
        this.ttService = ttService;
        this.el = el;
        /** 宽度 */
        this.width = 500;
        /** 高度 */
        this.height = 400;
        this.showFilterBar = true;
        /**
             * 是否启用多选。 默认为单选
             */
        this.singleSelect = true;
        /** 显示图标 */
        this.showIcon = true;
        /** 显示边框线 */
        this.showBorder = true;
        this.showCheckAll = true;
        /** 固定表头 */
        this.fixedHeader = false;
        /** 当多选时，选中当前行并钩选 */
        this.checkOnSelect = false;
        /** 当多选时，钩选并选中当前行 */
        this.selectOnCheck = false;
        /** 行选中事件 */
        this.selectionChange = new core_1.EventEmitter();
        /** 选中事件 */
        this.nodeSelected = new core_1.EventEmitter();
        /** 取消选中事件 */
        this.nodeUnSelect = new core_1.EventEmitter();
        /** 钩选 */
        this.nodeChecked = new core_1.EventEmitter();
        /** 取消钩选 */
        this.nodeUnChecked = new core_1.EventEmitter();
        /** 全选事件 */
        this.selectAll = new core_1.EventEmitter();
        /** 查询 */
        this.search = new core_1.EventEmitter();
        this.dblClick = new core_1.EventEmitter();
        this._data = [];
        /**
             * 选中项索引
             */
        this.selectRowIndex = -1;
        this.searchData = { field: '*', value: '' };
    }
    Object.defineProperty(TreeTableComponent.prototype, "data", {
        get: function () {
            return this._data;
        },
        set: function (val) {
            this._data = val;
            this.updateSerializedValue();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeTableComponent.prototype, "checkeds", {
        get: function () {
            return this.selections || [];
        },
        enumerable: true,
        configurable: true
    });
    TreeTableComponent.prototype.ngOnInit = function () {
        var _this = this;
        setTimeout(function () {
            _this.setScorllBodyHeight();
        });
    };
    TreeTableComponent.prototype.ngOnChanges = function (changes) {
        if (changes.data && !changes.data.isFirstChange()) {
            this.updateSerializedValue();
        }
    };
    TreeTableComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.templates.forEach(function (item) {
            switch (item.getType()) {
                case 'header':
                    _this.headerTemplate = item.template;
                    break;
                case 'body':
                    _this.bodyTemplate = item.template;
                    break;
            }
        });
    };
    TreeTableComponent.prototype.ngAfterViewInit = function () {
        this.containerElement = this.el.nativeElement.querySelector('.farris-treetable');
        // console.log(this.containerElement.getBoundingClientRect());
    };
    TreeTableComponent.prototype.updateSerializedValue = function () {
        this.serializedValue = [];
        this.serializeNodes(null, this.data, 0, true);
    };
    /**
     * 将树节点数据序列化为RowNode
     * @param parent 父级节点
     * @param nodes 树节点集合
     * @param level 级别
     * @param visible 是否可见
     */
    /**
         * 将树节点数据序列化为RowNode
         * @param parent 父级节点
         * @param nodes 树节点集合
         * @param level 级别
         * @param visible 是否可见
         */
    TreeTableComponent.prototype.serializeNodes = /**
         * 将树节点数据序列化为RowNode
         * @param parent 父级节点
         * @param nodes 树节点集合
         * @param level 级别
         * @param visible 是否可见
         */
    function (parent, nodes, level, visible) {
        if (nodes && nodes.length) {
            for (var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {
                var node = nodes_1[_i];
                node.parent = parent;
                var rowNode = {
                    node: node,
                    parent: parent,
                    level: level,
                    visible: visible && (parent ? parent.expanded : true)
                };
                this.serializedValue.push(rowNode);
                this.serializeNodes(node, node.children, level + 1, rowNode.visible);
            }
        }
    };
    /**
     * 判断指定的节点是否被选中
     * @param node 树节点
     */
    /**
         * 判断指定的节点是否被选中
         * @param node 树节点
         */
    TreeTableComponent.prototype.isSelected = /**
         * 判断指定的节点是否被选中
         * @param node 树节点
         */
    function (node) {
        if (node && this.selectedRow) {
            return node.data[this.idField] === this.selectedRow.data[this.idField];
        }
        return false;
    };
    TreeTableComponent.prototype.isChecked = function (node) {
        var _this = this;
        if (node && this.selections) {
            if (this.selections instanceof Array) {
                return this.selections.findIndex(function (v) {
                    return v.data[_this.idField] === node.data[_this.idField];
                }) > -1;
            }
            else {
                return node.data[this.idField] === this.selections.data[this.idField];
            }
        }
        return false;
    };
    /**
     * 行单击事件
     * @param event
     */
    /**
         * 行单击事件
         * @param event
         */
    TreeTableComponent.prototype.handleRowClick = /**
         * 行单击事件
         * @param event
         */
    function (event) {
        var _this = this;
        var rowNode = event.rowNode;
        var selected = this.isSelected(rowNode.node);
        // if (this.singleSelect) {
        //     if (selected) {
        //         this.selections = null;
        //         this.selectRowIndex = -1;
        //         this.nodeUnSelect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row' });
        //     } else {
        //         this.selections = rowNode.node;
        //         this.selectRowIndex = event.rowIndex;
        //         this.nodeSelected.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row', index: event.rowIndex });
        //         // this.selectionChange.emit({rowData: this.selections, rowIndex: this.selectRowIndex});
        //     }
        // } else {
        //     if (!selected) {
        //         // this.selections = this.selections ? [...this.selections, rowNode.node] : [rowNode.node];
        //         this.selectedRow = rowNode.node;
        //         this.selectRowIndex = event.rowIndex;
        //         this.nodeSelected.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row', index: event.rowIndex });
        //     } else {
        //         // this.selections = this.selections.filter((v) => {
        //         //     return v.data[this.idField] !== rowNode.node.data[this.idField];
        //         // });
        //         this.selectedRow = null;
        //         this.selectRowIndex = -1;
        //         this.nodeUnSelect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row' });
        //     }
        // }
        if (!selected) {
            this.selectedRow = rowNode.node;
            this.selectRowIndex = event.rowIndex;
            this.nodeSelected.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row', index: event.rowIndex });
        }
        else {
            this.selectedRow = null;
            this.selectRowIndex = -1;
            this.nodeUnSelect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row' });
        }
        if (this.checkOnSelect && !this.singleSelect) {
            if (this.isChecked(rowNode.node)) {
                this.selections = this.selections.filter(function (v) {
                    return v.data[_this.idField] !== rowNode.node.data[_this.idField];
                });
            }
            else {
                this.selections = this.selections ? this.selections.concat([rowNode.node]) : [rowNode.node];
            }
        }
        this.ttService.onSelectionChange();
    };
    /**
     * 行Checkbox 选中变化事件
     * @param event 鼠标点击事件对象
     * @param rowNode 当前树节点
     */
    /**
         * 行Checkbox 选中变化事件
         * @param event 鼠标点击事件对象
         * @param rowNode 当前树节点
         */
    TreeTableComponent.prototype.toggleNodeWithCheckbox = /**
         * 行Checkbox 选中变化事件
         * @param event 鼠标点击事件对象
         * @param rowNode 当前树节点
         */
    function (event, rowNode) {
        var isChecked = this.isChecked(rowNode.node);
        if (!isChecked) {
            this.propagateSelectionDown(rowNode.node, true);
            this.nodeChecked.emit({ originalEvent: event, node: rowNode.node });
        }
        else {
            this.propagateSelectionDown(rowNode.node, false);
            this.nodeUnChecked.emit({ originalEvent: event, node: rowNode.node });
        }
        this.ttService.onSelectionChange();
        event.stopPropagation();
    };
    /**
     * 全选
     * @param event 鼠标事件对象
     * @param checked 是否选中
     */
    /**
         * 全选
         * @param event 鼠标事件对象
         * @param checked 是否选中
         */
    TreeTableComponent.prototype.toggleNodesWithCheckbox = /**
         * 全选
         * @param event 鼠标事件对象
         * @param checked 是否选中
         */
    function (event, checked) {
        var _this = this;
        if (checked) {
            if (this.data && this.data.length) {
                this.data.forEach(function (row) {
                    _this.propagateSelectionDown(row, checked);
                });
            }
        }
        else {
            this.selections = null;
        }
        this.selectAll.emit({ originalEvent: event, checked: checked });
        this.ttService.onSelectionChange();
    };
    /**
     * 向下级联选中
     * @param node 当前节点
     * @param select 选中状态
     */
    /**
         * 向下级联选中
         * @param node 当前节点
         * @param select 选中状态
         */
    TreeTableComponent.prototype.propagateSelectionDown = /**
         * 向下级联选中
         * @param node 当前节点
         * @param select 选中状态
         */
    function (node, select) {
        var _this = this;
        var index = this.findIndexInSelection(node);
        if (select && index === -1) {
            this.selections = (this.selections || []).concat([node]);
        }
        if (!select && index > -1) {
            this.selections = this.selections.filter(function (v, i) { return i !== index; });
        }
        if (node.children && node.children.length) {
            node.children.forEach(function (v, i) {
                _this.propagateSelectionDown(v, select);
            });
        }
    };
    /**
     * 在选中的集合中查找指定节点的索引
     * @param node 树节点
     */
    /**
         * 在选中的集合中查找指定节点的索引
         * @param node 树节点
         */
    TreeTableComponent.prototype.findIndexInSelection = /**
         * 在选中的集合中查找指定节点的索引
         * @param node 树节点
         */
    function (node) {
        var _this = this;
        var index = -1;
        if (this.selections && this.selections.length) {
            index = this.selections.findIndex(function (v, i) {
                return _this.equals(v, node);
            });
        }
        return index;
    };
    /** 对比两个节点是否同一个节点 */
    /** 对比两个节点是否同一个节点 */
    TreeTableComponent.prototype.equals = /** 对比两个节点是否同一个节点 */
    function (target, source) {
        return target.data[this.idField] === source.data[this.idField];
    };
    /**
     * 展开所有节点
     * @param rowNode 展开此节点下的所有节点；如果为空，则展开所有节点
     */
    /**
         * 展开所有节点
         * @param rowNode 展开此节点下的所有节点；如果为空，则展开所有节点
         */
    TreeTableComponent.prototype.toggleExpand = /**
         * 展开所有节点
         * @param rowNode 展开此节点下的所有节点；如果为空，则展开所有节点
         */
    function (rowNode) {
        var _this = this;
        if (rowNode) {
            rowNode.expanded = !rowNode.expanded;
            if (rowNode.children && rowNode.children.length) {
                rowNode.children.forEach(function (row, i) {
                    _this.toggleExpand(row);
                });
            }
        }
        else {
            if (this.data && this.data.length) {
                this.data.forEach(function (r) {
                    _this.toggleExpand(r);
                });
            }
        }
        this.updateSerializedValue();
    };
    TreeTableComponent.prototype.getContainerOffset = function () {
        var rect = this.containerElement.getBoundingClientRect();
        return {
            left: rect.left + document.body.scrollLeft,
            top: rect.top + document.body.scrollTop
        };
    };
    TreeTableComponent.prototype.onColumnResizeBegin = function (event) {
        var containerLeft = this.getContainerOffset().left;
        this.lastResizerHelperX = event.pageX; // + containerLeft; // 还需要考试横向滚动条
        event.preventDefault();
    };
    TreeTableComponent.prototype.onColumnResize = function (event) {
        var containerLeft = this.getContainerOffset().left;
        this.resizerHelperVC.nativeElement.style.height = this.containerElement.offsetHeight + 'px';
        this.resizerHelperVC.nativeElement.style.top = 0 + 'px';
        this.resizerHelperVC.nativeElement.style.left = (event.pageX - containerLeft) + 'px';
        this.resizerHelperVC.nativeElement.style.display = 'block';
    };
    TreeTableComponent.prototype.onColumnResizeEnd = function (event, column) {
        // 偏移量
        var delta = event.pageX - this.lastResizerHelperX;
        // this.resizerHelperVC.nativeElement.offsetLeft - this.lastResizerHelperX;
        // 列宽
        var columnWidth = column.offsetWidth;
        // 新宽度
        var newColumnWidth = columnWidth + delta;
        // 最小宽度
        var minWidth = column.style.minWidth || 15;
        if (newColumnWidth > parseInt(minWidth, 10)) {
            var colIndex = -1;
            var cols = this.headerTable.nativeElement.querySelectorAll('th');
            for (var i = 0; i < cols.length; i++) {
                if (cols[i] === column) {
                    colIndex = i;
                }
            }
            var nextColumn = column.nextElementSibling;
            if (nextColumn) {
                // 下一个单元格的最新宽度
                var nextColumnWidth = nextColumn.offsetWidth - delta;
                var nextColumnMinWidth = nextColumn.style.minWidth || 15;
                if (newColumnWidth > 15 && nextColumnWidth > parseInt(nextColumnMinWidth, 10)) {
                    this.resizeColGroup(this.headerTable.nativeElement, colIndex, newColumnWidth, nextColumnWidth);
                    this.resizeColGroup(this.bodyTable.nativeElement, colIndex, newColumnWidth, nextColumnWidth);
                }
            }
        }
        this.resizerHelperVC.nativeElement.style.display = 'none';
    };
    TreeTableComponent.prototype.onSearch = function () {
        this.search.emit(this.searchData);
    };
    TreeTableComponent.prototype.resizeColGroup = function (table, resizeColumnIndex, newColumnWidth, nextColumnWidth) {
        if (table) {
            var colGroup = table.children[0].nodeName === 'COLGROUP' ? table.children[0] : null;
            if (colGroup) {
                var col = colGroup.children[resizeColumnIndex];
                var nextCol = col.nextElementSibling;
                col.style.width = newColumnWidth + 'px';
                if (nextCol && nextColumnWidth) {
                    nextCol.style.width = nextColumnWidth + 'px';
                }
            }
            else {
                throw new Error('Scrollable tables require a colgroup to support resizable columns');
            }
        }
    };
    TreeTableComponent.prototype.insert = function (node, parent) {
        if (parent) {
            if (!parent.children) {
                parent.children = [];
            }
            parent.children.push(node);
        }
        else {
            this.data.push(node);
        }
        this.updateSerializedValue();
    };
    TreeTableComponent.prototype.setScorllBodyHeight = function () {
        if (this.showFilterBar) {
            this.height = this.height - 58;
        }
        if (this.fixedHeader) {
            this.scorllBodyHeight = this.height - this.headerBox.nativeElement.clientHeight;
        }
    };
    TreeTableComponent.prototype.resize = function (size) {
        this.width = size.width;
        this.height = size.height;
        this.setScorllBodyHeight();
    };
    TreeTableComponent.prototype.loadData = function (data) {
        this.data = data;
        this.updateSerializedValue();
    };
    TreeTableComponent.prototype.clearSelections = function () {
        this.selections = undefined;
        this.selectedRow = undefined;
        this.ttService.onSelectionChange();
    };
    TreeTableComponent.prototype.select = function (id) {
    };
    TreeTableComponent.prototype.checkedRow = function (id) {
    };
    TreeTableComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'farris-treetable',
                    template: "<div class=\"filter-row\" [style.width]=\"width + 'px'\" *ngIf=\"showFilterBar\"> <form style=\"display: flex; width: 100%;\"> <div class=\"search-fields\"> <select class=\"custom-select\" [(ngModel)]=\"searchData.field\" name=\"field\"> <option value=\"*\">所有列</option> <option *ngFor=\"let col of columns\" value=\"{{col.field}}\">{{ col.title }}</option> </select> </div> <div class=\"search-text flex-fill\"> <div class=\"input-group\"> <input type=\"text\" class=\"form-control\" [(ngModel)]=\"searchData.value\" name=\"value\"> <div class=\"input-group-append\"> <button class=\"btn btn-outline-secondary\" type=\"button\" (click)=\"onSearch()\">查询</button> </div> </div> </div> </form> </div> <div class=\"farris-treetable\" *ngIf=\"!fixedHeader; else scorllview\"> <table class=\"table table-hover table-striped\"> <thead class=\"farris-treetable-thead\"> <ng-container *ngTemplateOutlet=\"headerTemplate; context: {$implicit: columns}\"></ng-container> </thead> <tbody class=\"farris-treetable-tbody\" treeTableBody [columns]=\"columns\" [template]=\"bodyTemplate\"></tbody> </table> </div> <ng-template #scorllview> <div class=\"farris-treetable fixed\" [ngStyle]=\"{height: height +'px', width: width+ 'px'}\"> <div #headerBox class=\"farris-treetable-header\"> <table #headerTable class=\"table table-hover table-striped\"> <colgroup> <col *ngFor=\"let col of columns\" [style.width]=\"col.width + 'px'\" /> </colgroup> <thead class=\"farris-treetable-thead\"> <tr> <th resizable-column *ngFor=\"let col of columns;let i = index;\" [attr.align]=\"col!.align || 'left'\" > <ng-container *ngIf=\"!singleSelect && showCheckAll\"> <tt-header-checkbox [isCheckAll]=\"true\" *ngIf=\"i == 0\"></tt-header-checkbox> </ng-container> {{ col.title }} </th> </tr> </thead> </table> </div> <div class=\"farris-treetable-body\"> <perfect-scrollbar #perfectScrollbar [config]=\"{}\"  [style.height]=\"scorllBodyHeight + 'px'\"> <table #bodyTable class=\"table table-hover table-striped\"> <colgroup> <col *ngFor=\"let col of columns\" [style.width]=\"col.width + 'px'\" /> </colgroup> <tbody class=\"farris-treetable-tbody\" > <ng-template ngFor let-serializedNode let-rowIndex=\"index\" [ngForOf]=\"serializedValue\"> <ng-container *ngIf=\"serializedNode.visible\"> <tr [selectRow]=\"serializedNode\" [rowIndex]=\"\" [dblclick]=\"true\"  > <td *ngFor=\"let col of columns; let i = index\"> <farris-treeTableToggler [rowNode]=\"serializedNode\" *ngIf=\"i == 0\"></farris-treeTableToggler> <span [title]=\"serializedNode.node.data[col.field]\">{{serializedNode.node.data[col.field]}}</span> </td> </tr> </ng-container> </ng-template> </tbody> </table> </perfect-scrollbar> </div> <div #resizerHelper class=\"column-resizer-helper\" *ngIf=\"resizableColumns\"></div> </div> </ng-template>",
                    styles: ["\n    .farris-treetable {\n        position: relative;}\n        .resizable-column {\n            background-clip: padding-box;\n            position: relative;\n        }\n        .column-resizer {\n            display: block;\n            position: absolute!important;\n            top: 0;\n            right: 0;\n            margin: 0;\n            width: .5em;\n            height: 100%;\n            padding: 0;\n            cursor: col-resize;\n            border: 1px solid transparent;\n        }\n        .column-resizer-helper {\n            width: 1px;\n            position: absolute;\n            z-index: 10;\n            display: none;\n            background-color: #007ad9;\n        }\n    "],
                    encapsulation: core_1.ViewEncapsulation.None
                },] },
    ];
    /** @nocollapse */
    TreeTableComponent.ctorParameters = function () { return [
        { type: treetable_service_1.TreetableService, },
        { type: core_1.ElementRef, },
    ]; };
    TreeTableComponent.propDecorators = {
        "width": [{ type: core_1.Input },],
        "height": [{ type: core_1.Input },],
        "showFilterBar": [{ type: core_1.Input },],
        "columns": [{ type: core_1.Input },],
        "singleSelect": [{ type: core_1.Input },],
        "idField": [{ type: core_1.Input },],
        "showIcon": [{ type: core_1.Input },],
        "showBorder": [{ type: core_1.Input },],
        "showCheckAll": [{ type: core_1.Input },],
        "fixedHeader": [{ type: core_1.Input },],
        "checkOnSelect": [{ type: core_1.Input },],
        "selectOnCheck": [{ type: core_1.Input },],
        "resizableColumns": [{ type: core_1.Input },],
        "selectionChange": [{ type: core_1.Output },],
        "nodeSelected": [{ type: core_1.Output },],
        "nodeUnSelect": [{ type: core_1.Output },],
        "nodeChecked": [{ type: core_1.Output },],
        "nodeUnChecked": [{ type: core_1.Output },],
        "selectAll": [{ type: core_1.Output },],
        "search": [{ type: core_1.Output },],
        "dblClick": [{ type: core_1.Output },],
        "data": [{ type: core_1.Input },],
        "templates": [{ type: core_1.ContentChildren, args: [farris_template_directive_1.FarrisTemplateDirective,] },],
        "headerBox": [{ type: core_1.ViewChild, args: ['headerBox',] },],
        "resizerHelperVC": [{ type: core_1.ViewChild, args: ['resizerHelper',] },],
        "headerTable": [{ type: core_1.ViewChild, args: ['headerTable',] },],
        "bodyTable": [{ type: core_1.ViewChild, args: ['bodyTable',] },],
    };
    return TreeTableComponent;
}());
exports.TreeTableComponent = TreeTableComponent;
var TTBodyComponent = /** @class */ (function () {
    function TTBodyComponent(tt) {
        this.tt = tt;
    }
    TTBodyComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: '[treeTableBody]',
                    template: "\n        <ng-template ngFor let-serializedNode let-rowIndex=\"index\" [ngForOf]=\"tt.serializedValue\">\n            <ng-container *ngIf=\"serializedNode.visible\">\n                <ng-container\n                    *ngTemplateOutlet=\"template;\n                        context: {$implicit: serializedNode, node: serializedNode.node,\n                        rowData: serializedNode.node.data, rowIndex: rowIndex, columns: columns}\">\n                </ng-container>\n            </ng-container>\n        </ng-template>\n    "
                },] },
    ];
    /** @nocollapse */
    TTBodyComponent.ctorParameters = function () { return [
        { type: TreeTableComponent, },
    ]; };
    TTBodyComponent.propDecorators = {
        "columns": [{ type: core_1.Input },],
        "template": [{ type: core_1.Input },],
    };
    return TTBodyComponent;
}());
exports.TTBodyComponent = TTBodyComponent;
/**
 * 树节点展开折叠
 */
var TreeTableTogglerComponent = /** @class */ (function () {
    function TreeTableTogglerComponent(tt) {
        this.tt = tt;
    }
    TreeTableTogglerComponent.prototype.onClick = function (event) {
        this.rowNode.node.expanded = !this.rowNode.node.expanded;
        this.tt.updateSerializedValue();
        event.preventDefault();
    };
    TreeTableTogglerComponent.prototype.getTreeIcon = function () {
        return {
            'folder': this.rowNode.node.children && this.rowNode.node.children.length,
            'folder-open': this.rowNode.node.expanded,
            'file': !this.rowNode.node.children || !this.rowNode.node.children.length
        };
    };
    TreeTableTogglerComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'farris-treeTableToggler',
                    template: "\n    <a href=\"#\"\n            [ngClass]=\"rowNode.node.expanded ? 'extanded treetable-toggler': 'treetable-toggler'\"\n            *ngIf=\"rowNode.node.leaf === false || rowNode.level !== 0 ||\n                 rowNode.node.children && rowNode.node.children.length; else topnode\"\n            (click)=\"onClick($event)\"\n            [style.visibility]=\"rowNode.node.leaf === false ||\n                            (rowNode.node.children && rowNode.node.children.length) ? 'visible' : 'hidden'\"\n            [style.marginLeft]=\"rowNode.level * 16 + 'px'\">\n    </a>\n    <ng-template #topnode>\n        <a [style.marginLeft]=\"'20px'\" ></a>\n    </ng-template>\n    <span *ngIf=\"tt.showIcon\" class=\"treenode-icon\" [ngClass]=\"getTreeIcon()\"></span>\n    <tt-checkbox [rowNode]=\"rowNode\" *ngIf=\"!tt.singleSelect\" [disabled]=\"disabled\" [checked]=\"tt.isChecked(rowNode.node)\" ></tt-checkbox>\n    "
                },] },
    ];
    /** @nocollapse */
    TreeTableTogglerComponent.ctorParameters = function () { return [
        { type: TreeTableComponent, },
    ]; };
    TreeTableTogglerComponent.propDecorators = {
        "rowNode": [{ type: core_1.Input },],
        "disabled": [{ type: core_1.Input },],
    };
    return TreeTableTogglerComponent;
}());
exports.TreeTableTogglerComponent = TreeTableTogglerComponent;
/**
 * 选中行组件
 */
var TreeTableSelectRowDirective = /** @class */ (function () {
    function TreeTableSelectRowDirective(tt) {
        var _this = this;
        this.tt = tt;
        this.prevent = false;
        this.delay = 200;
        this.tt.ttService.selectionSource$.subscribe(function () {
            _this.selected = _this.tt.isSelected(_this.rowNode.node);
        });
    }
    TreeTableSelectRowDirective.prototype.ngOnInit = function () {
        if (this.isEnabled()) {
            this.selected = this.tt.isSelected(this.rowNode.node);
        }
    };
    TreeTableSelectRowDirective.prototype.ngOnDestroy = function () {
    };
    TreeTableSelectRowDirective.prototype.onclick = function (event) {
        var _this = this;
        if (this.isEnabled()) {
            this.timer = setTimeout(function () {
                if (!_this.prevent) {
                    _this.tt.handleRowClick({
                        originalEvent: event,
                        rowNode: _this.rowNode,
                        rowIndex: _this.rowIndex
                    });
                }
                _this.prevent = false;
            }, this.delay);
        }
    };
    TreeTableSelectRowDirective.prototype.isEnabled = function () {
        return this.selectRowDisabled !== true;
    };
    TreeTableSelectRowDirective.decorators = [
        { type: core_1.Directive, args: [{
                    selector: '[selectRow]',
                    exportAs: 'row'
                },] },
    ];
    /** @nocollapse */
    TreeTableSelectRowDirective.ctorParameters = function () { return [
        { type: TreeTableComponent, },
    ]; };
    TreeTableSelectRowDirective.propDecorators = {
        "rowNode": [{ type: core_1.Input, args: ['selectRow',] },],
        "rowIndex": [{ type: core_1.Input },],
        "selected": [{ type: core_1.HostBinding, args: ['class.farris-table-selectedrow',] },],
        "selectRowDisabled": [{ type: core_1.Input },],
        "onclick": [{ type: core_1.HostListener, args: ['click', ['$event'],] },],
    };
    return TreeTableSelectRowDirective;
}());
exports.TreeTableSelectRowDirective = TreeTableSelectRowDirective;
/**
 * 表头全选组件
 */
var TreeTableHeaderCheckboxComponent = /** @class */ (function () {
    function TreeTableHeaderCheckboxComponent(tt, ttService) {
        var _this = this;
        this.tt = tt;
        this.ttService = ttService;
        this.isCheckAll = false;
        this.checkedChange = new core_1.EventEmitter();
        this.ttService.selectionSource$.subscribe(function () {
            _this.checked = _this.updateCheckedState();
        });
    }
    TreeTableHeaderCheckboxComponent.prototype.ngOnInit = function () { };
    TreeTableHeaderCheckboxComponent.prototype.handleClick = function (event) {
        if (!this.disabled) {
            // 全选功能
            this.tt.toggleNodesWithCheckbox(event, !this.checked);
        }
    };
    TreeTableHeaderCheckboxComponent.prototype.updateCheckedState = function () {
        var _checked;
        if (this.tt.data && this.tt.data.length) {
            for (var _i = 0, _a = this.tt.data; _i < _a.length; _i++) {
                var node = _a[_i];
                if (this.tt.isChecked(node)) {
                    _checked = true;
                }
                else {
                    _checked = false;
                    break;
                }
            }
        }
        else {
            _checked = false;
        }
        return _checked;
    };
    TreeTableHeaderCheckboxComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'tt-header-checkbox',
                    template: "\n    <div class=\"custom-control custom-checkbox  custom-control-inline tt-checkbox\">\n        <input type=\"checkbox\" class=\"custom-control-input\"  [checked]=\"checked\">\n        <label class=\"custom-control-label\" (click)=\"handleClick($event)\"></label>\n    </div>\n    ",
                    styles: [
                        "\n        :host {\n            vertical-align: middle;\n        }\n        "
                    ]
                },] },
    ];
    /** @nocollapse */
    TreeTableHeaderCheckboxComponent.ctorParameters = function () { return [
        { type: TreeTableComponent, },
        { type: treetable_service_1.TreetableService, },
    ]; };
    TreeTableHeaderCheckboxComponent.propDecorators = {
        "checked": [{ type: core_1.Input },],
        "disabled": [{ type: core_1.Input },],
        "isCheckAll": [{ type: core_1.Input },],
        "checkedChange": [{ type: core_1.Output },],
    };
    return TreeTableHeaderCheckboxComponent;
}());
exports.TreeTableHeaderCheckboxComponent = TreeTableHeaderCheckboxComponent;
/**
 * 表体checkbox 组件
 */
var TreeTableCheckboxComponent = /** @class */ (function () {
    function TreeTableCheckboxComponent(tt, ttService) {
        var _this = this;
        this.tt = tt;
        this.ttService = ttService;
        this.checkedChange = new core_1.EventEmitter();
        this.ttService.selectionSource$.subscribe(function () {
            _this.checked = _this.tt.isChecked(_this.rowNode.node);
        });
    }
    TreeTableCheckboxComponent.prototype.ngOnInit = function () { };
    TreeTableCheckboxComponent.prototype.handleClick = function (event) {
        if (!this.disabled) {
            this.tt.toggleNodeWithCheckbox(event, this.rowNode);
        }
    };
    TreeTableCheckboxComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'tt-checkbox',
                    template: "\n    <div class=\"custom-control custom-checkbox  custom-control-inline tt-checkbox\">\n        <input type=\"checkbox\" class=\"custom-control-input\" [disabled]=\"disabled\" [checked]=\"checked\">\n        <label class=\"custom-control-label\" (click)=\"handleClick($event)\"></label>\n    </div>\n    ",
                    styles: [
                        "\n        :host {\n            vertical-align: middle;\n        }\n        :host .custom-checkbox {\n            opacity: 1;\n            float: none;\n        }\n        "
                    ]
                },] },
    ];
    /** @nocollapse */
    TreeTableCheckboxComponent.ctorParameters = function () { return [
        { type: TreeTableComponent, },
        { type: treetable_service_1.TreetableService, },
    ]; };
    TreeTableCheckboxComponent.propDecorators = {
        "checked": [{ type: core_1.Input },],
        "disabled": [{ type: core_1.Input },],
        "rowNode": [{ type: core_1.Input },],
        "checkedChange": [{ type: core_1.Output },],
    };
    return TreeTableCheckboxComponent;
}());
exports.TreeTableCheckboxComponent = TreeTableCheckboxComponent;
var DblClickRowDirective = /** @class */ (function () {
    function DblClickRowDirective(tt, el, ttService, selectRowDir) {
        this.tt = tt;
        this.el = el;
        this.ttService = ttService;
        this.selectRowDir = selectRowDir;
        this.enableDblClick = false;
    }
    DblClickRowDirective.prototype.ngOnInit = function () {
    };
    DblClickRowDirective.prototype.ondblclick = function (event) {
        if (this.selectRowDir) {
            clearTimeout(this.selectRowDir.timer);
            if (this.selectRowDir.rowNode && this.enableDblClick) {
                this.selectRowDir.prevent = true;
                this.tt.toggleExpand(this.selectRowDir.rowNode.node);
                this.tt.dblClick.emit(this.selectRowDir.rowNode.node);
            }
        }
    };
    DblClickRowDirective.decorators = [
        { type: core_1.Directive, args: [{
                    selector: '[dblclick]'
                },] },
    ];
    /** @nocollapse */
    DblClickRowDirective.ctorParameters = function () { return [
        { type: TreeTableComponent, },
        { type: core_1.ElementRef, },
        { type: treetable_service_1.TreetableService, },
        { type: TreeTableSelectRowDirective, decorators: [{ type: core_1.Optional }, { type: core_1.Self },] },
    ]; };
    DblClickRowDirective.propDecorators = {
        "enableDblClick": [{ type: core_1.Input, args: ['dblclick',] },],
        "ondblclick": [{ type: core_1.HostListener, args: ['dblclick', ['$event'],] },],
    };
    return DblClickRowDirective;
}());
exports.DblClickRowDirective = DblClickRowDirective;
var TTResizableColumnDirective = /** @class */ (function () {
    function TTResizableColumnDirective(tt, ngzone, el, render) {
        this.tt = tt;
        this.ngzone = ngzone;
        this.el = el;
        this.render = render;
    }
    TTResizableColumnDirective.prototype.ngAfterViewInit = function () {
        var _this = this;
        if (this.isEnable()) {
            this.render.addClass(this.el.nativeElement, 'resizable-column');
            this.resizer = document.createElement('span');
            this.resizer.className = 'column-resizer';
            this.el.nativeElement.appendChild(this.resizer);
            this.ngzone.runOutsideAngular(function () {
                _this.resizerMouseDownListener = _this.onMouseDown.bind(_this);
                _this.resizer.addEventListener('mousedown', _this.resizerMouseDownListener);
            });
        }
    };
    TTResizableColumnDirective.prototype.isEnable = function () {
        return this.tt.resizableColumns;
    };
    TTResizableColumnDirective.prototype.bindDocumentEvents = function () {
        var _this = this;
        this.ngzone.runOutsideAngular(function () {
            _this.documentMouseMoveListener = _this.onMouseMove.bind(_this);
            document.addEventListener('mousemove', _this.documentMouseMoveListener);
            _this.documentMouseUpListener = _this.onMouseUp.bind(_this);
            document.addEventListener('mouseup', _this.documentMouseUpListener);
        });
    };
    TTResizableColumnDirective.prototype.unbindDocumentEvents = function () {
        if (this.documentMouseMoveListener) {
            document.removeEventListener('mousemove', this.documentMouseMoveListener);
            this.documentMouseMoveListener = null;
        }
        if (this.documentMouseUpListener) {
            document.removeEventListener('mouseup', this.documentMouseUpListener);
            this.documentMouseUpListener = null;
        }
    };
    TTResizableColumnDirective.prototype.onMouseDown = function (event) {
        this.tt.onColumnResizeBegin(event);
        this.bindDocumentEvents();
    };
    TTResizableColumnDirective.prototype.onMouseMove = function (event) {
        this.tt.onColumnResize(event);
    };
    TTResizableColumnDirective.prototype.onMouseUp = function (event) {
        this.tt.onColumnResizeEnd(event, this.el.nativeElement);
        this.unbindDocumentEvents();
    };
    TTResizableColumnDirective.prototype.ngOnDestroy = function () {
        if (this.resizerMouseDownListener) {
            this.resizer.removeEventListener('mousedown', this.resizerMouseDownListener);
        }
        this.unbindDocumentEvents();
    };
    TTResizableColumnDirective.decorators = [
        { type: core_1.Directive, args: [{
                    selector: '[resizable-column]'
                },] },
    ];
    /** @nocollapse */
    TTResizableColumnDirective.ctorParameters = function () { return [
        { type: TreeTableComponent, },
        { type: core_1.NgZone, },
        { type: core_1.ElementRef, },
        { type: core_1.Renderer2, },
    ]; };
    return TTResizableColumnDirective;
}());
exports.TTResizableColumnDirective = TTResizableColumnDirective;
//# sourceMappingURL=treetable.component.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/data/treetable/treetable.module.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/esm5/common.js");
var treetable_service_1 = __webpack_require__("./node_modules/@farris/ui/data/treetable/treetable.service.js");
var treetable_component_1 = __webpack_require__("./node_modules/@farris/ui/data/treetable/treetable.component.js");
var perfect_scorll_1 = __webpack_require__("./node_modules/@farris/ui/perfect-scorll/index.js");
var common_2 = __webpack_require__("./node_modules/@farris/ui/common/index.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/esm5/forms.js");
var TreeTableModule = /** @class */ (function () {
    function TreeTableModule() {
    }
    TreeTableModule.decorators = [
        { type: core_1.NgModule, args: [{
                    imports: [
                        common_1.CommonModule,
                        forms_1.FormsModule,
                        common_2.FarrisCommonModule,
                        perfect_scorll_1.PerfectScrollbarModule
                    ],
                    declarations: [
                        treetable_component_1.TreeTableComponent,
                        treetable_component_1.TTBodyComponent,
                        treetable_component_1.TreeTableTogglerComponent,
                        treetable_component_1.TreeTableSelectRowDirective,
                        treetable_component_1.TreeTableCheckboxComponent,
                        treetable_component_1.TreeTableHeaderCheckboxComponent,
                        treetable_component_1.DblClickRowDirective,
                        treetable_component_1.TTResizableColumnDirective
                    ],
                    exports: [
                        treetable_component_1.TreeTableComponent,
                        treetable_component_1.TTBodyComponent,
                        treetable_component_1.TreeTableTogglerComponent,
                        treetable_component_1.TreeTableSelectRowDirective,
                        treetable_component_1.TreeTableCheckboxComponent,
                        treetable_component_1.TreeTableHeaderCheckboxComponent,
                        treetable_component_1.DblClickRowDirective,
                        treetable_component_1.TTResizableColumnDirective,
                        common_2.FarrisCommonModule
                    ],
                    providers: [
                        treetable_service_1.TreetableService
                    ]
                },] },
    ];
    return TreeTableModule;
}());
exports.TreeTableModule = TreeTableModule;
//# sourceMappingURL=treetable.module.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/data/treetable/treetable.service.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var Subject_1 = __webpack_require__("./node_modules/rxjs/Subject.js");
var TreetableService = /** @class */ (function () {
    function TreetableService() {
        this.selectionSource = new Subject_1.Subject();
        this.dblClickSource = new Subject_1.Subject();
        this.selectionSource$ = this.selectionSource.asObservable();
        this.dblClickSource$ = this.dblClickSource.asObservable();
    }
    TreetableService.prototype.onSelectionChange = function () {
        this.selectionSource.next();
    };
    TreetableService.prototype.onDblClick = function (rowNode) {
        this.dblClickSource.next(rowNode);
    };
    TreetableService.decorators = [
        { type: core_1.Injectable },
    ];
    return TreetableService;
}());
exports.TreetableService = TreetableService;
//# sourceMappingURL=treetable.service.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/draggable/AngularDraggableModule.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var angular_draggable_directive_1 = __webpack_require__("./node_modules/@farris/ui/draggable/angular-draggable.directive.js");
var angular_resizeable_directive_1 = __webpack_require__("./node_modules/@farris/ui/draggable/angular-resizeable.directive.js");
var AngularDraggableModule = /** @class */ (function () {
    function AngularDraggableModule() {
    }
    AngularDraggableModule.decorators = [
        { type: core_1.NgModule, args: [{
                    imports: [],
                    declarations: [
                        angular_draggable_directive_1.AngularDraggableDirective,
                        angular_resizeable_directive_1.AngularResizableDirective
                    ],
                    exports: [
                        angular_draggable_directive_1.AngularDraggableDirective,
                        angular_resizeable_directive_1.AngularResizableDirective
                    ]
                },] },
    ];
    return AngularDraggableModule;
}());
exports.AngularDraggableModule = AngularDraggableModule;
//# sourceMappingURL=AngularDraggableModule.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/draggable/angular-draggable.directive.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var position_1 = __webpack_require__("./node_modules/@farris/ui/draggable/models/position.js");
var AngularDraggableDirective = /** @class */ (function () {
    function AngularDraggableDirective(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.allowDrag = true;
        this.moving = false;
        this.orignal = null;
        this.oldTrans = new position_1.Position(0, 0);
        this.tempTrans = new position_1.Position(0, 0);
        this.oldZIndex = '';
        this.oldPosition = '';
        this._zIndex = '';
        this.needTransform = false;
        this.started = new core_1.EventEmitter();
        this.stopped = new core_1.EventEmitter();
        this.edge = new core_1.EventEmitter();
        /** List of allowed out of bounds edges **/
        this.outOfBounds = {
            top: false,
            right: false,
            bottom: false,
            left: false
        };
        /** Round the position to nearest grid */
        this.gridSize = 1;
        /** Whether to limit the element stay in the bounds */
        this.inBounds = false;
        /** Whether the element should use it's previous drag position on a new drag event. */
        this.trackPosition = true;
        /** Input css scale transform of element so translations are correct */
        this.scale = 1;
        /** Whether to prevent default event */
        this.preventDefaultEvent = false;
        /** Set initial position by offsets */
        this.position = { x: 0, y: 0 };
        this.maxWidth = 0;
        this.maxHeight = 0;
        this.minWidth = 0;
        this.minHeight = 0;
        /** Emit position offsets when moving */
        this.movingOffset = new core_1.EventEmitter();
        /** Emit position offsets when put back */
        this.endOffset = new core_1.EventEmitter();
    }
    Object.defineProperty(AngularDraggableDirective.prototype, "zIndex", {
        set: /** Set z-index when not dragging */
        function (setting) {
            this.renderer.setStyle(this.el.nativeElement, 'z-index', setting);
            this._zIndex = setting;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AngularDraggableDirective.prototype, "ngDraggable", {
        set: function (setting) {
            if (setting !== undefined && setting !== null && setting !== '') {
                this.allowDrag = !!setting;
                var element = this.handle ? this.handle : this.el.nativeElement;
                if (this.allowDrag) {
                    this.renderer.addClass(element, 'ng-draggable');
                }
                else {
                    this.renderer.removeClass(element, 'ng-draggable');
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    AngularDraggableDirective.prototype.ngOnInit = function () {
        if (this.allowDrag) {
            var element = this.handle ? this.handle : this.el.nativeElement;
            this.renderer.addClass(element, 'ng-draggable');
        }
        this.resetPosition();
    };
    AngularDraggableDirective.prototype.ngOnChanges = function (changes) {
        if (changes['position'] && !changes['position'].isFirstChange()) {
            var p = changes['position'].currentValue;
            if (!this.moving) {
                if (position_1.Position.isIPosition(p)) {
                    this.oldTrans.set(p);
                }
                else {
                    this.oldTrans.reset();
                }
                this.transform();
            }
            else {
                this.needTransform = true;
            }
        }
    };
    AngularDraggableDirective.prototype.resetPosition = function () {
        if (position_1.Position.isIPosition(this.position)) {
            this.oldTrans.set(this.position);
        }
        else {
            this.oldTrans.reset();
        }
        this.tempTrans.reset();
        this.transform();
    };
    AngularDraggableDirective.prototype.moveTo = function (p) {
        if (this.orignal) {
            p.subtract(this.orignal);
            this.tempTrans.set(p);
            this.transform();
            if (this.bounds) {
                this.edge.emit(this.boundsCheck());
            }
            this.movingOffset.emit({
                x: this.tempTrans.x + this.oldTrans.x,
                y: this.tempTrans.y + this.oldTrans.y
            });
        }
    };
    AngularDraggableDirective.prototype.transform = function () {
        var translateX = this.tempTrans.x + this.oldTrans.x;
        var translateY = this.tempTrans.y + this.oldTrans.y;
        // Snap to grid: by grid size
        if (this.gridSize > 1) {
            translateX = Math.round(translateX / this.gridSize) * this.gridSize;
            translateY = Math.round(translateY / this.gridSize) * this.gridSize;
        }
        var value = "translate(" + translateX + "px, " + translateY + "px)";
        if (this.scale !== 1) {
            value += " scale(" + this.scale + ")";
        }
        this.renderer.setStyle(this.el.nativeElement, 'transform', value);
        this.renderer.setStyle(this.el.nativeElement, '-webkit-transform', value);
        this.renderer.setStyle(this.el.nativeElement, '-ms-transform', value);
        this.renderer.setStyle(this.el.nativeElement, '-moz-transform', value);
        this.renderer.setStyle(this.el.nativeElement, '-o-transform', value);
    };
    AngularDraggableDirective.prototype.pickUp = function () {
        // get old z-index:
        this.oldZIndex = this.el.nativeElement.style.zIndex
            ? this.el.nativeElement.style.zIndex
            : '';
        if (window) {
            this.oldZIndex = window
                .getComputedStyle(this.el.nativeElement, null)
                .getPropertyValue('z-index');
        }
        if (this.zIndexMoving) {
            this.renderer.setStyle(this.el.nativeElement, 'z-index', this.zIndexMoving);
        }
        if (!this.moving && this.allowDrag) {
            this.started.emit(this.el.nativeElement);
            this.moving = true;
        }
    };
    AngularDraggableDirective.prototype.boundsCheck = function () {
        if (this.bounds) {
            var boundary = this.bounds.getBoundingClientRect();
            var elem = this.el.nativeElement.getBoundingClientRect();
            var r = boundary.right, l = boundary.left;
            var t = boundary.top, b = boundary.bottom;
            if (this.region) {
                switch (this.region) {
                    case 'west':
                        r = r - (this.bounds.clientWidth - this.maxWidth);
                        l = l + this.minWidth;
                        break;
                    case 'east':
                        r = r - this.minWidth;
                        l = l + (this.bounds.clientWidth - this.maxWidth);
                        break;
                }
            }
            if (this.minHeight) {
                t = t + this.minHeight;
            }
            if (this.maxHeight) {
                b = b - (this.bounds.clientHeight - this.maxHeight);
            }
            var result = {
                top: this.outOfBounds.top ? true : t < elem.top,
                right: this.outOfBounds.right ? true : r > elem.right,
                bottom: this.outOfBounds.bottom ? true : b > elem.bottom,
                left: this.outOfBounds.left ? true : l < elem.left
            };
            if (this.inBounds) {
                if (!result.top) {
                    this.tempTrans.y -= elem.top - t;
                }
                if (!result.bottom) {
                    this.tempTrans.y -= elem.bottom - b;
                }
                if (!result.right) {
                    this.tempTrans.x -= elem.right - r;
                }
                if (!result.left) {
                    this.tempTrans.x -= elem.left - l;
                }
                this.transform();
            }
            return result;
        }
    };
    AngularDraggableDirective.prototype.putBack = function () {
        if (this._zIndex) {
            this.renderer.setStyle(this.el.nativeElement, 'z-index', this._zIndex);
        }
        else if (this.zIndexMoving) {
            if (this.oldZIndex) {
                this.renderer.setStyle(this.el.nativeElement, 'z-index', this.oldZIndex);
            }
            else {
                this.el.nativeElement.style.removeProperty('z-index');
            }
        }
        if (this.moving) {
            if (this.needTransform) {
                if (position_1.Position.isIPosition(this.position)) {
                    this.oldTrans.set(this.position);
                }
                else {
                    this.oldTrans.reset();
                }
                this.transform();
                this.needTransform = false;
            }
            if (this.bounds) {
                this.edge.emit(this.boundsCheck());
            }
            this.moving = false;
            this.endOffset.emit({
                x: this.tempTrans.x + this.oldTrans.x,
                y: this.tempTrans.y + this.oldTrans.y
            });
            if (this.trackPosition) {
                this.oldTrans.add(this.tempTrans);
            }
            this.tempTrans.reset();
            if (!this.trackPosition) {
                this.transform();
            }
            this.stopped.emit(this.el.nativeElement);
        }
    };
    AngularDraggableDirective.prototype.checkHandleTarget = function (target, element) {
        // Checks if the target is the element clicked, then checks each child element of element as well
        // Ignores button clicks
        // Ignore elements of type button
        if (element.tagName === 'BUTTON') {
            return false;
        }
        // If the target was found, return true (handle was found)
        if (element === target) {
            return true;
        }
        // Recursively iterate this elements children
        for (var child in element.children) {
            if (element.children.hasOwnProperty(child)) {
                if (this.checkHandleTarget(target, element.children[child])) {
                    return true;
                }
            }
        }
        // Handle was not found in this lineage
        // Note: return false is ignore unless it is the parent element
        return false;
    };
    AngularDraggableDirective.prototype.onMouseDown = function (event) {
        // 1. skip right click;
        if (event instanceof MouseEvent && event.button === 2) {
            return;
        }
        // 2. if handle is set, the element can only be moved by handle
        var target = event.target || event.srcElement;
        if (this.handle !== undefined &&
            !this.checkHandleTarget(target, this.handle)) {
            return;
        }
        if (this.preventDefaultEvent) {
            event.stopPropagation();
            event.preventDefault();
        }
        this.orignal = position_1.Position.fromEvent(event);
        this.pickUp();
        this.renderer.setStyle(this.el.nativeElement, 'background', '#495057');
    };
    AngularDraggableDirective.prototype.onMouseLeave = function (event) {
        this.putBack();
        this.renderer.removeStyle(this.el.nativeElement, 'background');
    };
    AngularDraggableDirective.prototype.onMouseMove = function (event) {
        if (this.moving && this.allowDrag) {
            if (this.preventDefaultEvent) {
                event.stopPropagation();
                event.preventDefault();
            }
            this.moveTo(position_1.Position.fromEvent(event));
        }
    };
    AngularDraggableDirective.decorators = [
        { type: core_1.Directive, args: [{
                    selector: '[ngDraggable]',
                    exportAs: 'ngDraggable'
                },] },
    ];
    /** @nocollapse */
    AngularDraggableDirective.ctorParameters = function () { return [
        { type: core_1.ElementRef, },
        { type: core_1.Renderer2, },
    ]; };
    AngularDraggableDirective.propDecorators = {
        "started": [{ type: core_1.Output },],
        "stopped": [{ type: core_1.Output },],
        "edge": [{ type: core_1.Output },],
        "handle": [{ type: core_1.Input },],
        "bounds": [{ type: core_1.Input },],
        "outOfBounds": [{ type: core_1.Input },],
        "gridSize": [{ type: core_1.Input },],
        "zIndexMoving": [{ type: core_1.Input },],
        "zIndex": [{ type: core_1.Input },],
        "inBounds": [{ type: core_1.Input },],
        "trackPosition": [{ type: core_1.Input },],
        "scale": [{ type: core_1.Input },],
        "preventDefaultEvent": [{ type: core_1.Input },],
        "position": [{ type: core_1.Input },],
        "maxWidth": [{ type: core_1.Input },],
        "maxHeight": [{ type: core_1.Input },],
        "minWidth": [{ type: core_1.Input },],
        "minHeight": [{ type: core_1.Input },],
        "region": [{ type: core_1.Input },],
        "movingOffset": [{ type: core_1.Output },],
        "endOffset": [{ type: core_1.Output },],
        "ngDraggable": [{ type: core_1.Input },],
        "onMouseDown": [{ type: core_1.HostListener, args: ['mousedown', ['$event'],] }, { type: core_1.HostListener, args: ['touchstart', ['$event'],] },],
        "onMouseLeave": [{ type: core_1.HostListener, args: ['document:mouseup', ['$event'],] }, { type: core_1.HostListener, args: ['document:mouseleave', ['$event'],] }, { type: core_1.HostListener, args: ['document:touchend', ['$event'],] }, { type: core_1.HostListener, args: ['document:touchcancel', ['$event'],] },],
        "onMouseMove": [{ type: core_1.HostListener, args: ['document:mousemove', ['$event'],] }, { type: core_1.HostListener, args: ['document:touchmove', ['$event'],] },],
    };
    return AngularDraggableDirective;
}());
exports.AngularDraggableDirective = AngularDraggableDirective;
//# sourceMappingURL=angular-draggable.directive.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/draggable/angular-resizeable.directive.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var resize_handle_1 = __webpack_require__("./node_modules/@farris/ui/draggable/widgets/resize-handle.js");
var position_1 = __webpack_require__("./node_modules/@farris/ui/draggable/models/position.js");
var size_1 = __webpack_require__("./node_modules/@farris/ui/draggable/models/size.js");
var AngularResizableDirective = /** @class */ (function () {
    function AngularResizableDirective(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this._resizable = true;
        this._handles = {};
        this._handleType = [];
        this._handleResizing = null;
        this._origMousePos = null;
        /** Original Size and Position */
        this._origSize = null;
        this._origPos = null;
        /** Current Size and Position */
        this._currSize = null;
        this._currPos = null;
        /** Initial Size and Position */
        this._initSize = null;
        this._initPos = null;
        /**
             * Which handles can be used for resizing.
             * @example
             * [rzHandles] = ''n,e,s,w,se,ne,sw,nw''
             * equals to: [rzHandles] = ''all''
             *
             * */
        this.rzHandles = 'e,s,se';
        /** emitted when start resizing */
        this.rzStart = new core_1.EventEmitter();
        /** emitted when start resizing */
        this.rzResizing = new core_1.EventEmitter();
        /** emitted when stop resizing */
        this.rzStop = new core_1.EventEmitter();
    }
    Object.defineProperty(AngularResizableDirective.prototype, "ngResizable", {
        set: /** Disables the resizable if set to false. */
        function (v) {
            if (v !== undefined && v !== null && v !== '') {
                this._resizable = !!v;
                this.updateResizable();
            }
        },
        enumerable: true,
        configurable: true
    });
    AngularResizableDirective.prototype.ngOnChanges = function (changes) {
        if (changes['rzHandles'] && !changes['rzHandles'].isFirstChange()) {
            this.updateResizable();
        }
    };
    AngularResizableDirective.prototype.ngOnInit = function () {
        this.updateResizable();
    };
    AngularResizableDirective.prototype.ngOnDestroy = function () {
        this.removeHandles();
    };
    AngularResizableDirective.prototype.ngAfterViewInit = function () {
        var elm = this.el.nativeElement;
        this._initSize = size_1.Size.getCurrent(elm);
        this._initPos = position_1.Position.getCurrent(elm);
        this._currSize = size_1.Size.copy(this._initSize);
        this._currPos = position_1.Position.copy(this._initPos);
    };
    /** A method to reset size */
    /** A method to reset size */
    AngularResizableDirective.prototype.resetSize = /** A method to reset size */
    function () {
        this._currSize = size_1.Size.copy(this._initSize);
        this._currPos = position_1.Position.copy(this._initPos);
        this.doResize();
    };
    /** A method to reset size */
    /** A method to reset size */
    AngularResizableDirective.prototype.getStatus = /** A method to reset size */
    function () {
        if (!this._currPos || !this._currSize) {
            return null;
        }
        return {
            size: {
                width: this._currSize.width,
                height: this._currSize.height
            },
            position: {
                top: this._currPos.y,
                left: this._currPos.x
            }
        };
    };
    AngularResizableDirective.prototype.updateResizable = function () {
        var element = this.el.nativeElement;
        // clear handles:
        this.renderer.removeClass(element, 'ng-resizable');
        this.removeHandles();
        // create new ones:
        if (this._resizable) {
            this.renderer.addClass(element, 'ng-resizable');
            this.createHandles();
        }
    };
    /** Use it to create handle divs */
    /** Use it to create handle divs */
    AngularResizableDirective.prototype.createHandles = /** Use it to create handle divs */
    function () {
        if (!this.rzHandles) {
            return;
        }
        var tmpHandleTypes;
        if (typeof this.rzHandles === 'string') {
            if (this.rzHandles === 'all') {
                tmpHandleTypes = ['n', 'e', 's', 'w', 'ne', 'se', 'nw', 'sw'];
            }
            else {
                tmpHandleTypes = this.rzHandles
                    .replace(/ /g, '')
                    .toLowerCase()
                    .split(',');
            }
            for (var _i = 0, tmpHandleTypes_1 = tmpHandleTypes; _i < tmpHandleTypes_1.length; _i++) {
                var type = tmpHandleTypes_1[_i];
                // default handle theme: ng-resizable-$type.
                var handle = this.createHandleByType(type, "ng-resizable-" + type);
                if (handle) {
                    this._handleType.push(type);
                    this._handles[type] = handle;
                }
            }
        }
        else {
            tmpHandleTypes = Object.keys(this.rzHandles);
            for (var _a = 0, tmpHandleTypes_2 = tmpHandleTypes; _a < tmpHandleTypes_2.length; _a++) {
                var type = tmpHandleTypes_2[_a];
                // custom handle theme.
                var handle = this.createHandleByType(type, this.rzHandles[type]);
                if (handle) {
                    this._handleType.push(type);
                    this._handles[type] = handle;
                }
            }
        }
    };
    /** Use it to create a handle */
    /** Use it to create a handle */
    AngularResizableDirective.prototype.createHandleByType = /** Use it to create a handle */
    function (type, css) {
        var _el = this.el.nativeElement;
        if (!type.match(/^(se|sw|ne|nw|n|e|s|w)$/)) {
            console.error('Invalid handle type:', type);
            return null;
        }
        return new resize_handle_1.ResizeHandle(_el, this.renderer, type, css, this.onMouseDown.bind(this));
    };
    AngularResizableDirective.prototype.removeHandles = function () {
        for (var _i = 0, _a = this._handleType; _i < _a.length; _i++) {
            var type = _a[_i];
            this._handles[type].dispose();
        }
        this._handleType = [];
        this._handles = {};
    };
    AngularResizableDirective.prototype.onMouseDown = function (event, handle) {
        // skip right click;
        if (event instanceof MouseEvent && event.button === 2) {
            return;
        }
        // prevent default events
        event.stopPropagation();
        event.preventDefault();
        if (!this._handleResizing) {
            var elm = this.el.nativeElement;
            this._origMousePos = position_1.Position.fromEvent(event);
            this._origSize = size_1.Size.getCurrent(elm);
            this._origPos = position_1.Position.getCurrent(elm); // x: left, y: top
            this._currSize = size_1.Size.copy(this._origSize);
            this._currPos = position_1.Position.copy(this._origPos);
            this.startResize(handle);
        }
    };
    AngularResizableDirective.prototype.onMouseLeave = function () {
        if (this._handleResizing) {
            this.stopResize();
            this._origMousePos = null;
            this._origSize = null;
            this._origPos = null;
        }
    };
    AngularResizableDirective.prototype.onMouseMove = function (event) {
        if (this._handleResizing &&
            this._resizable &&
            this._origMousePos &&
            this._origPos &&
            this._origSize) {
            this.resizeTo(position_1.Position.fromEvent(event));
            this.onResizing();
        }
    };
    AngularResizableDirective.prototype.startResize = function (handle) {
        this._handleResizing = handle;
        this.rzStart.emit(this.getResizingEvent());
    };
    AngularResizableDirective.prototype.stopResize = function () {
        this.rzStop.emit(this.getResizingEvent());
        this._handleResizing = null;
    };
    AngularResizableDirective.prototype.onResizing = function () {
        this.rzResizing.emit(this.getResizingEvent());
    };
    AngularResizableDirective.prototype.getResizingEvent = function () {
        return {
            host: this.el.nativeElement,
            handle: this._handleResizing ? this._handleResizing.el : null,
            size: {
                width: this._currSize.width,
                height: this._currSize.height
            },
            position: {
                top: this._currPos.y,
                left: this._currPos.x
            }
        };
    };
    AngularResizableDirective.prototype.resizeTo = function (p) {
        p.subtract(this._origMousePos);
        if (this._handleResizing.type.match(/n/)) {
            // n, ne, nw
            this._currSize.height = this._origSize.height - p.y;
            this._currPos.y = this._origPos.y + p.y;
        }
        else if (this._handleResizing.type.match(/s/)) {
            // s, se, sw
            this._currSize.height = this._origSize.height + p.y;
        }
        if (this._handleResizing.type.match(/e/)) {
            // e, ne, se
            this._currSize.width = this._origSize.width + p.x;
        }
        else if (this._handleResizing.type.match(/w/)) {
            // w, nw, sw
            this._currSize.width = this._origSize.width - p.x;
            this._currPos.x = this._origPos.x + p.x;
        }
        this.doResize();
    };
    AngularResizableDirective.prototype.doResize = function () {
        var container = this.el.nativeElement;
        this.renderer.setStyle(container, 'height', this._currSize.height + 'px');
        this.renderer.setStyle(container, 'width', this._currSize.width + 'px');
        this.renderer.setStyle(container, 'left', this._currPos.x + 'px');
        this.renderer.setStyle(container, 'top', this._currPos.y + 'px');
    };
    AngularResizableDirective.decorators = [
        { type: core_1.Directive, args: [{
                    selector: '[ngResizable]',
                    exportAs: 'ngResizable'
                },] },
    ];
    /** @nocollapse */
    AngularResizableDirective.ctorParameters = function () { return [
        { type: core_1.ElementRef, },
        { type: core_1.Renderer2, },
    ]; };
    AngularResizableDirective.propDecorators = {
        "ngResizable": [{ type: core_1.Input },],
        "rzHandles": [{ type: core_1.Input },],
        "rzStart": [{ type: core_1.Output },],
        "rzResizing": [{ type: core_1.Output },],
        "rzStop": [{ type: core_1.Output },],
        "onMouseLeave": [{ type: core_1.HostListener, args: ['document:mouseup',] }, { type: core_1.HostListener, args: ['document:mouseleave',] }, { type: core_1.HostListener, args: ['document:touchend',] }, { type: core_1.HostListener, args: ['document:touchcancel',] },],
        "onMouseMove": [{ type: core_1.HostListener, args: ['document:mousemove', ['$event'],] }, { type: core_1.HostListener, args: ['document:touchmove', ['$event'],] },],
    };
    return AngularResizableDirective;
}());
exports.AngularResizableDirective = AngularResizableDirective;
//# sourceMappingURL=angular-resizeable.directive.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/draggable/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__("./node_modules/@farris/ui/draggable/angular-draggable.directive.js"));
__export(__webpack_require__("./node_modules/@farris/ui/draggable/angular-resizeable.directive.js"));
__export(__webpack_require__("./node_modules/@farris/ui/draggable/AngularDraggableModule.js"));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/draggable/models/position.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Position = /** @class */ (function () {
    function Position(x, y) {
        this.x = x;
        this.y = y;
    }
    Position.fromEvent = function (e) {
        if (e instanceof MouseEvent) {
            return new Position(e.clientX, e.clientY);
        }
        else {
            return new Position(e.changedTouches[0].clientX, e.changedTouches[0].clientY);
        }
    };
    Position.isIPosition = function (obj) {
        return !!obj && ('x' in obj) && ('y' in obj);
    };
    Position.getCurrent = function (el) {
        var pos = new Position(0, 0);
        if (window) {
            var computed = window.getComputedStyle(el);
            if (computed) {
                pos.x = parseInt(computed.getPropertyValue('left'), 10);
                pos.y = parseInt(computed.getPropertyValue('top'), 10);
            }
            return pos;
        }
        else {
            console.error('Not Supported!');
            return null;
        }
    };
    Position.copy = function (p) {
        return new Position(0, 0).set(p);
    };
    Position.prototype.add = function (p) {
        this.x += p.x;
        this.y += p.y;
        return this;
    };
    Position.prototype.subtract = function (p) {
        this.x -= p.x;
        this.y -= p.y;
        return this;
    };
    Position.prototype.reset = function () {
        this.x = 0;
        this.y = 0;
        return this;
    };
    Position.prototype.set = function (p) {
        this.x = p.x;
        this.y = p.y;
        return this;
    };
    return Position;
}());
exports.Position = Position;
//# sourceMappingURL=position.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/draggable/models/size.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Size = /** @class */ (function () {
    function Size(width, height) {
        this.width = width;
        this.height = height;
    }
    Size.getCurrent = function (el) {
        var size = new Size(0, 0);
        if (window) {
            var computed = window.getComputedStyle(el);
            if (computed) {
                size.width = parseInt(computed.getPropertyValue('width'), 10);
                size.height = parseInt(computed.getPropertyValue('height'), 10);
            }
            return size;
        }
        else {
            console.error('Not Supported!');
            return null;
        }
    };
    Size.copy = function (s) {
        return new Size(0, 0).set(s);
    };
    Size.prototype.set = function (s) {
        this.width = s.width;
        this.height = s.height;
        return this;
    };
    return Size;
}());
exports.Size = Size;
//# sourceMappingURL=size.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/draggable/widgets/resize-handle.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ResizeHandle = /** @class */ (function () {
    function ResizeHandle(parent, renderer, type, css, onMouseDown) {
        var _this = this;
        this.parent = parent;
        this.renderer = renderer;
        this.type = type;
        this.css = css;
        this.onMouseDown = onMouseDown;
        // generate handle div
        var handle = renderer.createElement('div');
        renderer.addClass(handle, 'ng-resizable-handle');
        renderer.addClass(handle, css);
        // add default diagonal for se handle
        if (type === 'se') {
            renderer.addClass(handle, 'ng-resizable-diagonal');
        }
        // append div to parent
        if (this.parent) {
            parent.appendChild(handle);
        }
        // create and register event listener
        this._onResize = function (event) {
            onMouseDown(event, _this);
        };
        handle.addEventListener('mousedown', this._onResize);
        handle.addEventListener('touchstart', this._onResize);
        // done
        this._handle = handle;
    }
    ResizeHandle.prototype.dispose = function () {
        this._handle.removeEventListener('mousedown', this._onResize);
        this._handle.removeEventListener('touchstart', this._onResize);
        if (this.parent) {
            this.parent.removeChild(this._handle);
        }
        this._handle = null;
        this._onResize = null;
    };
    Object.defineProperty(ResizeHandle.prototype, "el", {
        get: function () {
            return this._handle;
        },
        enumerable: true,
        configurable: true
    });
    return ResizeHandle;
}());
exports.ResizeHandle = ResizeHandle;
//# sourceMappingURL=resize-handle.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/field-group/col/col.component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var ColComponent = /** @class */ (function () {
    function ColComponent() {
    }
    ColComponent.prototype.ngOnInit = function () {
    };
    ColComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'farris-col',
                    template: "<ng-content></ng-content> ",
                    styles: [""],
                    // tslint:disable-next-line:use-host-property-decorator
                    host: {
                        class: 'col-md'
                    }
                },] },
    ];
    /** @nocollapse */
    ColComponent.ctorParameters = function () { return []; };
    return ColComponent;
}());
exports.ColComponent = ColComponent;
//# sourceMappingURL=col.component.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/field-group/directive/col.directive.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var ColDirective = /** @class */ (function () {
    function ColDirective(el, render) {
        this.el = el;
        this.render = render;
        var screenWidth = window.screen.width;
        if (screenWidth < 576) {
            this.el.nativeElement.setAttribute('class', 'col');
        }
        else if (screenWidth >= 567 && screenWidth < 768) {
            this.el.nativeElement.setAttribute('class', 'col-sm');
        }
        else if (screenWidth >= 768 && screenWidth < 1366) {
            this.el.nativeElement.setAttribute('class', 'col-md');
        }
        else if (screenWidth >= 1366 && screenWidth < 1920) {
            this.el.nativeElement.setAttribute('class', 'col-lg');
        }
        else if (screenWidth >= 1920) {
            this.el.nativeElement.setAttribute('class', 'col-xl');
        }
    }
    ColDirective.decorators = [
        { type: core_1.Directive, args: [{
                    selector: '[appCol]'
                },] },
    ];
    // @HostListener('window:resize', ['$event'])
    // onResize(event) {
    // }
    /** @nocollapse */
    ColDirective.ctorParameters = function () { return [
        { type: core_1.ElementRef, },
        { type: core_1.Renderer2, },
    ]; };
    return ColDirective;
}());
exports.ColDirective = ColDirective;
//# sourceMappingURL=col.directive.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/field-group/directive/drag.directive.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var DragDirective = /** @class */ (function () {
    function DragDirective(el) {
        this.el = el;
        this.isDown = false;
        this.totalOffsetX = 0;
        this.totalOffsetY = 0;
    }
    // 点击事件
    DragDirective.prototype.onMousedown = 
    // 点击事件
    function (event) {
        this.isDown = true;
        this.disX = event.clientX;
        this.disY = event.clientY;
    };
    // 监听document移动事件事件
    DragDirective.prototype.onMousemove = 
    // 监听document移动事件事件
    function (event) {
        // 判断该元素是否被点击了。
        if (this.isDown) {
            this.el.nativeElement.style.left = this.totalOffsetX + event.clientX - this.disX + 'px';
            this.el.nativeElement.style.top = this.totalOffsetY + event.clientY - this.disY + 'px';
        }
    };
    // 监听document离开事件
    DragDirective.prototype.onMouseup = 
    // 监听document离开事件
    function (event) {
        // 只用当元素移动过了，离开函数体才会触发。
        if (this.isDown) {
            this.totalOffsetX += event.clientX - this.disX;
            this.totalOffsetY += event.clientY - this.disY;
            this.isDown = false;
        }
    };
    DragDirective.prototype.ngOnInit = function () {
        this.el.nativeElement.style.position = 'relative';
    };
    DragDirective.decorators = [
        { type: core_1.Directive, args: [{
                    selector: '[appDrag]'
                },] },
    ];
    /** @nocollapse */
    DragDirective.ctorParameters = function () { return [
        { type: core_1.ElementRef, },
    ]; };
    DragDirective.propDecorators = {
        "onMousedown": [{ type: core_1.HostListener, args: ['mousedown', ['$event'],] },],
        "onMousemove": [{ type: core_1.HostListener, args: ['document:mousemove', ['$event'],] },],
        "onMouseup": [{ type: core_1.HostListener, args: ['document:mouseup', ['$event'],] },],
    };
    return DragDirective;
}());
exports.DragDirective = DragDirective;
//# sourceMappingURL=drag.directive.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/field-group/directive/swap.directive.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var drag_directive_1 = __webpack_require__("./node_modules/@farris/ui/field-group/directive/drag.directive.js");
var SwapDirective = /** @class */ (function (_super) {
    __extends(SwapDirective, _super);
    function SwapDirective(el) {
        var _this = _super.call(this, el) || this;
        _this.el = el;
        return _this;
    }
    /*获取元素绝对位置的纵坐标*/
    /*获取元素绝对位置的纵坐标*/
    SwapDirective.prototype.getTop = /*获取元素绝对位置的纵坐标*/
    function (e) {
        var offset = e.offsetTop;
        if (e.offsetParent) {
            offset += this.getTop(e.offsetParent);
        }
        return offset;
    };
    /*获取元素绝对位置的横坐标*/
    /*获取元素绝对位置的横坐标*/
    SwapDirective.prototype.getLeft = /*获取元素绝对位置的横坐标*/
    function (e) {
        var offset = e.offsetLeft;
        // console.log(offset);
        if (e.offsetParent) {
            offset += this.getLeft(e.offsetParent);
        }
        return offset;
    };
    // tslint:disable-next-line:use-life-cycle-interface
    // tslint:disable-next-line:use-life-cycle-interface
    SwapDirective.prototype.ngOnInit = 
    // tslint:disable-next-line:use-life-cycle-interface
    function () {
        _super.prototype.ngOnInit.call(this);
    };
    // tslint:disable-next-line:member-ordering
    /**
       * 存放所有指令位置
       */
    SwapDirective.elList = new Array(Map);
    SwapDirective.decorators = [
        { type: core_1.Directive, args: [{
                    selector: '[appSwap]'
                },] },
    ];
    /** @nocollapse */
    SwapDirective.ctorParameters = function () { return [
        { type: core_1.ElementRef, },
    ]; };
    return SwapDirective;
}(drag_directive_1.DragDirective));
exports.SwapDirective = SwapDirective;
//# sourceMappingURL=swap.directive.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/field-group/field-group.module.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var col_directive_1 = __webpack_require__("./node_modules/@farris/ui/field-group/directive/col.directive.js");
var swap_directive_1 = __webpack_require__("./node_modules/@farris/ui/field-group/directive/swap.directive.js");
var drag_directive_1 = __webpack_require__("./node_modules/@farris/ui/field-group/directive/drag.directive.js");
var col_component_1 = __webpack_require__("./node_modules/@farris/ui/field-group/col/col.component.js");
var row_component_1 = __webpack_require__("./node_modules/@farris/ui/field-group/row/row.component.js");
var field_component_1 = __webpack_require__("./node_modules/@farris/ui/field-group/field/field.component.js");
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/esm5/common.js");
var kendo_angular_layout_1 = __webpack_require__("./node_modules/@progress/kendo-angular-layout/dist/es/index.js");
var kendo_angular_layout_2 = __webpack_require__("./node_modules/@progress/kendo-angular-layout/dist/es/index.js");
var FieldGroupModule = /** @class */ (function () {
    function FieldGroupModule() {
    }
    FieldGroupModule.decorators = [
        { type: core_1.NgModule, args: [{
                    imports: [
                        common_1.CommonModule,
                        kendo_angular_layout_1.LayoutModule,
                        kendo_angular_layout_2.PanelBarModule,
                    ],
                    declarations: [field_component_1.FieldComponent, row_component_1.RowComponent, col_component_1.ColComponent, drag_directive_1.DragDirective, swap_directive_1.SwapDirective, col_directive_1.ColDirective],
                    exports: [field_component_1.FieldComponent, row_component_1.RowComponent, col_component_1.ColComponent, drag_directive_1.DragDirective, swap_directive_1.SwapDirective, col_directive_1.ColDirective]
                },] },
    ];
    return FieldGroupModule;
}());
exports.FieldGroupModule = FieldGroupModule;
//# sourceMappingURL=field-group.module.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/field-group/field/field.component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var FieldComponent = /** @class */ (function () {
    function FieldComponent() {
        /**
           * 分组标题
           */
        this.title = 'Title';
    }
    FieldComponent.prototype.ngOnInit = function () {
    };
    FieldComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'app-field',
                    template: "<kendo-panelbar> <kendo-panelbar-item [title]=\"title\" expanded=\"true\"> <ng-template kendoPanelBarContent> <ng-content></ng-content> </ng-template> </kendo-panelbar-item> </kendo-panelbar> ",
                    styles: [""]
                },] },
    ];
    /** @nocollapse */
    FieldComponent.ctorParameters = function () { return []; };
    FieldComponent.propDecorators = {
        "title": [{ type: core_1.Input },],
    };
    return FieldComponent;
}());
exports.FieldComponent = FieldComponent;
//# sourceMappingURL=field.component.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/field-group/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var field_group_module_1 = __webpack_require__("./node_modules/@farris/ui/field-group/field-group.module.js");
exports.FieldGroupModule = field_group_module_1.FieldGroupModule;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/field-group/row/row.component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var RowComponent = /** @class */ (function () {
    function RowComponent() {
    }
    RowComponent.prototype.ngOnInit = function () {
    };
    RowComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'farris-row',
                    template: "<ng-content> </ng-content> ",
                    styles: [""],
                    // tslint:disable-next-line:use-host-property-decorator
                    host: {
                        class: 'form-row'
                    }
                },] },
    ];
    /** @nocollapse */
    RowComponent.ctorParameters = function () { return []; };
    return RowComponent;
}());
exports.RowComponent = RowComponent;
//# sourceMappingURL=row.component.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/flex-layout/flex-directive/flex.directive.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var FarrisFlexDirective = /** @class */ (function () {
    function FarrisFlexDirective(el, render) {
        this.el = el;
        this.render = render;
        this.fill = false;
        this.direction = 'row';
        this.type = 'flex';
        this.justifyContent = 'start';
        this.alignItems = 'start';
        this.displayFlex = this.type === 'flex';
        this.nativeClass = ' ';
        this.nativeClass += this.el.nativeElement.classList.value;
    }
    Object.defineProperty(FarrisFlexDirective.prototype, "width", {
        get: function () {
            // 对各个单位进行处理
            return this._width;
        },
        set: function (width) {
            this._width = this.resolveSize(width);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FarrisFlexDirective.prototype, "height", {
        get: function () {
            return this._height;
        },
        set: function (height) {
            this._height = this.resolveSize(height);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FarrisFlexDirective.prototype, "currentStyle", {
        get: function () {
            return this.nativeClass + " " + this.getDirection() + " " + this.getJsutifyClass() + " " + this.getAlignClass();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FarrisFlexDirective.prototype, "flexFill", {
        get: function () {
            return this.fill;
        },
        enumerable: true,
        configurable: true
    });
    FarrisFlexDirective.prototype.ngOnInit = function () {
        this.render.setStyle(this.el.nativeElement, 'width', this.width);
        this.render.setStyle(this.el.nativeElement, 'height', this.height);
    };
    /*宽高类型是 string或者number 解析宽高  尺寸 */
    /*宽高类型是 string或者number 解析宽高  尺寸 */
    FarrisFlexDirective.prototype.resolveSize = /*宽高类型是 string或者number 解析宽高  尺寸 */
    function (size) {
        var regex = /px|em|rem|pt|%/;
        // 说明是字符串
        return regex.test(size) ? "" + parseInt(size, 10) + size.match(regex)[0] : size + "px";
    };
    FarrisFlexDirective.prototype.getDirection = function () {
        return this.direction !== 'row' ? "flex-" + this.direction : '';
    };
    /* 获取flex 主轴排列方式类 */
    /* 获取flex 主轴排列方式类 */
    FarrisFlexDirective.prototype.getJsutifyClass = /* 获取flex 主轴排列方式类 */
    function () {
        var isJustify = this.justifyContent !== 'start';
        return isJustify ? "justify-content-" + this.justifyContent : '';
    };
    /* 获取flex交叉轴 排列方式类 */
    /* 获取flex交叉轴 排列方式类 */
    FarrisFlexDirective.prototype.getAlignClass = /* 获取flex交叉轴 排列方式类 */
    function () {
        var isAlign = this.alignItems !== 'start';
        return isAlign ? "align-items-" + this.alignItems : '';
    };
    FarrisFlexDirective.decorators = [
        { type: core_1.Directive, args: [{
                    selector: '[farris-flex]'
                },] },
    ];
    /** @nocollapse */
    FarrisFlexDirective.ctorParameters = function () { return [
        { type: core_1.ElementRef, },
        { type: core_1.Renderer2, },
    ]; };
    FarrisFlexDirective.propDecorators = {
        "fill": [{ type: core_1.Input },],
        "direction": [{ type: core_1.Input },],
        "type": [{ type: core_1.Input },],
        "justifyContent": [{ type: core_1.Input, args: ['justify',] },],
        "alignItems": [{ type: core_1.Input, args: ['align',] },],
        "width": [{ type: core_1.Input },],
        "height": [{ type: core_1.Input },],
        "currentStyle": [{ type: core_1.HostBinding, args: ["class",] },],
        "flexFill": [{ type: core_1.HostBinding, args: ['class.flex-fill',] },],
        "displayFlex": [{ type: core_1.HostBinding, args: ['class.d-flex',] },],
    };
    return FarrisFlexDirective;
}());
exports.FarrisFlexDirective = FarrisFlexDirective;
//# sourceMappingURL=flex.directive.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/flex-layout/flex-layout.module.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/esm5/common.js");
var flex_directive_1 = __webpack_require__("./node_modules/@farris/ui/flex-layout/flex-directive/flex.directive.js");
var FlexLayoutMoudle = /** @class */ (function () {
    function FlexLayoutMoudle() {
    }
    FlexLayoutMoudle.decorators = [
        { type: core_1.NgModule, args: [{
                    imports: [
                        common_1.CommonModule
                    ],
                    declarations: [
                        flex_directive_1.FarrisFlexDirective
                    ],
                    exports: [
                        flex_directive_1.FarrisFlexDirective
                    ]
                },] },
    ];
    return FlexLayoutMoudle;
}());
exports.FlexLayoutMoudle = FlexLayoutMoudle;
//# sourceMappingURL=flex-layout.module.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/flex-layout/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__("./node_modules/@farris/ui/flex-layout/flex-layout.module.js"));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/grid-mode/grid-mode.module.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = __webpack_require__("./node_modules/@angular/common/esm5/common.js");
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/esm5/router.js");
var grid_mode_types_component_1 = __webpack_require__("./node_modules/@farris/ui/grid-mode/types/grid-mode-types.component.js");
var grid_mode_load_component_1 = __webpack_require__("./node_modules/@farris/ui/grid-mode/load/grid-mode-load.component.js");
var GridModeModule = /** @class */ (function () {
    function GridModeModule() {
    }
    GridModeModule.decorators = [
        { type: core_1.NgModule, args: [{
                    imports: [common_1.CommonModule, router_1.RouterModule],
                    declarations: [grid_mode_load_component_1.GridModeLoadComponent, grid_mode_types_component_1.GridModeTypesComponent],
                    exports: [grid_mode_load_component_1.GridModeLoadComponent, grid_mode_types_component_1.GridModeTypesComponent]
                },] },
    ];
    return GridModeModule;
}());
exports.GridModeModule = GridModeModule;
//# sourceMappingURL=grid-mode.module.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/grid-mode/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var grid_mode_module_1 = __webpack_require__("./node_modules/@farris/ui/grid-mode/grid-mode.module.js");
exports.GridModeModule = grid_mode_module_1.GridModeModule;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/grid-mode/load/grid-mode-load.component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var GridModeLoadComponent = /** @class */ (function () {
    function GridModeLoadComponent(renderer, elementRef) {
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.el = this.elementRef.nativeElement;
    }
    Object.defineProperty(GridModeLoadComponent.prototype, "hide", {
        set: function (value) {
            this._hide = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GridModeLoadComponent.prototype, "customClass", {
        get: function () {
            return this._customClass;
        },
        set: function (customClass) {
            var _this = this;
            if (this.customClass) {
                this.customClass.split(' ').forEach(function (cssClass) {
                    _this.renderer.removeClass(_this.el, cssClass);
                });
            }
            this._customClass = customClass ? customClass.trim() : null;
            if (this.customClass) {
                this.customClass.split(' ').forEach(function (cssClass) {
                    _this.renderer.addClass(_this.el, cssClass);
                });
            }
        },
        enumerable: true,
        configurable: true
    });
    GridModeLoadComponent.prototype.ngOnInit = function () { };
    /**
     * 显示正在加载中
     */
    /**
       * 显示正在加载中
       */
    GridModeLoadComponent.prototype.showLoading = /**
       * 显示正在加载中
       */
    function () {
        this._hide = false;
    };
    /**
     * 隐藏正在加载中
     */
    /**
       * 隐藏正在加载中
       */
    GridModeLoadComponent.prototype.hideLoading = /**
       * 隐藏正在加载中
       */
    function () {
        this._hide = true;
    };
    GridModeLoadComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'app-grid-mode-load',
                    template: "<div class=\"align-self-center grid-mode-load-wrap\"  [ngClass]=\"{'grid-mode-none':hide}\"> <i class=\"material-icons align-middle grid-mode-icon\">refresh</i> </div> ",
                    encapsulation: core_1.ViewEncapsulation.None,
                    styles: ["/**主要应用在父元素有display:flex的情况下*/ .grid-mode-load-wrap { flex: 1 1 auto; text-align: center; } .grid-mode-load { position: absolute; top: 0; left: 0; right: 0; bottom: 0; background: rgba(248, 249, 250, 0.8); } .grid-mode-load .grid-mode-icon { font-size: 40px; color: #656565; -webkit-animation: mode-spin 2s infinite linear; animation: mode-spin 2s infinite linear; } .grid-mode-none { display: none !important; } .grid-mode-none .grid-mode-icon { -webkit-animation: none; animation: none; } @-webkit-keyframes mode-spin { 0% { -webkit-transform: rotate(0deg); transform: rotate(0deg); } 100% { -webkit-transform: rotate(359deg); transform: rotate(359deg); } } @keyframes mode-spin { 0% { -webkit-transform: rotate(0deg); transform: rotate(0deg); } 100% { -webkit-transform: rotate(359deg); transform: rotate(359deg); } } "],
                    host: {
                        class: 'grid-mode-load d-flex'
                    }
                },] },
    ];
    /** @nocollapse */
    GridModeLoadComponent.ctorParameters = function () { return [
        { type: core_1.Renderer2, },
        { type: core_1.ElementRef, },
    ]; };
    GridModeLoadComponent.propDecorators = {
        "hide": [{ type: core_1.Input },],
        "_hide": [{ type: core_1.HostBinding, args: ['class.grid-mode-none',] },],
        "customClass": [{ type: core_1.Input },],
    };
    return GridModeLoadComponent;
}());
exports.GridModeLoadComponent = GridModeLoadComponent;
//# sourceMappingURL=grid-mode-load.component.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/grid-mode/types/grid-mode-types.component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/esm5/router.js");
var GridModeTypesComponent = /** @class */ (function () {
    function GridModeTypesComponent(router, renderer, elementRef) {
        this.router = router;
        this.renderer = renderer;
        this.elementRef = elementRef;
        this._activeType = '';
        this.datas = [];
        this.modeSelectEvent = new core_1.EventEmitter();
        this.el = this.elementRef.nativeElement;
    }
    Object.defineProperty(GridModeTypesComponent.prototype, "customClass", {
        get: function () {
            return this._customClass;
        },
        set: function (customClass) {
            var _this = this;
            if (this.customClass) {
                this.customClass.split(' ').forEach(function (cssClass) {
                    _this.renderer.removeClass(_this.el, cssClass);
                });
            }
            this._customClass = customClass ? customClass.trim() : null;
            if (this.customClass) {
                this.customClass.split(' ').forEach(function (cssClass) {
                    _this.renderer.addClass(_this.el, cssClass);
                });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GridModeTypesComponent.prototype, "activeType", {
        get: function () {
            return this._activeType;
        },
        set: function (value) {
            if (this._activeType === value) {
                return;
            }
            if (this.datas.length) {
                // 判断是否有这个类型
                var filter_items = this.datas.filter(function (item) { return item['type'] === value; });
                if (filter_items.length) {
                    this._activeType = value;
                    this._selectEvent(filter_items[0]);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    GridModeTypesComponent.prototype.ngOnInit = function () { };
    GridModeTypesComponent.prototype.ngAfterContentInit = function () {
        // 检查输入数据
        if (!this._activeType && this.datas.length) {
            this.setActive(this.datas[0]);
        }
    };
    /**
     * 通过类型设置当前选中
     */
    /**
       * 通过类型设置当前选中
       */
    GridModeTypesComponent.prototype.setActiveByType = /**
       * 通过类型设置当前选中
       */
    function (type) {
        this.activeType = type;
    };
    /**
     * 点击选中
     * @param item
     */
    /**
       * 点击选中
       * @param item
       */
    GridModeTypesComponent.prototype.setActive = /**
       * 点击选中
       * @param item
       */
    function (item) {
        if (item) {
            this.activeType = item['type'];
        }
    };
    GridModeTypesComponent.prototype._selectEvent = function (item) {
        this.modeSelectEvent.emit(item['type']);
        if (item['url']) {
            this.router.navigateByUrl(item['url']);
        }
    };
    GridModeTypesComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'app-grid-mode-types',
                    template: "<ng-container *ngFor=\"let _item of datas\"> <button class=\"k-button p-0 mr-1 rounded-0 grid-mode-item\" (click)=\"setActive(_item)\" [ngClass]=\"{'active':_item['type']==activeType}\"> <i class=\"material-icons align-middle\">{{_item['icon']}}</i> </button> </ng-container>",
                    styles: [".grid-mode-item.active, .grid-mode-item.active:hover { background: rgb(200, 202, 202); }"],
                    encapsulation: core_1.ViewEncapsulation.None
                },] },
    ];
    /** @nocollapse */
    GridModeTypesComponent.ctorParameters = function () { return [
        { type: router_1.Router, },
        { type: core_1.Renderer2, },
        { type: core_1.ElementRef, },
    ]; };
    GridModeTypesComponent.propDecorators = {
        "customClass": [{ type: core_1.Input },],
        "activeType": [{ type: core_1.Input },],
        "datas": [{ type: core_1.Input },],
        "modeSelectEvent": [{ type: core_1.Output },],
    };
    return GridModeTypesComponent;
}());
exports.GridModeTypesComponent = GridModeTypesComponent;
//# sourceMappingURL=grid-mode-types.component.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__("./node_modules/@farris/ui/grid-mode/index.js"));
__export(__webpack_require__("./node_modules/@farris/ui/query-scheme-bar/index.js"));
__export(__webpack_require__("./node_modules/@farris/ui/input-mode/index.js"));
__export(__webpack_require__("./node_modules/@farris/ui/field-group/index.js"));
__export(__webpack_require__("./node_modules/@farris/ui/container/modal/index.js"));
__export(__webpack_require__("./node_modules/@farris/ui/draggable/index.js"));
__export(__webpack_require__("./node_modules/@farris/ui/perfect-scorll/index.js"));
__export(__webpack_require__("./node_modules/@farris/ui/inputs/lookup/index.js"));
__export(__webpack_require__("./node_modules/@farris/ui/loading/index.js"));
__export(__webpack_require__("./node_modules/@farris/ui/notify/index.js"));
__export(__webpack_require__("./node_modules/@farris/ui/data/index.js"));
__export(__webpack_require__("./node_modules/@farris/ui/flex-layout/index.js"));
__export(__webpack_require__("./node_modules/@farris/ui/panel/index.js"));
__export(__webpack_require__("./node_modules/@farris/ui/responsive/index.js"));
__export(__webpack_require__("./node_modules/@farris/ui/scroll-tab/index.js"));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/input-mode/check-box/check-box.component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var CheckBoxComponent = /** @class */ (function () {
    function CheckBoxComponent() {
        this.validate = false;
    }
    CheckBoxComponent.prototype.ngOnInit = function () {
        this.selected = new Set();
    };
    CheckBoxComponent.prototype.onSelected = function (item) {
        if (this.selected.has(item)) {
            this.selected.delete(item);
        }
        else {
            this.selected.add(item);
        }
        this.validate = true;
    };
    CheckBoxComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'farris-check-box',
                    template: "<div class=\"custom-control custom-checkbox\" *ngFor=\"let item of datas\"> <input type=\"checkbox\" class=\"custom-control-input\" [checked]=\"selected.has(item)\"> <label class=\"custom-control-label\" (click)=\"onSelected(item)\">{{item}}</label> </div> <div class=\"farris-feedback invalid-feedback\"> 至少选择一项 </div> ",
                    styles: [".div-col { width:7em; padding-left: 15px; } "],
                    // tslint:disable-next-line:use-host-property-decorator
                    host: {
                        class: 'farris-input-wrap'
                    }
                },] },
    ];
    /** @nocollapse */
    CheckBoxComponent.ctorParameters = function () { return []; };
    CheckBoxComponent.propDecorators = {
        "datas": [{ type: core_1.Input },],
    };
    return CheckBoxComponent;
}());
exports.CheckBoxComponent = CheckBoxComponent;
//# sourceMappingURL=check-box.component.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/input-mode/date/date.component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var DateComponent = /** @class */ (function () {
    function DateComponent() {
        this.value = new Date();
        this.dateStart = new Date('2018-01-01');
        this.dateEnd = new Date('2018-09-30');
        this.isValid = true;
        /**
         * 根据验证结果修改样式,监听验证结果发出的事件，对IsValidStyle进行修改
         * 若验证不通过 form-control is-invalid k-widget k-datepicker k-header，
         * 若验证通过   form-control k-widget k-datepicker k-header
         */
        this.isvalidStyle = 'form-control k-widget k-datepicker k-header';
        this.calc();
    }
    DateComponent.prototype.calc = function () {
        var value = this.value;
        if (value > this.dateStart && value < this.dateEnd) {
            this.result = value;
            this.isValid = true;
        }
        else {
            this.isValid = false;
        }
    };
    DateComponent.prototype.ngOnInit = function () {
        this.dateStart = new Date(this.start);
        this.dateEnd = new Date(this.end);
    };
    DateComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'farris-date',
                    template: "<kendo-datepicker id=\"startDate\" [(value)]=\"value\" (valueChange)=\"calc()\" [class]=\"isvalidStyle\"> </kendo-datepicker> <div class=\"farris-feedback invalid-feedback\"> 必须在{{dateStart.toDateString()}}和{{dateEnd.toDateString()}}之间 </div> ",
                    styles: [".div-col { width:7em; padding-left: 15px; } "],
                    // tslint:disable-next-line:use-host-property-decorator
                    host: {
                        class: 'farris-input-wrap'
                    }
                },] },
    ];
    /** @nocollapse */
    DateComponent.ctorParameters = function () { return []; };
    DateComponent.propDecorators = {
        "start": [{ type: core_1.Input },],
        "end": [{ type: core_1.Input },],
    };
    return DateComponent;
}());
exports.DateComponent = DateComponent;
//# sourceMappingURL=date.component.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/input-mode/default-template/dao/data.service.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var http_1 = __webpack_require__("./node_modules/@angular/common/esm5/http.js");
var DataService = /** @class */ (function () {
    function DataService(http) {
        this.http = http;
    }
    DataService.prototype.getData = function (url) {
        return this.http.get(url);
    };
    DataService.decorators = [
        { type: core_1.Injectable },
    ];
    /** @nocollapse */
    DataService.ctorParameters = function () { return [
        { type: http_1.HttpClient, },
    ]; };
    return DataService;
}());
exports.DataService = DataService;
//# sourceMappingURL=data.service.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/input-mode/default-template/document-maker/document-maker.component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var data_service_1 = __webpack_require__("./node_modules/@farris/ui/input-mode/default-template/dao/data.service.js");
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
/**
 * 鼠标移动到标签上，所弹出的模板
 */
var DocumentMakerComponent = /** @class */ (function () {
    function DocumentMakerComponent(dataService) {
        this.dataService = dataService;
    }
    DocumentMakerComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (this.id) {
            this.dataService.getData('http://localhost:8080/farris/' + this.id).subscribe(function (data) {
                _this.user = data['data'];
            });
        }
    };
    DocumentMakerComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'app-document-maker',
                    template: "<div class=\"container-fluid\"> <div class=\"row\"> <div class=\"col-md-12\"> <div class=\"row\"> <div class=\"col-md-4\"> <img alt=\"Bootstrap Image Preview\" src=\"https://www.layoutit.com/img/sports-q-c-140-140-3.jpg\" class=\"rounded img-fluid\" /> </div> <div class=\"col-md-8\"> <div class=\"row\"> <div class=\"col-md-3\"> <span class=\"badge badge-info\">姓名：</span> </div> <div class=\"col-md-9\"  *ngIf=\"user\"> {{user.name}} </div> </div> <div class=\"row\"> <div class=\"col-md-3\"> <span class=\"badge badge-info\">组织：</span> </div> <div class=\"col-md-9\"  *ngIf=\"user\"> {{user.organization}} </div> </div> <div class=\"row\"> <div class=\"col-md-3\"> <span class=\"badge badge-info\">电话：</span> </div> <div class=\"col-md-9\"  *ngIf=\"user\"> {{user.telephone}} </div> </div> <div class=\"row\"> <div class=\"col-md-3\"> <span class=\"badge badge-info\">邮件：</span> </div> <div class=\"col-md-9\"  *ngIf=\"user\"> china@china.cn </div> </div> <div class=\"row\"> <div class=\"col-md-3\"> <span class=\"badge badge-info\">职务：</span> </div> <div class=\"col-md-9\"  *ngIf=\"user\"> {{user.identity}} </div> </div> </div> </div> </div> </div> </div> ",
                    styles: [".div-size { width: 400px; height: 240px; border: 1px; } "]
                },] },
    ];
    /** @nocollapse */
    DocumentMakerComponent.ctorParameters = function () { return [
        { type: data_service_1.DataService, },
    ]; };
    DocumentMakerComponent.propDecorators = {
        "id": [{ type: core_1.Input },],
    };
    return DocumentMakerComponent;
}());
exports.DocumentMakerComponent = DocumentMakerComponent;
//# sourceMappingURL=document-maker.component.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/input-mode/default-template/user-mode/user-mode.component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var router_1 = __webpack_require__("./node_modules/@angular/router/esm5/router.js");
var http_1 = __webpack_require__("./node_modules/@angular/common/esm5/http.js");
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
/**
 * 点击标签，路由所跳转的页面模板
 */
var UserModeComponent = /** @class */ (function () {
    function UserModeComponent(http, route) {
        this.http = http;
        this.route = route;
        this.ALERT_MESSAGE = { 'SUCCESS': '保存成功！' };
        this.userID = 0;
    }
    UserModeComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.route.paramMap.subscribe(function (params) {
            _this.userID = parseInt(params.get('id'), 10);
            _this.http.get('http://localhost:8080/farris' + '\/' + _this.userID).subscribe(function (datas) { _this.user = datas['data']; });
        });
    };
    UserModeComponent.prototype.submit = function () {
        var _this = this;
        this.http.put('http://localhost:8080/farris', this.user).subscribe(function (data) {
            alert(_this.ALERT_MESSAGE[data['message']]);
        });
    };
    UserModeComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'app-user-mode',
                    template: "<div class=\"container-fluid\"> <div class=\"row\"> <div class=\"col-md-4\"> <div class=\"row\" *ngIf=\"user\"> <div class=\"col-md-12\"> <span class=\"badge badge-default\">姓 名：</span> <div class=\"row\"> <div class=\"col-md-12 font-weight-light\"> <input type=\"text\" class=\"form-control\" [(ngModel)]=\"user.name\"> </div> </div> </div> <div class=\"col-md-12\"> <span class=\"badge badge-default\">年 龄：</span> <div class=\"row\"> <div class=\"col-md-12 font-weight-light \"> <input type=\"text\" class=\"form-control\" [(ngModel)]=\"user.age\"> </div> </div> </div> <div class=\"col-md-12\"> <span class=\"badge badge-default\">组 织：</span> <div class=\"row\"> <div class=\"col-md-12\"> <input type=\"text\" class=\"form-control\" [(ngModel)]=\"user.organization\"> </div> </div> </div> <div class=\"col-md-12\"> <span class=\"badge badge-default\">电 话：</span> <div class=\"row\"> <div class=\"col-md-12\"> <input type=\"text\" class=\"form-control\" [(ngModel)]=\"user.telephone\"> </div> </div> </div> <div class=\"col-md-12\"> <span class=\"badge badge-default\">身 份：</span> <div class=\"row\"> <div class=\"col-md-12\"> <input type=\"text\" class=\"form-control\" [(ngModel)]=\"user.identity\"> </div> </div> </div> <div class=\"col-md-12\"> <button type=\"button\" class=\"btn btn-outline-primary\" style=\"position:relative; top:50%\" (click)=\"submit()\"> 提交 </button> </div> </div> </div> </div> </div> ",
                    styles: [""]
                },] },
    ];
    /** @nocollapse */
    UserModeComponent.ctorParameters = function () { return [
        { type: http_1.HttpClient, },
        { type: router_1.ActivatedRoute, },
    ]; };
    return UserModeComponent;
}());
exports.UserModeComponent = UserModeComponent;
//# sourceMappingURL=user-mode.component.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/input-mode/directive/label.directive.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var popup_component_1 = __webpack_require__("./node_modules/@farris/ui/input-mode/popup/popup.component.js");
var LabelDirective = /** @class */ (function () {
    function LabelDirective(templateRef, viewContainerRef, cfr) {
        this.templateRef = templateRef;
        this.viewContainerRef = viewContainerRef;
        this.cfr = cfr;
        this.viewContainerRef.createEmbeddedView(this.templateRef);
    }
    Object.defineProperty(LabelDirective.prototype, "inputLabel", {
        set: function (labelName) {
            var factory = this.cfr.resolveComponentFactory(popup_component_1.PopupComponent);
            var labelRef = this.viewContainerRef.createComponent(factory, 0);
            labelRef.instance.labelName = labelName;
        },
        enumerable: true,
        configurable: true
    });
    LabelDirective.decorators = [
        { type: core_1.Directive, args: [{
                    selector: '[inputLabel]'
                },] },
    ];
    /** @nocollapse */
    LabelDirective.ctorParameters = function () { return [
        { type: core_1.TemplateRef, },
        { type: core_1.ViewContainerRef, },
        { type: core_1.ComponentFactoryResolver, },
    ]; };
    LabelDirective.propDecorators = {
        "inputLabel": [{ type: core_1.Input },],
    };
    return LabelDirective;
}());
exports.LabelDirective = LabelDirective;
//# sourceMappingURL=label.directive.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/input-mode/drop-downs/drop-downs.component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var DropDownsComponent = /** @class */ (function () {
    function DropDownsComponent() {
        this.labelName = '下拉菜单：';
        /**
           * 根据验证结果修改样式,监听验证结果发出的事件，对IsValidStyle进行修改
           * 若验证不通过 form-control is-invalid k-widget k-dropdown k-header，
           * 若验证通过   form-control k-widget k-dropdown k-header
           */
        this.isvalidStyle = 'form-control k-widget k-dropdown k-header';
    }
    DropDownsComponent.prototype.ngOnInit = function () {
    };
    DropDownsComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'farris-drop-downs',
                    template: "<kendo-dropdownlist [data]=\"listItems\" [(ngModel)]=\"selectedValue\" [class]=\"isvalidStyle\"> </kendo-dropdownlist> <div class=\"farris-feedback invalid-feedback\"> 不符合规则 </div> ",
                    styles: [".div-col { width:7em; padding-left: 15px; } "],
                    // tslint:disable-next-line:use-host-property-decorator
                    host: {
                        class: 'farris-input-wrap'
                    }
                },] },
    ];
    /** @nocollapse */
    DropDownsComponent.ctorParameters = function () { return []; };
    DropDownsComponent.propDecorators = {
        "listItems": [{ type: core_1.Input },],
        "labelName": [{ type: core_1.Input },],
    };
    return DropDownsComponent;
}());
exports.DropDownsComponent = DropDownsComponent;
//# sourceMappingURL=drop-downs.component.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/input-mode/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var input_mode_module_1 = __webpack_require__("./node_modules/@farris/ui/input-mode/input-mode.module.js");
exports.InputModeModule = input_mode_module_1.InputModeModule;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/input-mode/input-mode.module.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var input_component_1 = __webpack_require__("./node_modules/@farris/ui/input-mode/input/input.component.js");
var label_directive_1 = __webpack_require__("./node_modules/@farris/ui/input-mode/directive/label.directive.js");
var user_mode_component_1 = __webpack_require__("./node_modules/@farris/ui/input-mode/default-template/user-mode/user-mode.component.js");
var data_service_1 = __webpack_require__("./node_modules/@farris/ui/input-mode/default-template/dao/data.service.js");
var document_maker_component_1 = __webpack_require__("./node_modules/@farris/ui/input-mode/default-template/document-maker/document-maker.component.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/esm5/router.js");
var popup_component_1 = __webpack_require__("./node_modules/@farris/ui/input-mode/popup/popup.component.js");
var drop_downs_component_1 = __webpack_require__("./node_modules/@farris/ui/input-mode/drop-downs/drop-downs.component.js");
var switch_component_1 = __webpack_require__("./node_modules/@farris/ui/input-mode/switch/switch.component.js");
var check_box_component_1 = __webpack_require__("./node_modules/@farris/ui/input-mode/check-box/check-box.component.js");
var show_text_component_1 = __webpack_require__("./node_modules/@farris/ui/input-mode/show-text/show-text.component.js");
var number_component_1 = __webpack_require__("./node_modules/@farris/ui/input-mode/number/number.component.js");
var date_component_1 = __webpack_require__("./node_modules/@farris/ui/input-mode/date/date.component.js");
var text_component_1 = __webpack_require__("./node_modules/@farris/ui/input-mode/text/text.component.js");
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/esm5/common.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/esm5/forms.js");
var kendo_angular_buttons_1 = __webpack_require__("./node_modules/@progress/kendo-angular-buttons/dist/es/index.js");
var kendo_angular_intl_1 = __webpack_require__("./node_modules/@progress/kendo-angular-intl/dist/es/index.js");
var kendo_angular_dateinputs_1 = __webpack_require__("./node_modules/@progress/kendo-angular-dateinputs/dist/es/index.js");
var kendo_angular_inputs_1 = __webpack_require__("./node_modules/@progress/kendo-angular-inputs/dist/es/index.js");
var radio_component_1 = __webpack_require__("./node_modules/@farris/ui/input-mode/radio/radio.component.js");
var kendo_angular_dropdowns_1 = __webpack_require__("./node_modules/@progress/kendo-angular-dropdowns/dist/es/index.js");
var kendo_angular_popup_1 = __webpack_require__("./node_modules/@progress/kendo-angular-popup/dist/es/index.js");
var http_1 = __webpack_require__("./node_modules/@angular/common/esm5/http.js");
var input_temp_component_1 = __webpack_require__("./node_modules/@farris/ui/input-mode/input-temp/input-temp.component.js");
var InputModeModule = /** @class */ (function () {
    function InputModeModule() {
    }
    InputModeModule.decorators = [
        { type: core_1.NgModule, args: [{
                    imports: [
                        common_1.CommonModule,
                        forms_1.FormsModule,
                        http_1.HttpClientModule,
                        // BrowserModule,
                        // BrowserAnimationsModule,
                        kendo_angular_buttons_1.ButtonsModule,
                        kendo_angular_dateinputs_1.DateInputsModule,
                        kendo_angular_intl_1.IntlModule,
                        kendo_angular_inputs_1.InputsModule,
                        kendo_angular_inputs_1.NumericTextBoxModule,
                        kendo_angular_dropdowns_1.DropDownsModule,
                        router_1.RouterModule,
                        kendo_angular_popup_1.PopupModule,
                    ],
                    declarations: [text_component_1.TextComponent, date_component_1.DateComponent, number_component_1.NumberComponent, check_box_component_1.CheckBoxComponent, show_text_component_1.ShowTextComponent,
                        radio_component_1.RadioComponent, switch_component_1.SwitchComponent, drop_downs_component_1.DropDownsComponent, popup_component_1.PopupComponent, document_maker_component_1.DocumentMakerComponent,
                        user_mode_component_1.UserModeComponent, label_directive_1.LabelDirective, input_component_1.InputComponent, input_temp_component_1.InputTempComponent],
                    exports: [text_component_1.TextComponent, date_component_1.DateComponent, number_component_1.NumberComponent, show_text_component_1.ShowTextComponent, check_box_component_1.CheckBoxComponent,
                        radio_component_1.RadioComponent, switch_component_1.SwitchComponent, drop_downs_component_1.DropDownsComponent, popup_component_1.PopupComponent, label_directive_1.LabelDirective,
                        input_component_1.InputComponent, input_temp_component_1.InputTempComponent,
                        // 以上组件为输入组件，供用户调用
                        document_maker_component_1.DocumentMakerComponent, user_mode_component_1.UserModeComponent
                        // 以上组件为默认弹出模板和路由模板
                    ],
                    providers: [data_service_1.DataService, label_directive_1.LabelDirective],
                    entryComponents: [popup_component_1.PopupComponent]
                },] },
    ];
    return InputModeModule;
}());
exports.InputModeModule = InputModeModule;
//# sourceMappingURL=input-mode.module.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/input-mode/input-temp/input-temp.component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var InputTempComponent = /** @class */ (function () {
    function InputTempComponent() {
    }
    InputTempComponent.prototype.ngOnInit = function () {
    };
    InputTempComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'farris-input-temp',
                    template: "<ng-content></ng-content>",
                    styles: [""],
                    // tslint:disable-next-line:use-host-property-decorator
                    host: {
                        class: 'form-group farris-form-group'
                    }
                },] },
    ];
    /** @nocollapse */
    InputTempComponent.ctorParameters = function () { return []; };
    return InputTempComponent;
}());
exports.InputTempComponent = InputTempComponent;
//# sourceMappingURL=input-temp.component.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/input-mode/input/input.component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var InputComponent = /** @class */ (function () {
    function InputComponent() {
        this.input = true;
    }
    InputComponent.prototype.ngOnInit = function () {
    };
    InputComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'farris-input',
                    template: "<farris-input-temp> <ng-content></ng-content> </farris-input-temp>",
                    styles: [""],
                },] },
    ];
    /** @nocollapse */
    InputComponent.ctorParameters = function () { return []; };
    InputComponent.propDecorators = {
        "input": [{ type: core_1.HostBinding, args: ['class.farris-group-wrap',] },],
        "isInline": [{ type: core_1.HostBinding, args: ['class.form-inline',] }, { type: core_1.HostBinding, args: ['class.farris-form-inline',] }, { type: core_1.Input },],
    };
    return InputComponent;
}());
exports.InputComponent = InputComponent;
//# sourceMappingURL=input.component.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/input-mode/number/number.component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var NumberComponent = /** @class */ (function () {
    function NumberComponent() {
        /**
           * 用户输入的数字
           */
        this.numericValue = 18;
        /**
         * 根据验证结果修改样式,监听验证结果发出的事件，对IsValidStyle进行修改
         * 若验证不通过 form-control is-invalid k-widget k-numerictextbox，
         * 若验证通过   form-control k-widget k-numerictextbox
         */
        this.isvalidStyle = 'form-control k-widget k-numerictextbox';
    }
    NumberComponent.prototype.ngOnInit = function () {
        this.format = 'n' + this.decimals;
    };
    NumberComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'farris-number',
                    template: "<kendo-numerictextbox [(ngModel)]=\"numericValue\" [min]=\"min\" [max]=\"max\" [autoCorrect]=\"true\" [decimals]=\"decimals\" [format]=\"format\" [class]=\"isvalidStyle\"> </kendo-numerictextbox> <div class=\"farris-feedback invalid-feedback\"> 数字不合规定 </div> ",
                    styles: [".div-col { width:7em; padding-left: 15px; } "],
                    // tslint:disable-next-line:use-host-property-decorator
                    host: {
                        class: 'farris-input-wrap'
                    }
                },] },
    ];
    /** @nocollapse */
    NumberComponent.ctorParameters = function () { return []; };
    NumberComponent.propDecorators = {
        "min": [{ type: core_1.Input },],
        "max": [{ type: core_1.Input },],
        "decimals": [{ type: core_1.Input },],
    };
    return NumberComponent;
}());
exports.NumberComponent = NumberComponent;
//# sourceMappingURL=number.component.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/input-mode/popup/popup.component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
/**
 * 此组件负责是一个标签，供其他输入组件(text、switch、date等)引用
 * 包含了两个功能：
 *        1、调用了kendo的popup弹出框
 *        2、对传进来的参数进行路由
 */
var PopupComponent = /** @class */ (function () {
    function PopupComponent() {
        /**
           * 标签的名字
           */
        this.labelName = '标签';
        /**
           * 是否开启标签特性
           */
        this.isLinkable = false;
        this.show = false;
    }
    PopupComponent.prototype.showPopup = function () {
        this.show = true;
    };
    PopupComponent.prototype.hidePopup = function () {
        this.show = false;
    };
    PopupComponent.prototype.ngOnInit = function () {
    };
    PopupComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'farris-popup',
                    template: "<!-- <label *ngIf=\"isLinkable\"  (mouseenter)=\"showPopup()\" (mouseleave)=\"hidePopup()\" class=\"col-form-label\">{{labelName}}</label> --> <span class=\"farris-label-text\">{{labelName}}</span> <!-- <label *ngIf=\"!isLinkable\" class=\"col-form-label\">{{labelName}}</label> <div (mouseenter)=\"showPopup()\" (mouseleave)=\"hidePopup()\"> <kendo-popup [popupClass]=\"'content popup'\" [anchor]=\"a\" *ngIf=\"show\"> <ng-content></ng-content> </kendo-popup> </div> --> ",
                    styles: [""],
                    // tslint:disable-next-line:use-host-property-decorator
                    host: {
                        class: 'col-form-label'
                    }
                },] },
    ];
    /** @nocollapse */
    PopupComponent.ctorParameters = function () { return []; };
    PopupComponent.propDecorators = {
        "labelName": [{ type: core_1.Input },],
        "isLinkable": [{ type: core_1.Input },],
    };
    return PopupComponent;
}());
exports.PopupComponent = PopupComponent;
//# sourceMappingURL=popup.component.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/input-mode/radio/radio.component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var RadioComponent = /** @class */ (function () {
    function RadioComponent() {
        /**
           * 是否为内联样式
           */
        this.isInline = false;
    }
    RadioComponent.prototype.ngOnInit = function () {
    };
    RadioComponent.prototype.onSelect = function (item) {
        this.selected = item;
    };
    RadioComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'farris-radio',
                    template: "<div class=\"custom-control custom-radio\" *ngFor=\"let item of radios\"> <input type=\"radio\" class=\"custom-control-input\" [checked]=\"selected==item\"> <label class=\"custom-control-label\" for=\"customRadioDisabled\" (click)=\"onSelect(item)\">{{item}}</label> </div> ",
                    styles: [""],
                    // tslint:disable-next-line:use-host-property-decorator
                    host: {
                        class: 'farris-input-wrap'
                    }
                },] },
    ];
    /** @nocollapse */
    RadioComponent.ctorParameters = function () { return []; };
    RadioComponent.propDecorators = {
        "radios": [{ type: core_1.Input },],
        "isInline": [{ type: core_1.Input },],
    };
    return RadioComponent;
}());
exports.RadioComponent = RadioComponent;
//# sourceMappingURL=radio.component.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/input-mode/show-text/show-text.component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var ShowTextComponent = /** @class */ (function () {
    function ShowTextComponent() {
        /**
           * 输入的文本
           */
        this.textArea = 'this is a textArea';
        /**
           * 根据验证结果修改样式,监听验证结果发出的事件，对IsValidStyle进行修改
           * 若验证不通过 form-control is-invalid，
           * 若验证通过   form-control
           */
        this.isvalidStyle = 'form-control';
    }
    ShowTextComponent.prototype.ngOnInit = function () {
    };
    ShowTextComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'farris-show-text',
                    template: "<textarea [class]=\"isvalidStyle\" readonly> {{textArea}}</textarea> <div class=\"farris-feedback invalid-feedback\"> 验证符合规则 </div> ",
                    styles: [".div-col { width:7em; padding-left: 15px; } "],
                    // tslint:disable-next-line:use-host-property-decorator
                    host: {
                        class: 'farris-input-wrap'
                    }
                },] },
    ];
    /** @nocollapse */
    ShowTextComponent.ctorParameters = function () { return []; };
    ShowTextComponent.propDecorators = {
        "textArea": [{ type: core_1.Input },],
    };
    return ShowTextComponent;
}());
exports.ShowTextComponent = ShowTextComponent;
//# sourceMappingURL=show-text.component.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/input-mode/switch/switch.component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var SwitchComponent = /** @class */ (function () {
    function SwitchComponent() {
        /**
           * 保存开关状态
           */
        this.checked = true;
        /**
           * 根据验证结果修改样式,监听验证结果发出的事件，对IsValidStyle进行修改
           * 若验证不通过 form-control is-invalid，
           * 若验证通过   form-control
           */
        this.isvalidStyle = 'form-control';
    }
    SwitchComponent.prototype.ngOnInit = function () {
    };
    SwitchComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'farris-switch',
                    template: "<kendo-switch [(ngModel)]=\"checked\" [class]=\"isvalidStyle\"> </kendo-switch> <div class=\"farris-feedback invalid-feedback\"> 不合规定 </div> ",
                    styles: [".div-col { width:7em; padding-left: 15px; } "],
                    // tslint:disable-next-line:use-host-property-decorator
                    host: {
                        class: 'farris-input-wrap'
                    }
                },] },
    ];
    /** @nocollapse */
    SwitchComponent.ctorParameters = function () { return []; };
    SwitchComponent.propDecorators = {
        "checked": [{ type: core_1.Input },],
    };
    return SwitchComponent;
}());
exports.SwitchComponent = SwitchComponent;
//# sourceMappingURL=switch.component.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/input-mode/text/text.component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var TextComponent = /** @class */ (function () {
    function TextComponent() {
        /**
           * 输入的数据
           */
        this.text = '';
        /**
           * placeholder
           */
        this.placeholer = '请输入';
        /**
           * 要验证的正则表达式
           */
        this.regExp = '\d+';
        /**
           * 输入字符的最短长度
           */
        this.minlength = 4;
        /**
           * 输入字符的最长长度
           */
        this.maxlength = 10;
        /**
           * 根据验证结果修改样式,监听验证结果发出的事件，对IsValidStyle进行修改
           * 若验证不通过 form-control is-invalid，
           * 若验证通过   form-control
           */
        this.isvalidStyle = 'form-control';
    }
    TextComponent.prototype.ngOnInit = function () {
    };
    TextComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'farris-text',
                    template: "<input type=\"text\" class=\"input-text\" placeholder=\"{{placeholer}}\" [(ngModel)]=\"text\" name=\"input\" #name=\"ngModel\" required minlength=\"{{minlength}}\" pattern=\"{{regExp}}\" maxlength=\"{{maxlength}}\" [class]=\"isvalidStyle\"> <div class=\"farris-feedback invalid-feedback\"> 验证符合规则 </div> ",
                    styles: [".div-col { width:7em; padding-left: 15px; } "],
                    // tslint:disable-next-line:use-host-property-decorator
                    host: {
                        class: 'farris-input-wrap'
                    }
                },] },
    ];
    /** @nocollapse */
    TextComponent.ctorParameters = function () { return []; };
    TextComponent.propDecorators = {
        "placeholer": [{ type: core_1.Input },],
        "regExp": [{ type: core_1.Input },],
        "minlength": [{ type: core_1.Input },],
        "maxlength": [{ type: core_1.Input },],
    };
    return TextComponent;
}());
exports.TextComponent = TextComponent;
//# sourceMappingURL=text.component.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/inputs/lookup/http/ILookupHttpService.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
exports.ServerSideToken = new core_1.InjectionToken('Lookup Grid HTTP service');
//# sourceMappingURL=ILookupHttpService.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/inputs/lookup/http/defaultHttpService.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var DefaultHttpService = /** @class */ (function () {
    function DefaultHttpService(http) {
        this.http = http;
    }
    DefaultHttpService.prototype.getData = function (url, params, metadataUrl) {
        return this.http.get(url);
    };
    return DefaultHttpService;
}());
exports.DefaultHttpService = DefaultHttpService;
//# sourceMappingURL=defaultHttpService.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/inputs/lookup/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__("./node_modules/@farris/ui/inputs/lookup/lookup-grid.component.js"));
__export(__webpack_require__("./node_modules/@farris/ui/inputs/lookup/lookup-grid-options.js"));
__export(__webpack_require__("./node_modules/@farris/ui/inputs/lookup/lookup.component.js"));
__export(__webpack_require__("./node_modules/@farris/ui/inputs/lookup/http/ILookupHttpService.js"));
__export(__webpack_require__("./node_modules/@farris/ui/inputs/lookup/lookup.module.js"));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/inputs/lookup/lookup-displaytype.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var LookupGridDisplayType;
(function (LookupGridDisplayType) {
    LookupGridDisplayType["List"] = "LIST";
    LookupGridDisplayType["TreeList"] = "TREELIST";
    LookupGridDisplayType["NavList"] = "NAVLIST";
    LookupGridDisplayType["NavTreeList"] = "NAVTREELIST";
})(LookupGridDisplayType = exports.LookupGridDisplayType || (exports.LookupGridDisplayType = {}));
//# sourceMappingURL=lookup-displaytype.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/inputs/lookup/lookup-grid-options.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.lookupGridDefaults = {
    singleSelect: true,
    showFilterBar: true,
    pagination: true,
    pageIndex: 1,
    pageSize: 10,
    pageList: [10, 20, 30, 50, 100]
};
//# sourceMappingURL=lookup-grid-options.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/inputs/lookup/lookup-grid.component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var lookup_component_1 = __webpack_require__("./node_modules/@farris/ui/inputs/lookup/lookup.component.js");
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var lookup_displaytype_1 = __webpack_require__("./node_modules/@farris/ui/inputs/lookup/lookup-displaytype.js");
var lookup_grid_options_1 = __webpack_require__("./node_modules/@farris/ui/inputs/lookup/lookup-grid-options.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/esm5/forms.js");
var modal_1 = __webpack_require__("./node_modules/@farris/ui/container/modal/index.js");
var loading_1 = __webpack_require__("./node_modules/@farris/ui/loading/index.js");
var ILookupHttpService_1 = __webpack_require__("./node_modules/@farris/ui/inputs/lookup/http/ILookupHttpService.js");
var data_1 = __webpack_require__("./node_modules/@farris/ui/data/index.js");
exports.LOOKUPGRID_VALUE_ACCESSOR = {
    provide: forms_1.NG_VALUE_ACCESSOR,
    useExisting: core_1.forwardRef(function () { return LookupGridComponent; }),
    multi: true
};
var LookupGridComponent = /** @class */ (function (_super) {
    __extends(LookupGridComponent, _super);
    function LookupGridComponent(injector, cfr, el) {
        var _this = _super.call(this, injector, el) || this;
        _this.injector = injector;
        _this.cfr = cfr;
        _this.el = el;
        _this.displayType = lookup_displaytype_1.LookupGridDisplayType.List;
        /** 是否启用多选 */
        _this.singleSelect = true;
        /**
             * 显示过滤工具条
             */
        _this.showFilterBar = true;
        /** 是否启用分页 */
        _this.pagination = true;
        /** 当前页索引，从 0开始 */
        _this.pageIndex = 1;
        /** 每页记录数 */
        _this.pageSize = 20;
        /** 可用分页记录数列表 */
        _this.pageList = [10, 20, 30, 50, 100];
        /** 总记录数 */
        _this.total = 0;
        /** 可拖动列 */
        // @Input() resizableColumns = true;
        /** 显示列信息 */
        _this.columns = [];
        _this._gridOptions = lookup_grid_options_1.lookupGridDefaults;
        _this.http = _this.injector.get(ILookupHttpService_1.ServerSideToken, null);
        _this.messagerService = _this.injector.get(modal_1.MessagerService);
        _this.loadingService = _this.injector.get(loading_1.LoadingService);
        return _this;
    }
    Object.defineProperty(LookupGridComponent.prototype, "gridOptions", {
        get: function () {
            this._gridOptions = Object.assign(this._gridOptions, {
                singleSelect: this.singleSelect,
                idField: this.idField,
                uri: this.uri,
                showFilterBar: this.showFilterBar,
                pagination: this.pagination,
                pageIndex: this.pageIndex,
                pageSize: this.pageSize,
                pageList: this.pageList,
                total: this.total,
                items: this.items,
                columns: this.columns,
                resizableColumns: true,
                fixedHeader: true
            });
            return this._gridOptions;
        },
        set: function (opts) {
            this._gridOptions = Object.assign({}, this._gridOptions, opts);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LookupGridComponent.prototype, "siblingControls", {
        get: function () {
            if (this.ngControl) {
                if (this.ngControl.control && this.ngControl.control.root) {
                    return this.ngControl.control.root.controls;
                }
            }
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LookupGridComponent.prototype, "selections", {
        get: function () {
            switch (this.displayType) {
                case lookup_displaytype_1.LookupGridDisplayType.List:
                    return this.componentRef.instance.selections;
                case lookup_displaytype_1.LookupGridDisplayType.TreeList:
                    {
                        var rows = this.componentRef.instance.selections;
                        if (rows instanceof Array) {
                            return rows.map(function (row) { return row.data; });
                        }
                        else {
                            return rows.data;
                        }
                    }
            }
        },
        enumerable: true,
        configurable: true
    });
    LookupGridComponent.prototype.ngOnInit = function () {
        var _this = this;
        var self = this;
        _super.prototype.ngOnInit.call(this);
        this.checkGridOptions();
        this.dialog.opened.subscribe(function () {
            _this.gridOptions = Object.assign(_this.gridOptions, {
                width: _this.dialog.size.width - 12,
                height: _this.dialog.size.contentHeight - 2
            });
            _this.componentRef = _this.createContent(_this.gridOptions);
            _this.initData();
            _this.dialogOpened.emit();
        });
        this.dialog.closed.subscribe(function () {
            _this.componentRef.destroy();
            _this.componentRef = null;
            _this.contentContainer.clear();
            _this.dialogClosed.emit();
        });
        this.txtInput.nativeElement.addEventListener('blur', function (event) {
            self.onModelTouched();
        });
    };
    LookupGridComponent.prototype.initData = function () {
        var _this = this;
        switch (this.displayType) {
            case lookup_displaytype_1.LookupGridDisplayType.List:
                {
                    this.getData({ pageInfo: { pageIndex: this.gridOptions.pageIndex, pageSize: this.gridOptions.pageSize } });
                    var dt = this.componentRef.instance;
                    dt.pageChanged.subscribe(function (e) {
                        _this.getData(e);
                    });
                    dt.search.subscribe(function (e) {
                        _this.onSearch(e);
                    });
                    break;
                }
            case lookup_displaytype_1.LookupGridDisplayType.TreeList:
                this.getData();
        }
    };
    LookupGridComponent.prototype.ngAfterViewInit = function () {
    };
    LookupGridComponent.prototype.createContent = function (opts) {
        var type = this.getComponentType();
        var dtFac = this.cfr.resolveComponentFactory(type);
        var cmpRef = this.contentContainer.createComponent(dtFac);
        Object.assign(cmpRef.instance, opts);
        return cmpRef;
    };
    LookupGridComponent.prototype.onResizing = function (pos) {
        this.resizeCmp(pos.size);
        this.resizing.emit(pos.size);
    };
    LookupGridComponent.prototype.onMaxDialog = function (pos) {
        this.resizeCmp(pos.size);
        this.dialogMaxed.emit(pos.size);
    };
    LookupGridComponent.prototype.resizeCmp = function (size) {
        var _size = {
            width: size.width - 12,
            height: this.dialog.size.contentHeight - 2
        };
        this.componentRef.instance.resize(_size);
    };
    LookupGridComponent.prototype.checkGridOptions = function () {
        if (!this.gridOptions.idField) {
            throw new Error('未设置主键字段 idField');
        }
    };
    LookupGridComponent.prototype.getComponentType = function () {
        switch (this.displayType) {
            case lookup_displaytype_1.LookupGridDisplayType.List:
                return data_1.DataTableComponent;
            case lookup_displaytype_1.LookupGridDisplayType.TreeList:
                return data_1.TreeTableComponent;
        }
    };
    LookupGridComponent.prototype.getData = function (event) {
        var _this = this;
        var uri = this.gridOptions.uri;
        if (uri) {
            var params = null;
            if (event) {
                params = {
                    condition: this.condition,
                    pagination: {
                        pageIndex: event.pageInfo.pageIndex,
                        pageSize: event.pageInfo.pageSize
                    },
                    search: event.search
                };
            }
            this.loading = this.loadingService.show({ container: this.dialog.modalContent });
            this.http.getData(uri, params).subscribe(function (data) {
                _this.loadData(data);
                _this.loading.close();
            });
        }
        else {
            this.loadData();
        }
    };
    LookupGridComponent.prototype.loadData = function (resData) {
        switch (this.displayType) {
            case lookup_displaytype_1.LookupGridDisplayType.List:
                this.loadDataTableData(resData);
                break;
            case lookup_displaytype_1.LookupGridDisplayType.TreeList:
                this.loadTreeTableData(resData);
                break;
        }
    };
    LookupGridComponent.prototype.loadDataTableData = function (resData) {
        if (resData) {
            if (this.gridOptions) {
                this.columns = resData.columns;
                this.items = resData.items;
                this.total = resData.total;
                if (resData.pageInfo) {
                    this.pageIndex = resData.pageInfo.pageIndex;
                    this.pageSize = resData.pageInfo.pageSize;
                }
            }
            else {
                this.gridOptions = resData;
            }
        }
        this.updateDataTable(this.gridOptions);
    };
    LookupGridComponent.prototype.loadTreeTableData = function (resData) {
        var items = resData ? resData.items : this.gridOptions.items;
        if (resData) {
            var data = this.convert2TreeNodes(items);
            this.items = data;
        }
        if (this.componentRef.instance instanceof data_1.TreeTableComponent) {
            var tt = this.componentRef.instance;
            tt.loadData(this.items);
        }
    };
    LookupGridComponent.prototype.convert2TreeNodes = function (data, parentId) {
        var _this = this;
        if (parentId === void 0) { parentId = 0; }
        if (data.length) {
            var nodes = data.filter(function (v) { return v.parentId === parentId; });
            return nodes.map(function (n) {
                var node = {
                    data: n,
                    children: []
                };
                if (data.filter(function (v) { return v.parentId === n[_this.gridOptions.idField]; }).length) {
                    node.children = _this.convert2TreeNodes(data, n[_this.gridOptions.idField]);
                }
                return node;
            });
        }
        return [];
    };
    LookupGridComponent.prototype.updateDataTable = function (obj) {
        if (obj) {
            var dt = this.componentRef.instance;
            if (!dt.columns || dt.columns.length === 0) {
                dt.columns = this.gridOptions.columns;
            }
            dt.loadData({
                pageSize: this.gridOptions.pageSize,
                pageIndex: this.gridOptions.pageIndex,
                total: this.gridOptions.total,
                data: this.gridOptions.items,
            });
        }
    };
    LookupGridComponent.prototype.onSearch = function ($event) {
        this.getData({ pageInfo: { pageIndex: 1, pageSize: this.gridOptions.pageSize }, search: $event });
    };
    LookupGridComponent.prototype.onChanges = function (val) {
        this.onModelChange(val);
    };
    LookupGridComponent.prototype.selectItem = function () {
        var _this = this;
        var textField = this.textField;
        var valueField = this.valueField;
        if (this.gridOptions.singleSelect) {
            var selectedRow = this.selections;
            if (selectedRow) {
                this.displayText = selectedRow[textField];
                this.displayValue = selectedRow[valueField];
                this.mappingData(selectedRow);
                this.onModelChange(this.displayText);
                if (this.dictPicked) {
                    this.dictPicked(selectedRow).subscribe(function (v) {
                        if (v) {
                            _this.closeDialog();
                        }
                    });
                }
                else {
                    this.closeDialog();
                }
            }
            else {
                this.messagerService.info('请选择一条记录！');
            }
        }
        else {
            if (this.selections) {
                var keys = Object.keys(this.selections);
                if (keys.length) {
                    this.displayText = keys.map(function (id) {
                        return _this.selections[id][textField];
                    }).join(',');
                    this.displayValue = keys.map(function (id) {
                        return _this.selections[id][valueField];
                    }).join(',');
                    if (this.dictPicked) {
                        this.dictPicked(this.selections).subscribe(function (v) {
                            if (v) {
                                _this.closeDialog();
                            }
                        });
                    }
                    else {
                        this.closeDialog();
                    }
                }
            }
            else {
                this.messagerService.info('请选择一条记录！');
            }
        }
    };
    LookupGridComponent.prototype.mappingData = function (data) {
        var _this = this;
        if (this.mapFields) {
            var keys = Object.keys(this.mapFields);
            keys.forEach(function (k) {
                _this.siblingControls[_this.mapFields[k]].setValue(data[k]);
            });
        }
    };
    LookupGridComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'farris-lookup-grid',
                    template: "<div class=\"lookupbox input-group\"> <input class=\"form-control\" [disabled]=\"disabled\" #textInput value=\"{{ displayText }}\" (change)=\"onChanges(textInput.value)\" /> <input #valueInput type=\"hidden\" value=\"{{ displayValue }}\"> <div class=\"input-group-append\"> <span class=\"f-select input-group-text\"  (click)=\"showDialog()\"> <i class=\"f-icon f-icon-lookup\"></i> </span> </div> </div> <farris-dialog #dialog [title]=\"title\" [beforeOpen]=\"beforeOpen\" [beforeClose]=\"beforeClose\" [width]=\"dialogWidth\" [height]=\"dialogHeight\" [showButtons]=\"showButtons\" [showMaxButton]=\"showMaxButton\" [buttons]=\"buttonsRef || defaultButtonRef\" [buttonAlign]=\"buttonAlign\" [enableScroll] = \"false\" (maxed)=\"onMaxDialog($event)\" (resized)=\"onResized($event)\" (resizing)=\"onResizing($event)\"> <div style=\"margin: 0 5px\"> <ng-container #contentContainer></ng-container> </div> <ng-template #defaultButtonRef> <div style=\"width: 100%;\"> <button type=\"button\" class=\"btn btn-primary\" (click)=\"selectItem()\"> 确 定 </button>&nbsp;&nbsp;&nbsp;&nbsp; <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"closeDialog()\"> 取 消 </button> </div> </ng-template> </farris-dialog> ",
                    styles: [
                        "\n        :host(.ng-invalid.ng-touched) .lookupbox {\n            border-color: #ff0303;\n        }\n        "
                    ],
                    providers: [
                        exports.LOOKUPGRID_VALUE_ACCESSOR
                    ]
                },] },
    ];
    /** @nocollapse */
    LookupGridComponent.ctorParameters = function () { return [
        { type: core_1.Injector, },
        { type: core_1.ComponentFactoryResolver, },
        { type: core_1.ElementRef, },
    ]; };
    LookupGridComponent.propDecorators = {
        "displayType": [{ type: core_1.Input },],
        "condition": [{ type: core_1.Input },],
        "singleSelect": [{ type: core_1.Input },],
        "idField": [{ type: core_1.Input },],
        "uri": [{ type: core_1.Input },],
        "showFilterBar": [{ type: core_1.Input },],
        "pagination": [{ type: core_1.Input },],
        "pageIndex": [{ type: core_1.Input },],
        "pageSize": [{ type: core_1.Input },],
        "pageList": [{ type: core_1.Input },],
        "total": [{ type: core_1.Input },],
        "columns": [{ type: core_1.Input },],
        "items": [{ type: core_1.Input },],
        "contentContainer": [{ type: core_1.ViewChild, args: ['contentContainer', { read: core_1.ViewContainerRef },] },],
        "txtInput": [{ type: core_1.ViewChild, args: ['textInput',] },],
    };
    return LookupGridComponent;
}(lookup_component_1.LookupComponent));
exports.LookupGridComponent = LookupGridComponent;
//# sourceMappingURL=lookup-grid.component.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/inputs/lookup/lookup.component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/esm5/forms.js");
var of_1 = __webpack_require__("./node_modules/rxjs/observable/of.js");
var modal_1 = __webpack_require__("./node_modules/@farris/ui/container/modal/index.js");
exports.LOOKUPINPUT_VALUE_ACCESSOR = {
    provide: forms_1.NG_VALUE_ACCESSOR,
    useExisting: core_1.forwardRef(function () { return LookupComponent; }),
    multi: true
};
var LookupComponent = /** @class */ (function () {
    function LookupComponent(injector, el) {
        this.injector = injector;
        this.el = el;
        this.dialogWidth = 500;
        this.dialogHeight = 600;
        this.title = '此处显示帮助标题';
        this.showButtons = true;
        this.showCloseButton = true;
        this.showMaxButton = true;
        this.resizable = true;
        this.draggable = true;
        this.buttonAlign = 'center';
        this.disabled = false;
        /** 窗口打开后 */
        this.dialogOpened = new core_1.EventEmitter();
        /** 窗口关闭后 */
        this.dialogClosed = new core_1.EventEmitter();
        /** 窗口最大化 */
        this.dialogMaxed = new core_1.EventEmitter();
        /** 拖拽改变窗口尺寸进行时 */
        this.resizing = new core_1.EventEmitter();
        /** 拖拽改变窗口尺寸结束 */
        this.resized = new core_1.EventEmitter();
        this.displayText = '';
        this.displayValue = '';
        this.onModelChange = function () { };
        this.onModelTouched = function () { };
    }
    Object.defineProperty(LookupComponent.prototype, "siblingControls", {
        get: function () {
            if (this.ngControl) {
                if (this.ngControl.control && this.ngControl.control.root) {
                    return this.ngControl.control.root.controls;
                }
            }
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LookupComponent.prototype, "invalid", {
        get: function () {
            return this.ngControl.valid;
        },
        enumerable: true,
        configurable: true
    });
    LookupComponent.prototype.ngOnInit = function () {
        this.initEvents();
        this.ngControl = this.injector.get(forms_1.NgControl, null);
    };
    LookupComponent.prototype.initEvents = function () {
        if (!this.dictPicking) {
            this.dictPicking = function () { return of_1.of(true); };
        }
        if (!this.dictPicked) {
            this.dictPicked = function () { return of_1.of(true); };
        }
        if (!this.beforeOpen) {
            this.beforeOpen = function () { return of_1.of(true); };
        }
        if (!this.beforeClose) {
            this.beforeClose = function () { return of_1.of(true); };
        }
    };
    LookupComponent.prototype.showDialog = function () {
        var _this = this;
        if (this.disabled) {
            return false;
        }
        this.dictPicking().subscribe(function (val) {
            if (typeof val === 'boolean') {
                if (val === false) {
                    return;
                }
            }
            _this.dialog.show();
        });
    };
    LookupComponent.prototype.closeDialog = function () {
        this.dialog.close();
    };
    LookupComponent.prototype.onResizing = function (pos) {
        this.resizing.emit(pos.size);
    };
    LookupComponent.prototype.onResized = function (pos) {
        this.resized.emit(pos.size);
    };
    LookupComponent.prototype.onMaxDialog = function (pos) {
        this.dialogMaxed.emit(pos.size);
    };
    LookupComponent.prototype.writeValue = function (obj) {
        var _this = this;
        if (obj) {
            this.displayText = obj;
            this.displayValue = obj;
            if (this.mapFields) {
                var keys = Object.keys(this.mapFields);
                keys.forEach(function (k) {
                    if (k === _this.valueField) {
                        _this.displayValue = _this.siblingControls[_this.mapFields[k]].value;
                    }
                });
            }
        }
        else {
            this.displayText = '';
            this.displayValue = '';
        }
    };
    LookupComponent.prototype.registerOnChange = function (fn) {
        this.onModelChange = fn;
    };
    LookupComponent.prototype.registerOnTouched = function (fn) {
        this.onModelTouched = fn;
    };
    LookupComponent.prototype.setDisabledState = function (isDisabled) {
        this.disabled = isDisabled;
    };
    LookupComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'farris-lookup',
                    template: "\n    <div class=\"input-group\">\n        <input class=\"form-control\" [value]=\"displayText\" [disabled]=\"disabled\"/>\n        <div class=\"input-group-append\">\n            <span class=\"f-select input-group-text\"  (click)=\"showDialog()\">\n                <i class=\"f-icon f-icon-lookup\"></i>\n            </span>\n        </div>\n    </div>\n    <farris-dialog #dialog\n        [title]=\"title\"\n        [beforeOpen]=\"beforeOpen\"\n        [beforeClose]=\"beforeClose\"\n        [width]=\"dialogWidth\"\n        [height]=\"dialogHeight\"\n        [showButtons]=\"showButtons\"\n        [showMaxButton]=\"showMaxButton\"\n        [buttons]=\"buttonsRef || defaultButtonRef\"\n        [buttonAlign]=\"buttonAlign\"\n        (maxed)=\"onMaxDialog($event)\"\n        (resized)=\"onResized($event)\"\n        (resizing)=\"onResizing($event)\">\n\n        <ng-content></ng-content>\n\n        <ng-template #defaultButtonRef>\n            <div style=\"width: 100%;\">\n                <button>Ok</button>\n                <button (click)=\"closeDialog()\">Cancel</button>\n            </div>\n        </ng-template>\n    </farris-dialog>\n    ",
                    styles: [
                        ":host-context(.ng-invalid) .form-control {\n            border-color: #ff0303;\n        }"
                    ],
                    providers: [
                        exports.LOOKUPINPUT_VALUE_ACCESSOR
                    ]
                },] },
    ];
    /** @nocollapse */
    LookupComponent.ctorParameters = function () { return [
        { type: core_1.Injector, },
        { type: core_1.ElementRef, },
    ]; };
    LookupComponent.propDecorators = {
        "dialogWidth": [{ type: core_1.Input },],
        "dialogHeight": [{ type: core_1.Input },],
        "title": [{ type: core_1.Input },],
        "showButtons": [{ type: core_1.Input },],
        "showCloseButton": [{ type: core_1.Input },],
        "showMaxButton": [{ type: core_1.Input },],
        "buttonsRef": [{ type: core_1.Input },],
        "resizable": [{ type: core_1.Input },],
        "draggable": [{ type: core_1.Input },],
        "buttonAlign": [{ type: core_1.Input },],
        "disabled": [{ type: core_1.Input },],
        "mapFields": [{ type: core_1.Input },],
        "valueField": [{ type: core_1.Input },],
        "textField": [{ type: core_1.Input },],
        "beforeOpen": [{ type: core_1.Input },],
        "beforeClose": [{ type: core_1.Input },],
        "dictPicking": [{ type: core_1.Input },],
        "dictPicked": [{ type: core_1.Input },],
        "dialogOpened": [{ type: core_1.Output },],
        "dialogClosed": [{ type: core_1.Output },],
        "dialogMaxed": [{ type: core_1.Output },],
        "resizing": [{ type: core_1.Output },],
        "resized": [{ type: core_1.Output },],
        "dialog": [{ type: core_1.ViewChild, args: ['dialog',] },],
    };
    return LookupComponent;
}());
exports.LookupComponent = LookupComponent;
//# sourceMappingURL=lookup.component.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/inputs/lookup/lookup.module.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/esm5/common.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/esm5/forms.js");
var http_1 = __webpack_require__("./node_modules/@angular/common/esm5/http.js");
var modal_1 = __webpack_require__("./node_modules/@farris/ui/container/modal/index.js");
var data_1 = __webpack_require__("./node_modules/@farris/ui/data/index.js");
var loading_1 = __webpack_require__("./node_modules/@farris/ui/loading/index.js");
var lookup_grid_component_1 = __webpack_require__("./node_modules/@farris/ui/inputs/lookup/lookup-grid.component.js");
var ILookupHttpService_1 = __webpack_require__("./node_modules/@farris/ui/inputs/lookup/http/ILookupHttpService.js");
var lookup_component_1 = __webpack_require__("./node_modules/@farris/ui/inputs/lookup/lookup.component.js");
var defaultHttpService_1 = __webpack_require__("./node_modules/@farris/ui/inputs/lookup/http/defaultHttpService.js");
var LookupModule = /** @class */ (function () {
    function LookupModule() {
    }
    LookupModule.forRoot = function (httpService) {
        return {
            ngModule: LookupModule,
            providers: [
                { provide: ILookupHttpService_1.ServerSideToken, useClass: httpService || defaultHttpService_1.DefaultHttpService, deps: [http_1.HttpClient] }
            ]
        };
    };
    LookupModule.decorators = [
        { type: core_1.NgModule, args: [{
                    imports: [
                        common_1.CommonModule,
                        forms_1.FormsModule,
                        modal_1.FarrisDialogModule,
                        data_1.DataTableModule,
                        data_1.TreeTableModule,
                        modal_1.MessagerModule,
                        loading_1.LoadingModule.forRoot()
                    ],
                    exports: [lookup_grid_component_1.LookupGridComponent, lookup_component_1.LookupComponent],
                    declarations: [lookup_grid_component_1.LookupGridComponent, lookup_component_1.LookupComponent],
                    providers: [],
                    entryComponents: [
                        data_1.DataTableComponent,
                        data_1.TreeTableComponent
                    ]
                },] },
    ];
    return LookupModule;
}());
exports.LookupModule = LookupModule;
//# sourceMappingURL=lookup.module.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/loading/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__("./node_modules/@farris/ui/loading/loading.config.js"));
__export(__webpack_require__("./node_modules/@farris/ui/loading/loading.component.js"));
__export(__webpack_require__("./node_modules/@farris/ui/loading/loading.service.js"));
__export(__webpack_require__("./node_modules/@farris/ui/loading/loading.module.js"));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/loading/loading.component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var LoadingComponent = /** @class */ (function () {
    function LoadingComponent(render, el) {
        this.render = render;
        this.el = el;
        this._isActive = false;
        this.message = '正在加载，请稍候...';
        this.closed = new core_1.EventEmitter();
    }
    Object.defineProperty(LoadingComponent.prototype, "isActive", {
        get: function () {
            return this._isActive;
        },
        set: function (val) {
            if (val) {
                this.animate('fadeIn animated');
            }
            else {
                this.render.removeAttribute(this.el.nativeElement, 'class');
                this.animate('fadeOut animated');
            }
            this._isActive = val;
        },
        enumerable: true,
        configurable: true
    });
    LoadingComponent.prototype.ngOnInit = function () {
    };
    LoadingComponent.prototype.ngAfterViewInit = function () {
        // setTimeout(() => this.setPosition(), 0 );
        this.setPosition();
    };
    LoadingComponent.prototype.close = function () {
        this.isActive = false;
    };
    LoadingComponent.prototype.setPosition = function () {
        var containerWidth = this.loadingContainerEl.nativeElement.clientWidth;
        var containerHeight = this.loadingContainerEl.nativeElement.clientHeight;
        this.render.setStyle(this.loadingContainerEl.nativeElement, 'marginTop', -containerHeight / 2 + 'px');
        this.render.setStyle(this.loadingContainerEl.nativeElement, 'marginLeft', -containerWidth / 2 + 'px');
    };
    LoadingComponent.prototype.animate = function (animateCls) {
        this.addAnimationEndEvent('webkitAnimationEnd', 'mozAnimationEnd', 'MSAnimationEnd', 'oanimationend', 'animationend');
        this.render.setAttribute(this.el.nativeElement, 'class', animateCls);
    };
    LoadingComponent.prototype.addAnimationEndEvent = function () {
        var events = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            events[_i] = arguments[_i];
        }
        var _this = this;
        events.forEach(function (e) {
            _this.el.nativeElement.addEventListener(e, function handler() {
                _this.render.removeAttribute(_this.el.nativeElement, 'class');
                _this.el.nativeElement.removeEventListener(e, handler);
                _this.closed.emit(_this.isActive);
            });
        });
    };
    LoadingComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'farris-loading',
                    template: "\n        <div class=\"farris-loading-backdrop\" *ngIf=\"isActive\"></div>\n        <div #loadingContainerEl class=\"farris-loading\" *ngIf=\"isActive\">\n            <div class=\"ng-busy-default-wrapper\">\n                <div class=\"ng-busy-default-sign\">\n                    <div class=\"ng-busy-default-spinner\">\n                        <div class=\"bar1\"></div>\n                        <div class=\"bar2\"></div>\n                        <div class=\"bar3\"></div>\n                        <div class=\"bar4\"></div>\n                        <div class=\"bar5\"></div>\n                        <div class=\"bar6\"></div>\n                        <div class=\"bar7\"></div>\n                        <div class=\"bar8\"></div>\n                        <div class=\"bar9\"></div>\n                        <div class=\"bar10\"></div>\n                        <div class=\"bar11\"></div>\n                        <div class=\"bar12\"></div>\n                    </div>\n                    <div class=\"ng-busy-default-text\">\n                        {{message}}\n                    </div>\n                </div>\n            </div>\n        </div>\n    "
                },] },
    ];
    /** @nocollapse */
    LoadingComponent.ctorParameters = function () { return [
        { type: core_1.Renderer2, },
        { type: core_1.ElementRef, },
    ]; };
    LoadingComponent.propDecorators = {
        "loadingContainerEl": [{ type: core_1.ViewChild, args: ['loadingContainerEl',] },],
        "closed": [{ type: core_1.Output },],
    };
    return LoadingComponent;
}());
exports.LoadingComponent = LoadingComponent;
//# sourceMappingURL=loading.component.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/loading/loading.config.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
exports.loaddingDefaultConfig = {
    container: 'body',
    message: '正在加载中，请稍候...',
    posion: 'center'
};
exports.LOADING_DEFAULT_CONFIG = new core_1.InjectionToken('loading default options.');
//# sourceMappingURL=loading.config.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/loading/loading.module.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/esm5/common.js");
var loading_component_1 = __webpack_require__("./node_modules/@farris/ui/loading/loading.component.js");
var loading_service_1 = __webpack_require__("./node_modules/@farris/ui/loading/loading.service.js");
var loading_config_1 = __webpack_require__("./node_modules/@farris/ui/loading/loading.config.js");
// export function loadingFactory(app: ApplicationRef, cfr: ComponentFactoryResolver, injector: Injector) {
//     return new LoadingService(app, cfr, injector);
// }
var LoadingModule = /** @class */ (function () {
    function LoadingModule() {
    }
    LoadingModule.forRoot = function (config) {
        // const _config = config ? Object.assign({}, loaddingDefaultConfig, config) : loaddingDefaultConfig;
        return {
            ngModule: LoadingModule,
            providers: [
                { provide: loading_config_1.LOADING_DEFAULT_CONFIG, useValue: config || loading_config_1.loaddingDefaultConfig },
                loading_service_1.LoadingService
                // { provide: LoadingService, useFactory: loadingFactory, deps: [ApplicationRef, ComponentFactoryResolver, Injector] }
            ]
        };
    };
    LoadingModule.decorators = [
        { type: core_1.NgModule, args: [{
                    imports: [
                        common_1.CommonModule
                    ],
                    declarations: [
                        loading_component_1.LoadingComponent
                    ],
                    entryComponents: [
                        loading_component_1.LoadingComponent
                    ]
                },] },
    ];
    return LoadingModule;
}());
exports.LoadingModule = LoadingModule;
//# sourceMappingURL=loading.module.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/loading/loading.service.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var loading_component_1 = __webpack_require__("./node_modules/@farris/ui/loading/loading.component.js");
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var loading_config_1 = __webpack_require__("./node_modules/@farris/ui/loading/loading.config.js");
var LoadingService = /** @class */ (function () {
    function LoadingService(appRef, cfr, injecotr) {
        this.appRef = appRef;
        this.cfr = cfr;
        this.injecotr = injecotr;
    }
    LoadingService.prototype.show = function (config) {
        var _this = this;
        this.config = this.injecotr.get(loading_config_1.LOADING_DEFAULT_CONFIG) || {};
        this.config = Object.assign(loading_config_1.loaddingDefaultConfig, this.config);
        var _loadingCmpRef;
        var loadingFactory = this.cfr.resolveComponentFactory(loading_component_1.LoadingComponent);
        _loadingCmpRef = loadingFactory.create(this.injecotr);
        if (config) {
            this.config = Object.assign({}, this.config, config);
        }
        var container = this.config.container;
        if (container === 'body') {
            document.querySelector(container).appendChild(_loadingCmpRef.location.nativeElement);
        }
        else {
            if (container instanceof core_1.ElementRef) {
                container.nativeElement.appendChild(_loadingCmpRef.location.nativeElement);
            }
        }
        _loadingCmpRef.instance.isActive = true;
        Object.assign(_loadingCmpRef.instance, this.config);
        _loadingCmpRef.instance.closed.subscribe(function (state) {
            if (!state) {
                _this.clearDom(_loadingCmpRef);
            }
        });
        _loadingCmpRef.changeDetectorRef.markForCheck();
        _loadingCmpRef.changeDetectorRef.detectChanges();
        return _loadingCmpRef.instance;
    };
    LoadingService.prototype.clearDom = function (_loadingCmpRef) {
        var loadingEl = _loadingCmpRef.location.nativeElement;
        if (loadingEl.parentNode) {
            loadingEl.parentNode.removeChild(loadingEl);
        }
        this.config = this.injecotr.get(loading_config_1.LOADING_DEFAULT_CONFIG);
        _loadingCmpRef.destroy();
        _loadingCmpRef = null;
    };
    LoadingService.decorators = [
        { type: core_1.Injectable },
    ];
    /** @nocollapse */
    LoadingService.ctorParameters = function () { return [
        { type: core_1.ApplicationRef, },
        { type: core_1.ComponentFactoryResolver, },
        { type: core_1.Injector, },
    ]; };
    return LoadingService;
}());
exports.LoadingService = LoadingService;
//# sourceMappingURL=loading.service.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/notify/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
var notifiy_options_1 = __webpack_require__("./node_modules/@farris/ui/notify/notifiy.options.js");
exports.NotifyConfig = notifiy_options_1.NotifyConfig;
exports.NotifyData = notifiy_options_1.NotifyData;
exports.NotifyEvent = notifiy_options_1.NotifyEvent;
exports.NotifyEventType = notifiy_options_1.NotifyEventType;
exports.NotifyOptions = notifiy_options_1.NotifyOptions;
__export(__webpack_require__("./node_modules/@farris/ui/notify/notify-container.component.js"));
__export(__webpack_require__("./node_modules/@farris/ui/notify/notify.component.js"));
__export(__webpack_require__("./node_modules/@farris/ui/notify/notify.service.js"));
__export(__webpack_require__("./node_modules/@farris/ui/notify/notify.module.js"));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/notify/notifiy.options.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var NotifyOptions = /** @class */ (function () {
    function NotifyOptions() {
    }
    NotifyOptions.decorators = [
        { type: core_1.Injectable },
    ];
    return NotifyOptions;
}());
exports.NotifyOptions = NotifyOptions;
var NotifyData = /** @class */ (function (_super) {
    __extends(NotifyData, _super);
    function NotifyData() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return NotifyData;
}(NotifyOptions));
exports.NotifyData = NotifyData;
var NotifyConfig = /** @class */ (function () {
    function NotifyConfig() {
        // Maximum number of toasties to show at once
        this.limit = 5;
        // Whether to show the 'X' icon to close the toast
        this.showClose = true;
        // The window position where the toast pops up
        this.position = 'bottom-right';
        // How long (in miliseconds) the toasty shows before it's removed. Set to null/0 to turn off.
        this.timeout = 5000;
        // What theme to use
        this.theme = 'bootstrap';
    }
    NotifyConfig.decorators = [
        { type: core_1.Injectable },
    ];
    return NotifyConfig;
}());
exports.NotifyConfig = NotifyConfig;
var NotifyEventType;
(function (NotifyEventType) {
    NotifyEventType[NotifyEventType["ADD"] = 0] = "ADD";
    NotifyEventType[NotifyEventType["CLEAR"] = 1] = "CLEAR";
    NotifyEventType[NotifyEventType["CLEAR_ALL"] = 2] = "CLEAR_ALL";
})(NotifyEventType = exports.NotifyEventType || (exports.NotifyEventType = {}));
var NotifyEvent = /** @class */ (function () {
    function NotifyEvent(type, value) {
        this.type = type;
        this.value = value;
    }
    return NotifyEvent;
}());
exports.NotifyEvent = NotifyEvent;
//# sourceMappingURL=notifiy.options.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/notify/notify-container.component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var util_1 = __webpack_require__("./node_modules/util/util.js");
var notify_component_1 = __webpack_require__("./node_modules/@farris/ui/notify/notify.component.js");
var NotifyContainerComponent = /** @class */ (function () {
    function NotifyContainerComponent() {
        this._position = '';
        this.animateCls = 'bounceInRight';
        this.id = '';
        this.empty = new core_1.EventEmitter();
        this.toasts = [];
    }
    Object.defineProperty(NotifyContainerComponent.prototype, "position", {
        get: function () {
            if (this._position) {
                return this._position;
            }
            else {
                return 'toasty-position-bottom-right';
            }
        },
        set: function (value) {
            if (value) {
                var notFound = true;
                for (var i = 0; i < NotifyContainerComponent.POSITIONS.length; i++) {
                    if (NotifyContainerComponent.POSITIONS[i] === value) {
                        notFound = false;
                        break;
                    }
                }
                if (notFound) {
                    value = this.config.position;
                }
            }
            else {
                value = this.config.position;
            }
            if (value === 'center-center') {
                this.animateCls = 'bounceIn';
            }
            else {
                var i = NotifyContainerComponent.POSITIONS.indexOf(value);
                this.animateCls = NotifyContainerComponent.ANIMATES[i];
            }
            this._position = 'toasty-position-' + value;
        },
        enumerable: true,
        configurable: true
    });
    NotifyContainerComponent.prototype.ngOnInit = function () { };
    NotifyContainerComponent.prototype.ngAfterContentChecked = function () {
        var _this = this;
        if (this.notifyCmpList && this.notifyCmpList.length) {
            this.notifyCmpList.forEach(function (cmp) {
                cmp.close.subscribe(function () {
                    _this.clear(cmp.toast.id);
                });
            });
        }
    };
    NotifyContainerComponent.prototype.closeToast = function (toast) {
        this.clear(toast.id);
    };
    NotifyContainerComponent.prototype.add = function (notify) {
        if (this.toasts.length >= this.config.limit) {
            this.toasts.shift();
        }
        this.toasts.push(notify);
        if (notify.timeout) {
            this._setTimeout(notify);
        }
    };
    NotifyContainerComponent.prototype.clear = function (id) {
        var _this = this;
        if (id) {
            this.toasts.forEach(function (value, key) {
                if (value.id === id) {
                    if (value.onRemove && util_1.isFunction(value.onRemove)) {
                        value.onRemove.call(_this, value);
                    }
                    _this.toasts.splice(key, 1);
                }
            });
            if (this.toasts.length === 0) {
                this.empty.emit();
            }
        }
        else {
            throw new Error('Please provide id of Toast to close');
        }
    };
    NotifyContainerComponent.prototype.clearAll = function () {
        var _this = this;
        this.toasts.forEach(function (value, key) {
            if (value.onRemove && util_1.isFunction(value.onRemove)) {
                value.onRemove.call(_this, value);
            }
        });
        this.toasts = [];
        this.empty.emit();
    };
    NotifyContainerComponent.prototype.findNotifyComponent = function (id) {
        return this.notifyCmpList.find(function (item) { return item.toast.id === id; });
    };
    NotifyContainerComponent.prototype._setTimeout = function (notify) {
        var _this = this;
        window.setTimeout(function () {
            // this.clear(notify.id);
            var cmp = _this.findNotifyComponent(notify.id);
            if (cmp) {
                cmp.state = true;
                cmp.inCls[cmp.animateCls] = false;
            }
        }, notify.timeout);
    };
    NotifyContainerComponent.POSITIONS = ['bottom-right', 'bottom-left',
        'top-right', 'top-left', 'top-center', 'bottom-center', 'center-center'];
    NotifyContainerComponent.ANIMATES = ['bounceInRight', 'bounceInLeft',
        'bounceInRight', 'bounceInLeft', 'bounceInDown', 'bounceInUp', 'bounceIn'];
    NotifyContainerComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'farris-notify-container',
                    template: "\n    <div [id]=\"id\" class=\"farris-notify\" [ngClass]=\"[position]\">\n        <farris-notify *ngFor=\"let toast of toasts\" [toast]=\"toast\" [animateCls]=\"animateCls\" (close)=\"closeToast(toast)\"></farris-notify>\n    </div>\n    "
                },] },
    ];
    /** @nocollapse */
    NotifyContainerComponent.ctorParameters = function () { return []; };
    NotifyContainerComponent.propDecorators = {
        "notifyCmpList": [{ type: core_1.ViewChildren, args: [notify_component_1.NotifyComponent,] },],
        "empty": [{ type: core_1.Output },],
        "position": [{ type: core_1.Input },],
    };
    return NotifyContainerComponent;
}());
exports.NotifyContainerComponent = NotifyContainerComponent;
//# sourceMappingURL=notify-container.component.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/notify/notify.component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var notifiy_options_1 = __webpack_require__("./node_modules/@farris/ui/notify/notifiy.options.js");
var NotifyComponent = /** @class */ (function () {
    function NotifyComponent() {
        this.close = new core_1.EventEmitter();
        this._state = false;
        this.outCls = '';
        this.inCls = {};
    }
    Object.defineProperty(NotifyComponent.prototype, "state", {
        get: function () {
            return this._state;
        },
        set: function (value) {
            var _this = this;
            this._state = value;
            if (value) {
                this.inCls[this.animateCls] = false;
                this.inCls['animated'] = value;
                this.inCls[this.outCls] = value;
                setTimeout(function () {
                    _this.close.next(_this.toast);
                }, 500);
            }
        },
        enumerable: true,
        configurable: true
    });
    NotifyComponent.prototype.ngOnInit = function () {
    };
    NotifyComponent.prototype.ngOnChanges = function (changes) {
        this.getAnimateCls(changes.animateCls.currentValue);
    };
    NotifyComponent.prototype.getAnimateCls = function (cls) {
        cls = cls || 'bounceInRight';
        this.outCls = 'bounceOut' + cls.substr(8);
        switch (cls.substr(8)) {
            case 'Up':
                this.outCls = 'bounceOutDown';
                break;
            case 'Down':
                this.outCls = 'bounceOutUp';
                break;
        }
        // outCls += tmp;
        this.inCls = (_a = {},
            _a[this.toast.type] = true,
            _a[this.toast.theme] = true,
            _a['animated'] = true,
            _a[cls] = true,
            _a[this.outCls] = this.state,
            _a);
        var _a;
    };
    NotifyComponent.prototype.closeToast = function (event) {
        event.preventDefault();
        this.state = true;
    };
    NotifyComponent.prototype.getPurType = function () {
        if (this.toast && this.toast.type) {
            return 'f-icon-' + this.toast.type.replace('toasty-type-', '');
        }
        return 'f-icon-default';
    };
    NotifyComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'farris-notify',
                    template: "\n        <div #notifyDiv class=\"toast\" [ngClass]=\"inCls\">\n            <button *ngIf=\"toast.showClose\" class=\"toast-close f-btn-icon f-bare\" (click)=\"closeToast($event)\">\n                <span class=\"f-icon modal_close\"></span>\n            </button>\n            <section class=\"modal-tips\"  *ngIf=\"toast.title || toast.msg\">\n                <div class=\"float-left modal-tips-iconwrap\">\n                    <span class=\"f-icon\" [ngClass]=\" getPurType()\"></span>\n                </div>\n                <div class=\"modal-tips-content\">\n                    <h5 class=\"modal-tips-title\"  *ngIf=\"toast.title\" class=\"toast-title\" [innerHTML]=\"toast.title | safeHtml\"></h5>\n                    <p *ngIf=\"toast.msg\" class=\"toast-msg\" [innerHtml]=\"toast.msg | safeHtml\"></p>\n                </div>\n            </section>\n        </div>\n    "
                    // animations: [
                    //     trigger('flyinout', [
                    //         transition('* => true', useAnimation(bounceInRight)),
                    //         transition('true => *', useAnimation(bounceOutRight))
                    //     ])
                    // ]
                },] },
    ];
    /** @nocollapse */
    NotifyComponent.ctorParameters = function () { return []; };
    NotifyComponent.propDecorators = {
        "toast": [{ type: core_1.Input },],
        "close": [{ type: core_1.Output },],
        "notifyDiv": [{ type: core_1.ViewChild, args: ['notifyDiv',] },],
        "animateCls": [{ type: core_1.Input },],
    };
    return NotifyComponent;
}());
exports.NotifyComponent = NotifyComponent;
//# sourceMappingURL=notify.component.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/notify/notify.module.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = __webpack_require__("./node_modules/@angular/common/esm5/common.js");
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var common_2 = __webpack_require__("./node_modules/@farris/ui/common/index.js");
var notify_component_1 = __webpack_require__("./node_modules/@farris/ui/notify/notify.component.js");
var notify_container_component_1 = __webpack_require__("./node_modules/@farris/ui/notify/notify-container.component.js");
var notify_service_1 = __webpack_require__("./node_modules/@farris/ui/notify/notify.service.js");
var NotifyModule = /** @class */ (function () {
    function NotifyModule() {
    }
    NotifyModule.forRoot = function () {
        return {
            ngModule: NotifyModule,
            providers: [notify_service_1.NotifyService]
        };
    };
    NotifyModule.decorators = [
        { type: core_1.NgModule, args: [{
                    imports: [
                        common_1.CommonModule,
                        common_2.FarrisCommonModule,
                    ],
                    declarations: [notify_component_1.NotifyComponent, notify_container_component_1.NotifyContainerComponent],
                    providers: [
                        // NotifyConfig,
                        // { provide: NotifyService, useFactory: notifyServiceFactory, deps: [NotifyConfig] }
                        notify_service_1.NotifyService
                    ],
                    exports: [
                        notify_component_1.NotifyComponent,
                        notify_container_component_1.NotifyContainerComponent
                    ],
                    entryComponents: [notify_container_component_1.NotifyContainerComponent]
                },] },
    ];
    return NotifyModule;
}());
exports.NotifyModule = NotifyModule;
//# sourceMappingURL=notify.module.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/notify/notify.service.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var Subject_1 = __webpack_require__("./node_modules/rxjs/Subject.js");
var notifiy_options_1 = __webpack_require__("./node_modules/@farris/ui/notify/notifiy.options.js");
var notify_container_component_1 = __webpack_require__("./node_modules/@farris/ui/notify/notify-container.component.js");
/**
 * Check and return true if an object is type of string
 * @param obj Analyse has to object the string type
 * @return result of analysis
 */
function isString(obj) {
    return typeof obj === 'string';
}
exports.isString = isString;
/**
 * Check and return true if an object is type of number
 * @param obj Analyse has to object the boolean type
 * @return result of analysis
 */
function isNumber(obj) {
    return typeof obj === 'number';
}
exports.isNumber = isNumber;
/**
 * Check and return true if an object is type of Function
 * @param obj Analyse has to object the function type
 * @return result of analysis
 */
function isFunction(obj) {
    return typeof obj === 'function';
}
exports.isFunction = isFunction;
var NotifyService = /** @class */ (function () {
    function NotifyService(cfr, injector, appRef) {
        this.cfr = cfr;
        this.injector = injector;
        this.appRef = appRef;
        // Init the counter
        this.uniqueCounter = 0;
        this.eventSource = new Subject_1.Subject();
        this.events = this.eventSource.asObservable();
        this.config = new notifiy_options_1.NotifyConfig();
    }
    NotifyService.prototype.default = function (options) {
        this.show(options, 'default');
    };
    NotifyService.prototype.info = function (options) {
        this.show(options, 'info');
    };
    NotifyService.prototype.success = function (options) {
        this.show(options, 'success');
    };
    NotifyService.prototype.warning = function (options) {
        this.show(options, 'warning');
    };
    NotifyService.prototype.error = function (options) {
        this.show(options, 'danger');
    };
    NotifyService.prototype.clearAll = function () {
        // this.eventSource.next(new NotifyEvent(NotifyEventType.CLEAR_ALL));
        this.notifyContainer.instance.clearAll();
    };
    NotifyService.prototype.clear = function (id) {
        // this.eventSource.next(new NotifyEvent(NotifyEventType.CLEAR, id));
        this.notifyContainer.instance.clear(id);
    };
    NotifyService.prototype.createContainer = function () {
        if (!this.notifyContainer) {
            var containerFac = this.cfr.resolveComponentFactory(notify_container_component_1.NotifyContainerComponent);
            var cmpRef = containerFac.create(this.injector);
            // cmpRef.instance.id = 'Farris-Notify-Container';
            this.appRef.attachView(cmpRef.hostView);
            document.querySelector('body').appendChild(cmpRef.location.nativeElement);
            this.notifyContainer = cmpRef;
        }
    };
    NotifyService.prototype.show = function (options, type) {
        var _this = this;
        this.createContainer();
        var notifyOptions;
        if (isString(options) && options !== '' || isNumber(options)) {
            notifyOptions = {
                title: '系统提示',
                msg: options.toString()
            };
        }
        else {
            notifyOptions = options;
        }
        if (!notifyOptions || !notifyOptions.title && !notifyOptions.msg) {
            throw new Error('Farris-Notify: No notify title or message specified!');
        }
        type = type || 'default';
        this.uniqueCounter++;
        var showClose = this._checkConfigItem(this.config, notifyOptions, 'showClose');
        var theme;
        if (notifyOptions.theme) {
            theme = NotifyService.THEMES.indexOf(notifyOptions.theme) > -1 ? notifyOptions.theme : this.config.theme;
        }
        else {
            theme = this.config.theme;
        }
        var newNotifyOpts = {
            id: this.uniqueCounter,
            title: notifyOptions.title,
            msg: notifyOptions.msg,
            showClose: showClose,
            type: 'toasty-type-' + type,
            theme: 'toasty-theme-' + theme,
            onAdd: notifyOptions.onAdd && isFunction(notifyOptions.onAdd) ? notifyOptions.onAdd : null,
            onRemove: notifyOptions.onRemove && isFunction(notifyOptions.onRemove) ? notifyOptions.onRemove : null
        };
        newNotifyOpts.timeout = notifyOptions.hasOwnProperty('timeout') ? notifyOptions.timeout : this.config.timeout;
        // this.eventSource.next(new NotifyEvent(NotifyEventType.ADD, newNotifyOpts));
        this.notifyContainer.instance.config = this.config;
        this.notifyContainer.instance.position = this.config.position;
        this.notifyContainer.instance.add(newNotifyOpts);
        this.notifyContainer.instance.empty.subscribe(function () {
            _this.clearDom();
        });
        this.notifyContainer.changeDetectorRef.markForCheck();
        this.notifyContainer.changeDetectorRef.detectChanges();
        if (notifyOptions.onAdd && isFunction(notifyOptions.onAdd)) {
            notifyOptions.onAdd.call(this, newNotifyOpts);
        }
    };
    NotifyService.prototype._checkConfigItem = function (config, options, property) {
        if (options[property] === false) {
            return false;
        }
        else if (!options[property]) {
            return config[property];
        }
        else {
            return true;
        }
    };
    NotifyService.prototype.clearDom = function () {
        if (this.notifyContainer) {
            var el = this.notifyContainer.location.nativeElement;
            if (el.parentNode) {
                el.parentNode.removeChild(el);
            }
            this.notifyContainer.destroy();
            this.notifyContainer = undefined;
        }
    };
    NotifyService.THEMES = ['default', 'material', 'bootstrap'];
    NotifyService.decorators = [
        { type: core_1.Injectable },
    ];
    /** @nocollapse */
    NotifyService.ctorParameters = function () { return [
        { type: core_1.ComponentFactoryResolver, },
        { type: core_1.Injector, },
        { type: core_1.ApplicationRef, },
    ]; };
    return NotifyService;
}());
exports.NotifyService = NotifyService;
// export function notifyServiceFactory(config: NotifyConfig): NotifyService  {
//     return new NotifyService(config, );
// }
//# sourceMappingURL=notify.service.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/panel/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var panel_module_1 = __webpack_require__("./node_modules/@farris/ui/panel/panel.module.js");
exports.FarrisPanelModule = panel_module_1.FarrisPanelModule;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/panel/panel-item/panel-item.component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var drop_animation_1 = __webpack_require__("./node_modules/@farris/ui/panel/util/drop.animation.js");
var panel_item_list_component_1 = __webpack_require__("./node_modules/@farris/ui/panel/panel/panel-item-list.component.js");
var FarrisPanelItemComponent = /** @class */ (function () {
    function FarrisPanelItemComponent(
        // 可选根组件引用
        foldPanel) {
        this.foldPanel = foldPanel;
        this.fold = true;
        // 禁用
        this.farrisPanelItem = true;
        // 默认panel 处于非激活状态
        // 单个panel样式
        this.single = false;
        this.isCard = true;
        this.active = false;
    }
    Object.defineProperty(FarrisPanelItemComponent.prototype, "width", {
        get: function () {
            // 对各个单位进行处理
            return this._width;
        },
        set: function (width) {
            this._width = this.resolveSize(width);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FarrisPanelItemComponent.prototype, "height", {
        get: function () {
            return this._height;
        },
        set: function (height) {
            this._height = this.resolveSize(height);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FarrisPanelItemComponent.prototype, "default", {
        get: function () {
            return !this.active && !this.disabled;
        },
        enumerable: true,
        configurable: true
    });
    FarrisPanelItemComponent.prototype.ngOnInit = function () {
        var _this = this;
        // 如果多个panel排列
        if (this.foldPanel) {
            var updateHandle = function () { return _this.isActive(); };
            this.foldPanel.subscriber.push(updateHandle);
            return;
        }
        // 如果设置panel不折叠  并处于永远激活状态
        if (!this.fold) {
            this.active = true;
        }
        //   设置单个panel样式
        this.single = true;
    };
    /*
     */
    /*
         */
    FarrisPanelItemComponent.prototype.isActive = /*
         */
    function () {
        var _this = this;
        this.active = this.foldPanel.model.some(function (val) { return _this.value === val; });
    };
    /*宽高类型是 string或者number 解析宽高  尺寸 */
    /*宽高类型是 string或者number 解析宽高  尺寸 */
    FarrisPanelItemComponent.prototype.resolveSize = /*宽高类型是 string或者number 解析宽高  尺寸 */
    function (size) {
        var regex = /px|em|rem|pt|%/;
        // 说明是字符串
        return regex.test(size) ? "" + parseInt(size, 10) + size.match(regex)[0] : size + "px";
    };
    /**
     * TODO 禁止事件捕获  不够完善
     * 激活 失去焦点 面板
     * @param event 事件对象
     */
    /**
         * TODO 禁止事件捕获  不够完善
         * 激活 失去焦点 面板
         * @param event 事件对象
         */
    FarrisPanelItemComponent.prototype.selectPanelItem = /**
         * TODO 禁止事件捕获  不够完善
         * 激活 失去焦点 面板
         * @param event 事件对象
         */
    function (e) {
        // 禁止事件捕获
        e.preventDefault();
        // e.stopPropagation();
        // e.
        // value 若为空  初始化随机数字符串
        if (e.target.nodeName === 'BUTTON') {
            return;
        }
        if (this.foldPanel) {
            if (this.value === null || this.value === undefined) {
                this.value = Math.random().toString(16).substring(2, 10);
            }
            this.foldPanel.updateModel(this.value);
            return;
        }
        if (!this.fold) {
            this.active = true;
            return;
        }
    };
    FarrisPanelItemComponent.prototype.start = function (e) {
        // if(){
        // }
        // this._show = false;
    };
    FarrisPanelItemComponent.prototype.done = function (e) {
    };
    FarrisPanelItemComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'farris-panel-item',
                    template: "<!-- <div class=\"card\" [class.single]=\"single\" [class.disabled]=\"disabled\" [style.width]=\"width\" [style.height]=\"height\"> --> <!-- <div class=\"card\"> --> <!-- 标题  是否有模板 --> <div class=\"card-header\" (click)=\"selectPanelItem($event)\"> <!-- 标题  是否有模板 --> <div class=\"panel-item-title\"> <span *ngIf=\"!headRef;else head\"> {{tabTitle}} </span> <span class=\"f-icon f-accordion-collapse\" *ngIf=\"!active&&fold\"></span> <span class=\"f-icon f-accordion-expand\" *ngIf=\"active&&fold\"></span> <ng-template #head [ngTemplateOutlet]=\"headRef\"></ng-template> </div> <div class=\"panel-item-tool\"> <ng-template [ngTemplateOutlet]=\"toolTempl\"></ng-template> </div> <div class=\"panel-item-clear\"> </div> </div> <!-- panel内容模板 --> <div #cardBody [@dropAnimation]=\"active?'active':'inactive'\"> <div class=\"card-body\"> <ng-template [ngTemplateOutlet]=\"contentRef\"></ng-template> </div> </div> <!-- </div> --> <!-- </div> -->",
                    styles: [".card-header{ cursor: pointer; } .panel-item-title { float: left; } .panel-item-tool { float: right; } .panel-item-clear { clear: both; } .f-state-disabled { pointer-events: none; } .single { border: 1px solid #dcdee2; }"],
                    animations: [drop_animation_1.dropAnimation],
                    encapsulation: core_1.ViewEncapsulation.None
                },] },
    ];
    /** @nocollapse */
    FarrisPanelItemComponent.ctorParameters = function () { return [
        { type: panel_item_list_component_1.FarrisPanelComponent, decorators: [{ type: core_1.Optional },] },
    ]; };
    FarrisPanelItemComponent.propDecorators = {
        "width": [{ type: core_1.Input },],
        "height": [{ type: core_1.Input },],
        "fold": [{ type: core_1.Input },],
        "value": [{ type: core_1.Input },],
        "tabTitle": [{ type: core_1.Input, args: ['title',] },],
        "farrisPanelItem": [{ type: core_1.HostBinding, args: ['class.farris-panel-item',] },],
        "disabled": [{ type: core_1.Input }, { type: core_1.HostBinding, args: ['class.f-state-disabled',] },],
        "headRef": [{ type: core_1.ContentChild, args: ['headTempl',] },],
        "toolTempl": [{ type: core_1.ContentChild, args: ['toolTempl',] },],
        "contentRef": [{ type: core_1.ContentChild, args: ['contentTempl',] },],
        "cardBody": [{ type: core_1.ViewChild, args: ['cardBody',] },],
        "isCard": [{ type: core_1.HostBinding, args: ['class.card',] },],
        "active": [{ type: core_1.HostBinding, args: ['class.f-state-selected',] },],
        "default": [{ type: core_1.HostBinding, args: ['class.f-state-default',] },],
    };
    return FarrisPanelItemComponent;
}());
exports.FarrisPanelItemComponent = FarrisPanelItemComponent;
//# sourceMappingURL=panel-item.component.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/panel/panel.module.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/esm5/common.js");
var panel_item_list_component_1 = __webpack_require__("./node_modules/@farris/ui/panel/panel/panel-item-list.component.js");
var panel_item_component_1 = __webpack_require__("./node_modules/@farris/ui/panel/panel-item/panel-item.component.js");
var kendo_angular_buttons_1 = __webpack_require__("./node_modules/@progress/kendo-angular-buttons/dist/es/index.js");
var FarrisPanelModule = /** @class */ (function () {
    function FarrisPanelModule() {
    }
    FarrisPanelModule.decorators = [
        { type: core_1.NgModule, args: [{
                    imports: [
                        common_1.CommonModule,
                        kendo_angular_buttons_1.ButtonModule,
                    ],
                    declarations: [
                        panel_item_component_1.FarrisPanelItemComponent,
                        panel_item_list_component_1.FarrisPanelComponent,
                    ],
                    exports: [
                        panel_item_component_1.FarrisPanelItemComponent,
                        panel_item_list_component_1.FarrisPanelComponent
                    ],
                },] },
    ];
    return FarrisPanelModule;
}());
exports.FarrisPanelModule = FarrisPanelModule;
//# sourceMappingURL=panel.module.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/panel/panel/panel-item-list.component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var FarrisPanelComponent = /** @class */ (function () {
    // 手风琴模式
    function FarrisPanelComponent(el, render) {
        // this.el.nativeElement.style.width = this.width;
        this.el = el;
        this.render = render;
        // @HostBinding('class.farris-panel') farrisPanel = true;
        // 设置手风琴模式  至多只有一个panel可以被选中
        this.accordion = false;
        this.subscriber = [];
        // 双向绑定 用于存取active状态的panel
        this.modelValue = [];
        // 双向绑定  当model数组改变时，相应的active状态的panel也要改变 从而改变视图
        // @ContentChildren(this.apply(FoldPanelItemComponent))
        this.panels = [];
        this.modelChange = new core_1.EventEmitter();
    }
    Object.defineProperty(FarrisPanelComponent.prototype, "width", {
        get: function () {
            // 对各个单位进行处理
            return this._width;
        },
        set: function (width) {
            this._width = this.resolveSize(width);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FarrisPanelComponent.prototype, "height", {
        get: function () {
            return this._height;
        },
        set: function (height) {
            this._height = this.resolveSize(height);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FarrisPanelComponent.prototype, "model", {
        get: function () {
            return this.modelValue;
        },
        set: function (modelValue) {
            // 获取用户输入的值
            this.modelValue = modelValue;
            this.updateSubscriber();
        },
        enumerable: true,
        configurable: true
    });
    FarrisPanelComponent.prototype.ngOnInit = function () {
        this.render.setStyle(this.el.nativeElement, 'width', this.width);
    };
    FarrisPanelComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        var timer = window.setTimeout(function () {
            _this.updateSubscriber();
            window.clearTimeout(timer);
        }, 0);
    };
    /*宽高类型是 string或者number 解析宽高  尺寸 */
    /*宽高类型是 string或者number 解析宽高  尺寸 */
    FarrisPanelComponent.prototype.resolveSize = /*宽高类型是 string或者number 解析宽高  尺寸 */
    function (size) {
        var regex = /px|em|rem|pt|%/;
        // 说明是字符串
        return regex.test(size) ? "" + parseInt(size, 10) + size.match(regex)[0] : size + "px";
    };
    /**
     * 通过改变model从而间接改变active

     * @param {string|number} value panel存储激活值

     */
    /**
         * 通过改变model从而间接改变active
    
         * @param {string|number} value panel存储激活值
    
         */
    FarrisPanelComponent.prototype.updateModel = /**
         * 通过改变model从而间接改变active
    
         * @param {string|number} value panel存储激活值
    
         */
    function (value) {
        var index = this.modelValue.findIndex(function (val) { return val === value; });
        // 如果没有匹配到点击的panel值  可能model里面不存在 可能model为空
        if (index < 0) {
            // 若是手风琴模式  先把所有panel处于未激活状态
            if (this.accordion) {
                this.model = [];
            }
            // 如果不是手风琴模式  直接激活即可
            this.modelValue.push(value);
            this.updateSubscriber();
            return this.modelChange.emit(this.modelValue);
        }
        // 如果index不为-1
        // 手风琴模式  关闭所有激活状态
        if (this.accordion) {
            this.model = [];
        }
        else {
            // 非手风琴模式 直接关闭当前panel即可
            this.modelValue.splice(index, 1);
        }
        this.updateSubscriber();
        this.modelChange.emit(this.modelValue);
    };
    FarrisPanelComponent.prototype.updateSubscriber = function () {
        this.subscriber.forEach(function (handle) { return handle(); });
    };
    FarrisPanelComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'farris-panel',
                    template: "<div class=\"farris-panel\" [class.accordion]=\"accordion\" [style.width]=\"width\" [style.height]=\"height\"> <ng-content> </ng-content> </div>",
                    styles: [""],
                    encapsulation: core_1.ViewEncapsulation.None
                },] },
    ];
    /** @nocollapse */
    FarrisPanelComponent.ctorParameters = function () { return [
        { type: core_1.ElementRef, },
        { type: core_1.Renderer2, },
    ]; };
    FarrisPanelComponent.propDecorators = {
        "title": [{ type: core_1.Input },],
        "accordion": [{ type: core_1.Input },],
        "width": [{ type: core_1.Input },],
        "height": [{ type: core_1.Input },],
        "model": [{ type: core_1.Input },],
        "modelChange": [{ type: core_1.Output },],
    };
    return FarrisPanelComponent;
}());
exports.FarrisPanelComponent = FarrisPanelComponent;
//# sourceMappingURL=panel-item-list.component.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/panel/util/drop.animation.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var animations_1 = __webpack_require__("./node_modules/@angular/animations/esm5/animations.js");
exports.dropAnimation = animations_1.trigger('dropAnimation', [
    animations_1.state('active', animations_1.style({
        'height': '*',
    })),
    animations_1.state('inactive', animations_1.style({
        'height': '0',
        'overflow': 'hidden'
    })),
    animations_1.transition('active<=>inactive', animations_1.animate(".35s ease")),
]);
//# sourceMappingURL=drop.animation.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/perfect-scorll/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var perfect_scrollbar_component_1 = __webpack_require__("./node_modules/@farris/ui/perfect-scorll/perfect-scrollbar.component.js");
exports.PerfectScrollbarComponent = perfect_scrollbar_component_1.PerfectScrollbarComponent;
var perfect_scrollbar_directive_1 = __webpack_require__("./node_modules/@farris/ui/perfect-scorll/perfect-scrollbar.directive.js");
exports.PerfectScrollbarDirective = perfect_scrollbar_directive_1.PerfectScrollbarDirective;
var perfect_scrollbar_interfaces_1 = __webpack_require__("./node_modules/@farris/ui/perfect-scorll/perfect-scrollbar.interfaces.js");
exports.Geometry = perfect_scrollbar_interfaces_1.Geometry;
exports.Position = perfect_scrollbar_interfaces_1.Position;
exports.PERFECT_SCROLLBAR_CONFIG = perfect_scrollbar_interfaces_1.PERFECT_SCROLLBAR_CONFIG;
exports.PerfectScrollbarConfig = perfect_scrollbar_interfaces_1.PerfectScrollbarConfig;
var perfect_scrollbar_module_1 = __webpack_require__("./node_modules/@farris/ui/perfect-scorll/perfect-scrollbar.module.js");
exports.PerfectScrollbarModule = perfect_scrollbar_module_1.PerfectScrollbarModule;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/perfect-scorll/perfect-scrollbar.component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * @Author: Lucas.Huang（疯狂秀才）
 * @Date: 2018-10-13 11:43:19
 * @Last Modified by:   Lucas.Huang（疯狂秀才）
 * @Last Modified time: 2018-10-13 11:43:19
 */
Object.defineProperty(exports, "__esModule", { value: true });
var Subject_1 = __webpack_require__("./node_modules/rxjs/Subject.js");
var fromEvent_1 = __webpack_require__("./node_modules/rxjs/observable/fromEvent.js");
var operators_1 = __webpack_require__("./node_modules/rxjs/operators.js");
var merge_1 = __webpack_require__("./node_modules/rxjs/observable/merge.js");
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/esm5/common.js");
var core_2 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var perfect_scrollbar_directive_1 = __webpack_require__("./node_modules/@farris/ui/perfect-scorll/perfect-scrollbar.directive.js");
var perfect_scrollbar_interfaces_1 = __webpack_require__("./node_modules/@farris/ui/perfect-scorll/perfect-scrollbar.interfaces.js");
var PerfectScrollbarComponent = /** @class */ (function () {
    function PerfectScrollbarComponent(zone, cdRef, platformId) {
        this.zone = zone;
        this.cdRef = cdRef;
        this.platformId = platformId;
        this.states = {};
        this.indicatorX = false;
        this.indicatorY = false;
        this.interaction = false;
        this.scrollPositionX = 0;
        this.scrollPositionY = 0;
        this.scrollDirectionX = 0;
        this.scrollDirectionY = 0;
        this.usePropagationX = false;
        this.usePropagationY = false;
        this.allowPropagationX = false;
        this.allowPropagationY = false;
        this.stateTimeout = null;
        this.ngDestroy = new Subject_1.Subject();
        this.stateUpdate = new Subject_1.Subject();
        this.disabled = false;
        this.usePSClass = true;
        this.autoPropagation = false;
        this.scrollIndicators = false;
        this.psScrollY = new core_2.EventEmitter();
        this.psScrollX = new core_2.EventEmitter();
        this.psScrollUp = new core_2.EventEmitter();
        this.psScrollDown = new core_2.EventEmitter();
        this.psScrollLeft = new core_2.EventEmitter();
        this.psScrollRight = new core_2.EventEmitter();
        this.psYReachEnd = new core_2.EventEmitter();
        this.psYReachStart = new core_2.EventEmitter();
        this.psXReachEnd = new core_2.EventEmitter();
        this.psXReachStart = new core_2.EventEmitter();
    }
    PerfectScrollbarComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (common_1.isPlatformBrowser(this.platformId)) {
            this.stateUpdate
                .pipe(operators_1.takeUntil(this.ngDestroy), operators_1.distinctUntilChanged(function (a, b) { return a === b && !_this.stateTimeout; }))
                .subscribe(function (state) {
                if (_this.stateTimeout && typeof window !== 'undefined') {
                    window.clearTimeout(_this.stateTimeout);
                    _this.stateTimeout = null;
                }
                if (state === 'x' || state === 'y') {
                    _this.interaction = false;
                    if (state === 'x') {
                        _this.indicatorX = false;
                        _this.states.left = false;
                        _this.states.right = false;
                        if (_this.autoPropagation && _this.usePropagationX) {
                            _this.allowPropagationX = false;
                        }
                    }
                    else if (state === 'y') {
                        _this.indicatorY = false;
                        _this.states.top = false;
                        _this.states.bottom = false;
                        if (_this.autoPropagation && _this.usePropagationY) {
                            _this.allowPropagationY = false;
                        }
                    }
                }
                else {
                    if (state === 'left' || state === 'right') {
                        _this.states.left = false;
                        _this.states.right = false;
                        _this.states[state] = true;
                        if (_this.autoPropagation && _this.usePropagationX) {
                            _this.indicatorX = true;
                        }
                    }
                    else if (state === 'top' || state === 'bottom') {
                        _this.states.top = false;
                        _this.states.bottom = false;
                        _this.states[state] = true;
                        if (_this.autoPropagation && _this.usePropagationY) {
                            _this.indicatorY = true;
                        }
                    }
                    if (_this.autoPropagation && typeof window !== 'undefined') {
                        _this.stateTimeout = window.setTimeout(function () {
                            _this.indicatorX = false;
                            _this.indicatorY = false;
                            _this.stateTimeout = null;
                            if (_this.interaction &&
                                (_this.states.left || _this.states.right)) {
                                _this.allowPropagationX = true;
                            }
                            if (_this.interaction &&
                                (_this.states.top || _this.states.bottom)) {
                                _this.allowPropagationY = true;
                            }
                            _this.cdRef.markForCheck();
                        }, 500);
                    }
                }
                _this.cdRef.markForCheck();
                _this.cdRef.detectChanges();
            });
            this.zone.runOutsideAngular(function () {
                if (_this.directiveRef) {
                    var element = _this.directiveRef.elementRef.nativeElement;
                    fromEvent_1.fromEvent(element, 'wheel')
                        .pipe(operators_1.takeUntil(_this.ngDestroy))
                        .subscribe(function (event) {
                        if (!_this.disabled && _this.autoPropagation) {
                            var scrollDeltaX = event.deltaX;
                            var scrollDeltaY = event.deltaY;
                            _this.checkPropagation(event, scrollDeltaX, scrollDeltaY);
                        }
                    });
                    fromEvent_1.fromEvent(element, 'touchmove')
                        .pipe(operators_1.takeUntil(_this.ngDestroy))
                        .subscribe(function (event) {
                        if (!_this.disabled && _this.autoPropagation) {
                            var scrollPositionX = event.touches[0].clientX;
                            var scrollPositionY = event.touches[0].clientY;
                            var scrollDeltaX = scrollPositionX - _this.scrollPositionX;
                            var scrollDeltaY = scrollPositionY - _this.scrollPositionY;
                            _this.checkPropagation(event, scrollDeltaX, scrollDeltaY);
                            _this.scrollPositionX = scrollPositionX;
                            _this.scrollPositionY = scrollPositionY;
                        }
                    });
                    merge_1.merge(fromEvent_1.fromEvent(element, 'ps-scroll-x').pipe(operators_1.map(function (event) { return (event.state = 'x'); })), fromEvent_1.fromEvent(element, 'ps-scroll-y').pipe(operators_1.map(function (event) { return (event.state = 'y'); })), fromEvent_1.fromEvent(element, 'ps-x-reach-end').pipe(operators_1.map(function (event) { return (event.state = 'right'); })), fromEvent_1.fromEvent(element, 'ps-y-reach-end').pipe(operators_1.map(function (event) { return (event.state = 'bottom'); })), fromEvent_1.fromEvent(element, 'ps-x-reach-start').pipe(operators_1.map(function (event) { return (event.state = 'left'); })), fromEvent_1.fromEvent(element, 'ps-y-reach-start').pipe(operators_1.map(function (event) { return (event.state = 'top'); })))
                        .pipe(operators_1.takeUntil(_this.ngDestroy))
                        .subscribe(function (event) {
                        if (!_this.disabled &&
                            (_this.autoPropagation || _this.scrollIndicators)) {
                            _this.stateUpdate.next(event.state);
                        }
                    });
                }
            });
            window.setTimeout(function () {
                perfect_scrollbar_interfaces_1.PerfectScrollbarEvents.forEach(function (eventName) {
                    if (_this.directiveRef) {
                        _this.directiveRef[eventName] = _this[eventName];
                    }
                });
            }, 0);
        }
    };
    PerfectScrollbarComponent.prototype.ngOnDestroy = function () {
        if (common_1.isPlatformBrowser(this.platformId)) {
            this.ngDestroy.next();
            this.ngDestroy.unsubscribe();
            if (this.stateTimeout && typeof window !== 'undefined') {
                window.clearTimeout(this.stateTimeout);
            }
        }
    };
    PerfectScrollbarComponent.prototype.ngDoCheck = function () {
        if (common_1.isPlatformBrowser(this.platformId)) {
            if (!this.disabled && this.autoPropagation && this.directiveRef) {
                var element = this.directiveRef.elementRef.nativeElement;
                this.usePropagationX = element.classList.contains('ps--active-x');
                this.usePropagationY = element.classList.contains('ps--active-y');
            }
        }
    };
    PerfectScrollbarComponent.prototype.checkPropagation = function (event, deltaX, deltaY) {
        this.interaction = true;
        var scrollDirectionX = deltaX < 0 ? -1 : 1;
        var scrollDirectionY = deltaY < 0 ? -1 : 1;
        if ((this.usePropagationX && this.usePropagationY) ||
            (this.usePropagationX &&
                (!this.allowPropagationX ||
                    this.scrollDirectionX !== scrollDirectionX)) ||
            (this.usePropagationY &&
                (!this.allowPropagationY || this.scrollDirectionY !== scrollDirectionY))) {
            event.preventDefault();
            event.stopPropagation();
        }
        if (!!deltaX) {
            this.scrollDirectionX = scrollDirectionX;
        }
        if (!!deltaY) {
            this.scrollDirectionY = scrollDirectionY;
        }
        this.stateUpdate.next('interaction');
        this.cdRef.detectChanges();
    };
    PerfectScrollbarComponent.decorators = [
        { type: core_2.Component, args: [{
                    selector: 'perfect-scrollbar',
                    exportAs: 'ngxPerfectScrollbar',
                    template: "<div style=\"position: static;\" [class.ps]=\"usePSClass\" [perfectScrollbar]=\"config\" [disabled]=\"disabled\"> <div class=\"ps-content\"> <ng-content></ng-content> </div> <div *ngIf=\"scrollIndicators\" class=\"ps-overlay\" [class.ps-at-top]=\"states.top\" [class.ps-at-left]=\"states.left\" [class.ps-at-right]=\"states.right\" [class.ps-at-bottom]=\"states.bottom\"> <div class=\"ps-indicator-top\" [class.ps-indicator-show]=\"indicatorY && interaction\"></div> <div class=\"ps-indicator-left\" [class.ps-indicator-show]=\"indicatorX && interaction\"></div> <div class=\"ps-indicator-right\" [class.ps-indicator-show]=\"indicatorX && interaction\"></div> <div class=\"ps-indicator-bottom\" [class.ps-indicator-show]=\"indicatorY && interaction\"></div> </div> </div> ",
                    styles: ["/* * Container style */ .ps { overflow: hidden !important; overflow-anchor: none; -ms-overflow-style: none; touch-action: auto; -ms-touch-action: auto; } /* * Scrollbar rail styles */ .ps__rail-x { display: none; opacity: 0; transition: background-color .2s linear, opacity .2s linear; -webkit-transition: background-color .2s linear, opacity .2s linear; height: 15px; /* there must be 'bottom' or 'top' for ps__rail-x */ bottom: 0px; /* please don't change 'position' */ position: absolute; } .ps__rail-y { display: none; opacity: 0; transition: background-color .2s linear, opacity .2s linear; -webkit-transition: background-color .2s linear, opacity .2s linear; width: 15px; /* there must be 'right' or 'left' for ps__rail-y */ right: 0; /* please don't change 'position' */ position: absolute; } .ps--active-x > .ps__rail-x, .ps--active-y > .ps__rail-y { display: block; background-color: transparent; } .ps:hover > .ps__rail-x, .ps:hover > .ps__rail-y, .ps--focus > .ps__rail-x, .ps--focus > .ps__rail-y, .ps--scrolling-x > .ps__rail-x, .ps--scrolling-y > .ps__rail-y { opacity: 0.6; } .ps__rail-x:hover, .ps__rail-y:hover, .ps__rail-x:focus, .ps__rail-y:focus { background-color: #eee; opacity: 0.9; } /* * Scrollbar thumb styles */ .ps__thumb-x { background-color: #aaa; border-radius: 6px; transition: background-color .2s linear, height .2s ease-in-out; -webkit-transition: background-color .2s linear, height .2s ease-in-out; height: 6px; /* there must be 'bottom' for ps__thumb-x */ bottom: 2px; /* please don't change 'position' */ position: absolute; } .ps__thumb-y { background-color: #aaa; border-radius: 6px; transition: background-color .2s linear, width .2s ease-in-out; -webkit-transition: background-color .2s linear, width .2s ease-in-out; width: 6px; /* there must be 'right' for ps__thumb-y */ right: 2px; /* please don't change 'position' */ position: absolute; } .ps__rail-x:hover > .ps__thumb-x, .ps__rail-x:focus > .ps__thumb-x { background-color: #999; height: 11px; } .ps__rail-y:hover > .ps__thumb-y, .ps__rail-y:focus > .ps__thumb-y { background-color: #999; width: 11px; } /* MS supports */ @supports (-ms-overflow-style: none) { .ps { overflow: auto !important; } } @media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) { .ps { overflow: auto !important; } } /* TODO: Remove important flags after this bug if fixed: https://github.com/angular/flex-layout/issues/381 */ perfect-scrollbar { position: relative; display: block; overflow: hidden; width: 100%; height: 100%; max-width: 100%; max-height: 100%; /* stylelint-disable */ /* stylelint-enable */ } perfect-scrollbar[hidden] { display: none; } perfect-scrollbar[fxflex] { display: flex; flex-direction: column; -webkit-box-orient: column; -webkit-box-direction: column; height: auto; min-width: 0; min-height: 0; } perfect-scrollbar[fxflex] > .ps { flex: 1 1 auto; -ms-flex: 1 1 auto; -webkit-box-flex: 1; width: auto; height: auto; min-width: 0; min-height: 0; } perfect-scrollbar[fxlayout] > .ps, perfect-scrollbar[fxlayout] > .ps > .ps-content { display: flex; flex: 1 1 auto; -ms-flex: 1 1 auto; -webkit-box-flex: 1; align-item: inherit; place-content: inherit; -webkit-box-pack: inherit; -webkit-box-align: inherit; flex-direction: inherit; -webkit-box-orient: inherit; -webkit-box-direction: inherit; width: 100%; height: 100%; } perfect-scrollbar[fxlayout=\"row\"] > .ps, perfect-scrollbar[fxlayout=\"row\"] > .ps > .ps-content { flex-direction: row !important; -webkit-box-orient: row !important; -webkit-box-direction: row !important; } perfect-scrollbar[fxlayout=\"column\"] > .ps, perfect-scrollbar[fxlayout=\"column\"] > .ps > .ps-content { flex-direction: column !important; -webkit-box-orient: column !important; -webkit-box-direction: column !important; } perfect-scrollbar > .ps { position: static; display: block; width: inherit; height: inherit; max-width: inherit; max-height: inherit; } perfect-scrollbar > .ps > .ps-overlay { position: absolute; top: 0; right: 0; bottom: 0; left: 0; display: block; overflow: hidden; pointer-events: none; } perfect-scrollbar > .ps > .ps-overlay .ps-indicator-top, perfect-scrollbar > .ps > .ps-overlay .ps-indicator-left, perfect-scrollbar > .ps > .ps-overlay .ps-indicator-right, perfect-scrollbar > .ps > .ps-overlay .ps-indicator-bottom { position: absolute; opacity: 0; transition: opacity 300ms ease-in-out; } perfect-scrollbar > .ps > .ps-overlay .ps-indicator-top, perfect-scrollbar > .ps > .ps-overlay .ps-indicator-bottom { left: 0; min-width: 100%; min-height: 24px; } perfect-scrollbar > .ps > .ps-overlay .ps-indicator-left, perfect-scrollbar > .ps > .ps-overlay .ps-indicator-right { top: 0; min-width: 24px; min-height: 100%; } perfect-scrollbar > .ps > .ps-overlay .ps-indicator-top { top: 0; } perfect-scrollbar > .ps > .ps-overlay .ps-indicator-left { left: 0; } perfect-scrollbar > .ps > .ps-overlay .ps-indicator-right { right: 0; } perfect-scrollbar > .ps > .ps-overlay .ps-indicator-bottom { bottom: 0; } perfect-scrollbar > .ps.ps--active-y > .ps__rail-y { top: 0 !important; right: 0 !important; left: auto !important; width: 10px; cursor: default; transition: width 200ms linear, opacity 200ms linear, background-color 200ms linear; } perfect-scrollbar > .ps.ps--active-y > .ps__rail-y:hover { width: 15px; } perfect-scrollbar > .ps.ps--active-x > .ps__rail-x { top: auto !important; bottom: 0 !important; left: 0 !important; height: 10px; cursor: default; transition: height 200ms linear, opacity 200ms linear, background-color 200ms linear; } perfect-scrollbar > .ps.ps--active-x > .ps__rail-x:hover { height: 15px; } perfect-scrollbar > .ps.ps--active-x.ps--active-y > .ps__rail-y { margin: 0 0 10px; } perfect-scrollbar > .ps.ps--active-x.ps--active-y > .ps__rail-x { margin: 0 10px 0 0; } perfect-scrollbar > .ps.ps--scrolling-y > .ps__rail-y { opacity: 0.9; background-color: #eee; } perfect-scrollbar > .ps.ps--scrolling-x > .ps__rail-x { opacity: 0.9; background-color: #eee; } perfect-scrollbar.ps-show-always > .ps.ps--active-y > .ps__rail-y { opacity: 0.6; } perfect-scrollbar.ps-show-always > .ps.ps--active-x > .ps__rail-x { opacity: 0.6; } perfect-scrollbar.ps-show-active > .ps.ps--active-y > .ps-overlay:not(.ps-at-top) .ps-indicator-top { opacity: 1; background: linear-gradient(to bottom, rgba(255, 255, 255, 0.5) 0%, rgba(255, 255, 255, 0) 100%); } perfect-scrollbar.ps-show-active > .ps.ps--active-y > .ps-overlay:not(.ps-at-bottom) .ps-indicator-bottom { opacity: 1; background: linear-gradient(to top, rgba(255, 255, 255, 0.5) 0%, rgba(255, 255, 255, 0) 100%); } perfect-scrollbar.ps-show-active > .ps.ps--active-x > .ps-overlay:not(.ps-at-left) .ps-indicator-left { opacity: 1; background: linear-gradient(to right, rgba(255, 255, 255, 0.5) 0%, rgba(255, 255, 255, 0) 100%); } perfect-scrollbar.ps-show-active > .ps.ps--active-x > .ps-overlay:not(.ps-at-right) .ps-indicator-right { opacity: 1; background: linear-gradient(to left, rgba(255, 255, 255, 0.5) 0%, rgba(255, 255, 255, 0) 100%); } perfect-scrollbar.ps-show-active.ps-show-limits > .ps.ps--active-y > .ps-overlay.ps-at-top .ps-indicator-top { background: linear-gradient(to bottom, rgba(170, 170, 170, 0.5) 0%, rgba(170, 170, 170, 0) 100%); } perfect-scrollbar.ps-show-active.ps-show-limits > .ps.ps--active-y > .ps-overlay.ps-at-top .ps-indicator-top.ps-indicator-show { opacity: 1; } perfect-scrollbar.ps-show-active.ps-show-limits > .ps.ps--active-y > .ps-overlay.ps-at-bottom .ps-indicator-bottom { background: linear-gradient(to top, rgba(170, 170, 170, 0.5) 0%, rgba(170, 170, 170, 0) 100%); } perfect-scrollbar.ps-show-active.ps-show-limits > .ps.ps--active-y > .ps-overlay.ps-at-bottom .ps-indicator-bottom.ps-indicator-show { opacity: 1; } perfect-scrollbar.ps-show-active.ps-show-limits > .ps.ps--active-x > .ps-overlay.ps-at-left .ps-indicator-left { background: linear-gradient(to right, rgba(170, 170, 170, 0.5) 0%, rgba(170, 170, 170, 0) 100%); } perfect-scrollbar.ps-show-active.ps-show-limits > .ps.ps--active-x > .ps-overlay.ps-at-left .ps-indicator-left.ps-indicator-show { opacity: 1; } perfect-scrollbar.ps-show-active.ps-show-limits > .ps.ps--active-x > .ps-overlay.ps-at-right .ps-indicator-right { background: linear-gradient(to left, rgba(170, 170, 170, 0.5) 0%, rgba(170, 170, 170, 0) 100%); } perfect-scrollbar.ps-show-active.ps-show-limits > .ps.ps--active-x > .ps-overlay.ps-at-right .ps-indicator-right.ps-indicator-show { opacity: 1; } /*# sourceMappingURL=perfect-scrollbar.component.css.map */"],
                    encapsulation: core_2.ViewEncapsulation.None
                },] },
    ];
    /** @nocollapse */
    PerfectScrollbarComponent.ctorParameters = function () { return [
        { type: core_2.NgZone, },
        { type: core_2.ChangeDetectorRef, },
        { type: Object, decorators: [{ type: core_2.Inject, args: [core_1.PLATFORM_ID,] },] },
    ]; };
    PerfectScrollbarComponent.propDecorators = {
        "disabled": [{ type: core_2.Input },],
        "usePSClass": [{ type: core_2.Input },],
        "autoPropagation": [{ type: core_2.HostBinding, args: ['class.ps-show-limits',] }, { type: core_2.Input },],
        "scrollIndicators": [{ type: core_2.HostBinding, args: ['class.ps-show-active',] }, { type: core_2.Input },],
        "config": [{ type: core_2.Input },],
        "psScrollY": [{ type: core_2.Output },],
        "psScrollX": [{ type: core_2.Output },],
        "psScrollUp": [{ type: core_2.Output },],
        "psScrollDown": [{ type: core_2.Output },],
        "psScrollLeft": [{ type: core_2.Output },],
        "psScrollRight": [{ type: core_2.Output },],
        "psYReachEnd": [{ type: core_2.Output },],
        "psYReachStart": [{ type: core_2.Output },],
        "psXReachEnd": [{ type: core_2.Output },],
        "psXReachStart": [{ type: core_2.Output },],
        "directiveRef": [{ type: core_2.ViewChild, args: [perfect_scrollbar_directive_1.PerfectScrollbarDirective,] },],
    };
    return PerfectScrollbarComponent;
}());
exports.PerfectScrollbarComponent = PerfectScrollbarComponent;
//# sourceMappingURL=perfect-scrollbar.component.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/perfect-scorll/perfect-scrollbar.directive.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var perfect_scrollbar_1 = __webpack_require__("./node_modules/perfect-scrollbar/dist/perfect-scrollbar.esm.js");
var resize_observer_polyfill_1 = __webpack_require__("./node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js");
var Subject_1 = __webpack_require__("./node_modules/rxjs/Subject.js");
var fromEvent_1 = __webpack_require__("./node_modules/rxjs/observable/fromEvent.js");
var operators_1 = __webpack_require__("./node_modules/rxjs/operators.js");
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/esm5/common.js");
var core_2 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var perfect_scrollbar_interfaces_1 = __webpack_require__("./node_modules/@farris/ui/perfect-scorll/perfect-scrollbar.interfaces.js");
var perfect_scrollbar_interfaces_2 = __webpack_require__("./node_modules/@farris/ui/perfect-scorll/perfect-scrollbar.interfaces.js");
var PerfectScrollbarDirective = /** @class */ (function () {
    function PerfectScrollbarDirective(zone, differs, elementRef, platformId, defaults) {
        this.zone = zone;
        this.differs = differs;
        this.elementRef = elementRef;
        this.platformId = platformId;
        this.defaults = defaults;
        this.instance = null;
        this.ro = null;
        this.timeout = null;
        this.animation = null;
        this.configDiff = null;
        this.ngDestroy = new Subject_1.Subject();
        this.disabled = false;
        this.psScrollY = new core_2.EventEmitter();
        this.psScrollX = new core_2.EventEmitter();
        this.psScrollUp = new core_2.EventEmitter();
        this.psScrollDown = new core_2.EventEmitter();
        this.psScrollLeft = new core_2.EventEmitter();
        this.psScrollRight = new core_2.EventEmitter();
        this.psYReachEnd = new core_2.EventEmitter();
        this.psYReachStart = new core_2.EventEmitter();
        this.psXReachEnd = new core_2.EventEmitter();
        this.psXReachStart = new core_2.EventEmitter();
    }
    PerfectScrollbarDirective.prototype.ngOnInit = function () {
        var _this = this;
        if (!this.disabled && common_1.isPlatformBrowser(this.platformId)) {
            var config_1 = new perfect_scrollbar_interfaces_2.PerfectScrollbarConfig(this.defaults);
            config_1.assign(this.config); // Custom configuration
            this.zone.runOutsideAngular(function () {
                _this.instance = new perfect_scrollbar_1.default(_this.elementRef.nativeElement, config_1);
            });
            if (!this.configDiff) {
                this.configDiff = this.differs.find(this.config || {}).create();
                this.configDiff.diff(this.config || {});
            }
            this.zone.runOutsideAngular(function () {
                _this.ro = new resize_observer_polyfill_1.default(function (entries, observer) {
                    _this.update();
                });
                if (_this.elementRef.nativeElement.children[0]) {
                    _this.ro.observe(_this.elementRef.nativeElement.children[0]);
                }
                _this.ro.observe(_this.elementRef.nativeElement);
            });
            this.zone.runOutsideAngular(function () {
                perfect_scrollbar_interfaces_2.PerfectScrollbarEvents.forEach(function (eventName) {
                    var eventType = eventName.replace(/([A-Z])/g, function (c) { return "-" + c.toLowerCase(); });
                    fromEvent_1.fromEvent(_this.elementRef.nativeElement, eventType)
                        .pipe(operators_1.debounceTime(0), operators_1.takeUntil(_this.ngDestroy))
                        .subscribe(function (event) {
                        _this[eventName].emit(event);
                    });
                });
            });
        }
    };
    PerfectScrollbarDirective.prototype.ngOnDestroy = function () {
        var _this = this;
        if (common_1.isPlatformBrowser(this.platformId)) {
            this.ngDestroy.next();
            this.ngDestroy.complete();
            if (this.ro) {
                this.ro.disconnect();
            }
            if (this.timeout && typeof window !== 'undefined') {
                window.clearTimeout(this.timeout);
            }
            this.zone.runOutsideAngular(function () {
                if (_this.instance) {
                    _this.instance.destroy();
                }
            });
            this.instance = null;
        }
    };
    PerfectScrollbarDirective.prototype.ngDoCheck = function () {
        if (!this.disabled && this.configDiff && common_1.isPlatformBrowser(this.platformId)) {
            var changes = this.configDiff.diff(this.config || {});
            if (changes) {
                this.ngOnDestroy();
                this.ngOnInit();
            }
        }
    };
    PerfectScrollbarDirective.prototype.ngOnChanges = function (changes) {
        if (changes['disabled'] && !changes['disabled'].isFirstChange() && common_1.isPlatformBrowser(this.platformId)) {
            if (changes['disabled'].currentValue !== changes['disabled'].previousValue) {
                if (changes['disabled'].currentValue === true) {
                    this.ngOnDestroy();
                }
                else if (changes['disabled'].currentValue === false) {
                    this.ngOnInit();
                }
            }
        }
    };
    PerfectScrollbarDirective.prototype.ps = function () {
        return this.instance;
    };
    PerfectScrollbarDirective.prototype.update = function () {
        var _this = this;
        if (typeof window !== 'undefined') {
            if (this.timeout) {
                window.clearTimeout(this.timeout);
            }
            this.timeout = window.setTimeout(function () {
                if (!_this.disabled && _this.configDiff) {
                    try {
                        _this.zone.runOutsideAngular(function () {
                            if (_this.instance) {
                                _this.instance.update();
                            }
                        });
                    }
                    catch (error) {
                        // Update can be finished after destroy so catch errors
                    }
                }
            }, 0);
        }
    };
    PerfectScrollbarDirective.prototype.geometry = function (prefix) {
        if (prefix === void 0) { prefix = 'scroll'; }
        return new perfect_scrollbar_interfaces_1.Geometry(this.elementRef.nativeElement[prefix + 'Left'], this.elementRef.nativeElement[prefix + 'Top'], this.elementRef.nativeElement[prefix + 'Width'], this.elementRef.nativeElement[prefix + 'Height']);
    };
    PerfectScrollbarDirective.prototype.position = function (absolute) {
        if (absolute === void 0) { absolute = false; }
        if (!absolute && this.instance) {
            return new perfect_scrollbar_interfaces_1.Position(this.instance.reach.x || 0, this.instance.reach.y || 0);
        }
        else {
            return new perfect_scrollbar_interfaces_1.Position(this.elementRef.nativeElement.scrollLeft, this.elementRef.nativeElement.scrollTop);
        }
    };
    PerfectScrollbarDirective.prototype.scrollable = function (direction) {
        if (direction === void 0) { direction = 'any'; }
        var element = this.elementRef.nativeElement;
        if (direction === 'any') {
            return element.classList.contains('ps--active-x') ||
                element.classList.contains('ps--active-y');
        }
        else if (direction === 'both') {
            return element.classList.contains('ps--active-x') &&
                element.classList.contains('ps--active-y');
        }
        else {
            return element.classList.contains('ps--active-' + direction);
        }
    };
    PerfectScrollbarDirective.prototype.scrollTo = function (x, y, speed) {
        if (!this.disabled) {
            if (y == null && speed == null) {
                this.animateScrolling('scrollTop', x, speed);
            }
            else {
                if (x != null) {
                    this.animateScrolling('scrollLeft', x, speed);
                }
                if (y != null) {
                    this.animateScrolling('scrollTop', y, speed);
                }
            }
        }
    };
    PerfectScrollbarDirective.prototype.scrollToX = function (x, speed) {
        this.animateScrolling('scrollLeft', x, speed);
    };
    PerfectScrollbarDirective.prototype.scrollToY = function (y, speed) {
        this.animateScrolling('scrollTop', y, speed);
    };
    PerfectScrollbarDirective.prototype.scrollToTop = function (offset, speed) {
        this.animateScrolling('scrollTop', (offset || 0), speed);
    };
    PerfectScrollbarDirective.prototype.scrollToLeft = function (offset, speed) {
        this.animateScrolling('scrollLeft', (offset || 0), speed);
    };
    PerfectScrollbarDirective.prototype.scrollToRight = function (offset, speed) {
        var left = this.elementRef.nativeElement.scrollWidth -
            this.elementRef.nativeElement.clientWidth;
        this.animateScrolling('scrollLeft', left - (offset || 0), speed);
    };
    PerfectScrollbarDirective.prototype.scrollToBottom = function (offset, speed) {
        var top = this.elementRef.nativeElement.scrollHeight -
            this.elementRef.nativeElement.clientHeight;
        this.animateScrolling('scrollTop', top - (offset || 0), speed);
    };
    PerfectScrollbarDirective.prototype.scrollToElement = function (qs, offset, speed) {
        var element = this.elementRef.nativeElement.querySelector(qs);
        if (element) {
            var elementPos = element.getBoundingClientRect();
            var scrollerPos = this.elementRef.nativeElement.getBoundingClientRect();
            if (this.elementRef.nativeElement.classList.contains('ps--active-x')) {
                var currentPos = this.elementRef.nativeElement['scrollLeft'];
                var position = elementPos.left - scrollerPos.left + currentPos;
                this.animateScrolling('scrollLeft', position + (offset || 0), speed);
            }
            if (this.elementRef.nativeElement.classList.contains('ps--active-y')) {
                var currentPos = this.elementRef.nativeElement['scrollTop'];
                var position = elementPos.top - scrollerPos.top + currentPos;
                this.animateScrolling('scrollTop', position + (offset || 0), speed);
            }
        }
    };
    PerfectScrollbarDirective.prototype.animateScrolling = function (target, value, speed) {
        var _this = this;
        if (this.animation) {
            window.cancelAnimationFrame(this.animation);
            this.animation = null;
        }
        if (!speed || typeof window === 'undefined') {
            var oldValue = this.elementRef.nativeElement[target];
            this.elementRef.nativeElement[target] = value;
        }
        else if (value !== this.elementRef.nativeElement[target]) {
            var newValue_1 = 0;
            var scrollCount_1 = 0;
            var oldTimestamp_1 = performance.now();
            var oldValue_1 = this.elementRef.nativeElement[target];
            var cosParameter_1 = (oldValue_1 - value) / 2;
            var step_1 = function (newTimestamp) {
                scrollCount_1 += Math.PI / (speed / (newTimestamp - oldTimestamp_1));
                newValue_1 = Math.round(value + cosParameter_1 + cosParameter_1 * Math.cos(scrollCount_1));
                // Only continue animation if scroll position has not changed
                if (_this.elementRef.nativeElement[target] === oldValue_1) {
                    if (scrollCount_1 >= Math.PI) {
                        _this.animateScrolling(target, value, 0);
                    }
                    else {
                        _this.elementRef.nativeElement[target] = newValue_1;
                        // On a zoomed out page the resulting offset may differ
                        // On a zoomed out page the resulting offset may differ
                        oldValue_1 = _this.elementRef.nativeElement[target];
                        oldTimestamp_1 = newTimestamp;
                        _this.animation = window.requestAnimationFrame(step_1);
                    }
                }
            };
            window.requestAnimationFrame(step_1);
        }
    };
    PerfectScrollbarDirective.decorators = [
        { type: core_2.Directive, args: [{
                    selector: '[perfectScrollbar]',
                    exportAs: 'ngxPerfectScrollbar'
                },] },
    ];
    /** @nocollapse */
    PerfectScrollbarDirective.ctorParameters = function () { return [
        { type: core_2.NgZone, },
        { type: core_2.KeyValueDiffers, },
        { type: core_2.ElementRef, },
        { type: Object, decorators: [{ type: core_2.Inject, args: [core_1.PLATFORM_ID,] },] },
        { type: undefined, decorators: [{ type: core_2.Optional }, { type: core_2.Inject, args: [perfect_scrollbar_interfaces_2.PERFECT_SCROLLBAR_CONFIG,] },] },
    ]; };
    PerfectScrollbarDirective.propDecorators = {
        "disabled": [{ type: core_2.Input },],
        "config": [{ type: core_2.Input, args: ['perfectScrollbar',] },],
        "psScrollY": [{ type: core_2.Output },],
        "psScrollX": [{ type: core_2.Output },],
        "psScrollUp": [{ type: core_2.Output },],
        "psScrollDown": [{ type: core_2.Output },],
        "psScrollLeft": [{ type: core_2.Output },],
        "psScrollRight": [{ type: core_2.Output },],
        "psYReachEnd": [{ type: core_2.Output },],
        "psYReachStart": [{ type: core_2.Output },],
        "psXReachEnd": [{ type: core_2.Output },],
        "psXReachStart": [{ type: core_2.Output },],
    };
    return PerfectScrollbarDirective;
}());
exports.PerfectScrollbarDirective = PerfectScrollbarDirective;
//# sourceMappingURL=perfect-scrollbar.directive.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/perfect-scorll/perfect-scrollbar.interfaces.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
exports.PERFECT_SCROLLBAR_CONFIG = new core_1.InjectionToken('PERFECT_SCROLLBAR_CONFIG');
var Geometry = /** @class */ (function () {
    function Geometry(x, y, w, h) {
        this.x = x;
        this.y = y;
        this.w = w;
        this.h = h;
    }
    return Geometry;
}());
exports.Geometry = Geometry;
var Position = /** @class */ (function () {
    function Position(x, y) {
        this.x = x;
        this.y = y;
    }
    return Position;
}());
exports.Position = Position;
exports.PerfectScrollbarEvents = [
    'psScrollY',
    'psScrollX',
    'psScrollUp',
    'psScrollDown',
    'psScrollLeft',
    'psScrollRight',
    'psYReachEnd',
    'psYReachStart',
    'psXReachEnd',
    'psXReachStart'
];
var PerfectScrollbarConfig = /** @class */ (function () {
    function PerfectScrollbarConfig(config) {
        if (config === void 0) { config = {}; }
        this.assign(config);
    }
    PerfectScrollbarConfig.prototype.assign = function (config) {
        if (config === void 0) { config = {}; }
        for (var key in config) {
            this[key] = config[key];
        }
    };
    return PerfectScrollbarConfig;
}());
exports.PerfectScrollbarConfig = PerfectScrollbarConfig;
//# sourceMappingURL=perfect-scrollbar.interfaces.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/perfect-scorll/perfect-scrollbar.module.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/esm5/common.js");
var perfect_scrollbar_component_1 = __webpack_require__("./node_modules/@farris/ui/perfect-scorll/perfect-scrollbar.component.js");
var perfect_scrollbar_directive_1 = __webpack_require__("./node_modules/@farris/ui/perfect-scorll/perfect-scrollbar.directive.js");
var PerfectScrollbarModule = /** @class */ (function () {
    function PerfectScrollbarModule() {
    }
    PerfectScrollbarModule.decorators = [
        { type: core_1.NgModule, args: [{
                    imports: [common_1.CommonModule],
                    declarations: [perfect_scrollbar_component_1.PerfectScrollbarComponent, perfect_scrollbar_directive_1.PerfectScrollbarDirective],
                    exports: [common_1.CommonModule, perfect_scrollbar_component_1.PerfectScrollbarComponent, perfect_scrollbar_directive_1.PerfectScrollbarDirective]
                },] },
    ];
    return PerfectScrollbarModule;
}());
exports.PerfectScrollbarModule = PerfectScrollbarModule;
//# sourceMappingURL=perfect-scrollbar.module.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/query-scheme-bar/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var query_scheme_bar_module_1 = __webpack_require__("./node_modules/@farris/ui/query-scheme-bar/query-scheme-bar.module.js");
exports.QuerySchemeBarModule = query_scheme_bar_module_1.QuerySchemeBarModule;
var util_1 = __webpack_require__("./node_modules/@farris/ui/query-scheme-bar/util/index.js");
exports.ConditionItem = util_1.ConditionItem;
exports.ExpressType = util_1.ExpressType;
exports.ExpressRange = util_1.ExpressRange;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/query-scheme-bar/query-condition-area/query-condition-area.component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var util_1 = __webpack_require__("./node_modules/@farris/ui/query-scheme-bar/util/index.js");
var query_scheme_window_component_1 = __webpack_require__("./node_modules/@farris/ui/query-scheme-bar/query-scheme-window/query-scheme-window.component.js");
var QueryConditionAreaComponent = /** @class */ (function () {
    function QueryConditionAreaComponent(schemeWindow) {
        this.schemeWindow = schemeWindow;
        this.title = '';
        this.fields = [];
        this.conditions = [];
        // 标记多少条件
        this.conditionCmps = [];
        //
        this.conditionResult = [];
        this.schemeWindow.addConditionArea(this);
    }
    QueryConditionAreaComponent.prototype.ngOnInit = function () { };
    /**
     * 获取条件
     */
    /**
       * 获取条件
       */
    QueryConditionAreaComponent.prototype.getCondition = /**
       * 获取条件
       */
    function () {
        var tmp_conditions = [];
        this.conditionCmps.map(function (conCmp) {
            tmp_conditions.push(conCmp.getCondition());
        });
        if (tmp_conditions.length) {
            tmp_conditions[tmp_conditions.length - 1]['Relation'] = ' ';
        }
        return tmp_conditions;
    };
    /**
     * 添加条件对象
     * @param cmp
     */
    /**
       * 添加条件对象
       * @param cmp
       */
    QueryConditionAreaComponent.prototype.addConditionCmp = /**
       * 添加条件对象
       * @param cmp
       */
    function (cmp) {
        this.conditionCmps.push(cmp);
    };
    /**
     * 添加条件
     */
    /**
       * 添加条件
       */
    QueryConditionAreaComponent.prototype.addCondition = /**
       * 添加条件
       */
    function () {
        var temp_condition = new util_1.ConditionItem();
        this.conditions.push(temp_condition);
    };
    /**
     * 移除条件
     */
    /**
       * 移除条件
       */
    QueryConditionAreaComponent.prototype.removeCondition = /**
       * 移除条件
       */
    function (id) {
        if (id) {
            var index = parseInt(id.split('_')[1], 10);
            this.conditionCmps.splice(index, 1);
            this.conditions.splice(index, 1);
        }
    };
    QueryConditionAreaComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'app-query-condition-area',
                    template: "<p class=\"m-2\"><b>{{title}}</b></p> <ng-container *ngFor=\"let _condition of conditions;let i=index\"> <app-query-condition [fields]=\"fields\" [condition]=\"_condition\" [id]=\"'condition_'+i\" [showAdd]=\"i==conditions.length-1\" (addEvent)=\"addCondition()\"  (removeEvent)=\"removeCondition($event)\"></app-query-condition> </ng-container>",
                    styles: [""]
                },] },
    ];
    /** @nocollapse */
    QueryConditionAreaComponent.ctorParameters = function () { return [
        { type: query_scheme_window_component_1.QuerySchemeWindowComponent, },
    ]; };
    QueryConditionAreaComponent.propDecorators = {
        "title": [{ type: core_1.Input },],
        "fields": [{ type: core_1.Input },],
        "conditions": [{ type: core_1.Input },],
    };
    return QueryConditionAreaComponent;
}());
exports.QueryConditionAreaComponent = QueryConditionAreaComponent;
//# sourceMappingURL=query-condition-area.component.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/query-scheme-bar/query-condition/query-condition.component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var query_condition_area_component_1 = __webpack_require__("./node_modules/@farris/ui/query-scheme-bar/query-condition-area/query-condition-area.component.js");
var util_1 = __webpack_require__("./node_modules/@farris/ui/query-scheme-bar/util/index.js");
var QueryConditionComponent = /** @class */ (function () {
    function QueryConditionComponent(conditionArea) {
        this.conditionArea = conditionArea;
        this.id = '';
        this.addEvent = new core_1.EventEmitter();
        this.removeEvent = new core_1.EventEmitter();
        this.fields = [];
        this.showAdd = false;
        this.operators = [];
        this.source = [];
        // 用在html结构中
        this.re_condition = {
            Field: null,
            Operator: null,
            Value: null
        };
        conditionArea.addConditionCmp(this);
    }
    Object.defineProperty(QueryConditionComponent.prototype, "condition", {
        set: /**
           * 条件
           */
        function (value) {
            this._getField(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 根据传递的条件，设置默认值
     *
     */
    /**
       * 根据传递的条件，设置默认值
       *
       */
    QueryConditionComponent.prototype._getField = /**
       * 根据传递的条件，设置默认值
       *
       */
    function (condition) {
        debugger;
        // 如果条件传递了字段信息
        var find_field = util_1.OPERATE_CONDITION.getFilterFirst(this.fields, 'Code', condition.Field);
        var result_operator;
        var result_field = find_field ? find_field : this.fields[0];
        // 先根据字段类型判断
        if (condition.Expresstype === util_1.ExpressType.Range ||
            result_field['DataType'] === 'Date') {
            result_operator = null;
        }
        else {
            this.operators = util_1.OPERATE_CONDITION.getOperatorList(result_field['DataType']);
            var find_operator = this.operators.filter(function (item) {
                return item.value === condition.Compare;
            });
            // 根据field构造操作符
            result_operator = find_operator.length
                ? find_operator[0]
                : this.operators[0];
        }
        // 构造重组后的条件
        this.re_condition = {
            Field: result_field,
            Operator: result_operator,
            Value: this._setValue(result_field, condition)
        };
    };
    QueryConditionComponent.prototype.ngOnInit = function () {
        // this._getField(this.condition);
    };
    /**
     * 获取条件,有些需要替换
     */
    /**
       * 获取条件,有些需要替换
       */
    QueryConditionComponent.prototype.getCondition = /**
       * 获取条件,有些需要替换
       */
    function () {
        var tmp_operator = this.re_condition['Operator']
            ? this.re_condition['Operator']['Value']
            : null;
        var tmp_datatype = this.re_condition['Field']['DataType'];
        var valueAdisplay = util_1.OPERATE_CONDITION.getConditionValueADisplayValue(tmp_operator, this.re_condition['Value'], tmp_datatype);
        var tmp_condition = {
            DataType: util_1.OPERATE_CONDITION.getDataType(this.re_condition['Field']['DataType']),
            Lbracket: '',
            Field: this.re_condition['Field']['Code'],
            Value: valueAdisplay['Value'],
            Rbracket: '',
            Relation: ' and ',
            DisplayValue: valueAdisplay['DisplayValue']
        };
        if (tmp_datatype === 'Date') {
            Object.assign(tmp_condition, { Expresstype: util_1.ExpressType.Range });
        }
        return Object.assign(tmp_condition, {
            Expresstype: util_1.ExpressType.Value,
            Compare: tmp_operator
        });
    };
    /**
     * 字段选择变化后
     * @param value
     */
    /**
       * 字段选择变化后
       * @param value
       */
    QueryConditionComponent.prototype.selectionChange = /**
       * 字段选择变化后
       * @param value
       */
    function (value) {
        // 先判断字段类型是否变更
        if (this.re_condition['Field']['Code'] !== value['Code']) {
            // 如果变更重新获取操作列表
            if (this.re_condition['Field']['DataType'] !== value['DataType']) {
                this.operators = util_1.OPERATE_CONDITION.getOperatorList(value['DataType']);
                this.re_condition['Operator'] = this.operators[0];
                this.re_condition['Value'] = this._setValue(value);
            }
        }
    };
    QueryConditionComponent.prototype._setValue = function (field, condition) {
        var result_value;
        if (typeof condition === 'undefined') {
            switch (field.DataType) {
                case 'Date':
                    result_value = {
                        Start: null,
                        End: null
                    };
                    break;
                case 'Enum':
                    result_value = field['DataSource']['ColumnType']['EnumCollection'][0];
                    break;
                default:
                    result_value = '';
            }
        }
        else {
            // const showValue=OPERATE_CONDITION.getShowValue()
            switch (field.DataType) {
                case 'Date':
                    if (condition.Expresstype === util_1.ExpressType.Range) {
                        result_value = {
                            Start: condition['Value']['Start']
                                ? new Date(condition['Value']['Start'])
                                : null,
                            End: condition['Value']['End']
                                ? new Date(condition['Value']['End'])
                                : null
                        };
                    }
                    break;
                case 'Enum':
                    result_value = {
                        Name: condition.DisplayValue,
                        Value: condition.Value
                    };
                    break;
                default:
                    result_value = condition.Value;
            }
        }
        return result_value;
    };
    /**
     * 删除条件
     */
    /**
       * 删除条件
       */
    QueryConditionComponent.prototype.removeCondition = /**
       * 删除条件
       */
    function () {
        this.removeEvent.emit(this.id);
    };
    /**
     * 添加条件
     */
    /**
       * 添加条件
       */
    QueryConditionComponent.prototype.addCondition = /**
       * 添加条件
       */
    function () {
        this.addEvent.emit();
    };
    QueryConditionComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'app-query-condition',
                    template: "<div class=\"form-group col-md-4 mb-2\"> <kendo-dropdownlist name='field' (selectionChange)=\"selectionChange($event)\" [data]=\"fields\" [class]=\"'w-100'\" textField=\"Name\" valueField=\"Code\" [(ngModel)]=\"re_condition['Field']\"> </kendo-dropdownlist> </div> <div class=\"form-group col-md-2 mb-2\" *ngIf=\"re_condition['Field']['DataType']!='Date'\"> <kendo-dropdownlist name='operator' [data]=\"operators\" [class]=\"'w-100'\" textField=\"text\" valueField=\"id\" [(ngModel)]=\"re_condition['Operator']\"> </kendo-dropdownlist> </div> <ng-container [ngSwitch]=\"re_condition['Field']['DataType']\"> <div class=\"form-group col-md-4 mb-2\" *ngSwitchCase=\"'String'\"> <input name=\"re_condition['Field']['Code']\" kendoTextBox [(ngModel)]=\"re_condition['Value']\" [class]=\"'w-100'\"/> </div> <div class=\"form-group col-md-4 mb-2\" *ngSwitchCase=\"'Enum'\"> <kendo-dropdownlist name=\"re_condition['Field']['Code']\" [data]=\"re_condition['Field']['DataSource']['ColumnType']['EnumCollection']\" [class]=\"'w-100'\" textField=\"Name\" valueField=\"Value\" [(ngModel)]=\"re_condition['Value']\"> </kendo-dropdownlist> </div> <div class=\"form-group col-md-6 mb-2 d-flex\" *ngSwitchCase=\"'Date'\"> <kendo-datepicker name=\"re_condition['Field']['Code']\" [class]=\"'w-100'\" [format]=\"'yyyy/MM/dd'\" placeholder=\"开始时间\" [(ngModel)]=\"re_condition['Value']['Start']\"></kendo-datepicker> <span class=\"px-2 pt-1\">至</span> <kendo-datepicker name=\"re_condition['Field']['Code']\" [class]=\"'w-100'\" [format]=\"'yyyy/MM/dd'\" placeholder=\"结束时间\" [(ngModel)]=\"re_condition['Value']['End']\"></kendo-datepicker> </div> </ng-container> <div class=\"col-md-2 mb-2\"> <button class=\"p-0 mr-2 k-button\" (click)=\"removeCondition()\"> <i class=\"material-icons align-middle\">close</i> </button> <button class=\"p-0 mx-0 k-button\" [ngClass]=\"{'d-none':!showAdd}\" (click)=\"addCondition()\"> <i class=\"material-icons align-middle\">add</i> </button> </div>",
                    styles: [""],
                    host: {
                        class: 'form-row m-0 mx-1'
                    }
                },] },
    ];
    /** @nocollapse */
    QueryConditionComponent.ctorParameters = function () { return [
        { type: query_condition_area_component_1.QueryConditionAreaComponent, },
    ]; };
    QueryConditionComponent.propDecorators = {
        "id": [{ type: core_1.Input },],
        "addEvent": [{ type: core_1.Output },],
        "removeEvent": [{ type: core_1.Output },],
        "fields": [{ type: core_1.Input },],
        "condition": [{ type: core_1.Input },],
        "showAdd": [{ type: core_1.Input },],
    };
    return QueryConditionComponent;
}());
exports.QueryConditionComponent = QueryConditionComponent;
//# sourceMappingURL=query-condition.component.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/query-scheme-bar/query-scheme-bar.module.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/esm5/common.js");
var kendo_angular_dropdowns_1 = __webpack_require__("./node_modules/@progress/kendo-angular-dropdowns/dist/es/index.js");
var kendo_angular_dateinputs_1 = __webpack_require__("./node_modules/@progress/kendo-angular-dateinputs/dist/es/index.js");
var kendo_angular_inputs_1 = __webpack_require__("./node_modules/@progress/kendo-angular-inputs/dist/es/index.js");
var kendo_angular_dialog_1 = __webpack_require__("./node_modules/@progress/kendo-angular-dialog/dist/es/index.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/esm5/forms.js");
var query_scheme_bar_component_1 = __webpack_require__("./node_modules/@farris/ui/query-scheme-bar/query-scheme-bar/query-scheme-bar.component.js");
var query_condition_area_component_1 = __webpack_require__("./node_modules/@farris/ui/query-scheme-bar/query-condition-area/query-condition-area.component.js");
var query_condition_component_1 = __webpack_require__("./node_modules/@farris/ui/query-scheme-bar/query-condition/query-condition.component.js");
var query_scheme_window_component_1 = __webpack_require__("./node_modules/@farris/ui/query-scheme-bar/query-scheme-window/query-scheme-window.component.js");
var QuerySchemeBarModule = /** @class */ (function () {
    function QuerySchemeBarModule() {
    }
    QuerySchemeBarModule.decorators = [
        { type: core_1.NgModule, args: [{
                    imports: [
                        common_1.CommonModule,
                        kendo_angular_dropdowns_1.DropDownsModule,
                        kendo_angular_dateinputs_1.DateInputsModule,
                        kendo_angular_dialog_1.WindowModule,
                        forms_1.FormsModule,
                        kendo_angular_inputs_1.InputsModule
                    ],
                    declarations: [
                        query_scheme_bar_component_1.QuerySchemeBarComponent,
                        query_condition_area_component_1.QueryConditionAreaComponent,
                        query_condition_component_1.QueryConditionComponent,
                        query_scheme_window_component_1.QuerySchemeWindowComponent
                    ],
                    exports: [query_scheme_bar_component_1.QuerySchemeBarComponent]
                },] },
    ];
    return QuerySchemeBarModule;
}());
exports.QuerySchemeBarModule = QuerySchemeBarModule;
//# sourceMappingURL=query-scheme-bar.module.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/query-scheme-bar/query-scheme-bar/query-scheme-bar.component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var util_1 = __webpack_require__("./node_modules/@farris/ui/query-scheme-bar/util/index.js");
var QuerySchemeBarComponent = /** @class */ (function () {
    function QuerySchemeBarComponent(renderer, elementRef) {
        this.renderer = renderer;
        this.elementRef = elementRef;
        this._search_conditions = [];
        this.window_conditions = [];
        this._customClass = '';
        /**
           * 字段
           */
        this.fields = [];
        this.searchEvent = new core_1.EventEmitter();
        /**
           * 显示在工具条上的条件
           * 区分的原因：可能与传入的condition不一致
           */
        this.bar_conditions = [];
        /**
           * 过滤方案窗口是否打开
           */
        this.opend = false;
        this.el = this.elementRef.nativeElement;
    }
    Object.defineProperty(QuerySchemeBarComponent.prototype, "class", {
        get: function () {
            return this._customClass;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QuerySchemeBarComponent.prototype, "customClass", {
        set: function (customClass) {
            var _this = this;
            if (this.customClass) {
                this.customClass.split(' ').forEach(function (cssClass) {
                    _this.renderer.removeClass(_this.el, cssClass);
                });
            }
            this._customClass = customClass ? customClass.trim() : null;
            if (this.customClass) {
                this.customClass.split(' ').forEach(function (cssClass) {
                    _this.renderer.addClass(_this.el, cssClass);
                });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QuerySchemeBarComponent.prototype, "conditions", {
        set: /**
           * 条件
           */
        function (value) {
            this.bar_conditions = this._changeToBarCondition(value);
            this._search_conditions = [].concat(value);
        },
        enumerable: true,
        configurable: true
    });
    QuerySchemeBarComponent.prototype.ngOnInit = function () { };
    // ngOnChanges(simple: SimpleChanges) {
    //   console.log('QuerySchemeBarComponent');
    //   console.log(simple);
    // }
    /**
     * 打开窗口
     */
    // ngOnChanges(simple: SimpleChanges) {
    //   console.log('QuerySchemeBarComponent');
    //   console.log(simple);
    // }
    /**
       * 打开窗口
       */
    QuerySchemeBarComponent.prototype.openWindow = 
    // ngOnChanges(simple: SimpleChanges) {
    //   console.log('QuerySchemeBarComponent');
    //   console.log(simple);
    // }
    /**
       * 打开窗口
       */
    function () {
        this._changeToSearchCondition();
        this.window_conditions = [].concat(this._search_conditions);
        this.opend = true;
    };
    /**
     * 关闭窗口
     */
    /**
       * 关闭窗口
       */
    QuerySchemeBarComponent.prototype.closeWindow = /**
       * 关闭窗口
       */
    function () {
        this.opend = false;
    };
    /**
     *
     * @param result_condition 条件是已经根据操作符处理过的
     */
    /**
       *
       * @param result_condition 条件是已经根据操作符处理过的
       */
    QuerySchemeBarComponent.prototype.doSearch = /**
       *
       * @param result_condition 条件是已经根据操作符处理过的
       */
    function (result_condition) {
        // 未传递
        if (typeof result_condition === 'undefined') {
            // 没有传递条件，构造条件
            this._changeToSearchCondition();
        }
        else {
            // 传递条件
            this._search_conditions = [].concat(result_condition);
            this.bar_conditions = this._changeToBarCondition(result_condition);
        }
        // console.log('搜索');
        // console.log(this._search_conditions);
        this.searchEvent.emit(this._search_conditions);
    };
    QuerySchemeBarComponent.prototype.getCondtion = function () { };
    /**
     * 将条件转化，适用到Bar的HTML结构上
     * @param pCondition
     */
    /**
       * 将条件转化，适用到Bar的HTML结构上
       * @param pCondition
       */
    QuerySchemeBarComponent.prototype._changeToBarCondition = /**
       * 将条件转化，适用到Bar的HTML结构上
       * @param pCondition
       */
    function (pCondition) {
        var _this = this;
        var result_bar = [];
        pCondition.map(function (item, index) {
            // 获取字段信息
            var find_field = util_1.OPERATE_CONDITION.getFilterFirst(_this.fields, 'Code', item['Field']);
            var init_value;
            var data_source;
            // 根据类型确定，从显示值和Value中处理
            switch (find_field['DataType']) {
                case 'Date':
                    init_value = {
                        Start: item['Value']['Start']
                            ? new Date(item['Value']['Start'])
                            : null,
                        End: item['Value']['End'] ? new Date(item['Value']['End']) : null
                    };
                    break;
                case 'Enum':
                    // 找到真正的value
                    var show_value = util_1.OPERATE_CONDITION.getShowValue(item['Compare'], item['Value']);
                    init_value = {
                        Name: item['DisplayValue'],
                        Value: show_value
                    };
                    data_source =
                        find_field['DataSource']['ColumnType']['EnumCollection'];
                    break;
                default:
                    init_value = item['DisplayValue'];
            }
            result_bar.push({
                Label: find_field['Name'],
                Name: find_field['Code'] + '_' + index,
                Value: init_value,
                Source: data_source,
                DataType: find_field['DataType']
            });
        });
        return result_bar;
    };
    QuerySchemeBarComponent.prototype._changeToSearchCondition = function () {
        var _this = this;
        this.bar_conditions.map(function (item, index) {
            var valueAdisplay = util_1.OPERATE_CONDITION.getConditionValueADisplayValue(_this._search_conditions[index]['Compare'], item['Value'], item['DataType']);
            _this._search_conditions[index]['Value'] = valueAdisplay['Value'];
            _this._search_conditions[index]['DisplayValue'] =
                valueAdisplay['DisplayValue'];
        });
    };
    QuerySchemeBarComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'app-query-scheme-bar',
                    template: "<div class=\"form-inline\"> <div class=\"form-group\" *ngFor=\"let _bar_condition of  bar_conditions;let _index of index\"> <label class=\"col-form-label text-truncate text-right\">{{_bar_condition['Label']}}</label> <ng-container  [ngSwitch]=\"_bar_condition['DataType']\"> <div class=\" k-form-field mx-2\" *ngSwitchCase=\"'String'\"> <input [name]=\"_bar_condition['Name']\" kendoTextBox [(ngModel)]=\"_bar_condition['Value']\" /> </div> <div class=\" k-form-field mx-2\" *ngSwitchCase=\"'Enum'\"> <kendo-dropdownlist name=\"_bar_condition['Name']\" [data]=\"_bar_condition['Source']\" [class]=\"'w-100'\" textField=\"Name\" valueField=\"Value\" [(ngModel)]=\"_bar_condition['Value']\"> </kendo-dropdownlist> </div> <div class=\"d-flex\" *ngSwitchCase=\"'Date'\"> <kendo-datepicker name=\"re_condition['field']['Code']\" [class]=\"'w-100'\" [format]=\"'yyyy/MM/dd'\" placeholder=\"开始时间\" [(ngModel)]=\"_bar_condition['Value']['Start']\"></kendo-datepicker> <span class=\"px-2 pt-1\">至</span> <kendo-datepicker name=\"re_condition['field']['Code']\" [class]=\"'w-100'\" [format]=\"'yyyy/MM/dd'\" placeholder=\"结束时间\" [(ngModel)]=\"_bar_condition['Value']['End']\"></kendo-datepicker> </div> </ng-container> </div> <div> <button class=\"p-0 mx-2 k-button\" (click)=\"doSearch()\"> <i class=\"material-icons align-middle\">search</i> </button> <span class=\"p-0 mr-1 k-button k-bare\" (click)=\"openWindow()\"> <i class=\"material-icons align-middle\" style=\" font-size: 18px;\">filter_none</i> </span> </div> </div> <app-query-scheme-window [opend]=\"opend\" (closeEvent)=\"closeWindow()\" (searchEvent)=\"doSearch($event)\" [fields]='fields' [conditions]='window_conditions'></app-query-scheme-window>",
                    styles: [""],
                    changeDetection: core_1.ChangeDetectionStrategy.OnPush,
                    encapsulation: core_1.ViewEncapsulation.None
                },] },
    ];
    /** @nocollapse */
    QuerySchemeBarComponent.ctorParameters = function () { return [
        { type: core_1.Renderer2, },
        { type: core_1.ElementRef, },
    ]; };
    QuerySchemeBarComponent.propDecorators = {
        "class": [{ type: core_1.Input },],
        "fields": [{ type: core_1.Input },],
        "conditions": [{ type: core_1.Input },],
        "searchEvent": [{ type: core_1.Output },],
    };
    return QuerySchemeBarComponent;
}());
exports.QuerySchemeBarComponent = QuerySchemeBarComponent;
//# sourceMappingURL=query-scheme-bar.component.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/query-scheme-bar/query-scheme-window/query-scheme-window.component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var QuerySchemeWindowComponent = /** @class */ (function () {
    function QuerySchemeWindowComponent() {
        this.opend = false;
        this.closeEvent = new core_1.EventEmitter();
        this.searchEvent = new core_1.EventEmitter();
        this.fields = [];
        this.conditions = [];
        this.conditionAreas = [];
        this.title = '显示在工具栏';
    }
    QuerySchemeWindowComponent.prototype.ngOnInit = function () { };
    QuerySchemeWindowComponent.prototype.close = function () {
        this.closeEvent.emit();
    };
    QuerySchemeWindowComponent.prototype.submit = function () { };
    // ngOnChanges(simple: SimpleChanges) {
    //   console.log('QuerySchemeWindowComponent');
    //   console.log(simple);
    // }
    /**
     * 添加Area
     * @param cmp
     */
    // ngOnChanges(simple: SimpleChanges) {
    //   console.log('QuerySchemeWindowComponent');
    //   console.log(simple);
    // }
    /**
       * 添加Area
       * @param cmp
       */
    QuerySchemeWindowComponent.prototype.addConditionArea = 
    // ngOnChanges(simple: SimpleChanges) {
    //   console.log('QuerySchemeWindowComponent');
    //   console.log(simple);
    // }
    /**
       * 添加Area
       * @param cmp
       */
    function (cmp) {
        this.conditionAreas.push(cmp);
    };
    QuerySchemeWindowComponent.prototype.search = function () {
        // 从每个condition area里面获取条件
        var areas_condition = [];
        this.conditionAreas.map(function (item) {
            var temp_item = item.getCondition();
            if (temp_item.length) {
                temp_item[temp_item.length - 1]['Relation'] = ' and ';
            }
            areas_condition = areas_condition.concat(temp_item);
        });
        if (areas_condition.length) {
            areas_condition[areas_condition.length - 1]['Relation'] = ' ';
        }
        // console.log('搜索');
        // console.log(areas_condition);
        this.searchEvent.emit(areas_condition);
    };
    QuerySchemeWindowComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'app-query-scheme-window',
                    template: "<kendo-window title=\"过滤方案\" (close)=\"close()\" *ngIf=\"opend\" [width]=\"600\" [height]=\"400\" [class]=\"'query-scheme-window'\"> <div class=\"query-scheme-wcontent\"> <app-query-condition-area [title]='title' [fields]='fields' [conditions]='conditions'></app-query-condition-area> </div>        <div class=\"text-right\"> <button type=\"button\" class=\"k-button mr-2\" (click)=\"close()\">取消</button> <button type=\"button\" class=\"k-button k-primary mr-2\" (click)=\"search()\">搜索</button> </div> </kendo-window>",
                    styles: [".query-scheme-window{ background:red; }  .query-scheme-window .k-window-content{ display: -ms-flexbox; display: flex; -ms-flex-direction: column; flex-direction: column; } .query-scheme-wcontent{ -webkit-box-flex: 1; -ms-flex: 1 1 auto; flex: 1 1 auto; }"],
                    changeDetection: core_1.ChangeDetectionStrategy.OnPush,
                    encapsulation: core_1.ViewEncapsulation.None
                },] },
    ];
    /** @nocollapse */
    QuerySchemeWindowComponent.ctorParameters = function () { return []; };
    QuerySchemeWindowComponent.propDecorators = {
        "opend": [{ type: core_1.Input },],
        "closeEvent": [{ type: core_1.Output },],
        "searchEvent": [{ type: core_1.Output },],
        "fields": [{ type: core_1.Input },],
        "conditions": [{ type: core_1.Input },],
    };
    return QuerySchemeWindowComponent;
}());
exports.QuerySchemeWindowComponent = QuerySchemeWindowComponent;
//# sourceMappingURL=query-scheme-window.component.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/query-scheme-bar/util/condition.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var datatype_1 = __webpack_require__("./node_modules/@farris/ui/query-scheme-bar/util/datatype.js");
var Condition = /** @class */ (function () {
    function Condition() {
        this.operatorText = {
            opEqual: '等于',
            opGreaterE: '大于等于',
            opLessE: '小于等于',
            opNotEqual: '不等于',
            opGreater: '大于',
            opLess: '小于',
            opLike: '包含',
            opBegin: '开头是',
            opEnd: '结尾是',
            opNotLike: '不包含',
            opNoBegin: '不包含开头是',
            opNoEnd: '不包含结尾是',
            opIs: '为',
            opIsNot: '不为',
            opAnd: '并且',
            opOr: '或者'
        };
    }
    /*定义类型 */
    /*定义接收类型 */
    /**根据传递的字段类型，找到对应过滤条件比较符 */
    /**
     * 从数据库中取出的值，进行处理
     * 比如：对于like是带%的，去掉%
     */
    /*定义类型 */
    /*定义接收类型 */
    /**根据传递的字段类型，找到对应过滤条件比较符 */
    /**
       * 从数据库中取出的值，进行处理
       * 比如：对于like是带%的，去掉%
       */
    Condition.prototype.getShowValue = /*定义类型 */
    /*定义接收类型 */
    /**根据传递的字段类型，找到对应过滤条件比较符 */
    /**
       * 从数据库中取出的值，进行处理
       * 比如：对于like是带%的，去掉%
       */
    function (operator, originalValue) {
        var value;
        var valueArray = [];
        switch (operator) {
            case ' like':
            case ' not like':
                valueArray = originalValue.split('%');
                value = valueArray[1];
                break;
            case '  like':
            case '  not like':
                valueArray = originalValue.split('%');
                value = valueArray[0];
                break;
            case ' like ':
            case ' not like ':
                valueArray = originalValue.split('%');
                value = valueArray[1];
                break;
            default:
                value = originalValue;
                break;
        }
        return value;
    };
    /**
     * 从控件上取值，根据比较符类型，返回值
     */
    /**
       * 从控件上取值，根据比较符类型，返回值
       */
    Condition.prototype.getValue = /**
       * 从控件上取值，根据比较符类型，返回值
       */
    function (operator, originalValue, dataType) {
        var value;
        // " like" 包含， "  like" 开头是，" like " 结尾是
        switch (dataType) {
            case 'String':
            case 'Enum':
            case 'SmartHelp':
            case 'Text':
                switch (operator) {
                    case ' like':
                    case ' not like':
                        value = '%' + this.trimValue(originalValue) + '%';
                        break;
                    case '  like':
                    case '  not like':
                        value = this.trimValue(originalValue) + '%';
                        break;
                    case ' like ':
                    case ' not like ':
                        value = '%' + this.trimValue(originalValue);
                        break;
                    default:
                        value = this.trimValue(originalValue);
                        break;
                }
                break;
            case 'Int':
                value =
                    this.trimValue(originalValue) !== ' '
                        ? this.trimValue(originalValue)
                        : '';
                break;
            case 'Decimal':
                value =
                    this.trimValue(originalValue) !== ' '
                        ? this.trimValue(originalValue)
                        : '';
                break;
            case 'Boolean':
                value = originalValue;
                break;
            default:
                value = this.trimValue(originalValue);
                break;
        }
        return value;
    };
    /**
     * 取值（为空则返回空，不为空，返回原值）
     * @param originalValue
     */
    /**
       * 取值（为空则返回空，不为空，返回原值）
       * @param originalValue
       */
    Condition.prototype.trimValue = /**
       * 取值（为空则返回空，不为空，返回原值）
       * @param originalValue
       */
    function (originalValue) {
        return this.trim(originalValue) === '' ? '' : originalValue;
    };
    /**
     * 去掉空格
     * @param value
     */
    /**
       * 去掉空格
       * @param value
       */
    Condition.prototype.trim = /**
       * 去掉空格
       * @param value
       */
    function (value) {
        if (typeof value === 'undefined') {
            return '';
        }
        return value.toString().replace(/(^\s*)|(\s*$)/g, '');
    };
    /**
     * 获取比较操作符列表
     */
    /**
       * 获取比较操作符列表
       */
    Condition.prototype.getOperatorList = /**
       * 获取比较操作符列表
       */
    function (dataType) {
        dataType = dataType ? dataType.toLowerCase() : '';
        var operatorList = [];
        var compareOperList = [
            {
                id: ' =',
                text: this.operatorText.opEqual
            },
            {
                id: ' >=',
                text: this.operatorText.opGreaterE
            },
            {
                id: ' <=',
                text: this.operatorText.opLessE
            },
            {
                id: ' <>',
                text: this.operatorText.opNotEqual
            },
            {
                id: ' >',
                text: this.operatorText.opGreater
            },
            {
                id: ' <',
                text: this.operatorText.opLess
            }
        ];
        var textOperList = [
            {
                id: ' like',
                text: this.operatorText.opLike
            },
            {
                id: '  like',
                text: this.operatorText.opBegin
            },
            {
                id: ' like ',
                text: this.operatorText.opEnd
            },
            {
                id: ' not like',
                text: this.operatorText.opNotLike
            },
            {
                id: '  not like',
                text: this.operatorText.opNoBegin
            },
            {
                id: ' not like ',
                text: this.operatorText.opNoEnd
            },
            { id: ' is', text: this.operatorText.opIs },
            { id: ' is not', text: this.operatorText.opIsNot }
        ];
        switch (dataType) {
            case 'date':
            case 'datetime':
            case 'decimal':
            case 'integer':
                operatorList = operatorList.concat(compareOperList);
                break;
            case 'text':
                operatorList = operatorList.concat(textOperList);
                break;
            case 'boolean':
                operatorList = [
                    {
                        id: ' =',
                        text: this.operatorText.opEqual
                    },
                    {
                        id: ' <>',
                        text: this.operatorText.opNotEqual
                    }
                ];
                break;
            case 'string':
                operatorList = [
                    {
                        id: ' =',
                        text: this.operatorText.opEqual
                    },
                    {
                        id: ' <>',
                        text: this.operatorText.opNotEqual
                    }
                ].concat(textOperList);
                break;
            default:
                operatorList = [
                    {
                        id: ' =',
                        text: this.operatorText.opEqual
                    },
                    {
                        id: ' <>',
                        text: this.operatorText.opNotEqual
                    }
                ].concat(textOperList);
        }
        return operatorList;
    };
    /**
     * 格式化日期
     * @param date
     * @param fmt
     */
    /**
       * 格式化日期
       * @param date
       * @param fmt
       */
    Condition.prototype.formatDate = /**
       * 格式化日期
       * @param date
       * @param fmt
       */
    function (date, fmt) {
        var fmt_type = {
            'M+': date.getMonth() + 1,
            // 月份
            'd+': date.getDate(),
            // 日
            'h+': date.getHours(),
            // 小时
            'm+': date.getMinutes(),
            // 分
            's+': date.getSeconds(),
            // 秒
            'q+': Math.floor((date.getMonth() + 3) / 3),
            // 季度
            S: date.getMilliseconds() // 毫秒
        };
        if (/(y+)/.test(fmt)) {
            fmt = fmt.replace(RegExp.$1, (date.getFullYear() + '').substr(4 - RegExp.$1.length));
        }
        for (var k in fmt_type) {
            if (new RegExp('(' + k + ')').test(fmt)) {
                fmt = fmt.replace(RegExp.$1, RegExp.$1.length === 1
                    ? fmt_type[k]
                    : ('00' + fmt_type[k]).substr(('' + fmt_type[k]).length));
            }
        }
        return fmt;
    };
    /**
     * 过滤originals，返回第一个符合的对象
     * @param originals
     * @param propName
     * @param propValue
     */
    /**
       * 过滤originals，返回第一个符合的对象
       * @param originals
       * @param propName
       * @param propValue
       */
    Condition.prototype.getFilterFirst = /**
       * 过滤originals，返回第一个符合的对象
       * @param originals
       * @param propName
       * @param propValue
       */
    function (originals, propName, propValue) {
        if (originals.length === 0) {
            return null;
        }
        var result = originals.filter(function (item) {
            return item[propName] === propValue;
        });
        if (result.length) {
            return result[0];
        }
        return null;
    };
    /**
     * 返回过滤条件中的类型
     */
    /**
       * 返回过滤条件中的类型
       */
    Condition.prototype.getDataType = /**
       * 返回过滤条件中的类型
       */
    function (originalDataType) {
        switch (originalDataType) {
            case 'String':
            case 'SmartHelp':
            case 'Help':
            case 'Enum':
                originalDataType = 'String';
                break;
            case 'Date':
                originalDataType = 'Date';
                break;
            case 'DateTime':
                originalDataType = 'DateTime';
                break;
            case 'Decimal':
                originalDataType = 'Decimal';
                break;
            case 'Int':
                originalDataType = 'Integer';
                break;
            case 'Boolean':
                originalDataType = 'Boolean';
                break;
            case 'Text':
                originalDataType = 'Text';
                break;
            default:
                originalDataType = 'String';
                break;
        }
        return originalDataType;
    };
    /**
     * 根据条件返回真实值和显示值
     * @param operator
     * @param value
     * @param datatype
     */
    /**
       * 根据条件返回真实值和显示值
       * @param operator
       * @param value
       * @param datatype
       */
    Condition.prototype.getConditionValueADisplayValue = /**
       * 根据条件返回真实值和显示值
       * @param operator
       * @param value
       * @param datatype
       */
    function (operator, value, datatype) {
        var tmp_originalValue;
        var tmp_displayValue;
        var tmp_value;
        switch (datatype) {
            case 'Date':
                // 如果没有选择值如何处理
                var start = value['Start']
                    ? exports.OPERATE_CONDITION.formatDate(value['Start'], 'yyyy/MM/dd')
                    : '';
                var end = value['End']
                    ? exports.OPERATE_CONDITION.formatDate(value['End'], 'yyyy/MM/dd')
                    : '';
                tmp_value = new datatype_1.ExpressRange(start, end);
                tmp_displayValue = new datatype_1.ExpressRange(start, end);
                break;
            case 'Enum':
                tmp_originalValue = value['Value'];
                tmp_value = exports.OPERATE_CONDITION.getValue(operator, tmp_originalValue, datatype);
                tmp_displayValue = value['Name'];
                break;
            default:
                tmp_value = exports.OPERATE_CONDITION.getValue(operator, value, datatype);
                tmp_displayValue = value;
        }
        return { Value: tmp_value, DisplayValue: tmp_displayValue };
    };
    return Condition;
}());
exports.Condition = Condition;
exports.OPERATE_CONDITION = new Condition();
//# sourceMappingURL=condition.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/query-scheme-bar/util/datatype.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 表达式类型
 */
/**
 * 表达式类型
 */
var ExpressType;
/**
 * 表达式类型
 */
(function (ExpressType) {
    ExpressType[ExpressType["Value"] = 0] = "Value";
    ExpressType[ExpressType["Range"] = 1] = "Range";
    ExpressType[ExpressType["Variable"] = 2] = "Variable";
})(ExpressType = exports.ExpressType || (exports.ExpressType = {}));
/**
 * 范围型的表达式
 */
var /**
 * 范围型的表达式
 */
ExpressRange = /** @class */ (function () {
    function ExpressRange(start, end) {
        this.Start = start ? start : '';
        this.End = end ? end : '';
    }
    return ExpressRange;
}());
exports.ExpressRange = ExpressRange;
// 传递过来的过滤条件
var 
// 传递过来的过滤条件
ConditionItem = /** @class */ (function () {
    function ConditionItem(epType, data) {
        if (epType === void 0) { epType = ExpressType.Value; }
        this.DataType = '';
        this.Expresstype = epType;
        this.Field = '';
        this.Lbracket = '';
        this.Rbracket = '';
        this.Relation = '';
        switch (epType) {
            case ExpressType.Range:
                this.DisplayValue = new ExpressRange();
                this.Value = new ExpressRange();
                break;
            default:
                this.DisplayValue = '';
                this.Compare = '';
                this.Value = '';
        }
        if (data) {
            Object.assign(this, data);
        }
    }
    return ConditionItem;
}());
exports.ConditionItem = ConditionItem;
//# sourceMappingURL=datatype.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/query-scheme-bar/util/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var datatype_1 = __webpack_require__("./node_modules/@farris/ui/query-scheme-bar/util/datatype.js");
exports.ConditionItem = datatype_1.ConditionItem;
exports.ExpressType = datatype_1.ExpressType;
exports.ExpressRange = datatype_1.ExpressRange;
var condition_1 = __webpack_require__("./node_modules/@farris/ui/query-scheme-bar/util/condition.js");
exports.OPERATE_CONDITION = condition_1.OPERATE_CONDITION;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/responsive/col/res-col.directive.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var FarrisColDirective = /** @class */ (function () {
    function FarrisColDirective(el) {
        this.el = el;
        this.span = 0;
        // 向右移动几个col
        this.offset = 0;
        this.nativeClass = '';
        this.nativeClass += this.el.nativeElement.classList.value;
    }
    Object.defineProperty(FarrisColDirective.prototype, "ColClass", {
        get: function () {
            return this.nativeClass + " " + this.getSpanClass() + this.getBreakpointClass() + this.getOffsetClass() + this.getOrderClass();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FarrisColDirective.prototype, "isCol", {
        get: function () {
            return this.col;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FarrisColDirective.prototype, "isColSm", {
        get: function () {
            return this.colSm;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FarrisColDirective.prototype, "isColMd", {
        get: function () {
            return this.colMd;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FarrisColDirective.prototype, "isColLg", {
        get: function () {
            return this.colLg;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FarrisColDirective.prototype, "isColXl", {
        get: function () {
            return this.colXl;
        },
        enumerable: true,
        configurable: true
    });
    /* 获取span 类名 */
    /* 获取span 类名 */
    FarrisColDirective.prototype.getSpanClass = /* 获取span 类名 */
    function () {
        return this.span ? " col-" + this.span : " ";
    };
    /* 获取响应式 类名  xs sm md lg xl 可以是数字，代表span;也可以是对象，内部包含span offset*/
    /* 获取响应式 类名  xs sm md lg xl 可以是数字，代表span;也可以是对象，内部包含span offset*/
    FarrisColDirective.prototype.getBreakpointClass = /* 获取响应式 类名  xs sm md lg xl 可以是数字，代表span;也可以是对象，内部包含span offset*/
    function () {
        var _this = this;
        var makeClass = function (breakpoint) {
            var props = _this[breakpoint] || {};
            // 获取对象中  span或者offset
            return Object.keys(props).map(function (prop) {
                return prop === 'span' ?
                    "col-" + breakpoint + "-" + props[prop] : prop === 'offset' ? "offset-" + breakpoint + "-" + props[prop] :
                    "order-" + breakpoint + "-" + props[prop];
            }).join(' ');
        };
        return ['sm', 'md', 'lg', 'xl'].reduce(function (pre, current) {
            return typeof _this[current] === 'object' ? pre + " " + makeClass(current) :
                typeof _this[current] === 'number' ? pre + " col-" + current + "-" + _this[current] : pre + " ";
        }, '');
    };
    /* 获取offset */
    /* 获取offset */
    FarrisColDirective.prototype.getOffsetClass = /* 获取offset */
    function () {
        return this.offset ? " offset-" + this.offset : " ";
    };
    // get order class
    // get order class
    FarrisColDirective.prototype.getOrderClass = 
    // get order class
    function () {
        return this.order ? " order-" + this.order : " ";
    };
    FarrisColDirective.decorators = [
        { type: core_1.Directive, args: [{
                    selector: '[farris-col]'
                },] },
    ];
    /** @nocollapse */
    FarrisColDirective.ctorParameters = function () { return [
        { type: core_1.ElementRef, },
    ]; };
    FarrisColDirective.propDecorators = {
        "col": [{ type: core_1.Input },],
        "colSm": [{ type: core_1.Input, args: ['col-sm',] },],
        "colMd": [{ type: core_1.Input, args: ['col-md',] },],
        "colLg": [{ type: core_1.Input, args: ['col-lg',] },],
        "colXl": [{ type: core_1.Input, args: ['col-xl',] },],
        "span": [{ type: core_1.Input },],
        "offset": [{ type: core_1.Input },],
        "order": [{ type: core_1.Input },],
        "xs": [{ type: core_1.Input },],
        "sm": [{ type: core_1.Input },],
        "md": [{ type: core_1.Input },],
        "lg": [{ type: core_1.Input },],
        "xl": [{ type: core_1.Input },],
        "ColClass": [{ type: core_1.HostBinding, args: ['class',] },],
        "isCol": [{ type: core_1.HostBinding, args: ['class.col',] },],
        "isColSm": [{ type: core_1.HostBinding, args: ['class.col-sm',] },],
        "isColMd": [{ type: core_1.HostBinding, args: ['class.col-md',] },],
        "isColLg": [{ type: core_1.HostBinding, args: ['class.col-lg',] },],
        "isColXl": [{ type: core_1.HostBinding, args: ['class.col-xl',] },],
    };
    return FarrisColDirective;
}());
exports.FarrisColDirective = FarrisColDirective;
//# sourceMappingURL=res-col.directive.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/responsive/container/res-container.directive.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var FarrisContainerDirective = /** @class */ (function () {
    function FarrisContainerDirective(el, render) {
        this.el = el;
        this.render = render;
        this.isContainer = true;
    }
    Object.defineProperty(FarrisContainerDirective.prototype, "width", {
        get: function () {
            // 对各个单位进行处理
            return this._width;
        },
        set: function (width) {
            this._width = this.resolveSize(width);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FarrisContainerDirective.prototype, "height", {
        get: function () {
            return this._height;
        },
        set: function (height) {
            this._height = this.resolveSize(height);
        },
        enumerable: true,
        configurable: true
    });
    FarrisContainerDirective.prototype.ngOnInit = function () {
        // 宽高  赋值
        this.render.setStyle(this.el.nativeElement, 'width', this.width);
        this.render.setStyle(this.el.nativeElement, 'height', this.height);
    };
    /*宽高类型是 string或者number 解析宽高  尺寸 */
    /*宽高类型是 string或者number 解析宽高  尺寸 */
    FarrisContainerDirective.prototype.resolveSize = /*宽高类型是 string或者number 解析宽高  尺寸 */
    function (size) {
        var regex = /px|em|rem|pt|%/;
        // 说明是字符串
        return regex.test(size) ? "" + parseInt(size, 10) + size.match(regex)[0] : size + "px";
    };
    FarrisContainerDirective.decorators = [
        { type: core_1.Directive, args: [{
                    selector: '[farris-container]'
                },] },
    ];
    /** @nocollapse */
    FarrisContainerDirective.ctorParameters = function () { return [
        { type: core_1.ElementRef, },
        { type: core_1.Renderer2, },
    ]; };
    FarrisContainerDirective.propDecorators = {
        "isContainer": [{ type: core_1.HostBinding, args: ['class.container',] },],
        "width": [{ type: core_1.Input },],
        "height": [{ type: core_1.Input },],
    };
    return FarrisContainerDirective;
}());
exports.FarrisContainerDirective = FarrisContainerDirective;
//# sourceMappingURL=res-container.directive.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/responsive/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__("./node_modules/@farris/ui/responsive/responsive.module.js"));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/responsive/responsive.module.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = __webpack_require__("./node_modules/@angular/common/esm5/common.js");
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var res_row_directive_1 = __webpack_require__("./node_modules/@farris/ui/responsive/row/res-row.directive.js");
var res_col_directive_1 = __webpack_require__("./node_modules/@farris/ui/responsive/col/res-col.directive.js");
var res_container_directive_1 = __webpack_require__("./node_modules/@farris/ui/responsive/container/res-container.directive.js");
var FarrisResponsiveModule = /** @class */ (function () {
    function FarrisResponsiveModule() {
    }
    FarrisResponsiveModule.decorators = [
        { type: core_1.NgModule, args: [{
                    imports: [
                        common_1.CommonModule
                    ],
                    declarations: [res_container_directive_1.FarrisContainerDirective, res_col_directive_1.FarrisColDirective, res_row_directive_1.FarrisRowDirective],
                    exports: [res_container_directive_1.FarrisContainerDirective, res_col_directive_1.FarrisColDirective, res_row_directive_1.FarrisRowDirective],
                },] },
    ];
    return FarrisResponsiveModule;
}());
exports.FarrisResponsiveModule = FarrisResponsiveModule;
//# sourceMappingURL=responsive.module.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/responsive/row/res-row.directive.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var FarrisRowDirective = /** @class */ (function () {
    function FarrisRowDirective(el) {
        this.el = el;
        this.type = 'flex';
        this.gutter = 16;
        this.justify = 'start';
        this.align = 'start';
        // 绑定row 到class
        this.isRow = this.type === 'flex';
        //
        this.nativeClass = '';
        // 初始化类名 添加宿主元素已有的类名
        this.nativeClass += this.el.nativeElement.classList.value;
    }
    Object.defineProperty(FarrisRowDirective.prototype, "respClass", {
        get: function () {
            return "" + this.getJustifyClass() + this.getAlignClass() + this.getGutterClass() + this.getBreakpointClass();
        },
        enumerable: true,
        configurable: true
    });
    FarrisRowDirective.prototype.ngOnInit = function () {
    };
    // 获取justify class
    // 获取justify class
    FarrisRowDirective.prototype.getJustifyClass = 
    // 获取justify class
    function () {
        var justifyStr = this.justify !== 'start' ? " justify-content-" + this.justify : ' ';
        return "" + this.nativeClass + justifyStr;
    };
    // 获取 align class
    // 获取 align class
    FarrisRowDirective.prototype.getAlignClass = 
    // 获取 align class
    function () {
        return this.align !== 'start' ? " align-items-" + this.align : ' ';
    };
    // 响应式 justify
    // 响应式 justify
    FarrisRowDirective.prototype.getBreakpointClass = 
    // 响应式 justify
    function () {
        var _this = this;
        var makeClass = function (breakpoint) {
            var props = _this[breakpoint] || {};
            // 获取对象中  justify或者align
            return Object.keys(props).map(function (prop) {
                return prop === 'justify' ?
                    "justify-content-" + breakpoint + "-" + props[prop] : "align-items-" + breakpoint + "-" + props[prop];
            }).join(' ');
        };
        var classStr = ['sm', 'md', 'lg', 'xl'].reduce(function (pre, current) {
            return pre + " " + makeClass(current);
        }, '');
        return classStr;
    };
    // 有无间隔
    // 有无间隔
    FarrisRowDirective.prototype.getGutterClass = 
    // 有无间隔
    function () {
        return !this.gutter ? ' no-gutters' : ' ';
    };
    FarrisRowDirective.decorators = [
        { type: core_1.Directive, args: [{
                    selector: '[farris-row]',
                },] },
    ];
    /** @nocollapse */
    FarrisRowDirective.ctorParameters = function () { return [
        { type: core_1.ElementRef, },
    ]; };
    FarrisRowDirective.propDecorators = {
        "type": [{ type: core_1.Input },],
        "gutter": [{ type: core_1.Input },],
        "justify": [{ type: core_1.Input },],
        "align": [{ type: core_1.Input },],
        "xs": [{ type: core_1.Input },],
        "sm": [{ type: core_1.Input },],
        "md": [{ type: core_1.Input },],
        "lg": [{ type: core_1.Input },],
        "xl": [{ type: core_1.Input },],
        "respClass": [{ type: core_1.HostBinding, args: ['class',] },],
        "isRow": [{ type: core_1.HostBinding, args: ['class.row',] },],
    };
    return FarrisRowDirective;
}());
exports.FarrisRowDirective = FarrisRowDirective;
//# sourceMappingURL=res-row.directive.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/scroll-tab/dropdown/dropdown-config.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
/**
 * Configuration service for the NgbDropdown directive.
 * You can inject this service, typically in your root component, and customize the values of its properties in
 * order to provide default values for all the dropdowns used in the application.
 */
var NgbDropdownConfig = /** @class */ (function () {
    function NgbDropdownConfig() {
        this.autoClose = true;
        this.placement = 'bottom-right';
    }
    NgbDropdownConfig.decorators = [
        { type: core_1.Injectable },
    ];
    return NgbDropdownConfig;
}());
exports.NgbDropdownConfig = NgbDropdownConfig;
//# sourceMappingURL=dropdown-config.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/scroll-tab/dropdown/dropdown.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var dropdown_config_1 = __webpack_require__("./node_modules/@farris/ui/scroll-tab/dropdown/dropdown-config.js");
var positioning_1 = __webpack_require__("./node_modules/@farris/ui/scroll-tab/util/positioning.js");
/**
 */
var NgbDropdownMenu = /** @class */ (function () {
    function NgbDropdownMenu(dropdown, _elementRef, _renderer) {
        this.dropdown = dropdown;
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this.placement = 'bottom';
        this.isOpen = false;
    }
    NgbDropdownMenu.prototype.isEventFrom = function ($event) { return this._elementRef.nativeElement.contains($event.target); };
    NgbDropdownMenu.prototype.position = function (triggerEl, placement) {
        this.applyPlacement(positioning_1.positionElements(triggerEl, this._elementRef.nativeElement, placement));
    };
    NgbDropdownMenu.prototype.applyPlacement = function (_placement) {
        // remove the current placement classes
        this._renderer.removeClass(this._elementRef.nativeElement.parentNode, 'dropup');
        this._renderer.removeClass(this._elementRef.nativeElement.parentNode, 'dropdown');
        this.placement = _placement;
        /**
             * apply the new placement
             * in case of top use up-arrow or down-arrow otherwise
             */
        if (_placement.search('^top') !== -1) {
            this._renderer.addClass(this._elementRef.nativeElement.parentNode, 'dropup');
        }
        else {
            this._renderer.addClass(this._elementRef.nativeElement.parentNode, 'dropdown');
        }
    };
    NgbDropdownMenu.decorators = [
        { type: core_1.Directive, args: [{
                    selector: '[ngbDropdownMenu]',
                    host: { '[class.dropdown-menu]': 'true', '[class.show]': 'dropdown.isOpen()', '[attr.x-placement]': 'placement' }
                },] },
    ];
    /** @nocollapse */
    NgbDropdownMenu.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: core_1.Inject, args: [core_1.forwardRef(function () { return NgbDropdown; }),] },] },
        { type: core_1.ElementRef, },
        { type: core_1.Renderer2, },
    ]; };
    return NgbDropdownMenu;
}());
exports.NgbDropdownMenu = NgbDropdownMenu;
/**
 * Marks an element to which dropdown menu will be anchored. This is a simple version
 * of the NgbDropdownToggle directive. It plays the same role as NgbDropdownToggle but
 * doesn't listen to click events to toggle dropdown menu thus enabling support for
 * events other than click.
 *
 * @since 1.1.0
 */
var NgbDropdownAnchor = /** @class */ (function () {
    function NgbDropdownAnchor(dropdown, _elementRef) {
        this.dropdown = dropdown;
        this._elementRef = _elementRef;
        this.anchorEl = _elementRef.nativeElement;
    }
    NgbDropdownAnchor.prototype.isEventFrom = function ($event) { return this._elementRef.nativeElement.contains($event.target); };
    NgbDropdownAnchor.decorators = [
        { type: core_1.Directive, args: [{
                    selector: '[ngbDropdownAnchor]',
                    host: { 'class': 'dropdown-toggle', 'aria-haspopup': 'true', '[attr.aria-expanded]': 'dropdown.isOpen()' }
                },] },
    ];
    /** @nocollapse */
    NgbDropdownAnchor.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: core_1.Inject, args: [core_1.forwardRef(function () { return NgbDropdown; }),] },] },
        { type: core_1.ElementRef, },
    ]; };
    return NgbDropdownAnchor;
}());
exports.NgbDropdownAnchor = NgbDropdownAnchor;
/**
 * Allows the dropdown to be toggled via click. This directive is optional: you can use NgbDropdownAnchor as an
 * alternative.
 */
var NgbDropdownToggle = /** @class */ (function (_super) {
    __extends(NgbDropdownToggle, _super);
    function NgbDropdownToggle(dropdown, elementRef) {
        return _super.call(this, dropdown, elementRef) || this;
    }
    NgbDropdownToggle.prototype.toggleOpen = function () { this.dropdown.toggle(); };
    NgbDropdownToggle.decorators = [
        { type: core_1.Directive, args: [{
                    selector: '[ngbDropdownToggle]',
                    host: {
                        'class': 'dropdown-toggle',
                        'aria-haspopup': 'true',
                        '[attr.aria-expanded]': 'dropdown.isOpen()',
                        '(click)': 'toggleOpen()'
                    },
                    providers: [{ provide: NgbDropdownAnchor, useExisting: core_1.forwardRef(function () { return NgbDropdownToggle; }) }]
                },] },
    ];
    /** @nocollapse */
    NgbDropdownToggle.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: core_1.Inject, args: [core_1.forwardRef(function () { return NgbDropdown; }),] },] },
        { type: core_1.ElementRef, },
    ]; };
    return NgbDropdownToggle;
}(NgbDropdownAnchor));
exports.NgbDropdownToggle = NgbDropdownToggle;
/**
 * Transforms a node into a dropdown.
 */
var NgbDropdown = /** @class */ (function () {
    function NgbDropdown(config, ngZone) {
        var _this = this;
        /**
           *  Defines whether or not the dropdown-menu is open initially.
           */
        this._open = false;
        /**
           *  An event fired when the dropdown is opened or closed.
           *  Event's payload equals whether dropdown is open.
           */
        this.openChange = new core_1.EventEmitter();
        this.placement = config.placement;
        this.autoClose = config.autoClose;
        this._zoneSubscription = ngZone.onStable.subscribe(function () { _this._positionMenu(); });
    }
    NgbDropdown.prototype.ngOnInit = function () {
        if (this._menu) {
            this._menu.applyPlacement(Array.isArray(this.placement) ? (this.placement[0]) : this.placement);
        }
    };
    /**
     * Checks if the dropdown menu is open or not.
     */
    /**
       * Checks if the dropdown menu is open or not.
       */
    NgbDropdown.prototype.isOpen = /**
       * Checks if the dropdown menu is open or not.
       */
    function () { return this._open; };
    /**
     * Opens the dropdown menu of a given navbar or tabbed navigation.
     */
    /**
       * Opens the dropdown menu of a given navbar or tabbed navigation.
       */
    NgbDropdown.prototype.open = /**
       * Opens the dropdown menu of a given navbar or tabbed navigation.
       */
    function () {
        if (!this._open) {
            this._open = true;
            this._positionMenu();
            this.openChange.emit(true);
        }
    };
    /**
     * Closes the dropdown menu of a given navbar or tabbed navigation.
     */
    /**
       * Closes the dropdown menu of a given navbar or tabbed navigation.
       */
    NgbDropdown.prototype.close = /**
       * Closes the dropdown menu of a given navbar or tabbed navigation.
       */
    function () {
        if (this._open) {
            this._open = false;
            this.openChange.emit(false);
        }
    };
    /**
     * Toggles the dropdown menu of a given navbar or tabbed navigation.
     */
    /**
       * Toggles the dropdown menu of a given navbar or tabbed navigation.
       */
    NgbDropdown.prototype.toggle = /**
       * Toggles the dropdown menu of a given navbar or tabbed navigation.
       */
    function () {
        if (this.isOpen()) {
            this.close();
        }
        else {
            this.open();
        }
    };
    NgbDropdown.prototype.closeFromClick = function ($event) {
        if (this.autoClose && $event.button !== 2 && !this._isEventFromToggle($event)) {
            if (this.autoClose === true) {
                this.close();
            }
            else if (this.autoClose === 'inside' && this._isEventFromMenu($event)) {
                this.close();
            }
            else if (this.autoClose === 'outside' && !this._isEventFromMenu($event)) {
                this.close();
            }
        }
    };
    NgbDropdown.prototype.closeFromOutsideEsc = function () {
        if (this.autoClose) {
            this.close();
        }
    };
    NgbDropdown.prototype.ngOnDestroy = function () { this._zoneSubscription.unsubscribe(); };
    NgbDropdown.prototype._isEventFromToggle = function ($event) { return this._anchor.isEventFrom($event); };
    NgbDropdown.prototype._isEventFromMenu = function ($event) { return this._menu ? this._menu.isEventFrom($event) : false; };
    NgbDropdown.prototype._positionMenu = function () {
        if (this.isOpen() && this._menu) {
            this._menu.position(this._anchor.anchorEl, this.placement);
        }
    };
    NgbDropdown.decorators = [
        { type: core_1.Directive, args: [{
                    selector: '[ngbDropdown]',
                    exportAs: 'ngbDropdown',
                    host: {
                        '[class.show]': 'isOpen()',
                        '(keyup.esc)': 'closeFromOutsideEsc()',
                        '(document:click)': 'closeFromClick($event)'
                    }
                },] },
    ];
    /** @nocollapse */
    NgbDropdown.ctorParameters = function () { return [
        { type: dropdown_config_1.NgbDropdownConfig, },
        { type: core_1.NgZone, },
    ]; };
    NgbDropdown.propDecorators = {
        "_menu": [{ type: core_1.ContentChild, args: [NgbDropdownMenu,] },],
        "_anchor": [{ type: core_1.ContentChild, args: [NgbDropdownAnchor,] },],
        "autoClose": [{ type: core_1.Input },],
        "_open": [{ type: core_1.Input, args: ['open',] },],
        "placement": [{ type: core_1.Input },],
        "openChange": [{ type: core_1.Output },],
    };
    return NgbDropdown;
}());
exports.NgbDropdown = NgbDropdown;
//# sourceMappingURL=dropdown.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/scroll-tab/dropdown/dropdown.module.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var dropdown_1 = __webpack_require__("./node_modules/@farris/ui/scroll-tab/dropdown/dropdown.js");
var dropdown_config_1 = __webpack_require__("./node_modules/@farris/ui/scroll-tab/dropdown/dropdown-config.js");
var dropdown_2 = __webpack_require__("./node_modules/@farris/ui/scroll-tab/dropdown/dropdown.js");
exports.NgbDropdown = dropdown_2.NgbDropdown;
exports.NgbDropdownToggle = dropdown_2.NgbDropdownToggle;
exports.NgbDropdownMenu = dropdown_2.NgbDropdownMenu;
var dropdown_config_2 = __webpack_require__("./node_modules/@farris/ui/scroll-tab/dropdown/dropdown-config.js");
exports.NgbDropdownConfig = dropdown_config_2.NgbDropdownConfig;
var NGB_DROPDOWN_DIRECTIVES = [
    dropdown_1.NgbDropdown,
    dropdown_1.NgbDropdownAnchor,
    dropdown_1.NgbDropdownToggle,
    dropdown_1.NgbDropdownMenu
];
var NgbDropdownModule = /** @class */ (function () {
    function NgbDropdownModule() {
    }
    NgbDropdownModule.forRoot = function () {
        return { ngModule: NgbDropdownModule, providers: [dropdown_config_1.NgbDropdownConfig] };
    };
    NgbDropdownModule.decorators = [
        { type: core_1.NgModule, args: [{
                    declarations: NGB_DROPDOWN_DIRECTIVES,
                    exports: NGB_DROPDOWN_DIRECTIVES
                },] },
    ];
    return NgbDropdownModule;
}());
exports.NgbDropdownModule = NgbDropdownModule;
//# sourceMappingURL=dropdown.module.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/scroll-tab/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var scroll_tabs_module_1 = __webpack_require__("./node_modules/@farris/ui/scroll-tab/scroll-tabs.module.js");
exports.FarrisScrollTabsModule = scroll_tabs_module_1.FarrisScrollTabsModule;
var scroll_tabs_component_1 = __webpack_require__("./node_modules/@farris/ui/scroll-tab/scroll-tabs/scroll-tabs.component.js");
exports.FarrisScrollTabsComponent = scroll_tabs_component_1.FarrisScrollTabsComponent;
var scroll_tabs_config_1 = __webpack_require__("./node_modules/@farris/ui/scroll-tab/scroll-tabs.config.js");
exports.ScrollTabConfig = scroll_tabs_config_1.ScrollTabConfig;
var tabhost_directive_1 = __webpack_require__("./node_modules/@farris/ui/scroll-tab/tab/tabhost.directive.js");
exports.TabHostDirective = tabhost_directive_1.TabHostDirective;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/scroll-tab/scroll-tabs.config.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var ScrollTabConfig = /** @class */ (function () {
    function ScrollTabConfig() {
        // 是否启用下拉框
        this.showDropDown = true;
        // 是否启用提示信息
        this.showTooltips = true;
        // 点击时滚动值
        this.scrollStep = 15;
        // 是否自动重新宽度 ---- todo:此处只处理了window的resize事件
        this.autoResize = true;
        // 下拉列表最大高度 非正值表明是不高度
        this.maxDropdownH = 200;
        // 下拉列表最大宽度： 非正值表明是不限制宽度
        this.maxDropdownW = -1;
        // 标签最大宽度：非正值表明不限制宽度
        this.maxTabW = 100;
        // 提示信息条数
        this.maxTooltipLen = 5;
    }
    return ScrollTabConfig;
}());
exports.ScrollTabConfig = ScrollTabConfig;
var ScrollTabService = /** @class */ (function () {
    function ScrollTabService(exConfig) {
        this.config = new ScrollTabConfig();
        if (exConfig) {
            Object.assign(this.config, exConfig);
        }
    }
    ScrollTabService.prototype.getConfig = function () {
        return this.config;
    };
    ScrollTabService.decorators = [
        { type: core_1.Injectable },
    ];
    /** @nocollapse */
    ScrollTabService.ctorParameters = function () { return [
        { type: ScrollTabConfig, decorators: [{ type: core_1.Optional },] },
    ]; };
    return ScrollTabService;
}());
exports.ScrollTabService = ScrollTabService;
//# sourceMappingURL=scroll-tabs.config.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/scroll-tab/scroll-tabs.module.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/esm5/common.js");
var dropdown_module_1 = __webpack_require__("./node_modules/@farris/ui/scroll-tab/dropdown/dropdown.module.js");
var tooltip_module_1 = __webpack_require__("./node_modules/@farris/ui/scroll-tab/tooltip/tooltip.module.js");
var scroll_tabs_component_1 = __webpack_require__("./node_modules/@farris/ui/scroll-tab/scroll-tabs/scroll-tabs.component.js");
var scroll_tabs_config_1 = __webpack_require__("./node_modules/@farris/ui/scroll-tab/scroll-tabs.config.js");
var tab_component_1 = __webpack_require__("./node_modules/@farris/ui/scroll-tab/tab/tab.component.js");
var tab_transclude_directive_1 = __webpack_require__("./node_modules/@farris/ui/scroll-tab/tab/tab.transclude.directive.js");
var tab_headtemplate_directive_1 = __webpack_require__("./node_modules/@farris/ui/scroll-tab/tab/tab.headtemplate.directive.js");
var tabhost_directive_1 = __webpack_require__("./node_modules/@farris/ui/scroll-tab/tab/tabhost.directive.js");
var kendo_angular_popup_1 = __webpack_require__("./node_modules/@progress/kendo-angular-popup/dist/es/index.js");
var kendo_angular_buttons_1 = __webpack_require__("./node_modules/@progress/kendo-angular-buttons/dist/es/index.js");
var flex_directive_1 = __webpack_require__("./node_modules/@farris/ui/scroll-tab/scroll-tabs/flex.directive.js");
var FarrisScrollTabsModule = /** @class */ (function () {
    function FarrisScrollTabsModule() {
    }
    FarrisScrollTabsModule.forRoot = function (config) {
        return {
            ngModule: FarrisScrollTabsModule,
            providers: [{ provide: scroll_tabs_config_1.ScrollTabConfig, useValue: config }]
        };
    };
    FarrisScrollTabsModule.decorators = [
        { type: core_1.NgModule, args: [{
                    imports: [
                        common_1.CommonModule,
                        kendo_angular_popup_1.PopupModule,
                        kendo_angular_buttons_1.ButtonModule,
                        dropdown_module_1.NgbDropdownModule.forRoot(),
                        tooltip_module_1.NgbTooltipModule.forRoot()
                    ],
                    declarations: [scroll_tabs_component_1.FarrisScrollTabsComponent, tab_component_1.FarrisTabComponent, tab_transclude_directive_1.TabTranscludeDirective, tab_headtemplate_directive_1.TabHeadDirective,
                        tabhost_directive_1.TabHostDirective, flex_directive_1.FlexDirective],
                    exports: [scroll_tabs_component_1.FarrisScrollTabsComponent, tab_component_1.FarrisTabComponent, tab_transclude_directive_1.TabTranscludeDirective, tab_headtemplate_directive_1.TabHeadDirective,
                        tabhost_directive_1.TabHostDirective, flex_directive_1.FlexDirective],
                    providers: [scroll_tabs_config_1.ScrollTabService]
                },] },
    ];
    return FarrisScrollTabsModule;
}());
exports.FarrisScrollTabsModule = FarrisScrollTabsModule;
//# sourceMappingURL=scroll-tabs.module.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/scroll-tab/scroll-tabs/flex.directive.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var FlexDirective = /** @class */ (function () {
    function FlexDirective(el, render) {
        this.el = el;
        this.render = render;
        this.fill = false;
        this.direction = 'row';
        this.type = 'flex';
        this.justifyContent = 'start';
        this.alignItems = 'start';
        this.displayFlex = this.type === 'flex';
        this.nativeClass = ' ';
        this.nativeClass += this.el.nativeElement.classList.value;
    }
    Object.defineProperty(FlexDirective.prototype, "width", {
        get: function () {
            // 对各个单位进行处理
            return this._width;
        },
        set: function (width) {
            this._width = this.resolveSize(width);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlexDirective.prototype, "height", {
        get: function () {
            return this._height;
        },
        set: function (height) {
            this._height = this.resolveSize(height);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlexDirective.prototype, "currentStyle", {
        get: function () {
            return this.nativeClass + " " + this.getDirection() + " " + this.getJsutifyClass() + " " + this.getAlignClass();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlexDirective.prototype, "flexFill", {
        get: function () {
            return this.fill;
        },
        enumerable: true,
        configurable: true
    });
    FlexDirective.prototype.ngOnInit = function () {
        this.render.setStyle(this.el.nativeElement, 'width', this.width);
        this.render.setStyle(this.el.nativeElement, 'height', this.height);
    };
    /*宽高类型是 string或者number 解析宽高  尺寸 */
    /*宽高类型是 string或者number 解析宽高  尺寸 */
    FlexDirective.prototype.resolveSize = /*宽高类型是 string或者number 解析宽高  尺寸 */
    function (size) {
        var regex = /px|em|rem|pt|%/;
        // 说明是字符串
        return regex.test(size) ? "" + parseInt(size, 10) + size.match(regex)[0] : size + "px";
    };
    FlexDirective.prototype.getDirection = function () {
        return this.direction !== 'row' ? "flex-" + this.direction : '';
    };
    /* 获取flex 主轴排列方式类 */
    /* 获取flex 主轴排列方式类 */
    FlexDirective.prototype.getJsutifyClass = /* 获取flex 主轴排列方式类 */
    function () {
        var isJustify = this.justifyContent !== 'start';
        return isJustify ? "justify-content-" + this.justifyContent : '';
    };
    /* 获取flex交叉轴 排列方式类 */
    /* 获取flex交叉轴 排列方式类 */
    FlexDirective.prototype.getAlignClass = /* 获取flex交叉轴 排列方式类 */
    function () {
        var isAlign = this.alignItems !== 'start';
        return isAlign ? "align-items-" + this.alignItems : '';
    };
    FlexDirective.decorators = [
        { type: core_1.Directive, args: [{
                    selector: '[flex]'
                },] },
    ];
    /** @nocollapse */
    FlexDirective.ctorParameters = function () { return [
        { type: core_1.ElementRef, },
        { type: core_1.Renderer2, },
    ]; };
    FlexDirective.propDecorators = {
        "fill": [{ type: core_1.Input },],
        "direction": [{ type: core_1.Input },],
        "type": [{ type: core_1.Input },],
        "justifyContent": [{ type: core_1.Input, args: ['justify',] },],
        "alignItems": [{ type: core_1.Input, args: ['align',] },],
        "width": [{ type: core_1.Input },],
        "height": [{ type: core_1.Input },],
        "currentStyle": [{ type: core_1.HostBinding, args: ["class",] },],
        "flexFill": [{ type: core_1.HostBinding, args: ['class.flex-fill',] },],
        "displayFlex": [{ type: core_1.HostBinding, args: ['class.d-flex',] },],
    };
    return FlexDirective;
}());
exports.FlexDirective = FlexDirective;
//# sourceMappingURL=flex.directive.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/scroll-tab/scroll-tabs/scroll-tabs.component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var fromEvent_1 = __webpack_require__("./node_modules/rxjs/observable/fromEvent.js");
var interval_1 = __webpack_require__("./node_modules/rxjs/observable/interval.js");
var operators_1 = __webpack_require__("./node_modules/rxjs/operators.js");
var scroll_tabs_config_1 = __webpack_require__("./node_modules/@farris/ui/scroll-tab/scroll-tabs.config.js");
var FarrisScrollTabsComponent = /** @class */ (function () {
    function FarrisScrollTabsComponent(stService, elementRef, renderer, cdRef) {
        this.stService = stService;
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.cdRef = cdRef;
        this.maxDropdownH = 200;
        // 下拉列表最大宽度： 非正值表明是不限制宽度
        this.maxDropdownW = -1;
        this._customClass = '';
        // 标签存储列表
        this._tabs = [];
        // tabs宽度和高度
        this.width = '100%';
        this.height = '100%';
        // tabs作为一个flex 设置flex方向
        // tslint:disable-next-line:no-input-rename
        this.tabsDirection = 'column';
        // tabs也可能作为某个flex容器的项目  因此要设置flex属性
        // tslint:disable-next-line:no-input-rename
        this.tabsFill = true;
        // 内容是否是flex 容器 用于内部子元素flex
        // tslint:disable-next-line:no-input-rename
        this.contentDirection = 'column';
        // 内容是否填充  默认是不填充
        // tslint:disable-next-line:no-input-rename
        this.contentFill = true;
        // 显示下拉数据
        this.dropdownTabs = [];
        // 隐藏左右滚动箭头按钮
        this.hideButtons = true;
        // 隐藏下拉
        this.hideDropDown = true;
        // 禁用左箭头
        this.disableLeft = false;
        // 禁用右箭头
        this.disableRight = false;
        // 记录事件流
        this.subscription = [];
        // 禁用右侧提示
        this.disableRTooltip = true;
        // 禁用左侧提示
        this.disableLTooltip = true;
        // 左侧提示数据
        this.leftTooltipTabs = [];
        // 右侧提示数据
        this.rightTooltipTabs = [];
        this.maxTooltipLen = 5;
        // 标记当前Tab标签
        this.activeId = '';
        this.tabChange = new core_1.EventEmitter();
        this.tabRemove = new core_1.EventEmitter();
        this.el = this.elementRef.nativeElement;
        this.verifyConfig();
    }
    Object.defineProperty(FarrisScrollTabsComponent.prototype, "headerHeight", {
        get: function () {
            return this._headerHeight;
        },
        set: function (headerHeight) {
            this._headerHeight = this.resolveSize(headerHeight);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FarrisScrollTabsComponent.prototype, "tabs", {
        get: 
        // 所有标签数据
        function () {
            return this._tabs;
        },
        set: function (value) {
            this._tabs = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FarrisScrollTabsComponent.prototype, "customClass", {
        get: function () {
            return this._customClass;
        },
        set: function (customClass) {
            var _this = this;
            if (this.customClass) {
                this.customClass.split(' ').forEach(function (cssClass) {
                    _this.renderer.removeClass(_this.el, cssClass);
                });
            }
            this._customClass = customClass ? customClass.trim() : null;
            if (this.customClass) {
                this.customClass.split(' ').forEach(function (cssClass) {
                    _this.renderer.addClass(_this.el, cssClass);
                });
            }
        },
        enumerable: true,
        configurable: true
    });
    /**验证传递参数 */
    /**验证传递参数 */
    FarrisScrollTabsComponent.prototype.verifyConfig = /**验证传递参数 */
    function () {
        var config = this.stService.getConfig();
        Object.assign(this, config);
        this.scrollStep = parseInt(this.scrollStep + '', 10);
    };
    FarrisScrollTabsComponent.prototype.ngOnInit = function () {
        this._tabContainerEl = this.tabContainer.nativeElement;
        this._createStream();
    };
    /**
     * 选中Tab
     * @param {string} tabId tab标识
     */
    /**
         * 选中Tab
         * @param {string} tabId tab标识
         */
    FarrisScrollTabsComponent.prototype.selectTab = /**
         * 选中Tab
         * @param {string} tabId tab标识
         */
    function (tabId) {
        var selectedTab = this._getTabById(tabId);
        this._selectTab(selectedTab.tab, selectedTab.index);
    };
    FarrisScrollTabsComponent.prototype._cpSelectTabByIndex = function (ev, index) {
        var targetEL = ev.target;
        if (targetEL.className.indexOf('st-drop-close') > -1 ||
            targetEL.parentElement.className.indexOf('st-drop-close') > -1) {
            // 阻止冒泡和捕获事件 点击删除标记 则执行删除标签方法  而不是选中标签
            ev.stopPropagation();
            this.removeTabByIndex(index);
        }
        else {
            // 阻止冒泡
            ev.preventDefault();
            this.selectTabByIndex(index);
        }
    };
    /**
     * 通过tabs的索引选择 tab
     * @param {number} index tabs索引
     */
    /**
         * 通过tabs的索引选择 tab
         * @param {number} index tabs索引
         */
    FarrisScrollTabsComponent.prototype.selectTabByIndex = /**
         * 通过tabs的索引选择 tab
         * @param {number} index tabs索引
         */
    function (index) {
        if (index >= 0 && index < this.tabs.length) {
            var selectTab = this.tabs[index];
            this._selectTab(selectTab, index);
        }
    };
    /* 选中tab时  暴露出选中tab的id 和其之后的id */
    /* 选中tab时  暴露出选中tab的id 和其之后的id */
    FarrisScrollTabsComponent.prototype._selectTab = /* 选中tab时  暴露出选中tab的id 和其之后的id */
    function (tab, index) {
        if (tab && !tab.disabled && this.activeId !== tab.id) {
            this.tabChange.emit({
                prevId: this.activeId,
                nextId: tab.id
            });
            this.activeId = tab.id;
            // 首先不激活所有的tab页  然后激活当前tab页
            this.tabs.forEach(function (item) {
                item.active = false;
            });
            this.tabs[index].active = true;
            // 滚动到可见区域内
            this.scrollTabIntoView(index);
        }
    };
    FarrisScrollTabsComponent.prototype._setActive = function () {
        if (this.tabs.length) {
            var activeTab = this._getTabById(this.activeId).tab;
            this.activeId = activeTab
                ? activeTab.id
                : this.tabs.length
                    ? this.tabs[0].id
                    : null;
        }
    };
    /**
     * 添加标签
     * @param curTabs 数组或者对象
     * @param activeId 设置
     */
    /**
         * 添加标签
         * @param curTabs 数组或者对象
         * @param activeId 设置
         */
    FarrisScrollTabsComponent.prototype.addTabs = /**
         * 添加标签
         * @param curTabs 数组或者对象
         * @param activeId 设置
         */
    function (curTabs, index, setActiveId) {
        if (curTabs.length > 0) {
            (_a = this._tabs).splice.apply(_a, [index, 0].concat(curTabs));
            // 去重
            this._tabs = this._unique(this._tabs);
            this._reCalculateAll();
        }
        if (setActiveId && this.activeId !== setActiveId) {
            var filterTab = this._getTabById(setActiveId);
            if (filterTab.index >= 0) {
                this.selectTab(setActiveId);
                this.activeId = setActiveId;
                this.scrollTabIntoView(filterTab.index);
            }
        }
        var _a;
    };
    /**
     * 添加标签时  去重
     *
     */
    /**
         * 添加标签时  去重
         *
         */
    FarrisScrollTabsComponent.prototype._unique = /**
         * 添加标签时  去重
         *
         */
    function (objArray) {
        var hash = {};
        objArray = objArray.reduce(function (item, next) {
            if (hash[next.id]) {
                hash[next.id] = '';
            }
            else {
                hash[next.id] = true && item.push(next);
            }
            return item;
        }, []);
        return objArray;
    };
    /* 通过tab列表的序列删除tab */
    /* 通过tab列表的序列删除tab */
    FarrisScrollTabsComponent.prototype.removeTabByIndex = /* 通过tab列表的序列删除tab */
    function (index) {
        var len = this.tabs.length - 1;
        if (index < 0 || index > len) {
            return;
        }
        var removeTab = this.tabs[index];
        removeTab.active = false;
        if (this.activeId === removeTab.id) {
            // 只有一个而且被删除
            if (len === 0) {
                // 如果所有标签均删除 激活id为空
                this.activeId = '';
            }
            else if (index === len) {
                // 如果删除的是最后一个标签 设置其前面的处于激活状态
                this.activeId = this.tabs[len - 1].id;
                this.tabs[index - 1].active = true;
            }
            else {
                // 如果其他情况  设置其后面的处于激活状态
                this.activeId = this.tabs[index + 1].id;
                this.tabs[index + 1].active = true;
            }
            this.tabs.splice(index, 1);
            this._reCalculateAll();
            this.scrollTabIntoView(index);
        }
        else {
            this.tabs.splice(index, 1);
            this._reCalculateAll();
        }
        this.tabRemove.emit({
            removeIndex: index,
            removeId: removeTab.id,
            activeId: this.activeId
        });
    };
    /**
     * 关闭标签  跟删除标签不同
     * @param string
     */
    /**
         * 关闭标签  跟删除标签不同
         * @param string
         */
    FarrisScrollTabsComponent.prototype.closeTab = /**
         * 关闭标签  跟删除标签不同
         * @param string
         */
    function (activeId) {
        var len = this.tabs.length;
        for (var i = 0; i < len; i++) {
            var tab = this.tabs[i];
            if (tab.id === activeId) {
                this.removeTabByIndex(i);
                return;
            }
        }
    };
    /**
     * 初始化
     */
    /**
         * 初始化
         */
    FarrisScrollTabsComponent.prototype.load = /**
         * 初始化
         */
    function () {
        for (var i = 0; i < this.tabs.length; i++) {
            if (this.tabs[i].id === this.activeId) {
                this.tabs[i].active = true;
                return;
            }
        }
    };
    /* 标签页内容初始化 */
    /* 标签页内容初始化 */
    FarrisScrollTabsComponent.prototype.ngAfterContentInit = /* 标签页内容初始化 */
    function () {
    };
    FarrisScrollTabsComponent.prototype.ngAfterContentChecked = function () {
        this._setActive();
    };
    FarrisScrollTabsComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.activeId = this.selectId;
        this._setActive();
        // this.se
        this.tabs.forEach(function (item) {
            item.active = false;
        });
        // 赋值tabs 标签内容
        var timer = window.setTimeout(function () {
            _this.load();
            window.clearTimeout(timer);
        }, 0);
        this._reCalculateAll();
    };
    FarrisScrollTabsComponent.prototype.ngOnDestroy = function () {
        // 组件销毁时  取消所有事件订阅
        this.subscription.forEach(function (sub) {
            sub.unsubscribe();
        });
        this.subscription = [];
    };
    /**
     * 鼠标移动上去 鼠标离去 显示或者隐藏标签完整名称
     * @param ScrollTabComponent类型  一个Tab
     */
    /**
         * 鼠标移动上去 鼠标离去 显示或者隐藏标签完整名称
         * @param ScrollTabComponent类型  一个Tab
         */
    FarrisScrollTabsComponent.prototype.mouseOverTab = /**
         * 鼠标移动上去 鼠标离去 显示或者隐藏标签完整名称
         * @param ScrollTabComponent类型  一个Tab
         */
    function (tab) {
        tab.popupFlag = true;
    };
    FarrisScrollTabsComponent.prototype.mouseLeaveTab = function (tab) {
        tab.popupFlag = false;
    };
    /**
     * 创建流
     */
    /**
         * 创建流
         */
    FarrisScrollTabsComponent.prototype._createStream = /**
         * 创建流
         */
    function () {
        var _this = this;
        [this.rightNav, this.leftNav].forEach(function (curBtn, index) {
            var direction = index ? -1 : 1;
            var mousedown$ = fromEvent_1.fromEvent(curBtn.nativeElement, 'mousedown');
            var mouseup$ = fromEvent_1.fromEvent(curBtn.nativeElement, 'mouseup');
            var newMouseDown$ = mousedown$.pipe(operators_1.switchMap(function (event) {
                event.preventDefault();
                var interval$ = interval_1.interval(80).pipe(operators_1.takeUntil(mouseup$), operators_1.scan(function (sum, num) {
                    return sum + _this.scrollStep * direction;
                }, 0), operators_1.takeWhile(function (num) {
                    if (direction > 0) {
                        return !_this.disableRight;
                    }
                    return !_this.disableLeft;
                }), operators_1.map(function (v) {
                    return { value: v, direction: direction };
                }));
                return interval$;
            }));
            var mousepressSub = newMouseDown$.subscribe(function (change) {
                _this._scrollTab(change.value, change.direction);
            });
            _this.subscription.push(mousepressSub);
        });
        if (this.autoResize) {
            // 订阅windows resize事件
            this.subscription.push(fromEvent_1.fromEvent(window, 'resize')
                .pipe(operators_1.throttleTime(80))
                .subscribe(function (e) {
                _this._reCalculateAll();
            }));
        }
    };
    /**
     * 按照方向，滚动到指定位置
     * @param dist_scroll 目标滚动
     * @param direction 方向
     */
    /**
         * 按照方向，滚动到指定位置
         * @param dist_scroll 目标滚动
         * @param direction 方向
         */
    FarrisScrollTabsComponent.prototype._scrollTab = /**
         * 按照方向，滚动到指定位置
         * @param dist_scroll 目标滚动
         * @param direction 方向
         */
    function (move, direction) {
        var dist_scrollleft = this._tabContainerEl.scrollLeft + move;
        var max_scroll_left = this._tabContainerEl.scrollWidth - this._tabContainerEl.offsetWidth;
        // 标签页左侧移动
        if (direction > 0) {
            this._tabContainerEl.scrollLeft = Math.min(dist_scrollleft, max_scroll_left);
        }
        else if (direction < 0) {
            // 标签页右侧移动
            this._tabContainerEl.scrollLeft = Math.max(dist_scrollleft, 0);
        }
        this._reCalculateSides();
        this.cdRef.detectChanges();
    };
    /**
     * 指定当前滑动到可视区域——————————————未测试
     * @param index
     */
    /**
         * 指定当前滑动到可视区域——————————————未测试
         * @param index
         */
    FarrisScrollTabsComponent.prototype.scrollTabIntoView = /**
         * 指定当前滑动到可视区域——————————————未测试
         * @param index
         */
    function (index) {
        if (!this._tabContainerEl || this.hideButtons) {
            return;
        }
        var tabIndex = parseInt(index + '', 10);
        var tabToScroll;
        // first we find the tab element.
        if (tabIndex >= 0) {
            var allTabs = this._tabContainerEl.querySelectorAll('.nav-item');
            if (allTabs.length > tabIndex) {
                tabToScroll = allTabs[tabIndex];
            }
        }
        else {
            // scroll selected tab into view
            var activeTab = this._tabContainerEl.querySelector('li.active');
            if (activeTab) {
                tabToScroll = activeTab;
            }
        }
        if (tabToScroll) {
            var tab_left = parseInt(tabToScroll.getBoundingClientRect().left + '', 10);
            var tabs_left = parseInt(this._tabContainerEl.getBoundingClientRect().left + '', 10);
            var rightPosition = tab_left +
                parseInt(tabToScroll.getBoundingClientRect().width + '', 10) -
                tabs_left;
            var leftPosition = tab_left - tabs_left - 10;
            if (leftPosition < 0) {
                this._scrollTab(leftPosition, -1);
            }
            else if (rightPosition > this._tabContainerEl.offsetWidth) {
                this._scrollTab(rightPosition - this._tabContainerEl.offsetWidth + 20, 1);
            }
        }
    };
    /**
     * 重新计算是否显示按钮和下拉
     */
    /**
         * 重新计算是否显示按钮和下拉
         */
    FarrisScrollTabsComponent.prototype._reCalculateAll = /**
         * 重新计算是否显示按钮和下拉
         */
    function () {
        if (!this._tabContainerEl) {
            return;
        }
        this.hideButtons =
            this._tabContainerEl.scrollWidth <= this._tabContainerEl.offsetWidth;
        this.hideDropDown = this.showDropDown ? this.hideButtons : true;
        if (!this.hideButtons) {
            if (!this.hideDropDown) {
                this.dropdownTabs = [].concat(this.tabs);
            }
            this._reCalculateSides();
        }
        this.cdRef.detectChanges();
    };
    /**
     * 重新计算左右的提示文字
     */
    /**
         * 重新计算左右的提示文字
         */
    FarrisScrollTabsComponent.prototype._reCalulateTooltips = /**
         * 重新计算左右的提示文字
         */
    function () {
        if (!this._tabContainerEl || this.hideButtons) {
            return;
        }
        var t_right_tooltips = [];
        var t_left_tooltips = [];
        var allTabs = this._tabContainerEl.querySelectorAll('.nav-item');
        var len = allTabs.length;
        for (var i = 0; i < len; i++) {
            var leftPosition = allTabs[i].getBoundingClientRect().left -
                this._tabContainerEl.getBoundingClientRect().left;
            var rightPosition = allTabs[i].getBoundingClientRect().width + leftPosition;
            if (rightPosition > this._tabContainerEl.offsetWidth) {
                t_right_tooltips.push(this.tabs[i]);
            }
            else if (leftPosition < 0) {
                t_left_tooltips.push(this.tabs[i]);
            }
        }
        this.leftTooltipTabs = []
            .concat(t_left_tooltips)
            .slice(Math.max(0, t_left_tooltips.length - this.maxTooltipLen));
        this.rightTooltipTabs = []
            .concat(t_right_tooltips)
            .slice(0, Math.min(this.maxTooltipLen, t_right_tooltips.length));
        this.disableRTooltip = this.rightTooltipTabs.length < 1;
        this.disableLTooltip = this.leftTooltipTabs.length < 1;
    };
    /**
     * 重新计算左右箭头状态
     */
    /**
         * 重新计算左右箭头状态
         */
    FarrisScrollTabsComponent.prototype._reCalculateSides = /**
         * 重新计算左右箭头状态
         */
    function () {
        this.disableRight =
            this._tabContainerEl.scrollLeft >=
                this._tabContainerEl.scrollWidth - this._tabContainerEl.offsetWidth;
        this.disableLeft = this._tabContainerEl.scrollLeft <= 0;
        this._reCalulateTooltips();
    };
    /**
     * 通过id寻找Tab
     * @param id
     */
    /**
         * 通过id寻找Tab
         * @param id
         */
    FarrisScrollTabsComponent.prototype._getTabById = /**
         * 通过id寻找Tab
         * @param id
         */
    function (id) {
        var indexWidthId = [];
        var tabsWithId = this.tabs.filter(function (tab, index) {
            if (tab.id === id) {
                indexWidthId.push(index);
                return true;
            }
            else {
                return false;
            }
        });
        return {
            tab: tabsWithId.length ? tabsWithId[0] : null,
            index: indexWidthId.length ? indexWidthId[0] : -1
        };
    };
    /*宽高类型是 string或者number 解析宽高  尺寸 */
    /*宽高类型是 string或者number 解析宽高  尺寸 */
    FarrisScrollTabsComponent.prototype.resolveSize = /*宽高类型是 string或者number 解析宽高  尺寸 */
    function (size) {
        var regex = /px|em|rem|pt|%/;
        // 说明是字符串
        return regex.test(size) ? "" + parseInt(size, 10) + size.match(regex)[0] : size + "px";
    };
    FarrisScrollTabsComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'farris-tabs',
                    template: "<div flex [fill]=\"tabsFill\" [direction]=\"tabsDirection\" [height]=\"height\" [width]=\"width\"> <div class=\"scroll-tabs\"> <button type=\"button\" (disabled)=\"disableLeft\" class=\"btn sc-nav-btn px-1 sc-nav-lr\" [ngClass]=\"{'d-none':hideButtons}\" #leftNav [ngbTooltip]=\"tooltipLeftTmp\" [placement]=\"'right'\" [disableTooltip]=\"disableLTooltip\"> </button> <div class=\"spacer\" #tabParent [ngClass]=\"{'spacer-sides':!hideButtons&& hideDropDown,'spacer-sides-dropdown':!hideButtons&&!hideDropDown}\"> <ul [class]=\"'nav nav-tabs flex-nowrap'\" #tabContainer [style.height]=\"headerHeight\"> <li class=\"nav-item\" *ngFor=\"let tab of tabs;index as tabIndex\" [ngStyle]=\"{'max-width':maxTabW>0?maxTabW+'px':'none'}\"> <a class=\"nav-link text-truncate\" #anchor [class.active]=\"tab.id === activeId\" [class.disabled]=\"tab.disabled\" (click)=\"_cpSelectTabByIndex($event,tabIndex)\"> <span class=\"float-right st-drop-close\" *ngIf=\"tab.removeable\"> <i class=\"material-icons align-middle\">close</i> </span> <span class=\"st-tab-text\" [tabTransclude]=\"tab.headingRef\" *ngIf=\"tab.headingRef\"></span> <span class=\"st-tab-text\" *ngIf=\"!tab.headingRef\"> {{tab.title}} </span> </a> <kendo-popup [popupClass]=\"'tab.title'\" [anchor]=\"anchor\" *ngIf=\"tab.popupFlag\"> <!-- User-defined content --> {{tab.title}} </kendo-popup> </li> <!-- 设置添加标签 --> <!-- <li> <button kendoButton [icon]=\"'plus'\"></button> </li> --> </ul> </div> <div class=\"btn-group sc-nav-btn\" ngbDropdown> <button type=\"button\" (disabled)=\"disableRight\" class=\"btn px-1 sc-nav-rg\" [ngClass]=\"{'d-none':hideButtons}\" #rightNav [ngbTooltip]=\"tooltipRightTmp\" [placement]=\"'left'\" [disableTooltip]=\"disableRTooltip\"></button> <button class=\"btn dropdown-toggle-split px-1 \" ngbDropdownToggle [ngClass]=\"{'d-none':hideDropDown}\"> </button> <ul class=\"dropdown-menu\" ngbDropdownMenu [ngStyle]=\"{'width':maxDropdownW>0?maxDropdownW+'px':'auto','max-height':maxDropdownH>0?maxDropdownH+'px':'none','overflow':'auto'}\"> <li class=\"dropdown-item text-truncate px-2\" *ngFor=\"let tab of dropdownTabs;index as tabIndex\" [ngClass]=\"{'disabled': tab.disabled, 'active': tab.id === activeId}\" (click)=\"_cpSelectTabByIndex($event,tabIndex)\"> <span class=\"float-right st-drop-close\"> <i class=\"material-icons align-middle\">close</i> </span> <a>{{tab.title}}</a> </li> </ul> </div> </div> <ng-template #tooltipLeftTmp> <ul class=\"scroll-tab-tooltips\" *ngIf=\"leftTooltipTabs.length\"> <li *ngFor=\"let tab of leftTooltipTabs\" class=\"text-truncate\">{{tab.title}}</li> </ul> </ng-template> <ng-template #tooltipRightTmp> <ul class=\"scroll-tab-tooltips\" *ngIf=\"rightTooltipTabs.length\"> <li *ngFor=\"let tab of rightTooltipTabs\" class=\"text-truncate\">{{tab.title}}</li> </ul> </ng-template> <div class=\"tab-body\"> <ng-content> </ng-content> </div> </div>",
                    styles: [":host{ } .scroll-tabs { position: relative; } /*左右按钮不存在*/ .scroll-tabs>.spacer { margin: 0; } /*存在左右按钮，不存在下拉*/ .scroll-tabs>.spacer.spacer-sides { margin: 0 25px; } /*存在左右按钮,存在下拉*/ .scroll-tabs>.spacer.spacer-sides-dropdown { margin: 0 50px 0 25px; } .scroll-tabs>.spacer .nav-tabs { overflow: hidden; } .scroll-tabs .sc-nav-btn { position: absolute; z-index: 10; } .scroll-tabs>.nav-button:hover { background-color: #eee; } .scroll-tabs .sc-nav-lr { left: 0; width: 25px; } .scroll-tabs .sc-nav-rg, .scroll-tabs .dropdown-toggle-split { width: 25px; } .scroll-tabs .sc-nav-lr::after { display: inline-block; width: 0; height: 0; margin-right: 0.255em; content: ''; border-right: 0.4em solid; border-top: 0.4em solid transparent; border-left: 0; border-bottom: 0.4em solid transparent; } .scroll-tabs .sc-nav-rg::after { display: inline-block; width: 0; height: 0; content: ''; border-left: 0.4em solid; border-top: 0.4em solid transparent; border-right: 0; border-bottom: 0.4em solid transparent; } .scroll-tabs>.dropdown { position: absolute; top: 0; right: 0; } .scroll-tab-tooltips { padding: 0; margin: 0; width: 120px; text-align: left; } .scroll-tab-tooltips li { list-style: none; padding: 0; margin: 0; } .st-drop-close { width: 16px; height: 16px; text-align: center; cursor: pointer; position: relative; opacity: 0; } .active .st-drop-close:hover { opacity: 1; } .active .st-drop-close { opacity: 0.6; } .st-drop-close .material-icons { font-size: 16px; margin-top: -5px; } .disabled.nav-link { pointer-events: none; } .tab-body .panel { display: none; } .tab-body .active { display: block; } "],
                    changeDetection: core_1.ChangeDetectionStrategy.OnPush,
                    encapsulation: core_1.ViewEncapsulation.None
                },] },
    ];
    /** @nocollapse */
    FarrisScrollTabsComponent.ctorParameters = function () { return [
        { type: scroll_tabs_config_1.ScrollTabService, },
        { type: core_1.ElementRef, },
        { type: core_1.Renderer2, },
        { type: core_1.ChangeDetectorRef, },
    ]; };
    FarrisScrollTabsComponent.propDecorators = {
        "showDropDown": [{ type: core_1.Input },],
        "showTooltips": [{ type: core_1.Input },],
        "scrollStep": [{ type: core_1.Input },],
        "autoResize": [{ type: core_1.Input },],
        "closeable": [{ type: core_1.Input },],
        "selectId": [{ type: core_1.Input, args: ['value',] },],
        "width": [{ type: core_1.Input },],
        "height": [{ type: core_1.Input },],
        "headerHeight": [{ type: core_1.Input, args: ['header-height',] },],
        "tabsDirection": [{ type: core_1.Input, args: ['tabs-direction',] },],
        "tabsFill": [{ type: core_1.Input, args: ['tabs-fill',] },],
        "contentDirection": [{ type: core_1.Input, args: ['content-direction',] },],
        "contentFill": [{ type: core_1.Input, args: ['content-fill',] },],
        "tabs": [{ type: core_1.Input },],
        "customClass": [{ type: core_1.Input },],
        "leftNav": [{ type: core_1.ViewChild, args: ['leftNav',] },],
        "rightNav": [{ type: core_1.ViewChild, args: ['rightNav',] },],
        "tabContainer": [{ type: core_1.ViewChild, args: ['tabContainer',] },],
        "tabParent": [{ type: core_1.ViewChild, args: ['tabParent',] },],
        "tabChange": [{ type: core_1.Output },],
        "tabRemove": [{ type: core_1.Output },],
    };
    return FarrisScrollTabsComponent;
}());
exports.FarrisScrollTabsComponent = FarrisScrollTabsComponent;
//# sourceMappingURL=scroll-tabs.component.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/scroll-tab/tab/tab.component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var scroll_tabs_component_1 = __webpack_require__("./node_modules/@farris/ui/scroll-tab/scroll-tabs/scroll-tabs.component.js");
var FarrisTabComponent = /** @class */ (function () {
    function FarrisTabComponent(cp, componentFactoryResolver, render, el, cef, scrollTabs) {
        this.cp = cp;
        this.componentFactoryResolver = componentFactoryResolver;
        this.render = render;
        this.el = el;
        this.cef = cef;
        this.scrollTabs = scrollTabs;
        // tabs也可能作为某个flex容器的项目  因此要设置flex属性
        // tslint:disable-next-line:no-inferrable-types
        this.show = true;
        // selected 是否选中
        // tslint:disable-next-line:no-inferrable-types
        this.selected = false;
        this.active = false;
    }
    /**
     * 内容是否激活
     */
    /**
         * 内容是否激活
         */
    FarrisTabComponent.prototype.ngOnInit = /**
         * 内容是否激活
         */
    function () {
        this.scrollTabs.tabs.push(this);
        // if (this.asyncComponent) {
        //     //     // 执行异步加载
        //     this.asyncModule = this.cp.compileModuleSync(AppDivModule);
        //     this.asyncComponent = AppDivComponent;
        // }
    };
    FarrisTabComponent.prototype.ngAfterViewInit = function () {
    };
    FarrisTabComponent.prototype.loadComponent = function () {
    };
    FarrisTabComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'farris-tab',
                    template: "<!-- 异步获取组件 --> <ng-container *ngIf=\"active&&!asyncComponent\"> <ng-template [ngTemplateOutlet]=\"contentTempl\"></ng-template> </ng-container> <ng-container *ngIf=\"active&&asyncComponent\"> <ng-container *ngComponentOutlet=\"asyncComponent;ngModuleFactory:asyncModule\"> </ng-container> </ng-container>",
                    styles: [":host { display: flex; flex-direction: row; flex: 1; }"]
                },] },
    ];
    /** @nocollapse */
    FarrisTabComponent.ctorParameters = function () { return [
        { type: core_1.Compiler, },
        { type: core_1.ComponentFactoryResolver, },
        { type: core_1.Renderer2, },
        { type: core_1.ElementRef, },
        { type: core_1.ChangeDetectorRef, },
        { type: scroll_tabs_component_1.FarrisScrollTabsComponent, decorators: [{ type: core_1.Optional },] },
    ]; };
    FarrisTabComponent.propDecorators = {
        "show": [{ type: core_1.Input },],
        "asyncComponent": [{ type: core_1.Input },],
        "asyncModule": [{ type: core_1.Input },],
        "id": [{ type: core_1.Input },],
        "title": [{ type: core_1.Input },],
        "disabled": [{ type: core_1.Input },],
        "removeable": [{ type: core_1.Input },],
        "contentTempl": [{ type: core_1.ContentChild, args: ['content',] },],
    };
    return FarrisTabComponent;
}());
exports.FarrisTabComponent = FarrisTabComponent;
//# sourceMappingURL=tab.component.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/scroll-tab/tab/tab.headtemplate.directive.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var tab_component_1 = __webpack_require__("./node_modules/@farris/ui/scroll-tab/tab/tab.component.js");
var TabHeadDirective = /** @class */ (function () {
    function TabHeadDirective(tabItem, el, template) {
        tabItem.headingRef = template;
    }
    TabHeadDirective.decorators = [
        { type: core_1.Directive, args: [{
                    selector: '[tabHead]'
                },] },
    ];
    /** @nocollapse */
    TabHeadDirective.ctorParameters = function () { return [
        { type: tab_component_1.FarrisTabComponent, },
        { type: core_1.ElementRef, },
        { type: core_1.TemplateRef, },
    ]; };
    return TabHeadDirective;
}());
exports.TabHeadDirective = TabHeadDirective;
//# sourceMappingURL=tab.headtemplate.directive.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/scroll-tab/tab/tab.transclude.directive.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var TabTranscludeDirective = /** @class */ (function () {
    function TabTranscludeDirective(viewRef) {
        this.viewRef = viewRef;
    }
    Object.defineProperty(TabTranscludeDirective.prototype, "trancludeTempl", {
        get: function () {
            return this._trancludeTempl;
        },
        set: function (templateRef) {
            this._trancludeTempl = templateRef;
            if (templateRef) {
                this.viewRef.createEmbeddedView(templateRef);
            }
        },
        enumerable: true,
        configurable: true
    });
    TabTranscludeDirective.decorators = [
        { type: core_1.Directive, args: [{
                    selector: '[tabTransclude]'
                },] },
    ];
    /** @nocollapse */
    TabTranscludeDirective.ctorParameters = function () { return [
        { type: core_1.ViewContainerRef, },
    ]; };
    TabTranscludeDirective.propDecorators = {
        "trancludeTempl": [{ type: core_1.Input, args: ['tabTransclude',] },],
    };
    return TabTranscludeDirective;
}());
exports.TabTranscludeDirective = TabTranscludeDirective;
//# sourceMappingURL=tab.transclude.directive.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/scroll-tab/tab/tabhost.directive.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var TabHostDirective = /** @class */ (function () {
    function TabHostDirective(viewContainerRef) {
        this.viewContainerRef = viewContainerRef;
    }
    TabHostDirective.decorators = [
        { type: core_1.Directive, args: [{
                    selector: '[tabHost]'
                },] },
    ];
    /** @nocollapse */
    TabHostDirective.ctorParameters = function () { return [
        { type: core_1.ViewContainerRef, },
    ]; };
    return TabHostDirective;
}());
exports.TabHostDirective = TabHostDirective;
//# sourceMappingURL=tabhost.directive.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/scroll-tab/tooltip/tooltip-config.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
/**
 * Configuration service for the NgbTooltip directive.
 * You can inject this service, typically in your root component, and customize the values of its properties in
 * order to provide default values for all the tooltips used in the application.
 */
var NgbTooltipConfig = /** @class */ (function () {
    function NgbTooltipConfig() {
        this.placement = 'top';
        this.triggers = 'hover';
        this.disableTooltip = false;
    }
    NgbTooltipConfig.decorators = [
        { type: core_1.Injectable },
    ];
    return NgbTooltipConfig;
}());
exports.NgbTooltipConfig = NgbTooltipConfig;
//# sourceMappingURL=tooltip-config.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/scroll-tab/tooltip/tooltip.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var triggers_1 = __webpack_require__("./node_modules/@farris/ui/scroll-tab/util/triggers.js");
var positioning_1 = __webpack_require__("./node_modules/@farris/ui/scroll-tab/util/positioning.js");
var popup_1 = __webpack_require__("./node_modules/@farris/ui/scroll-tab/util/popup.js");
var tooltip_config_1 = __webpack_require__("./node_modules/@farris/ui/scroll-tab/tooltip/tooltip-config.js");
var nextId = 0;
var NgbTooltipWindow = /** @class */ (function () {
    function NgbTooltipWindow(_element, _renderer) {
        this._element = _element;
        this._renderer = _renderer;
        this.placement = 'top';
    }
    NgbTooltipWindow.prototype.applyPlacement = function (_placement) {
        // remove the current placement classes
        this._renderer.removeClass(this._element.nativeElement, 'bs-tooltip-' + this.placement.toString().split('-')[0]);
        this._renderer.removeClass(this._element.nativeElement, 'bs-tooltip-' + this.placement.toString());
        // set the new placement classes
        this.placement = _placement;
        // apply the new placement
        this._renderer.addClass(this._element.nativeElement, 'bs-tooltip-' + this.placement.toString().split('-')[0]);
        this._renderer.addClass(this._element.nativeElement, 'bs-tooltip-' + this.placement.toString());
    };
    NgbTooltipWindow.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'ngb-tooltip-window',
                    changeDetection: core_1.ChangeDetectionStrategy.OnPush,
                    host: {
                        '[class]': '"tooltip show bs-tooltip-" + placement.split("-")[0]+" bs-tooltip-" + placement',
                        'role': 'tooltip',
                        '[id]': 'id'
                    },
                    template: "<div class=\"arrow\"></div><div class=\"tooltip-inner\"><ng-content></ng-content></div>",
                    styles: ["\n    :host.bs-tooltip-top .arrow, :host.bs-tooltip-bottom .arrow {\n      left: calc(50% - 0.4rem);\n    }\n\n    :host.bs-tooltip-top-left .arrow, :host.bs-tooltip-bottom-left .arrow {\n      left: 1em;\n    }\n\n    :host.bs-tooltip-top-right .arrow, :host.bs-tooltip-bottom-right .arrow {\n      left: auto;\n      right: 0.8rem;\n    }\n\n    :host.bs-tooltip-left .arrow, :host.bs-tooltip-right .arrow {\n      top: calc(50% - 0.4rem);\n    }\n\n    :host.bs-tooltip-left-top .arrow, :host.bs-tooltip-right-top .arrow {\n      top: 0.4rem;\n    }\n\n    :host.bs-tooltip-left-bottom .arrow, :host.bs-tooltip-right-bottom .arrow {\n      top: auto;\n      bottom: 0.4rem;\n    }\n  "]
                },] },
    ];
    /** @nocollapse */
    NgbTooltipWindow.ctorParameters = function () { return [
        { type: core_1.ElementRef, },
        { type: core_1.Renderer2, },
    ]; };
    NgbTooltipWindow.propDecorators = {
        "placement": [{ type: core_1.Input },],
        "id": [{ type: core_1.Input },],
    };
    return NgbTooltipWindow;
}());
exports.NgbTooltipWindow = NgbTooltipWindow;
/**
 * A lightweight, extensible directive for fancy tooltip creation.
 */
var NgbTooltip = /** @class */ (function () {
    function NgbTooltip(_elementRef, _renderer, injector, componentFactoryResolver, viewContainerRef, config, ngZone) {
        var _this = this;
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        /**
           * Emits an event when the tooltip is shown
           */
        this.shown = new core_1.EventEmitter();
        /**
           * Emits an event when the tooltip is hidden
           */
        this.hidden = new core_1.EventEmitter();
        this._ngbTooltipWindowId = "ngb-tooltip-" + nextId++;
        this.placement = config.placement;
        this.triggers = config.triggers;
        this.container = config.container;
        this.disableTooltip = config.disableTooltip;
        this._popupService = new popup_1.PopupService(NgbTooltipWindow, injector, viewContainerRef, _renderer, componentFactoryResolver);
        this._zoneSubscription = ngZone.onStable.subscribe(function () {
            if (_this._windowRef) {
                _this._windowRef.instance.applyPlacement(positioning_1.positionElements(_this._elementRef.nativeElement, _this._windowRef.location.nativeElement, _this.placement, _this.container === 'body'));
            }
        });
    }
    Object.defineProperty(NgbTooltip.prototype, "ngbTooltip", {
        get: function () { return this._ngbTooltip; },
        set: /**
           * Content to be displayed as tooltip. If falsy, the tooltip won't open.
           */
        function (value) {
            this._ngbTooltip = value;
            if (!value && this._windowRef) {
                this.close();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Opens an element’s tooltip. This is considered a “manual” triggering of the tooltip.
     * The context is an optional value to be injected into the tooltip template when it is created.
     */
    /**
       * Opens an element’s tooltip. This is considered a “manual” triggering of the tooltip.
       * The context is an optional value to be injected into the tooltip template when it is created.
       */
    NgbTooltip.prototype.open = /**
       * Opens an element’s tooltip. This is considered a “manual” triggering of the tooltip.
       * The context is an optional value to be injected into the tooltip template when it is created.
       */
    function (context) {
        if (!this._windowRef && this._ngbTooltip && !this.disableTooltip) {
            this._windowRef = this._popupService.open(this._ngbTooltip, context);
            this._windowRef.instance.id = this._ngbTooltipWindowId;
            this._renderer.setAttribute(this._elementRef.nativeElement, 'aria-describedby', this._ngbTooltipWindowId);
            if (this.container === 'body') {
                window.document.querySelector(this.container).appendChild(this._windowRef.location.nativeElement);
            }
            this._windowRef.instance.placement = Array.isArray(this.placement) ? this.placement[0] : this.placement;
            // apply styling to set basic css-classes on target element, before going for positioning
            this._windowRef.changeDetectorRef.detectChanges();
            this._windowRef.changeDetectorRef.markForCheck();
            // position tooltip along the element
            this._windowRef.instance.applyPlacement(positioning_1.positionElements(this._elementRef.nativeElement, this._windowRef.location.nativeElement, this.placement, this.container === 'body'));
            this.shown.emit();
        }
    };
    /**
     * Closes an element’s tooltip. This is considered a “manual” triggering of the tooltip.
     */
    /**
       * Closes an element’s tooltip. This is considered a “manual” triggering of the tooltip.
       */
    NgbTooltip.prototype.close = /**
       * Closes an element’s tooltip. This is considered a “manual” triggering of the tooltip.
       */
    function () {
        if (this._windowRef != null) {
            this._renderer.removeAttribute(this._elementRef.nativeElement, 'aria-describedby');
            this._popupService.close();
            this._windowRef = null;
            this.hidden.emit();
        }
    };
    /**
     * Toggles an element’s tooltip. This is considered a “manual” triggering of the tooltip.
     */
    /**
       * Toggles an element’s tooltip. This is considered a “manual” triggering of the tooltip.
       */
    NgbTooltip.prototype.toggle = /**
       * Toggles an element’s tooltip. This is considered a “manual” triggering of the tooltip.
       */
    function () {
        if (this._windowRef) {
            this.close();
        }
        else {
            this.open();
        }
    };
    /**
     * Returns whether or not the tooltip is currently being shown
     */
    /**
       * Returns whether or not the tooltip is currently being shown
       */
    NgbTooltip.prototype.isOpen = /**
       * Returns whether or not the tooltip is currently being shown
       */
    function () { return this._windowRef != null; };
    NgbTooltip.prototype.ngOnInit = function () {
        this._unregisterListenersFn = triggers_1.listenToTriggers(this._renderer, this._elementRef.nativeElement, this.triggers, this.open.bind(this), this.close.bind(this), this.toggle.bind(this));
    };
    NgbTooltip.prototype.ngOnDestroy = function () {
        this.close();
        // This check is needed as it might happen that ngOnDestroy is called before ngOnInit
        // under certain conditions, see: https://github.com/ng-bootstrap/ng-bootstrap/issues/2199
        if (this._unregisterListenersFn) {
            this._unregisterListenersFn();
        }
        this._zoneSubscription.unsubscribe();
    };
    NgbTooltip.decorators = [
        { type: core_1.Directive, args: [{ selector: '[ngbTooltip]', exportAs: 'ngbTooltip' },] },
    ];
    /** @nocollapse */
    NgbTooltip.ctorParameters = function () { return [
        { type: core_1.ElementRef, },
        { type: core_1.Renderer2, },
        { type: core_1.Injector, },
        { type: core_1.ComponentFactoryResolver, },
        { type: core_1.ViewContainerRef, },
        { type: tooltip_config_1.NgbTooltipConfig, },
        { type: core_1.NgZone, },
    ]; };
    NgbTooltip.propDecorators = {
        "placement": [{ type: core_1.Input },],
        "triggers": [{ type: core_1.Input },],
        "container": [{ type: core_1.Input },],
        "disableTooltip": [{ type: core_1.Input },],
        "shown": [{ type: core_1.Output },],
        "hidden": [{ type: core_1.Output },],
        "ngbTooltip": [{ type: core_1.Input },],
    };
    return NgbTooltip;
}());
exports.NgbTooltip = NgbTooltip;
//# sourceMappingURL=tooltip.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/scroll-tab/tooltip/tooltip.module.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var tooltip_1 = __webpack_require__("./node_modules/@farris/ui/scroll-tab/tooltip/tooltip.js");
var tooltip_config_1 = __webpack_require__("./node_modules/@farris/ui/scroll-tab/tooltip/tooltip-config.js");
var tooltip_config_2 = __webpack_require__("./node_modules/@farris/ui/scroll-tab/tooltip/tooltip-config.js");
exports.NgbTooltipConfig = tooltip_config_2.NgbTooltipConfig;
var tooltip_2 = __webpack_require__("./node_modules/@farris/ui/scroll-tab/tooltip/tooltip.js");
exports.NgbTooltip = tooltip_2.NgbTooltip;
var NgbTooltipModule = /** @class */ (function () {
    function NgbTooltipModule() {
    }
    NgbTooltipModule.forRoot = function () {
        return {
            ngModule: NgbTooltipModule,
            providers: [tooltip_config_1.NgbTooltipConfig]
        };
    };
    NgbTooltipModule.decorators = [
        { type: core_1.NgModule, args: [{
                    declarations: [tooltip_1.NgbTooltip, tooltip_1.NgbTooltipWindow],
                    exports: [tooltip_1.NgbTooltip],
                    entryComponents: [tooltip_1.NgbTooltipWindow]
                },] },
    ];
    return NgbTooltipModule;
}());
exports.NgbTooltipModule = NgbTooltipModule;
//# sourceMappingURL=tooltip.module.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/scroll-tab/util/popup.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
var ContentRef = /** @class */ (function () {
    function ContentRef(nodes, viewRef, componentRef) {
        this.nodes = nodes;
        this.viewRef = viewRef;
        this.componentRef = componentRef;
    }
    return ContentRef;
}());
exports.ContentRef = ContentRef;
var PopupService = /** @class */ (function () {
    function PopupService(_type, _injector, _viewContainerRef, _renderer, _componentFactoryResolver) {
        this._type = _type;
        this._injector = _injector;
        this._viewContainerRef = _viewContainerRef;
        this._renderer = _renderer;
        this._componentFactoryResolver = _componentFactoryResolver;
    }
    PopupService.prototype.open = function (content, context) {
        if (!this._windowRef) {
            this._contentRef = this._getContentRef(content, context);
            this._windowRef = this._viewContainerRef.createComponent(this._componentFactoryResolver.resolveComponentFactory(this._type), 0, this._injector, this._contentRef.nodes);
        }
        return this._windowRef;
    };
    PopupService.prototype.close = function () {
        if (this._windowRef) {
            this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._windowRef.hostView));
            this._windowRef = null;
            if (this._contentRef.viewRef) {
                this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._contentRef.viewRef));
                this._contentRef = null;
            }
        }
    };
    PopupService.prototype._getContentRef = function (content, context) {
        if (!content) {
            return new ContentRef([]);
        }
        else if (content instanceof core_1.TemplateRef) {
            var viewRef = this._viewContainerRef.createEmbeddedView(content, context);
            return new ContentRef([viewRef.rootNodes], viewRef);
        }
        else {
            return new ContentRef([[this._renderer.createText("" + content)]]);
        }
    };
    return PopupService;
}());
exports.PopupService = PopupService;
//# sourceMappingURL=popup.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/scroll-tab/util/positioning.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// previous version:
// https://github.com/angular-ui/bootstrap/blob/07c31d0731f7cb068a1932b8e01d2312b796b4ec/src/position/position.js
var 
// previous version:
// https://github.com/angular-ui/bootstrap/blob/07c31d0731f7cb068a1932b8e01d2312b796b4ec/src/position/position.js
Positioning = /** @class */ (function () {
    function Positioning() {
    }
    Positioning.prototype.getAllStyles = function (element) { return window.getComputedStyle(element); };
    Positioning.prototype.getStyle = function (element, prop) { return this.getAllStyles(element)[prop]; };
    Positioning.prototype.isStaticPositioned = function (element) {
        return (this.getStyle(element, 'position') || 'static') === 'static';
    };
    Positioning.prototype.offsetParent = function (element) {
        var offsetParentEl = element.offsetParent || document.documentElement;
        while (offsetParentEl && offsetParentEl !== document.documentElement && this.isStaticPositioned(offsetParentEl)) {
            offsetParentEl = offsetParentEl.offsetParent;
        }
        return offsetParentEl || document.documentElement;
    };
    Positioning.prototype.position = function (element, round) {
        if (round === void 0) { round = true; }
        var elPosition;
        var parentOffset = { width: 0, height: 0, top: 0, bottom: 0, left: 0, right: 0 };
        if (this.getStyle(element, 'position') === 'fixed') {
            elPosition = element.getBoundingClientRect();
        }
        else {
            var offsetParentEl = this.offsetParent(element);
            elPosition = this.offset(element, false);
            if (offsetParentEl !== document.documentElement) {
                parentOffset = this.offset(offsetParentEl, false);
            }
            parentOffset.top += offsetParentEl.clientTop;
            parentOffset.left += offsetParentEl.clientLeft;
        }
        elPosition.top -= parentOffset.top;
        elPosition.bottom -= parentOffset.top;
        elPosition.left -= parentOffset.left;
        elPosition.right -= parentOffset.left;
        if (round) {
            elPosition.top = Math.round(elPosition.top);
            elPosition.bottom = Math.round(elPosition.bottom);
            elPosition.left = Math.round(elPosition.left);
            elPosition.right = Math.round(elPosition.right);
        }
        return elPosition;
    };
    Positioning.prototype.offset = function (element, round) {
        if (round === void 0) { round = true; }
        var elBcr = element.getBoundingClientRect();
        var viewportOffset = {
            top: window.pageYOffset - document.documentElement.clientTop,
            left: window.pageXOffset - document.documentElement.clientLeft
        };
        var elOffset = {
            height: elBcr.height || element.offsetHeight,
            width: elBcr.width || element.offsetWidth,
            top: elBcr.top + viewportOffset.top,
            bottom: elBcr.bottom + viewportOffset.top,
            left: elBcr.left + viewportOffset.left,
            right: elBcr.right + viewportOffset.left
        };
        if (round) {
            elOffset.height = Math.round(elOffset.height);
            elOffset.width = Math.round(elOffset.width);
            elOffset.top = Math.round(elOffset.top);
            elOffset.bottom = Math.round(elOffset.bottom);
            elOffset.left = Math.round(elOffset.left);
            elOffset.right = Math.round(elOffset.right);
        }
        return elOffset;
    };
    Positioning.prototype.positionElements = function (hostElement, targetElement, placement, appendToBody) {
        var hostElPosition = appendToBody ? this.offset(hostElement, false) : this.position(hostElement, false);
        var targetElStyles = this.getAllStyles(targetElement);
        var targetElBCR = targetElement.getBoundingClientRect();
        var placementPrimary = placement.split('-')[0] || 'top';
        var placementSecondary = placement.split('-')[1] || 'center';
        var targetElPosition = {
            'height': targetElBCR.height || targetElement.offsetHeight,
            'width': targetElBCR.width || targetElement.offsetWidth,
            'top': 0,
            'bottom': targetElBCR.height || targetElement.offsetHeight,
            'left': 0,
            'right': targetElBCR.width || targetElement.offsetWidth
        };
        switch (placementPrimary) {
            case 'top':
                targetElPosition.top =
                    hostElPosition.top - (targetElement.offsetHeight + parseFloat(targetElStyles.marginBottom));
                break;
            case 'bottom':
                targetElPosition.top = hostElPosition.top + hostElPosition.height;
                break;
            case 'left':
                targetElPosition.left =
                    hostElPosition.left - (targetElement.offsetWidth + parseFloat(targetElStyles.marginRight));
                break;
            case 'right':
                targetElPosition.left = hostElPosition.left + hostElPosition.width;
                break;
        }
        switch (placementSecondary) {
            case 'top':
                targetElPosition.top = hostElPosition.top;
                break;
            case 'bottom':
                targetElPosition.top = hostElPosition.top + hostElPosition.height - targetElement.offsetHeight;
                break;
            case 'left':
                targetElPosition.left = hostElPosition.left;
                break;
            case 'right':
                targetElPosition.left = hostElPosition.left + hostElPosition.width - targetElement.offsetWidth;
                break;
            case 'center':
                if (placementPrimary === 'top' || placementPrimary === 'bottom') {
                    targetElPosition.left = hostElPosition.left + hostElPosition.width / 2 - targetElement.offsetWidth / 2;
                }
                else {
                    targetElPosition.top = hostElPosition.top + hostElPosition.height / 2 - targetElement.offsetHeight / 2;
                }
                break;
        }
        targetElPosition.top = Math.round(targetElPosition.top);
        targetElPosition.bottom = Math.round(targetElPosition.bottom);
        targetElPosition.left = Math.round(targetElPosition.left);
        targetElPosition.right = Math.round(targetElPosition.right);
        return targetElPosition;
    };
    // get the availble placements of the target element in the viewport dependeing on the host element
    // get the availble placements of the target element in the viewport dependeing on the host element
    Positioning.prototype.getAvailablePlacements = 
    // get the availble placements of the target element in the viewport dependeing on the host element
    function (hostElement, targetElement) {
        var hostElemClientRect = hostElement.getBoundingClientRect();
        var availablePlacements = [];
        var targetElemClientRect = targetElement.getBoundingClientRect();
        var html = document.documentElement;
        var windowHeight = window.innerHeight || html.clientHeight;
        var windowWidth = window.innerWidth || html.clientWidth;
        var hostElemClientRectHorCenter = hostElemClientRect.left + hostElemClientRect.width / 2;
        var hostElemClientRectVerCenter = hostElemClientRect.top + hostElemClientRect.height / 2;
        // left: check if target width can be placed between host left and viewport start and also height of target is
        // inside viewport
        if (targetElemClientRect.width < hostElemClientRect.left) {
            // check for left only
            if (hostElemClientRectVerCenter > targetElemClientRect.height / 2 &&
                windowHeight - hostElemClientRectVerCenter > targetElemClientRect.height / 2) {
                availablePlacements.splice(availablePlacements.length, 1, 'left');
            }
            // check for left-top and left-bottom
            this.setSecondaryPlacementForLeftRight(hostElemClientRect, targetElemClientRect, 'left', availablePlacements);
        }
        // top: target height is less than host top
        if (targetElemClientRect.height < hostElemClientRect.top) {
            if (hostElemClientRectHorCenter > targetElemClientRect.width / 2 &&
                windowWidth - hostElemClientRectHorCenter > targetElemClientRect.width / 2) {
                availablePlacements.splice(availablePlacements.length, 1, 'top');
            }
            this.setSecondaryPlacementForTopBottom(hostElemClientRect, targetElemClientRect, 'top', availablePlacements);
        }
        // right: check if target width can be placed between host right and viewport end and also height of target is
        // inside viewport
        if (windowWidth - hostElemClientRect.right > targetElemClientRect.width) {
            // check for right only
            if (hostElemClientRectVerCenter > targetElemClientRect.height / 2 &&
                windowHeight - hostElemClientRectVerCenter > targetElemClientRect.height / 2) {
                availablePlacements.splice(availablePlacements.length, 1, 'right');
            }
            // check for right-top and right-bottom
            this.setSecondaryPlacementForLeftRight(hostElemClientRect, targetElemClientRect, 'right', availablePlacements);
        }
        // bottom: check if there is enough space between host bottom and viewport end for target height
        if (windowHeight - hostElemClientRect.bottom > targetElemClientRect.height) {
            if (hostElemClientRectHorCenter > targetElemClientRect.width / 2 &&
                windowWidth - hostElemClientRectHorCenter > targetElemClientRect.width / 2) {
                availablePlacements.splice(availablePlacements.length, 1, 'bottom');
            }
            this.setSecondaryPlacementForTopBottom(hostElemClientRect, targetElemClientRect, 'bottom', availablePlacements);
        }
        return availablePlacements;
    };
    /**
     * check if secondary placement for left and right are available i.e. left-top, left-bottom, right-top, right-bottom
     * primaryplacement: left|right
     * availablePlacementArr: array in which available placemets to be set
     */
    /**
       * check if secondary placement for left and right are available i.e. left-top, left-bottom, right-top, right-bottom
       * primaryplacement: left|right
       * availablePlacementArr: array in which available placemets to be set
       */
    Positioning.prototype.setSecondaryPlacementForLeftRight = /**
       * check if secondary placement for left and right are available i.e. left-top, left-bottom, right-top, right-bottom
       * primaryplacement: left|right
       * availablePlacementArr: array in which available placemets to be set
       */
    function (hostElemClientRect, targetElemClientRect, primaryPlacement, availablePlacementArr) {
        var html = document.documentElement;
        // check for left-bottom
        if (targetElemClientRect.height <= hostElemClientRect.bottom) {
            availablePlacementArr.splice(availablePlacementArr.length, 1, primaryPlacement + '-bottom');
        }
        if ((window.innerHeight || html.clientHeight) - hostElemClientRect.top >= targetElemClientRect.height) {
            availablePlacementArr.splice(availablePlacementArr.length, 1, primaryPlacement + '-top');
        }
    };
    /**
     * check if secondary placement for top and bottom are available i.e. top-left, top-right, bottom-left, bottom-right
     * primaryplacement: top|bottom
     * availablePlacementArr: array in which available placemets to be set
     */
    /**
       * check if secondary placement for top and bottom are available i.e. top-left, top-right, bottom-left, bottom-right
       * primaryplacement: top|bottom
       * availablePlacementArr: array in which available placemets to be set
       */
    Positioning.prototype.setSecondaryPlacementForTopBottom = /**
       * check if secondary placement for top and bottom are available i.e. top-left, top-right, bottom-left, bottom-right
       * primaryplacement: top|bottom
       * availablePlacementArr: array in which available placemets to be set
       */
    function (hostElemClientRect, targetElemClientRect, primaryPlacement, availablePlacementArr) {
        var html = document.documentElement;
        // check for left-bottom
        if ((window.innerWidth || html.clientWidth) - hostElemClientRect.left >= targetElemClientRect.width) {
            availablePlacementArr.splice(availablePlacementArr.length, 1, primaryPlacement + '-left');
        }
        if (targetElemClientRect.width <= hostElemClientRect.right) {
            availablePlacementArr.splice(availablePlacementArr.length, 1, primaryPlacement + '-right');
        }
    };
    return Positioning;
}());
exports.Positioning = Positioning;
var positionService = new Positioning();
/*
 * Accept the placement array and applies the appropriate placement dependent on the viewport.
 * Returns the applied placement.
 * In case of auto placement, placements are selected in order
 *   'top', 'bottom', 'left', 'right',
 *   'top-left', 'top-right',
 *   'bottom-left', 'bottom-right',
 *   'left-top', 'left-bottom',
 *   'right-top', 'right-bottom'.
 * */
function positionElements(hostElement, targetElement, placement, appendToBody) {
    var placementVals = Array.isArray(placement) ? placement : [placement];
    // replace auto placement with other placements
    var hasAuto = placementVals.findIndex(function (val) { return val === 'auto'; });
    if (hasAuto >= 0) {
        ['top', 'bottom', 'left', 'right', 'top-left', 'top-right', 'bottom-left', 'bottom-right', 'left-top',
            'left-bottom', 'right-top', 'right-bottom',
        ].forEach(function (obj) {
            if (placementVals.find(function (val) { return val.search('^' + obj) !== -1; }) == null) {
                placementVals.splice(hasAuto++, 1, obj);
            }
        });
    }
    // coordinates where to position
    var topVal = 0, leftVal = 0;
    var appliedPlacement;
    // get available placements
    var availablePlacements = positionService.getAvailablePlacements(hostElement, targetElement);
    var _loop_1 = function (item, index) {
        // check if passed placement is present in the available placement or otherwise apply the last placement in the
        // passed placement list
        if ((availablePlacements.find(function (val) { return val === item; }) != null) || (placementVals.length === index + 1)) {
            appliedPlacement = item;
            var pos = positionService.positionElements(hostElement, targetElement, item, appendToBody);
            topVal = pos.top;
            leftVal = pos.left;
            return "break";
        }
    };
    // iterate over all the passed placements
    for (var _i = 0, _a = toItemIndexes(placementVals); _i < _a.length; _i++) {
        var _b = _a[_i], item = _b.item, index = _b.index;
        var state_1 = _loop_1(item, index);
        if (state_1 === "break")
            break;
    }
    targetElement.style.top = topVal + "px";
    targetElement.style.left = leftVal + "px";
    return appliedPlacement;
}
exports.positionElements = positionElements;
// function to get index and item of an array
function toItemIndexes(a) {
    return a.map(function (item, index) { return ({ item: item, index: index }); });
}
//# sourceMappingURL=positioning.js.map

/***/ }),

/***/ "./node_modules/@farris/ui/scroll-tab/util/triggers.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Trigger = /** @class */ (function () {
    function Trigger(open, close) {
        this.open = open;
        this.close = close;
        if (!close) {
            this.close = open;
        }
    }
    Trigger.prototype.isManual = function () { return this.open === 'manual' || this.close === 'manual'; };
    return Trigger;
}());
exports.Trigger = Trigger;
var DEFAULT_ALIASES = {
    'hover': ['mouseenter', 'mouseleave']
};
function parseTriggers(triggers, aliases) {
    if (aliases === void 0) { aliases = DEFAULT_ALIASES; }
    var trimmedTriggers = (triggers || '').trim();
    if (trimmedTriggers.length === 0) {
        return [];
    }
    var parsedTriggers = trimmedTriggers.split(/\s+/).map(function (trigger) { return trigger.split(':'); }).map(function (triggerPair) {
        var alias = aliases[triggerPair[0]] || triggerPair;
        return new Trigger(alias[0], alias[1]);
    });
    var manualTriggers = parsedTriggers.filter(function (triggerPair) { return triggerPair.isManual(); });
    if (manualTriggers.length > 1) {
        throw 'Triggers parse error: only one manual trigger is allowed';
    }
    if (manualTriggers.length === 1 && parsedTriggers.length > 1) {
        throw 'Triggers parse error: manual trigger can\'t be mixed with other triggers';
    }
    return parsedTriggers;
}
exports.parseTriggers = parseTriggers;
var noopFn = function () { };
var ɵ0 = noopFn;
exports.ɵ0 = ɵ0;
function listenToTriggers(renderer, nativeElement, triggers, openFn, closeFn, toggleFn) {
    var parsedTriggers = parseTriggers(triggers);
    var listeners = [];
    if (parsedTriggers.length === 1 && parsedTriggers[0].isManual()) {
        return noopFn;
    }
    parsedTriggers.forEach(function (trigger) {
        if (trigger.open === trigger.close) {
            listeners.push(renderer.listen(nativeElement, trigger.open, toggleFn));
        }
        else {
            listeners.push(renderer.listen(nativeElement, trigger.open, openFn), renderer.listen(nativeElement, trigger.close, closeFn));
        }
    });
    return function () { listeners.forEach(function (unsubscribeFn) { return unsubscribeFn(); }); };
}
exports.listenToTriggers = listenToTriggers;
//# sourceMappingURL=triggers.js.map

/***/ }),

/***/ "./node_modules/lodash/lodash.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, module) {var __WEBPACK_AMD_DEFINE_RESULT__;/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.17.11';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Error message constants. */
  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [
    ['ary', WRAP_ARY_FLAG],
    ['bind', WRAP_BIND_FLAG],
    ['bindKey', WRAP_BIND_KEY_FLAG],
    ['curry', WRAP_CURRY_FLAG],
    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    ['flip', WRAP_FLIP_FLAG],
    ['partial', WRAP_PARTIAL_FLAG],
    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    ['rearg', WRAP_REARG_FLAG]
  ];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading and trailing whitespace. */
  var reTrim = /^\s+|\s+$/g,
      reTrimStart = /^\s+/,
      reTrimEnd = /\s+$/;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J',  '\u0135': 'j',
    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W',  '\u0175': 'w',
    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      // Use `util.types` for Node.js 10+.
      var types = freeModule && freeModule.require && freeModule.require('util').types;

      if (types) {
        return types;
      }

      // Legacy `process.binding('util')` for Node.js < 10.
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string)
      ? unicodeSize(string)
      : asciiSize(string);
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  var runInContext = (function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    /** Built-in constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
        symIterator = Symbol ? Symbol.iterator : undefined,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

    var defineProperty = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    /** Mocked built-ins. */
    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      if (isSet(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
        });

        return result;
      }

      if (isMap(value)) {
        value.forEach(function(subValue, key) {
          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });

        return result;
      }

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn : getAllKeys)
        : (isFlat ? keysIn : keys);

      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if ((value === undefined && !(key in object)) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        if (isObject(srcValue)) {
          stack || (stack = new Stack);
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key),
          srcValue = safeGet(source, key),
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          }
          else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          }
          else {
            newValue = [];
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      var index = -1;
      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
    function baseSample(collection) {
      return arraySample(values(collection));
    }

    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject(objValue)
              ? objValue
              : (isIndex(path[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);

      var low = 0,
          high = array == null ? 0 : array.length,
          valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    var castRest = baseRest;

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */
    var clearTimeout = ctxClearTimeout || function(id) {
      return root.clearTimeout(id);
    };

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = hasUnicode(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, undefined,
            args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) &&
                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return flatRest(function(iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
        if (precision) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone(value) {
      return isPlainObject(value) ? undefined : value;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(array);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return new Ctor;

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return new Ctor;

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;

      return !!length &&
        (type == 'number' ||
          (type != 'symbol' && reIsUint.test(value))) &&
            (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

      var isCombo =
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Gets the value at `key`, unless `key` is "__proto__".
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function safeGet(object, key) {
      if (key == '__proto__') {
        return;
      }

      return object[key];
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = shortOut(baseSetData);

    /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    var setTimeout = ctxSetTimeout || function(func, wait) {
      return root.setTimeout(func, wait);
    };

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString);

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString(wrapper, reference, bitmask) {
      var source = (reference + '');
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46 /* . */) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax(length + index, 0)
          : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined;
      if (comparator) {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value
        ? strictLastIndexOf(array, value, index)
        : baseFindIndex(array, baseIsNaN, index, true);
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee, 2))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = flatRest(function(array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, getIteratee(iteratee, 2))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = flatRest(function(paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      baseAssignValue(result, key, value);
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = ctxNow || function() {
      return root.Date.now();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            timeWaiting = wait - timeSinceLastCall;

        return maxing
          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
          : timeWaiting;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0: return !predicate.call(this);
          case 1: return !predicate.call(this, args[0]);
          case 2: return !predicate.call(this, args[0], args[1]);
          case 3: return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = castRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(getIteratee()))
        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest(function(func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start == null ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && baseGetTag(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) &&
          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag ||
        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && baseGetTag(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, '');
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return value
        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
        : (value === 0 ? value : 0);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = flatRest(baseAt);

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(object, sources) {
      object = Object(object);

      var index = -1;
      var length = sources.length;
      var guard = length > 2 ? sources[2] : undefined;

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        length = 1;
      }

      while (++index < length) {
        var source = sources[index];
        var props = keysIn(source);
        var propsIndex = -1;
        var propsLength = props.length;

        while (++propsIndex < propsLength) {
          var key = props[propsIndex];
          var value = object[key];

          if (value === undefined ||
              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
            object[key] = source[key];
          }
        }
      }

      return object;
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined, customDefaultsMerge);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function(value, path) {
        return predicate(value, path[0]);
      });
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        length = 1;
        object = undefined;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor(mid), chars) +
        string +
        createPadding(nativeCeil(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null
        ? 0
        : baseClamp(toInteger(position), 0, string.length);

      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);

      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      var sourceURL = '//# sourceURL=' +
        ('sourceURL' in options
          ? options.sourceURL
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrim, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimEnd, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = flatRest(function(object, methodNames) {
      arrayEach(methodNames, function(key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
        : undefined;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee, 2))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = (this.__filtered__ && !index)
          ? new LazyWrapper(this)
          : this.clone();

        if (result.__filtered__) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = (lodashFunc.name + ''),
            names = realNames[key] || (realNames[key] = []);

        names.push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }
    return lodash;
  });

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (true) {
    // Expose Lodash on the global object to prevent errors when Lodash is
    // loaded by a script tag in the presence of an AMD loader.
    // See http://requirejs.org/docs/errors.html#mismatch for more details.
    // Use `_.noConflict` to remove Lodash from the global object.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
      return _;
    }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }
  // Check for `exports` after `define` in case a build optimizer adds it.
  else if (freeModule) {
    // Export for Node.js.
    (freeModule.exports = _)._ = _;
    // Export for CommonJS support.
    freeExports._ = _;
  }
  else {
    // Export to the global object.
    root._ = _;
  }
}.call(this));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__("./node_modules/webpack/buildin/global.js"), __webpack_require__("./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/perfect-scrollbar/dist/perfect-scrollbar.esm.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/*!
 * perfect-scrollbar v1.4.0
 * (c) 2018 Hyunje Jun
 * @license MIT
 */
function get(element) {
  return getComputedStyle(element);
}

function set(element, obj) {
  for (var key in obj) {
    var val = obj[key];
    if (typeof val === 'number') {
      val = val + "px";
    }
    element.style[key] = val;
  }
  return element;
}

function div(className) {
  var div = document.createElement('div');
  div.className = className;
  return div;
}

var elMatches =
  typeof Element !== 'undefined' &&
  (Element.prototype.matches ||
    Element.prototype.webkitMatchesSelector ||
    Element.prototype.mozMatchesSelector ||
    Element.prototype.msMatchesSelector);

function matches(element, query) {
  if (!elMatches) {
    throw new Error('No element matching method supported');
  }

  return elMatches.call(element, query);
}

function remove(element) {
  if (element.remove) {
    element.remove();
  } else {
    if (element.parentNode) {
      element.parentNode.removeChild(element);
    }
  }
}

function queryChildren(element, selector) {
  return Array.prototype.filter.call(element.children, function (child) { return matches(child, selector); }
  );
}

var cls = {
  main: 'ps',
  element: {
    thumb: function (x) { return ("ps__thumb-" + x); },
    rail: function (x) { return ("ps__rail-" + x); },
    consuming: 'ps__child--consume',
  },
  state: {
    focus: 'ps--focus',
    clicking: 'ps--clicking',
    active: function (x) { return ("ps--active-" + x); },
    scrolling: function (x) { return ("ps--scrolling-" + x); },
  },
};

/*
 * Helper methods
 */
var scrollingClassTimeout = { x: null, y: null };

function addScrollingClass(i, x) {
  var classList = i.element.classList;
  var className = cls.state.scrolling(x);

  if (classList.contains(className)) {
    clearTimeout(scrollingClassTimeout[x]);
  } else {
    classList.add(className);
  }
}

function removeScrollingClass(i, x) {
  scrollingClassTimeout[x] = setTimeout(
    function () { return i.isAlive && i.element.classList.remove(cls.state.scrolling(x)); },
    i.settings.scrollingThreshold
  );
}

function setScrollingClassInstantly(i, x) {
  addScrollingClass(i, x);
  removeScrollingClass(i, x);
}

var EventElement = function EventElement(element) {
  this.element = element;
  this.handlers = {};
};

var prototypeAccessors = { isEmpty: { configurable: true } };

EventElement.prototype.bind = function bind (eventName, handler) {
  if (typeof this.handlers[eventName] === 'undefined') {
    this.handlers[eventName] = [];
  }
  this.handlers[eventName].push(handler);
  this.element.addEventListener(eventName, handler, false);
};

EventElement.prototype.unbind = function unbind (eventName, target) {
    var this$1 = this;

  this.handlers[eventName] = this.handlers[eventName].filter(function (handler) {
    if (target && handler !== target) {
      return true;
    }
    this$1.element.removeEventListener(eventName, handler, false);
    return false;
  });
};

EventElement.prototype.unbindAll = function unbindAll () {
    var this$1 = this;

  for (var name in this$1.handlers) {
    this$1.unbind(name);
  }
};

prototypeAccessors.isEmpty.get = function () {
    var this$1 = this;

  return Object.keys(this.handlers).every(
    function (key) { return this$1.handlers[key].length === 0; }
  );
};

Object.defineProperties( EventElement.prototype, prototypeAccessors );

var EventManager = function EventManager() {
  this.eventElements = [];
};

EventManager.prototype.eventElement = function eventElement (element) {
  var ee = this.eventElements.filter(function (ee) { return ee.element === element; })[0];
  if (!ee) {
    ee = new EventElement(element);
    this.eventElements.push(ee);
  }
  return ee;
};

EventManager.prototype.bind = function bind (element, eventName, handler) {
  this.eventElement(element).bind(eventName, handler);
};

EventManager.prototype.unbind = function unbind (element, eventName, handler) {
  var ee = this.eventElement(element);
  ee.unbind(eventName, handler);

  if (ee.isEmpty) {
    // remove
    this.eventElements.splice(this.eventElements.indexOf(ee), 1);
  }
};

EventManager.prototype.unbindAll = function unbindAll () {
  this.eventElements.forEach(function (e) { return e.unbindAll(); });
  this.eventElements = [];
};

EventManager.prototype.once = function once (element, eventName, handler) {
  var ee = this.eventElement(element);
  var onceHandler = function (evt) {
    ee.unbind(eventName, onceHandler);
    handler(evt);
  };
  ee.bind(eventName, onceHandler);
};

function createEvent(name) {
  if (typeof window.CustomEvent === 'function') {
    return new CustomEvent(name);
  } else {
    var evt = document.createEvent('CustomEvent');
    evt.initCustomEvent(name, false, false, undefined);
    return evt;
  }
}

var processScrollDiff = function(
  i,
  axis,
  diff,
  useScrollingClass,
  forceFireReachEvent
) {
  if ( useScrollingClass === void 0 ) useScrollingClass = true;
  if ( forceFireReachEvent === void 0 ) forceFireReachEvent = false;

  var fields;
  if (axis === 'top') {
    fields = [
      'contentHeight',
      'containerHeight',
      'scrollTop',
      'y',
      'up',
      'down' ];
  } else if (axis === 'left') {
    fields = [
      'contentWidth',
      'containerWidth',
      'scrollLeft',
      'x',
      'left',
      'right' ];
  } else {
    throw new Error('A proper axis should be provided');
  }

  processScrollDiff$1(i, diff, fields, useScrollingClass, forceFireReachEvent);
};

function processScrollDiff$1(
  i,
  diff,
  ref,
  useScrollingClass,
  forceFireReachEvent
) {
  var contentHeight = ref[0];
  var containerHeight = ref[1];
  var scrollTop = ref[2];
  var y = ref[3];
  var up = ref[4];
  var down = ref[5];
  if ( useScrollingClass === void 0 ) useScrollingClass = true;
  if ( forceFireReachEvent === void 0 ) forceFireReachEvent = false;

  var element = i.element;

  // reset reach
  i.reach[y] = null;

  // 1 for subpixel rounding
  if (element[scrollTop] < 1) {
    i.reach[y] = 'start';
  }

  // 1 for subpixel rounding
  if (element[scrollTop] > i[contentHeight] - i[containerHeight] - 1) {
    i.reach[y] = 'end';
  }

  if (diff) {
    element.dispatchEvent(createEvent(("ps-scroll-" + y)));

    if (diff < 0) {
      element.dispatchEvent(createEvent(("ps-scroll-" + up)));
    } else if (diff > 0) {
      element.dispatchEvent(createEvent(("ps-scroll-" + down)));
    }

    if (useScrollingClass) {
      setScrollingClassInstantly(i, y);
    }
  }

  if (i.reach[y] && (diff || forceFireReachEvent)) {
    element.dispatchEvent(createEvent(("ps-" + y + "-reach-" + (i.reach[y]))));
  }
}

function toInt(x) {
  return parseInt(x, 10) || 0;
}

function isEditable(el) {
  return (
    matches(el, 'input,[contenteditable]') ||
    matches(el, 'select,[contenteditable]') ||
    matches(el, 'textarea,[contenteditable]') ||
    matches(el, 'button,[contenteditable]')
  );
}

function outerWidth(element) {
  var styles = get(element);
  return (
    toInt(styles.width) +
    toInt(styles.paddingLeft) +
    toInt(styles.paddingRight) +
    toInt(styles.borderLeftWidth) +
    toInt(styles.borderRightWidth)
  );
}

var env = {
  isWebKit:
    typeof document !== 'undefined' &&
    'WebkitAppearance' in document.documentElement.style,
  supportsTouch:
    typeof window !== 'undefined' &&
    ('ontouchstart' in window ||
      (window.DocumentTouch && document instanceof window.DocumentTouch)),
  supportsIePointer:
    typeof navigator !== 'undefined' && navigator.msMaxTouchPoints,
  isChrome:
    typeof navigator !== 'undefined' &&
    /Chrome/i.test(navigator && navigator.userAgent),
};

var updateGeometry = function(i) {
  var element = i.element;
  var roundedScrollTop = Math.floor(element.scrollTop);

  i.containerWidth = element.clientWidth;
  i.containerHeight = element.clientHeight;
  i.contentWidth = element.scrollWidth;
  i.contentHeight = element.scrollHeight;

  if (!element.contains(i.scrollbarXRail)) {
    // clean up and append
    queryChildren(element, cls.element.rail('x')).forEach(function (el) { return remove(el); }
    );
    element.appendChild(i.scrollbarXRail);
  }
  if (!element.contains(i.scrollbarYRail)) {
    // clean up and append
    queryChildren(element, cls.element.rail('y')).forEach(function (el) { return remove(el); }
    );
    element.appendChild(i.scrollbarYRail);
  }

  if (
    !i.settings.suppressScrollX &&
    i.containerWidth + i.settings.scrollXMarginOffset < i.contentWidth
  ) {
    i.scrollbarXActive = true;
    i.railXWidth = i.containerWidth - i.railXMarginWidth;
    i.railXRatio = i.containerWidth / i.railXWidth;
    i.scrollbarXWidth = getThumbSize(
      i,
      toInt(i.railXWidth * i.containerWidth / i.contentWidth)
    );
    i.scrollbarXLeft = toInt(
      (i.negativeScrollAdjustment + element.scrollLeft) *
        (i.railXWidth - i.scrollbarXWidth) /
        (i.contentWidth - i.containerWidth)
    );
  } else {
    i.scrollbarXActive = false;
  }

  if (
    !i.settings.suppressScrollY &&
    i.containerHeight + i.settings.scrollYMarginOffset < i.contentHeight
  ) {
    i.scrollbarYActive = true;
    i.railYHeight = i.containerHeight - i.railYMarginHeight;
    i.railYRatio = i.containerHeight / i.railYHeight;
    i.scrollbarYHeight = getThumbSize(
      i,
      toInt(i.railYHeight * i.containerHeight / i.contentHeight)
    );
    i.scrollbarYTop = toInt(
      roundedScrollTop *
        (i.railYHeight - i.scrollbarYHeight) /
        (i.contentHeight - i.containerHeight)
    );
  } else {
    i.scrollbarYActive = false;
  }

  if (i.scrollbarXLeft >= i.railXWidth - i.scrollbarXWidth) {
    i.scrollbarXLeft = i.railXWidth - i.scrollbarXWidth;
  }
  if (i.scrollbarYTop >= i.railYHeight - i.scrollbarYHeight) {
    i.scrollbarYTop = i.railYHeight - i.scrollbarYHeight;
  }

  updateCss(element, i);

  if (i.scrollbarXActive) {
    element.classList.add(cls.state.active('x'));
  } else {
    element.classList.remove(cls.state.active('x'));
    i.scrollbarXWidth = 0;
    i.scrollbarXLeft = 0;
    element.scrollLeft = 0;
  }
  if (i.scrollbarYActive) {
    element.classList.add(cls.state.active('y'));
  } else {
    element.classList.remove(cls.state.active('y'));
    i.scrollbarYHeight = 0;
    i.scrollbarYTop = 0;
    element.scrollTop = 0;
  }
};

function getThumbSize(i, thumbSize) {
  if (i.settings.minScrollbarLength) {
    thumbSize = Math.max(thumbSize, i.settings.minScrollbarLength);
  }
  if (i.settings.maxScrollbarLength) {
    thumbSize = Math.min(thumbSize, i.settings.maxScrollbarLength);
  }
  return thumbSize;
}

function updateCss(element, i) {
  var xRailOffset = { width: i.railXWidth };
  var roundedScrollTop = Math.floor(element.scrollTop);

  if (i.isRtl) {
    xRailOffset.left =
      i.negativeScrollAdjustment +
      element.scrollLeft +
      i.containerWidth -
      i.contentWidth;
  } else {
    xRailOffset.left = element.scrollLeft;
  }
  if (i.isScrollbarXUsingBottom) {
    xRailOffset.bottom = i.scrollbarXBottom - roundedScrollTop;
  } else {
    xRailOffset.top = i.scrollbarXTop + roundedScrollTop;
  }
  set(i.scrollbarXRail, xRailOffset);

  var yRailOffset = { top: roundedScrollTop, height: i.railYHeight };
  if (i.isScrollbarYUsingRight) {
    if (i.isRtl) {
      yRailOffset.right =
        i.contentWidth -
        (i.negativeScrollAdjustment + element.scrollLeft) -
        i.scrollbarYRight -
        i.scrollbarYOuterWidth;
    } else {
      yRailOffset.right = i.scrollbarYRight - element.scrollLeft;
    }
  } else {
    if (i.isRtl) {
      yRailOffset.left =
        i.negativeScrollAdjustment +
        element.scrollLeft +
        i.containerWidth * 2 -
        i.contentWidth -
        i.scrollbarYLeft -
        i.scrollbarYOuterWidth;
    } else {
      yRailOffset.left = i.scrollbarYLeft + element.scrollLeft;
    }
  }
  set(i.scrollbarYRail, yRailOffset);

  set(i.scrollbarX, {
    left: i.scrollbarXLeft,
    width: i.scrollbarXWidth - i.railBorderXWidth,
  });
  set(i.scrollbarY, {
    top: i.scrollbarYTop,
    height: i.scrollbarYHeight - i.railBorderYWidth,
  });
}

var clickRail = function(i) {
  i.event.bind(i.scrollbarY, 'mousedown', function (e) { return e.stopPropagation(); });
  i.event.bind(i.scrollbarYRail, 'mousedown', function (e) {
    var positionTop =
      e.pageY -
      window.pageYOffset -
      i.scrollbarYRail.getBoundingClientRect().top;
    var direction = positionTop > i.scrollbarYTop ? 1 : -1;

    i.element.scrollTop += direction * i.containerHeight;
    updateGeometry(i);

    e.stopPropagation();
  });

  i.event.bind(i.scrollbarX, 'mousedown', function (e) { return e.stopPropagation(); });
  i.event.bind(i.scrollbarXRail, 'mousedown', function (e) {
    var positionLeft =
      e.pageX -
      window.pageXOffset -
      i.scrollbarXRail.getBoundingClientRect().left;
    var direction = positionLeft > i.scrollbarXLeft ? 1 : -1;

    i.element.scrollLeft += direction * i.containerWidth;
    updateGeometry(i);

    e.stopPropagation();
  });
};

var dragThumb = function(i) {
  bindMouseScrollHandler(i, [
    'containerWidth',
    'contentWidth',
    'pageX',
    'railXWidth',
    'scrollbarX',
    'scrollbarXWidth',
    'scrollLeft',
    'x',
    'scrollbarXRail' ]);
  bindMouseScrollHandler(i, [
    'containerHeight',
    'contentHeight',
    'pageY',
    'railYHeight',
    'scrollbarY',
    'scrollbarYHeight',
    'scrollTop',
    'y',
    'scrollbarYRail' ]);
};

function bindMouseScrollHandler(
  i,
  ref
) {
  var containerHeight = ref[0];
  var contentHeight = ref[1];
  var pageY = ref[2];
  var railYHeight = ref[3];
  var scrollbarY = ref[4];
  var scrollbarYHeight = ref[5];
  var scrollTop = ref[6];
  var y = ref[7];
  var scrollbarYRail = ref[8];

  var element = i.element;

  var startingScrollTop = null;
  var startingMousePageY = null;
  var scrollBy = null;

  function mouseMoveHandler(e) {
    element[scrollTop] =
      startingScrollTop + scrollBy * (e[pageY] - startingMousePageY);
    addScrollingClass(i, y);
    updateGeometry(i);

    e.stopPropagation();
    e.preventDefault();
  }

  function mouseUpHandler() {
    removeScrollingClass(i, y);
    i[scrollbarYRail].classList.remove(cls.state.clicking);
    i.event.unbind(i.ownerDocument, 'mousemove', mouseMoveHandler);
  }

  i.event.bind(i[scrollbarY], 'mousedown', function (e) {
    startingScrollTop = element[scrollTop];
    startingMousePageY = e[pageY];
    scrollBy =
      (i[contentHeight] - i[containerHeight]) /
      (i[railYHeight] - i[scrollbarYHeight]);

    i.event.bind(i.ownerDocument, 'mousemove', mouseMoveHandler);
    i.event.once(i.ownerDocument, 'mouseup', mouseUpHandler);

    i[scrollbarYRail].classList.add(cls.state.clicking);

    e.stopPropagation();
    e.preventDefault();
  });
}

var keyboard = function(i) {
  var element = i.element;

  var elementHovered = function () { return matches(element, ':hover'); };
  var scrollbarFocused = function () { return matches(i.scrollbarX, ':focus') || matches(i.scrollbarY, ':focus'); };

  function shouldPreventDefault(deltaX, deltaY) {
    var scrollTop = Math.floor(element.scrollTop);
    if (deltaX === 0) {
      if (!i.scrollbarYActive) {
        return false;
      }
      if (
        (scrollTop === 0 && deltaY > 0) ||
        (scrollTop >= i.contentHeight - i.containerHeight && deltaY < 0)
      ) {
        return !i.settings.wheelPropagation;
      }
    }

    var scrollLeft = element.scrollLeft;
    if (deltaY === 0) {
      if (!i.scrollbarXActive) {
        return false;
      }
      if (
        (scrollLeft === 0 && deltaX < 0) ||
        (scrollLeft >= i.contentWidth - i.containerWidth && deltaX > 0)
      ) {
        return !i.settings.wheelPropagation;
      }
    }
    return true;
  }

  i.event.bind(i.ownerDocument, 'keydown', function (e) {
    if (
      (e.isDefaultPrevented && e.isDefaultPrevented()) ||
      e.defaultPrevented
    ) {
      return;
    }

    if (!elementHovered() && !scrollbarFocused()) {
      return;
    }

    var activeElement = document.activeElement
      ? document.activeElement
      : i.ownerDocument.activeElement;
    if (activeElement) {
      if (activeElement.tagName === 'IFRAME') {
        activeElement = activeElement.contentDocument.activeElement;
      } else {
        // go deeper if element is a webcomponent
        while (activeElement.shadowRoot) {
          activeElement = activeElement.shadowRoot.activeElement;
        }
      }
      if (isEditable(activeElement)) {
        return;
      }
    }

    var deltaX = 0;
    var deltaY = 0;

    switch (e.which) {
      case 37: // left
        if (e.metaKey) {
          deltaX = -i.contentWidth;
        } else if (e.altKey) {
          deltaX = -i.containerWidth;
        } else {
          deltaX = -30;
        }
        break;
      case 38: // up
        if (e.metaKey) {
          deltaY = i.contentHeight;
        } else if (e.altKey) {
          deltaY = i.containerHeight;
        } else {
          deltaY = 30;
        }
        break;
      case 39: // right
        if (e.metaKey) {
          deltaX = i.contentWidth;
        } else if (e.altKey) {
          deltaX = i.containerWidth;
        } else {
          deltaX = 30;
        }
        break;
      case 40: // down
        if (e.metaKey) {
          deltaY = -i.contentHeight;
        } else if (e.altKey) {
          deltaY = -i.containerHeight;
        } else {
          deltaY = -30;
        }
        break;
      case 32: // space bar
        if (e.shiftKey) {
          deltaY = i.containerHeight;
        } else {
          deltaY = -i.containerHeight;
        }
        break;
      case 33: // page up
        deltaY = i.containerHeight;
        break;
      case 34: // page down
        deltaY = -i.containerHeight;
        break;
      case 36: // home
        deltaY = i.contentHeight;
        break;
      case 35: // end
        deltaY = -i.contentHeight;
        break;
      default:
        return;
    }

    if (i.settings.suppressScrollX && deltaX !== 0) {
      return;
    }
    if (i.settings.suppressScrollY && deltaY !== 0) {
      return;
    }

    element.scrollTop -= deltaY;
    element.scrollLeft += deltaX;
    updateGeometry(i);

    if (shouldPreventDefault(deltaX, deltaY)) {
      e.preventDefault();
    }
  });
};

var wheel = function(i) {
  var element = i.element;

  function shouldPreventDefault(deltaX, deltaY) {
    var roundedScrollTop = Math.floor(element.scrollTop);
    var isTop = element.scrollTop === 0;
    var isBottom =
      roundedScrollTop + element.offsetHeight === element.scrollHeight;
    var isLeft = element.scrollLeft === 0;
    var isRight =
      element.scrollLeft + element.offsetWidth === element.scrollWidth;

    var hitsBound;

    // pick axis with primary direction
    if (Math.abs(deltaY) > Math.abs(deltaX)) {
      hitsBound = isTop || isBottom;
    } else {
      hitsBound = isLeft || isRight;
    }

    return hitsBound ? !i.settings.wheelPropagation : true;
  }

  function getDeltaFromEvent(e) {
    var deltaX = e.deltaX;
    var deltaY = -1 * e.deltaY;

    if (typeof deltaX === 'undefined' || typeof deltaY === 'undefined') {
      // OS X Safari
      deltaX = -1 * e.wheelDeltaX / 6;
      deltaY = e.wheelDeltaY / 6;
    }

    if (e.deltaMode && e.deltaMode === 1) {
      // Firefox in deltaMode 1: Line scrolling
      deltaX *= 10;
      deltaY *= 10;
    }

    if (deltaX !== deltaX && deltaY !== deltaY /* NaN checks */) {
      // IE in some mouse drivers
      deltaX = 0;
      deltaY = e.wheelDelta;
    }

    if (e.shiftKey) {
      // reverse axis with shift key
      return [-deltaY, -deltaX];
    }
    return [deltaX, deltaY];
  }

  function shouldBeConsumedByChild(target, deltaX, deltaY) {
    // FIXME: this is a workaround for <select> issue in FF and IE #571
    if (!env.isWebKit && element.querySelector('select:focus')) {
      return true;
    }

    if (!element.contains(target)) {
      return false;
    }

    var cursor = target;

    while (cursor && cursor !== element) {
      if (cursor.classList.contains(cls.element.consuming)) {
        return true;
      }

      var style = get(cursor);
      var overflow = [style.overflow, style.overflowX, style.overflowY].join(
        ''
      );

      // if scrollable
      if (overflow.match(/(scroll|auto)/)) {
        var maxScrollTop = cursor.scrollHeight - cursor.clientHeight;
        if (maxScrollTop > 0) {
          if (
            !(cursor.scrollTop === 0 && deltaY > 0) &&
            !(cursor.scrollTop === maxScrollTop && deltaY < 0)
          ) {
            return true;
          }
        }
        var maxScrollLeft = cursor.scrollWidth - cursor.clientWidth;
        if (maxScrollLeft > 0) {
          if (
            !(cursor.scrollLeft === 0 && deltaX < 0) &&
            !(cursor.scrollLeft === maxScrollLeft && deltaX > 0)
          ) {
            return true;
          }
        }
      }

      cursor = cursor.parentNode;
    }

    return false;
  }

  function mousewheelHandler(e) {
    var ref = getDeltaFromEvent(e);
    var deltaX = ref[0];
    var deltaY = ref[1];

    if (shouldBeConsumedByChild(e.target, deltaX, deltaY)) {
      return;
    }

    var shouldPrevent = false;
    if (!i.settings.useBothWheelAxes) {
      // deltaX will only be used for horizontal scrolling and deltaY will
      // only be used for vertical scrolling - this is the default
      element.scrollTop -= deltaY * i.settings.wheelSpeed;
      element.scrollLeft += deltaX * i.settings.wheelSpeed;
    } else if (i.scrollbarYActive && !i.scrollbarXActive) {
      // only vertical scrollbar is active and useBothWheelAxes option is
      // active, so let's scroll vertical bar using both mouse wheel axes
      if (deltaY) {
        element.scrollTop -= deltaY * i.settings.wheelSpeed;
      } else {
        element.scrollTop += deltaX * i.settings.wheelSpeed;
      }
      shouldPrevent = true;
    } else if (i.scrollbarXActive && !i.scrollbarYActive) {
      // useBothWheelAxes and only horizontal bar is active, so use both
      // wheel axes for horizontal bar
      if (deltaX) {
        element.scrollLeft += deltaX * i.settings.wheelSpeed;
      } else {
        element.scrollLeft -= deltaY * i.settings.wheelSpeed;
      }
      shouldPrevent = true;
    }

    updateGeometry(i);

    shouldPrevent = shouldPrevent || shouldPreventDefault(deltaX, deltaY);
    if (shouldPrevent && !e.ctrlKey) {
      e.stopPropagation();
      e.preventDefault();
    }
  }

  if (typeof window.onwheel !== 'undefined') {
    i.event.bind(element, 'wheel', mousewheelHandler);
  } else if (typeof window.onmousewheel !== 'undefined') {
    i.event.bind(element, 'mousewheel', mousewheelHandler);
  }
};

var touch = function(i) {
  if (!env.supportsTouch && !env.supportsIePointer) {
    return;
  }

  var element = i.element;

  function shouldPrevent(deltaX, deltaY) {
    var scrollTop = Math.floor(element.scrollTop);
    var scrollLeft = element.scrollLeft;
    var magnitudeX = Math.abs(deltaX);
    var magnitudeY = Math.abs(deltaY);

    if (magnitudeY > magnitudeX) {
      // user is perhaps trying to swipe up/down the page

      if (
        (deltaY < 0 && scrollTop === i.contentHeight - i.containerHeight) ||
        (deltaY > 0 && scrollTop === 0)
      ) {
        // set prevent for mobile Chrome refresh
        return window.scrollY === 0 && deltaY > 0 && env.isChrome;
      }
    } else if (magnitudeX > magnitudeY) {
      // user is perhaps trying to swipe left/right across the page

      if (
        (deltaX < 0 && scrollLeft === i.contentWidth - i.containerWidth) ||
        (deltaX > 0 && scrollLeft === 0)
      ) {
        return true;
      }
    }

    return true;
  }

  function applyTouchMove(differenceX, differenceY) {
    element.scrollTop -= differenceY;
    element.scrollLeft -= differenceX;

    updateGeometry(i);
  }

  var startOffset = {};
  var startTime = 0;
  var speed = {};
  var easingLoop = null;

  function getTouch(e) {
    if (e.targetTouches) {
      return e.targetTouches[0];
    } else {
      // Maybe IE pointer
      return e;
    }
  }

  function shouldHandle(e) {
    if (e.pointerType && e.pointerType === 'pen' && e.buttons === 0) {
      return false;
    }
    if (e.targetTouches && e.targetTouches.length === 1) {
      return true;
    }
    if (
      e.pointerType &&
      e.pointerType !== 'mouse' &&
      e.pointerType !== e.MSPOINTER_TYPE_MOUSE
    ) {
      return true;
    }
    return false;
  }

  function touchStart(e) {
    if (!shouldHandle(e)) {
      return;
    }

    var touch = getTouch(e);

    startOffset.pageX = touch.pageX;
    startOffset.pageY = touch.pageY;

    startTime = new Date().getTime();

    if (easingLoop !== null) {
      clearInterval(easingLoop);
    }
  }

  function shouldBeConsumedByChild(target, deltaX, deltaY) {
    if (!element.contains(target)) {
      return false;
    }

    var cursor = target;

    while (cursor && cursor !== element) {
      if (cursor.classList.contains(cls.element.consuming)) {
        return true;
      }

      var style = get(cursor);
      var overflow = [style.overflow, style.overflowX, style.overflowY].join(
        ''
      );

      // if scrollable
      if (overflow.match(/(scroll|auto)/)) {
        var maxScrollTop = cursor.scrollHeight - cursor.clientHeight;
        if (maxScrollTop > 0) {
          if (
            !(cursor.scrollTop === 0 && deltaY > 0) &&
            !(cursor.scrollTop === maxScrollTop && deltaY < 0)
          ) {
            return true;
          }
        }
        var maxScrollLeft = cursor.scrollLeft - cursor.clientWidth;
        if (maxScrollLeft > 0) {
          if (
            !(cursor.scrollLeft === 0 && deltaX < 0) &&
            !(cursor.scrollLeft === maxScrollLeft && deltaX > 0)
          ) {
            return true;
          }
        }
      }

      cursor = cursor.parentNode;
    }

    return false;
  }

  function touchMove(e) {
    if (shouldHandle(e)) {
      var touch = getTouch(e);

      var currentOffset = { pageX: touch.pageX, pageY: touch.pageY };

      var differenceX = currentOffset.pageX - startOffset.pageX;
      var differenceY = currentOffset.pageY - startOffset.pageY;

      if (shouldBeConsumedByChild(e.target, differenceX, differenceY)) {
        return;
      }

      applyTouchMove(differenceX, differenceY);
      startOffset = currentOffset;

      var currentTime = new Date().getTime();

      var timeGap = currentTime - startTime;
      if (timeGap > 0) {
        speed.x = differenceX / timeGap;
        speed.y = differenceY / timeGap;
        startTime = currentTime;
      }

      if (shouldPrevent(differenceX, differenceY)) {
        e.preventDefault();
      }
    }
  }
  function touchEnd() {
    if (i.settings.swipeEasing) {
      clearInterval(easingLoop);
      easingLoop = setInterval(function() {
        if (i.isInitialized) {
          clearInterval(easingLoop);
          return;
        }

        if (!speed.x && !speed.y) {
          clearInterval(easingLoop);
          return;
        }

        if (Math.abs(speed.x) < 0.01 && Math.abs(speed.y) < 0.01) {
          clearInterval(easingLoop);
          return;
        }

        applyTouchMove(speed.x * 30, speed.y * 30);

        speed.x *= 0.8;
        speed.y *= 0.8;
      }, 10);
    }
  }

  if (env.supportsTouch) {
    i.event.bind(element, 'touchstart', touchStart);
    i.event.bind(element, 'touchmove', touchMove);
    i.event.bind(element, 'touchend', touchEnd);
  } else if (env.supportsIePointer) {
    if (window.PointerEvent) {
      i.event.bind(element, 'pointerdown', touchStart);
      i.event.bind(element, 'pointermove', touchMove);
      i.event.bind(element, 'pointerup', touchEnd);
    } else if (window.MSPointerEvent) {
      i.event.bind(element, 'MSPointerDown', touchStart);
      i.event.bind(element, 'MSPointerMove', touchMove);
      i.event.bind(element, 'MSPointerUp', touchEnd);
    }
  }
};

var defaultSettings = function () { return ({
  handlers: ['click-rail', 'drag-thumb', 'keyboard', 'wheel', 'touch'],
  maxScrollbarLength: null,
  minScrollbarLength: null,
  scrollingThreshold: 1000,
  scrollXMarginOffset: 0,
  scrollYMarginOffset: 0,
  suppressScrollX: false,
  suppressScrollY: false,
  swipeEasing: true,
  useBothWheelAxes: false,
  wheelPropagation: true,
  wheelSpeed: 1,
}); };

var handlers = {
  'click-rail': clickRail,
  'drag-thumb': dragThumb,
  keyboard: keyboard,
  wheel: wheel,
  touch: touch,
};

var PerfectScrollbar = function PerfectScrollbar(element, userSettings) {
  var this$1 = this;
  if ( userSettings === void 0 ) userSettings = {};

  if (typeof element === 'string') {
    element = document.querySelector(element);
  }

  if (!element || !element.nodeName) {
    throw new Error('no element is specified to initialize PerfectScrollbar');
  }

  this.element = element;

  element.classList.add(cls.main);

  this.settings = defaultSettings();
  for (var key in userSettings) {
    this$1.settings[key] = userSettings[key];
  }

  this.containerWidth = null;
  this.containerHeight = null;
  this.contentWidth = null;
  this.contentHeight = null;

  var focus = function () { return element.classList.add(cls.state.focus); };
  var blur = function () { return element.classList.remove(cls.state.focus); };

  this.isRtl = get(element).direction === 'rtl';
  this.isNegativeScroll = (function () {
    var originalScrollLeft = element.scrollLeft;
    var result = null;
    element.scrollLeft = -1;
    result = element.scrollLeft < 0;
    element.scrollLeft = originalScrollLeft;
    return result;
  })();
  this.negativeScrollAdjustment = this.isNegativeScroll
    ? element.scrollWidth - element.clientWidth
    : 0;
  this.event = new EventManager();
  this.ownerDocument = element.ownerDocument || document;

  this.scrollbarXRail = div(cls.element.rail('x'));
  element.appendChild(this.scrollbarXRail);
  this.scrollbarX = div(cls.element.thumb('x'));
  this.scrollbarXRail.appendChild(this.scrollbarX);
  this.scrollbarX.setAttribute('tabindex', 0);
  this.event.bind(this.scrollbarX, 'focus', focus);
  this.event.bind(this.scrollbarX, 'blur', blur);
  this.scrollbarXActive = null;
  this.scrollbarXWidth = null;
  this.scrollbarXLeft = null;
  var railXStyle = get(this.scrollbarXRail);
  this.scrollbarXBottom = parseInt(railXStyle.bottom, 10);
  if (isNaN(this.scrollbarXBottom)) {
    this.isScrollbarXUsingBottom = false;
    this.scrollbarXTop = toInt(railXStyle.top);
  } else {
    this.isScrollbarXUsingBottom = true;
  }
  this.railBorderXWidth =
    toInt(railXStyle.borderLeftWidth) + toInt(railXStyle.borderRightWidth);
  // Set rail to display:block to calculate margins
  set(this.scrollbarXRail, { display: 'block' });
  this.railXMarginWidth =
    toInt(railXStyle.marginLeft) + toInt(railXStyle.marginRight);
  set(this.scrollbarXRail, { display: '' });
  this.railXWidth = null;
  this.railXRatio = null;

  this.scrollbarYRail = div(cls.element.rail('y'));
  element.appendChild(this.scrollbarYRail);
  this.scrollbarY = div(cls.element.thumb('y'));
  this.scrollbarYRail.appendChild(this.scrollbarY);
  this.scrollbarY.setAttribute('tabindex', 0);
  this.event.bind(this.scrollbarY, 'focus', focus);
  this.event.bind(this.scrollbarY, 'blur', blur);
  this.scrollbarYActive = null;
  this.scrollbarYHeight = null;
  this.scrollbarYTop = null;
  var railYStyle = get(this.scrollbarYRail);
  this.scrollbarYRight = parseInt(railYStyle.right, 10);
  if (isNaN(this.scrollbarYRight)) {
    this.isScrollbarYUsingRight = false;
    this.scrollbarYLeft = toInt(railYStyle.left);
  } else {
    this.isScrollbarYUsingRight = true;
  }
  this.scrollbarYOuterWidth = this.isRtl ? outerWidth(this.scrollbarY) : null;
  this.railBorderYWidth =
    toInt(railYStyle.borderTopWidth) + toInt(railYStyle.borderBottomWidth);
  set(this.scrollbarYRail, { display: 'block' });
  this.railYMarginHeight =
    toInt(railYStyle.marginTop) + toInt(railYStyle.marginBottom);
  set(this.scrollbarYRail, { display: '' });
  this.railYHeight = null;
  this.railYRatio = null;

  this.reach = {
    x:
      element.scrollLeft <= 0
        ? 'start'
        : element.scrollLeft >= this.contentWidth - this.containerWidth
          ? 'end'
          : null,
    y:
      element.scrollTop <= 0
        ? 'start'
        : element.scrollTop >= this.contentHeight - this.containerHeight
          ? 'end'
          : null,
  };

  this.isAlive = true;

  this.settings.handlers.forEach(function (handlerName) { return handlers[handlerName](this$1); });

  this.lastScrollTop = Math.floor(element.scrollTop); // for onScroll only
  this.lastScrollLeft = element.scrollLeft; // for onScroll only
  this.event.bind(this.element, 'scroll', function (e) { return this$1.onScroll(e); });
  updateGeometry(this);
};

PerfectScrollbar.prototype.update = function update () {
  if (!this.isAlive) {
    return;
  }

  // Recalcuate negative scrollLeft adjustment
  this.negativeScrollAdjustment = this.isNegativeScroll
    ? this.element.scrollWidth - this.element.clientWidth
    : 0;

  // Recalculate rail margins
  set(this.scrollbarXRail, { display: 'block' });
  set(this.scrollbarYRail, { display: 'block' });
  this.railXMarginWidth =
    toInt(get(this.scrollbarXRail).marginLeft) +
    toInt(get(this.scrollbarXRail).marginRight);
  this.railYMarginHeight =
    toInt(get(this.scrollbarYRail).marginTop) +
    toInt(get(this.scrollbarYRail).marginBottom);

  // Hide scrollbars not to affect scrollWidth and scrollHeight
  set(this.scrollbarXRail, { display: 'none' });
  set(this.scrollbarYRail, { display: 'none' });

  updateGeometry(this);

  processScrollDiff(this, 'top', 0, false, true);
  processScrollDiff(this, 'left', 0, false, true);

  set(this.scrollbarXRail, { display: '' });
  set(this.scrollbarYRail, { display: '' });
};

PerfectScrollbar.prototype.onScroll = function onScroll (e) {
  if (!this.isAlive) {
    return;
  }

  updateGeometry(this);
  processScrollDiff(this, 'top', this.element.scrollTop - this.lastScrollTop);
  processScrollDiff(
    this,
    'left',
    this.element.scrollLeft - this.lastScrollLeft
  );

  this.lastScrollTop = Math.floor(this.element.scrollTop);
  this.lastScrollLeft = this.element.scrollLeft;
};

PerfectScrollbar.prototype.destroy = function destroy () {
  if (!this.isAlive) {
    return;
  }

  this.event.unbindAll();
  remove(this.scrollbarX);
  remove(this.scrollbarY);
  remove(this.scrollbarXRail);
  remove(this.scrollbarYRail);
  this.removePsClasses();

  // unset elements
  this.element = null;
  this.scrollbarX = null;
  this.scrollbarY = null;
  this.scrollbarXRail = null;
  this.scrollbarYRail = null;

  this.isAlive = false;
};

PerfectScrollbar.prototype.removePsClasses = function removePsClasses () {
  this.element.className = this.element.className
    .split(' ')
    .filter(function (name) { return !name.match(/^ps([-_].+|)$/); })
    .join(' ');
};

/* harmony default export */ __webpack_exports__["default"] = (PerfectScrollbar);


/***/ }),

/***/ "./node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* WEBPACK VAR INJECTION */(function(global) {/**
 * A collection of shims that provide minimal functionality of the ES6 collections.
 *
 * These implementations are not meant to be used outside of the ResizeObserver
 * modules as they cover only a limited range of use cases.
 */
/* eslint-disable require-jsdoc, valid-jsdoc */
var MapShim = (function () {
    if (typeof Map !== 'undefined') {
        return Map;
    }

    /**
     * Returns index in provided array that matches the specified key.
     *
     * @param {Array<Array>} arr
     * @param {*} key
     * @returns {number}
     */
    function getIndex(arr, key) {
        var result = -1;

        arr.some(function (entry, index) {
            if (entry[0] === key) {
                result = index;

                return true;
            }

            return false;
        });

        return result;
    }

    return (function () {
        function anonymous() {
            this.__entries__ = [];
        }

        var prototypeAccessors = { size: { configurable: true } };

        /**
         * @returns {boolean}
         */
        prototypeAccessors.size.get = function () {
            return this.__entries__.length;
        };

        /**
         * @param {*} key
         * @returns {*}
         */
        anonymous.prototype.get = function (key) {
            var index = getIndex(this.__entries__, key);
            var entry = this.__entries__[index];

            return entry && entry[1];
        };

        /**
         * @param {*} key
         * @param {*} value
         * @returns {void}
         */
        anonymous.prototype.set = function (key, value) {
            var index = getIndex(this.__entries__, key);

            if (~index) {
                this.__entries__[index][1] = value;
            } else {
                this.__entries__.push([key, value]);
            }
        };

        /**
         * @param {*} key
         * @returns {void}
         */
        anonymous.prototype.delete = function (key) {
            var entries = this.__entries__;
            var index = getIndex(entries, key);

            if (~index) {
                entries.splice(index, 1);
            }
        };

        /**
         * @param {*} key
         * @returns {void}
         */
        anonymous.prototype.has = function (key) {
            return !!~getIndex(this.__entries__, key);
        };

        /**
         * @returns {void}
         */
        anonymous.prototype.clear = function () {
            this.__entries__.splice(0);
        };

        /**
         * @param {Function} callback
         * @param {*} [ctx=null]
         * @returns {void}
         */
        anonymous.prototype.forEach = function (callback, ctx) {
            var this$1 = this;
            if ( ctx === void 0 ) ctx = null;

            for (var i = 0, list = this$1.__entries__; i < list.length; i += 1) {
                var entry = list[i];

                callback.call(ctx, entry[1], entry[0]);
            }
        };

        Object.defineProperties( anonymous.prototype, prototypeAccessors );

        return anonymous;
    }());
})();

/**
 * Detects whether window and document objects are available in current environment.
 */
var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document;

// Returns global object of a current environment.
var global$1 = (function () {
    if (typeof global !== 'undefined' && global.Math === Math) {
        return global;
    }

    if (typeof self !== 'undefined' && self.Math === Math) {
        return self;
    }

    if (typeof window !== 'undefined' && window.Math === Math) {
        return window;
    }

    // eslint-disable-next-line no-new-func
    return Function('return this')();
})();

/**
 * A shim for the requestAnimationFrame which falls back to the setTimeout if
 * first one is not supported.
 *
 * @returns {number} Requests' identifier.
 */
var requestAnimationFrame$1 = (function () {
    if (typeof requestAnimationFrame === 'function') {
        // It's required to use a bounded function because IE sometimes throws
        // an "Invalid calling object" error if rAF is invoked without the global
        // object on the left hand side.
        return requestAnimationFrame.bind(global$1);
    }

    return function (callback) { return setTimeout(function () { return callback(Date.now()); }, 1000 / 60); };
})();

// Defines minimum timeout before adding a trailing call.
var trailingTimeout = 2;

/**
 * Creates a wrapper function which ensures that provided callback will be
 * invoked only once during the specified delay period.
 *
 * @param {Function} callback - Function to be invoked after the delay period.
 * @param {number} delay - Delay after which to invoke callback.
 * @returns {Function}
 */
var throttle = function (callback, delay) {
    var leadingCall = false,
        trailingCall = false,
        lastCallTime = 0;

    /**
     * Invokes the original callback function and schedules new invocation if
     * the "proxy" was called during current request.
     *
     * @returns {void}
     */
    function resolvePending() {
        if (leadingCall) {
            leadingCall = false;

            callback();
        }

        if (trailingCall) {
            proxy();
        }
    }

    /**
     * Callback invoked after the specified delay. It will further postpone
     * invocation of the original function delegating it to the
     * requestAnimationFrame.
     *
     * @returns {void}
     */
    function timeoutCallback() {
        requestAnimationFrame$1(resolvePending);
    }

    /**
     * Schedules invocation of the original function.
     *
     * @returns {void}
     */
    function proxy() {
        var timeStamp = Date.now();

        if (leadingCall) {
            // Reject immediately following calls.
            if (timeStamp - lastCallTime < trailingTimeout) {
                return;
            }

            // Schedule new call to be in invoked when the pending one is resolved.
            // This is important for "transitions" which never actually start
            // immediately so there is a chance that we might miss one if change
            // happens amids the pending invocation.
            trailingCall = true;
        } else {
            leadingCall = true;
            trailingCall = false;

            setTimeout(timeoutCallback, delay);
        }

        lastCallTime = timeStamp;
    }

    return proxy;
};

// Minimum delay before invoking the update of observers.
var REFRESH_DELAY = 20;

// A list of substrings of CSS properties used to find transition events that
// might affect dimensions of observed elements.
var transitionKeys = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight'];

// Check if MutationObserver is available.
var mutationObserverSupported = typeof MutationObserver !== 'undefined';

/**
 * Singleton controller class which handles updates of ResizeObserver instances.
 */
var ResizeObserverController = function() {
    this.connected_ = false;
    this.mutationEventsAdded_ = false;
    this.mutationsObserver_ = null;
    this.observers_ = [];

    this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);
    this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);
};

/**
 * Adds observer to observers list.
 *
 * @param {ResizeObserverSPI} observer - Observer to be added.
 * @returns {void}
 */


/**
 * Holds reference to the controller's instance.
 *
 * @private {ResizeObserverController}
 */


/**
 * Keeps reference to the instance of MutationObserver.
 *
 * @private {MutationObserver}
 */

/**
 * Indicates whether DOM listeners have been added.
 *
 * @private {boolean}
 */
ResizeObserverController.prototype.addObserver = function (observer) {
    if (!~this.observers_.indexOf(observer)) {
        this.observers_.push(observer);
    }

    // Add listeners if they haven't been added yet.
    if (!this.connected_) {
        this.connect_();
    }
};

/**
 * Removes observer from observers list.
 *
 * @param {ResizeObserverSPI} observer - Observer to be removed.
 * @returns {void}
 */
ResizeObserverController.prototype.removeObserver = function (observer) {
    var observers = this.observers_;
    var index = observers.indexOf(observer);

    // Remove observer if it's present in registry.
    if (~index) {
        observers.splice(index, 1);
    }

    // Remove listeners if controller has no connected observers.
    if (!observers.length && this.connected_) {
        this.disconnect_();
    }
};

/**
 * Invokes the update of observers. It will continue running updates insofar
 * it detects changes.
 *
 * @returns {void}
 */
ResizeObserverController.prototype.refresh = function () {
    var changesDetected = this.updateObservers_();

    // Continue running updates if changes have been detected as there might
    // be future ones caused by CSS transitions.
    if (changesDetected) {
        this.refresh();
    }
};

/**
 * Updates every observer from observers list and notifies them of queued
 * entries.
 *
 * @private
 * @returns {boolean} Returns "true" if any observer has detected changes in
 *  dimensions of it's elements.
 */
ResizeObserverController.prototype.updateObservers_ = function () {
    // Collect observers that have active observations.
    var activeObservers = this.observers_.filter(function (observer) {
        return observer.gatherActive(), observer.hasActive();
    });

    // Deliver notifications in a separate cycle in order to avoid any
    // collisions between observers, e.g. when multiple instances of
    // ResizeObserver are tracking the same element and the callback of one
    // of them changes content dimensions of the observed target. Sometimes
    // this may result in notifications being blocked for the rest of observers.
    activeObservers.forEach(function (observer) { return observer.broadcastActive(); });

    return activeObservers.length > 0;
};

/**
 * Initializes DOM listeners.
 *
 * @private
 * @returns {void}
 */
ResizeObserverController.prototype.connect_ = function () {
    // Do nothing if running in a non-browser environment or if listeners
    // have been already added.
    if (!isBrowser || this.connected_) {
        return;
    }

    // Subscription to the "Transitionend" event is used as a workaround for
    // delayed transitions. This way it's possible to capture at least the
    // final state of an element.
    document.addEventListener('transitionend', this.onTransitionEnd_);

    window.addEventListener('resize', this.refresh);

    if (mutationObserverSupported) {
        this.mutationsObserver_ = new MutationObserver(this.refresh);

        this.mutationsObserver_.observe(document, {
            attributes: true,
            childList: true,
            characterData: true,
            subtree: true
        });
    } else {
        document.addEventListener('DOMSubtreeModified', this.refresh);

        this.mutationEventsAdded_ = true;
    }

    this.connected_ = true;
};

/**
 * Removes DOM listeners.
 *
 * @private
 * @returns {void}
 */
ResizeObserverController.prototype.disconnect_ = function () {
    // Do nothing if running in a non-browser environment or if listeners
    // have been already removed.
    if (!isBrowser || !this.connected_) {
        return;
    }

    document.removeEventListener('transitionend', this.onTransitionEnd_);
    window.removeEventListener('resize', this.refresh);

    if (this.mutationsObserver_) {
        this.mutationsObserver_.disconnect();
    }

    if (this.mutationEventsAdded_) {
        document.removeEventListener('DOMSubtreeModified', this.refresh);
    }

    this.mutationsObserver_ = null;
    this.mutationEventsAdded_ = false;
    this.connected_ = false;
};

/**
 * "Transitionend" event handler.
 *
 * @private
 * @param {TransitionEvent} event
 * @returns {void}
 */
ResizeObserverController.prototype.onTransitionEnd_ = function (ref) {
        var propertyName = ref.propertyName; if ( propertyName === void 0 ) propertyName = '';

    // Detect whether transition may affect dimensions of an element.
    var isReflowProperty = transitionKeys.some(function (key) {
        return !!~propertyName.indexOf(key);
    });

    if (isReflowProperty) {
        this.refresh();
    }
};

/**
 * Returns instance of the ResizeObserverController.
 *
 * @returns {ResizeObserverController}
 */
ResizeObserverController.getInstance = function () {
    if (!this.instance_) {
        this.instance_ = new ResizeObserverController();
    }

    return this.instance_;
};

ResizeObserverController.instance_ = null;

/**
 * Defines non-writable/enumerable properties of the provided target object.
 *
 * @param {Object} target - Object for which to define properties.
 * @param {Object} props - Properties to be defined.
 * @returns {Object} Target object.
 */
var defineConfigurable = (function (target, props) {
    for (var i = 0, list = Object.keys(props); i < list.length; i += 1) {
        var key = list[i];

        Object.defineProperty(target, key, {
            value: props[key],
            enumerable: false,
            writable: false,
            configurable: true
        });
    }

    return target;
});

/**
 * Returns the global object associated with provided element.
 *
 * @param {Object} target
 * @returns {Object}
 */
var getWindowOf = (function (target) {
    // Assume that the element is an instance of Node, which means that it
    // has the "ownerDocument" property from which we can retrieve a
    // corresponding global object.
    var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;

    // Return the local global object if it's not possible extract one from
    // provided element.
    return ownerGlobal || global$1;
});

// Placeholder of an empty content rectangle.
var emptyRect = createRectInit(0, 0, 0, 0);

/**
 * Converts provided string to a number.
 *
 * @param {number|string} value
 * @returns {number}
 */
function toFloat(value) {
    return parseFloat(value) || 0;
}

/**
 * Extracts borders size from provided styles.
 *
 * @param {CSSStyleDeclaration} styles
 * @param {...string} positions - Borders positions (top, right, ...)
 * @returns {number}
 */
function getBordersSize(styles) {
    var positions = [], len = arguments.length - 1;
    while ( len-- > 0 ) positions[ len ] = arguments[ len + 1 ];

    return positions.reduce(function (size, position) {
        var value = styles['border-' + position + '-width'];

        return size + toFloat(value);
    }, 0);
}

/**
 * Extracts paddings sizes from provided styles.
 *
 * @param {CSSStyleDeclaration} styles
 * @returns {Object} Paddings box.
 */
function getPaddings(styles) {
    var positions = ['top', 'right', 'bottom', 'left'];
    var paddings = {};

    for (var i = 0, list = positions; i < list.length; i += 1) {
        var position = list[i];

        var value = styles['padding-' + position];

        paddings[position] = toFloat(value);
    }

    return paddings;
}

/**
 * Calculates content rectangle of provided SVG element.
 *
 * @param {SVGGraphicsElement} target - Element content rectangle of which needs
 *      to be calculated.
 * @returns {DOMRectInit}
 */
function getSVGContentRect(target) {
    var bbox = target.getBBox();

    return createRectInit(0, 0, bbox.width, bbox.height);
}

/**
 * Calculates content rectangle of provided HTMLElement.
 *
 * @param {HTMLElement} target - Element for which to calculate the content rectangle.
 * @returns {DOMRectInit}
 */
function getHTMLElementContentRect(target) {
    // Client width & height properties can't be
    // used exclusively as they provide rounded values.
    var clientWidth = target.clientWidth;
    var clientHeight = target.clientHeight;

    // By this condition we can catch all non-replaced inline, hidden and
    // detached elements. Though elements with width & height properties less
    // than 0.5 will be discarded as well.
    //
    // Without it we would need to implement separate methods for each of
    // those cases and it's not possible to perform a precise and performance
    // effective test for hidden elements. E.g. even jQuery's ':visible' filter
    // gives wrong results for elements with width & height less than 0.5.
    if (!clientWidth && !clientHeight) {
        return emptyRect;
    }

    var styles = getWindowOf(target).getComputedStyle(target);
    var paddings = getPaddings(styles);
    var horizPad = paddings.left + paddings.right;
    var vertPad = paddings.top + paddings.bottom;

    // Computed styles of width & height are being used because they are the
    // only dimensions available to JS that contain non-rounded values. It could
    // be possible to utilize the getBoundingClientRect if only it's data wasn't
    // affected by CSS transformations let alone paddings, borders and scroll bars.
    var width = toFloat(styles.width),
        height = toFloat(styles.height);

    // Width & height include paddings and borders when the 'border-box' box
    // model is applied (except for IE).
    if (styles.boxSizing === 'border-box') {
        // Following conditions are required to handle Internet Explorer which
        // doesn't include paddings and borders to computed CSS dimensions.
        //
        // We can say that if CSS dimensions + paddings are equal to the "client"
        // properties then it's either IE, and thus we don't need to subtract
        // anything, or an element merely doesn't have paddings/borders styles.
        if (Math.round(width + horizPad) !== clientWidth) {
            width -= getBordersSize(styles, 'left', 'right') + horizPad;
        }

        if (Math.round(height + vertPad) !== clientHeight) {
            height -= getBordersSize(styles, 'top', 'bottom') + vertPad;
        }
    }

    // Following steps can't be applied to the document's root element as its
    // client[Width/Height] properties represent viewport area of the window.
    // Besides, it's as well not necessary as the <html> itself neither has
    // rendered scroll bars nor it can be clipped.
    if (!isDocumentElement(target)) {
        // In some browsers (only in Firefox, actually) CSS width & height
        // include scroll bars size which can be removed at this step as scroll
        // bars are the only difference between rounded dimensions + paddings
        // and "client" properties, though that is not always true in Chrome.
        var vertScrollbar = Math.round(width + horizPad) - clientWidth;
        var horizScrollbar = Math.round(height + vertPad) - clientHeight;

        // Chrome has a rather weird rounding of "client" properties.
        // E.g. for an element with content width of 314.2px it sometimes gives
        // the client width of 315px and for the width of 314.7px it may give
        // 314px. And it doesn't happen all the time. So just ignore this delta
        // as a non-relevant.
        if (Math.abs(vertScrollbar) !== 1) {
            width -= vertScrollbar;
        }

        if (Math.abs(horizScrollbar) !== 1) {
            height -= horizScrollbar;
        }
    }

    return createRectInit(paddings.left, paddings.top, width, height);
}

/**
 * Checks whether provided element is an instance of the SVGGraphicsElement.
 *
 * @param {Element} target - Element to be checked.
 * @returns {boolean}
 */
var isSVGGraphicsElement = (function () {
    // Some browsers, namely IE and Edge, don't have the SVGGraphicsElement
    // interface.
    if (typeof SVGGraphicsElement !== 'undefined') {
        return function (target) { return target instanceof getWindowOf(target).SVGGraphicsElement; };
    }

    // If it's so, then check that element is at least an instance of the
    // SVGElement and that it has the "getBBox" method.
    // eslint-disable-next-line no-extra-parens
    return function (target) { return target instanceof getWindowOf(target).SVGElement && typeof target.getBBox === 'function'; };
})();

/**
 * Checks whether provided element is a document element (<html>).
 *
 * @param {Element} target - Element to be checked.
 * @returns {boolean}
 */
function isDocumentElement(target) {
    return target === getWindowOf(target).document.documentElement;
}

/**
 * Calculates an appropriate content rectangle for provided html or svg element.
 *
 * @param {Element} target - Element content rectangle of which needs to be calculated.
 * @returns {DOMRectInit}
 */
function getContentRect(target) {
    if (!isBrowser) {
        return emptyRect;
    }

    if (isSVGGraphicsElement(target)) {
        return getSVGContentRect(target);
    }

    return getHTMLElementContentRect(target);
}

/**
 * Creates rectangle with an interface of the DOMRectReadOnly.
 * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly
 *
 * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.
 * @returns {DOMRectReadOnly}
 */
function createReadOnlyRect(ref) {
    var x = ref.x;
    var y = ref.y;
    var width = ref.width;
    var height = ref.height;

    // If DOMRectReadOnly is available use it as a prototype for the rectangle.
    var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;
    var rect = Object.create(Constr.prototype);

    // Rectangle's properties are not writable and non-enumerable.
    defineConfigurable(rect, {
        x: x, y: y, width: width, height: height,
        top: y,
        right: x + width,
        bottom: height + y,
        left: x
    });

    return rect;
}

/**
 * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.
 * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit
 *
 * @param {number} x - X coordinate.
 * @param {number} y - Y coordinate.
 * @param {number} width - Rectangle's width.
 * @param {number} height - Rectangle's height.
 * @returns {DOMRectInit}
 */
function createRectInit(x, y, width, height) {
    return { x: x, y: y, width: width, height: height };
}

/**
 * Class that is responsible for computations of the content rectangle of
 * provided DOM element and for keeping track of it's changes.
 */
var ResizeObservation = function(target) {
    this.broadcastWidth = 0;
    this.broadcastHeight = 0;
    this.contentRect_ = createRectInit(0, 0, 0, 0);

    this.target = target;
};

/**
 * Updates content rectangle and tells whether it's width or height properties
 * have changed since the last broadcast.
 *
 * @returns {boolean}
 */


/**
 * Reference to the last observed content rectangle.
 *
 * @private {DOMRectInit}
 */


/**
 * Broadcasted width of content rectangle.
 *
 * @type {number}
 */
ResizeObservation.prototype.isActive = function () {
    var rect = getContentRect(this.target);

    this.contentRect_ = rect;

    return rect.width !== this.broadcastWidth || rect.height !== this.broadcastHeight;
};

/**
 * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data
 * from the corresponding properties of the last observed content rectangle.
 *
 * @returns {DOMRectInit} Last observed content rectangle.
 */
ResizeObservation.prototype.broadcastRect = function () {
    var rect = this.contentRect_;

    this.broadcastWidth = rect.width;
    this.broadcastHeight = rect.height;

    return rect;
};

var ResizeObserverEntry = function(target, rectInit) {
    var contentRect = createReadOnlyRect(rectInit);

    // According to the specification following properties are not writable
    // and are also not enumerable in the native implementation.
    //
    // Property accessors are not being used as they'd require to define a
    // private WeakMap storage which may cause memory leaks in browsers that
    // don't support this type of collections.
    defineConfigurable(this, { target: target, contentRect: contentRect });
};

var ResizeObserverSPI = function(callback, controller, callbackCtx) {
    this.activeObservations_ = [];
    this.observations_ = new MapShim();

    if (typeof callback !== 'function') {
        throw new TypeError('The callback provided as parameter 1 is not a function.');
    }

    this.callback_ = callback;
    this.controller_ = controller;
    this.callbackCtx_ = callbackCtx;
};

/**
 * Starts observing provided element.
 *
 * @param {Element} target - Element to be observed.
 * @returns {void}
 */


/**
 * Registry of the ResizeObservation instances.
 *
 * @private {Map<Element, ResizeObservation>}
 */


/**
 * Public ResizeObserver instance which will be passed to the callback
 * function and used as a value of it's "this" binding.
 *
 * @private {ResizeObserver}
 */

/**
 * Collection of resize observations that have detected changes in dimensions
 * of elements.
 *
 * @private {Array<ResizeObservation>}
 */
ResizeObserverSPI.prototype.observe = function (target) {
    if (!arguments.length) {
        throw new TypeError('1 argument required, but only 0 present.');
    }

    // Do nothing if current environment doesn't have the Element interface.
    if (typeof Element === 'undefined' || !(Element instanceof Object)) {
        return;
    }

    if (!(target instanceof getWindowOf(target).Element)) {
        throw new TypeError('parameter 1 is not of type "Element".');
    }

    var observations = this.observations_;

    // Do nothing if element is already being observed.
    if (observations.has(target)) {
        return;
    }

    observations.set(target, new ResizeObservation(target));

    this.controller_.addObserver(this);

    // Force the update of observations.
    this.controller_.refresh();
};

/**
 * Stops observing provided element.
 *
 * @param {Element} target - Element to stop observing.
 * @returns {void}
 */
ResizeObserverSPI.prototype.unobserve = function (target) {
    if (!arguments.length) {
        throw new TypeError('1 argument required, but only 0 present.');
    }

    // Do nothing if current environment doesn't have the Element interface.
    if (typeof Element === 'undefined' || !(Element instanceof Object)) {
        return;
    }

    if (!(target instanceof getWindowOf(target).Element)) {
        throw new TypeError('parameter 1 is not of type "Element".');
    }

    var observations = this.observations_;

    // Do nothing if element is not being observed.
    if (!observations.has(target)) {
        return;
    }

    observations.delete(target);

    if (!observations.size) {
        this.controller_.removeObserver(this);
    }
};

/**
 * Stops observing all elements.
 *
 * @returns {void}
 */
ResizeObserverSPI.prototype.disconnect = function () {
    this.clearActive();
    this.observations_.clear();
    this.controller_.removeObserver(this);
};

/**
 * Collects observation instances the associated element of which has changed
 * it's content rectangle.
 *
 * @returns {void}
 */
ResizeObserverSPI.prototype.gatherActive = function () {
        var this$1 = this;

    this.clearActive();

    this.observations_.forEach(function (observation) {
        if (observation.isActive()) {
            this$1.activeObservations_.push(observation);
        }
    });
};

/**
 * Invokes initial callback function with a list of ResizeObserverEntry
 * instances collected from active resize observations.
 *
 * @returns {void}
 */
ResizeObserverSPI.prototype.broadcastActive = function () {
    // Do nothing if observer doesn't have active observations.
    if (!this.hasActive()) {
        return;
    }

    var ctx = this.callbackCtx_;

    // Create ResizeObserverEntry instance for every active observation.
    var entries = this.activeObservations_.map(function (observation) {
        return new ResizeObserverEntry(observation.target, observation.broadcastRect());
    });

    this.callback_.call(ctx, entries, ctx);
    this.clearActive();
};

/**
 * Clears the collection of active observations.
 *
 * @returns {void}
 */
ResizeObserverSPI.prototype.clearActive = function () {
    this.activeObservations_.splice(0);
};

/**
 * Tells whether observer has active observations.
 *
 * @returns {boolean}
 */
ResizeObserverSPI.prototype.hasActive = function () {
    return this.activeObservations_.length > 0;
};

// Registry of internal observers. If WeakMap is not available use current shim
// for the Map collection as it has all required methods and because WeakMap
// can't be fully polyfilled anyway.
var observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();

/**
 * ResizeObserver API. Encapsulates the ResizeObserver SPI implementation
 * exposing only those methods and properties that are defined in the spec.
 */
var ResizeObserver = function(callback) {
    if (!(this instanceof ResizeObserver)) {
        throw new TypeError('Cannot call a class as a function.');
    }
    if (!arguments.length) {
        throw new TypeError('1 argument required, but only 0 present.');
    }

    var controller = ResizeObserverController.getInstance();
    var observer = new ResizeObserverSPI(callback, controller, this);

    observers.set(this, observer);
};

// Expose public methods of ResizeObserver.
['observe', 'unobserve', 'disconnect'].forEach(function (method) {
    ResizeObserver.prototype[method] = function () {
        return (ref = observers.get(this))[method].apply(ref, arguments);
        var ref;
    };
});

var index = (function () {
    // Export existing implementation if available.
    if (typeof global$1.ResizeObserver !== 'undefined') {
        return global$1.ResizeObserver;
    }

    return ResizeObserver;
})();

/* harmony default export */ __webpack_exports__["default"] = (index);

/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__("./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/util/node_modules/inherits/inherits_browser.js":
/***/ (function(module, exports) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}


/***/ }),

/***/ "./node_modules/util/support/isBufferBrowser.js":
/***/ (function(module, exports) {

module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}

/***/ }),

/***/ "./node_modules/util/util.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = __webpack_require__("./node_modules/util/support/isBufferBrowser.js");

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = __webpack_require__("./node_modules/util/node_modules/inherits/inherits_browser.js");

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__("./node_modules/webpack/buildin/global.js"), __webpack_require__("./node_modules/process/browser.js")))

/***/ }),

/***/ "./reference/farris/farris.idedevkit.ref.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__farris_ide_devkit__ = __webpack_require__("./node_modules/@farris/ide-devkit/index.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__farris_ide_devkit___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__farris_ide_devkit__);
/* harmony namespace reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in __WEBPACK_IMPORTED_MODULE_0__farris_ide_devkit__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return __WEBPACK_IMPORTED_MODULE_0__farris_ide_devkit__[key]; }) }(__WEBPACK_IMPORT_KEY__));
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__farris_ide_devkit_services__ = __webpack_require__("./node_modules/@farris/ide-devkit/services/index.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__farris_ide_devkit_services___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__farris_ide_devkit_services__);
/* harmony namespace reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in __WEBPACK_IMPORTED_MODULE_1__farris_ide_devkit_services__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return __WEBPACK_IMPORTED_MODULE_1__farris_ide_devkit_services__[key]; }) }(__WEBPACK_IMPORT_KEY__));




/***/ }),

/***/ "./reference/farris/farris.ui.ref.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__farris_ui__ = __webpack_require__("./node_modules/@farris/ui/index.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__farris_ui___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__farris_ui__);
/* harmony namespace reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in __WEBPACK_IMPORTED_MODULE_0__farris_ui__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return __WEBPACK_IMPORTED_MODULE_0__farris_ui__[key]; }) }(__WEBPACK_IMPORT_KEY__));



/***/ }),

/***/ "farris":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__;

/***/ })

},["farris"],["angular","rxjs","libcore","progress"]);